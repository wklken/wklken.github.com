<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on WKLKEN THINKING</title>
    <link>https://wklken.me/tags/golang.html</link>
    <description>Recent content in golang on WKLKEN THINKING</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 22 Jan 2021 14:35:00 +0800</lastBuildDate><atom:link href="https://wklken.me/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go: 基于 apitest 做handler层单元测试</title>
      <link>https://wklken.me/posts/2021/01/22/golang-apitest.html</link>
      <pubDate>Fri, 22 Jan 2021 14:35:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/22/golang-apitest.html</guid>
      <description>apitest A simple and extensible behavioural testing library. Supports mocking external http calls and renders sequence diagrams on completion. Credit to testify which is this libraries&#39; only dependency 相关资源: Github apitest 文档 示例: Examples / Gin integration 老的方案: postman/newman 原先使用 postman + newman 的方式做的 API 功能测试; 这种</description>
    </item>
    
    <item>
      <title>Go: go-sql-driver interpolateparams参数优化</title>
      <link>https://wklken.me/posts/2021/01/22/golang-sql-driver-interpolateparams.html</link>
      <pubDate>Fri, 22 Jan 2021 12:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/22/golang-sql-driver-interpolateparams.html</guid>
      <description>这是在做 Golang 项目中的一些实践 interpolateparams 性能差异 interpolateparams=false interpolateparams=true 10261 -&amp;gt; 12117, 18% 带占位符SQL执行流程 prepared -&amp;gt; execute -&amp;gt; close 正常带占位符的sql执行过程: 客户端将该语句和参数发给mys</description>
    </item>
    
    <item>
      <title>Go: 基于 Ginkgo 框架进行单元测试实践</title>
      <link>https://wklken.me/posts/2021/01/22/golang-ginkgo.html</link>
      <pubDate>Fri, 22 Jan 2021 11:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2021/01/22/golang-ginkgo.html</guid>
      <description>这是在做 Golang 项目中的一些实践 ginkgo 基于BDD的测试框架; 开始前, 需要花半个小时阅读官方文档 reference github: https://github.com/onsi/ginkgo 文档: https://onsi.github.io/ginkgo/ table-driven 一个函数 // TruncateString truncate string to specific length func TruncateString(s string, n int) string { if n</description>
    </item>
    
    <item>
      <title>Golang笔记-06-struct</title>
      <link>https://wklken.me/posts/2014/03/09/06-struct.html</link>
      <pubDate>Sun, 09 Mar 2014 06:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/09/06-struct.html</guid>
      <description>struct struct，一组字段的集合，类似其他语言的class 放弃了大量包括继承在内的面向对象特性，只保留了组合(composition)这个最基</description>
    </item>
    
    <item>
      <title>Golang笔记-05-函数</title>
      <link>https://wklken.me/posts/2014/03/02/05-func.html</link>
      <pubDate>Sun, 02 Mar 2014 05:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/02/05-func.html</guid>
      <description>函数 Go语言里面的核心设计，通过关键字func来声明 func funcName(input type1, input2 type2) (output1 type1, output2 type2) { //logical code return value1, value2 } 基本语法 1.语法 //一般函数 func func_name(a int) { println(a) } //多参数，无返</description>
    </item>
    
    <item>
      <title>Golang笔记-04-array/slice/map</title>
      <link>https://wklken.me/posts/2014/03/02/04-data-structure.html</link>
      <pubDate>Sun, 02 Mar 2014 04:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/02/04-data-structure.html</guid>
      <description>一.Array 在Go语言中，数组是一个值类型(value type) 所有的值类型变量在赋值和作为参数传递时都将产生一个复制动作 如果作为函数的参数类型，</description>
    </item>
    
    <item>
      <title>Golang笔记-03-控制流</title>
      <link>https://wklken.me/posts/2014/03/02/03-control-flow.html</link>
      <pubDate>Sun, 02 Mar 2014 03:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/02/03-control-flow.html</guid>
      <description>控制结构分为： 条件+选择+循环 IF 1.说明 条件表达式没有括号 支持一个初始化表达式（可以是多变量初始化语句） 初始化语句中定义的都是只能在bloc</description>
    </item>
    
    <item>
      <title>Golang笔记-02-类型、变量、常量</title>
      <link>https://wklken.me/posts/2014/03/02/02-type-var-const.html</link>
      <pubDate>Sun, 02 Mar 2014 02:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/02/02-type-var-const.html</guid>
      <description>基本类型 1.基本类型列表 类型 长度 说明 bool 1 true/false,默认false, 不能把非0值当做true(不用数字代表true/false) byte</description>
    </item>
    
    <item>
      <title>Golang笔记-01-简介</title>
      <link>https://wklken.me/posts/2014/03/02/01-intro.html</link>
      <pubDate>Sun, 02 Mar 2014 01:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/03/02/01-intro.html</guid>
      <description>Go语言最主要的特性 自动垃圾回收 更丰富的内置类型 函数多返回值 错误处理 匿名函数和闭包 类型和接口 并发编程 反射 语言交互性 高性能/高效开发 安装 安装说</description>
    </item>
    
    <item>
      <title>Golang笔记-00-说明及资源</title>
      <link>https://wklken.me/posts/2014/02/23/golang-base-intro.html</link>
      <pubDate>Sun, 23 Feb 2014 08:00:00 +0800</pubDate>
      
      <guid>https://wklken.me/posts/2014/02/23/golang-base-intro.html</guid>
      <description>这份笔记是在学习golang过程中，汇集几本书以及网络视频、博客等资料汇总而成的，记录，方便查询 已经基本完成，逐步发上来 涉及内容 说明-资源 done</description>
    </item>
    
  </channel>
</rss>
