<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>wklken's blog - python</title><link>http://www.wklken.me/</link><description></description><lastBuildDate>Tue, 29 Sep 2015 00:00:00 +0800</lastBuildDate><item><title>Python 源码阅读 - 垃圾回收机制</title><link>http://www.wklken.me/posts/2015/09/29/python-source-gc.html</link><description>&lt;h2 id="gai-shu"&gt;概述&lt;/h2&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了&lt;code&gt;标记-清除&lt;/code&gt;以及&lt;code&gt;分代收集&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h2 id="yin-yong-ji-shu"&gt;引用计数&lt;/h2&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h3 id="ji-shu-cun-chu"&gt;计数存储&lt;/h3&gt;
&lt;p&gt;回顾  &lt;a href="http://www.wklken.me/posts/2014/08/05/python-source-object.html"&gt;Python 的对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyVarObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 29 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-29:/posts/2015/09/29/python-source-gc.html</guid><category>python</category></item><item><title>Python源码阅读-闭包的实现</title><link>http://www.wklken.me/posts/2015/09/04/python-source-closure.html</link><description>&lt;h3 id="bi-bao"&gt;闭包&lt;/h3&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;

&lt;span class="n"&gt;add_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要回答, 什么是闭包, CPython底层是如何实现的?&lt;/p&gt;
&lt;h3 id="pycodeobject"&gt;PyCodeObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_argcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* #arguments, except *args */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_nlocals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* #local variables */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_stacksize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* #entries needed for evaluation stack */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_flags …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 04 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-04:/posts/2015/09/04/python-source-closure.html</guid><category>python</category></item><item><title>Python源码阅读-内存管理机制(二)</title><link>http://www.wklken.me/posts/2015/08/29/python-source-memory-2.html</link><description>&lt;h2 id="python-de-nei-cun-fen-pei-ce-lue"&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3 id="arena"&gt;arena&lt;/h3&gt;
&lt;p&gt;arena: 多个pool聚合的结果&lt;/p&gt;
&lt;h4 id="arena-size"&gt;arena size&lt;/h4&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;code&gt;obmalloc.c&lt;/code&gt;中代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     &lt;/span&gt;&lt;span class="cm"&gt;/* 256KB */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="arena-jie-gou"&gt;arena 结构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Record keeping for arenas. */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* The address of the arena, as returned by malloc.  Note that 0&lt;/span&gt;
&lt;span class="cm"&gt;     * will never …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 29 Aug 2015 20:54:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-2.html</guid><category>python</category></item><item><title>Python源码阅读-内存管理机制(一)</title><link>http://www.wklken.me/posts/2015/08/29/python-source-memory-1.html</link><description>&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;基本阅读完了, 只是没时间梳理, 趁着这今天时间比较空&lt;/p&gt;
&lt;p&gt;逐步梳理, 发上来......也算是小结下, 要开始准备简历找工作了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这篇略长, 带很多图, 所以一分为二&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-nei-cun-guan-li-jia-gou"&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3 id="ji-ben-fen-ceng"&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python's object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python's raw memory allocator (PyMem_ API …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 29 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-1.html</guid><category>python</category></item><item><title>一些简单的Python测试题</title><link>http://www.wklken.me/posts/2015/08/26/python-some-test-questions.html</link><description>&lt;p&gt;一些简单的测试题, 主要来源是网上:)&lt;/p&gt;
&lt;p&gt;某种程度, 可以从代码中看出一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写代码, 打印1-1亿之内的偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个函数, 用正则表达式清除字符串中[]和其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[lol]你好，帮我把这些markup清掉，[smile]。谢谢！"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;请使用python, 对下面的函数进行处理,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数被调用时打印耗时详情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tom&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timecosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.81469726562e-06&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个函数, 将驼峰命名法字符串转成下划线命名字符串(需考虑各类编码中常见的命名)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;GetItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;getItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;doIT …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-26:/posts/2015/08/26/python-some-test-questions.html</guid><category>python</category></item><item><title>Python 源码阅读 - dict</title><link>http://www.wklken.me/posts/2014/08/11/python-source-dict.html</link><description>&lt;p&gt;基本类型实现的最后一篇, 先告一段落, 专心找工作去......搞定工作后再开始扫后面的&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/dictobject.h"&gt;Include/dictobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/dictobject.c"&gt;Objects/dictobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectde-cun-chu-ce-lue"&gt;PyDictObject的存储策略&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 使用散列表进行存储

2. 使用开放定址法处理冲突

    2.1 插入, 发生冲突, 通过二次探测算法, 寻找下一个位置, 直到找到可用位置, 放入(形成一条冲突探测链)

    2.2 查找, 需要遍历冲突探测链

    2.3 删除, 如果对象在探测链上, 不能直接删除, 否则会破坏整个结构(所以不是真的删)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 hash表的 &lt;a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ji-ben-jian-zhi-pydictentry"&gt;基本键值PyDictEntry&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    Py_ssize_t me_hash;
    PyObject *me_key;
    PyObject *me_value;
} PyDictEntry;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-11:/posts/2014/08/11/python-source-dict.html</guid><category>python</category></item><item><title>Python 源码阅读 - tuple</title><link>http://www.wklken.me/posts/2014/08/10/python-source-tuple.html</link><description>&lt;p&gt;还差一篇......写完写简历&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; b = ()
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = (1, )
&amp;gt;&amp;gt;&amp;gt; b = (1, )
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/tupleobject.h"&gt;Include/tupleobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/tupleobject.c"&gt;Objects/tupleobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="jie-gou"&gt;结构&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD
    PyObject *ob_item[1];

} PyTupleObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyTupleObject在底层是个变长对象(需要存储列表元素个数).
虽然, 在python中, tuple是不可变对象

2. PyObject *ob_item[1];
指向存储元素的数组

3 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Aug 2014 17:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-tuple.html</guid><category>python</category></item><item><title>Python 源码阅读 - list</title><link>http://www.wklken.me/posts/2014/08/10/python-source-list.html</link><description>&lt;p&gt;还剩 tuple 和 dict就把几个基本类型写完了, 然后歇歇先找工作&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/listobject.h"&gt;Include/listobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/listobject.c"&gt;Objects/listobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ding-yi"&gt;定义&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD

    PyObject **ob_item;

    Py_ssize_t allocated;
} PyListObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyListObject是变长对象

2. PyObject **ob_item;
指向列表元素的指针数组, list[0] 即 ob_item[0]

3. Py_ssize_t allocated;
allocated列表分配的空间, ob_size为已使用的空间
allocated 总的申请到的内存数量
ob_size 实际使用内存数量

等式:

    0 &amp;lt;= ob_size &amp;lt;= allocated
    len(list …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-list.html</guid><category>python</category></item><item><title>Python 源码阅读 - string</title><link>http://www.wklken.me/posts/2014/08/08/python-source-string.html</link><description>&lt;p&gt;本周进展不大(去掉北上, 选择余地太小了), 下周开始投简历:(&lt;/p&gt;
&lt;p&gt;这一章, 就一张图, 代码比较多&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pystringobject"&gt;PyStringObject&lt;/h1&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/stringobject.h"&gt;Include/stringobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/stringobject.c"&gt;Objects/stringobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
  PyObject_VAR_HEAD
  long ob_shash;
  int ob_sstate;
  char ob_sval[1];

  /* Invariants:
   *     ob_sval contains space for 'ob_size+1' elements.
   *     ob_sval[ob_size] == 0.
   *     ob_shash is the hash of the string or -1 if not computed yet …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 08 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-08:/posts/2014/08/08/python-source-string.html</guid><category>python</category></item><item><title>Python 源码阅读 - int</title><link>http://www.wklken.me/posts/2014/08/06/python-source-int.html</link><description>&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;代码我也仅仅是粗粗读了一遍, 可能出现疏漏和理解错误, 发现了望指出哈.&lt;/p&gt;
&lt;p&gt;今天面了一家靠谱的创业公司, 可惜不是Python向的, 想继续玩Python是有代价的, 选择余地太窄了......&lt;/p&gt;
&lt;p&gt;话说写文章很耗时间, 这个花了两个多小时....主要还是自个绘图渣效率低:(&lt;/p&gt;
&lt;p&gt;准备找工作事宜很占时间, 后面只能慢慢来了(好像还很多很多的样子)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 1
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; c = 257
&amp;gt;&amp;gt;&amp;gt; d = 257
&amp;gt;&amp;gt;&amp;gt; id(c) == id(d)
False

#在python2.x中, 对于大的序列生成, 建议使用xrange(100000) 而不是range(100000), why?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/intobject.h"&gt;Include/intobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/intobject.c"&gt;Objects/intobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pyintobject"&gt;PyIntObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-06:/posts/2014/08/06/python-source-int.html</guid><category>python</category></item><item><title>Python 源码阅读 - 类型</title><link>http://www.wklken.me/posts/2014/08/05/python-source-type.html</link><description>&lt;p&gt;这篇主要涉及Python对象的类型机制&lt;/p&gt;
&lt;p&gt;有点绕, 一定要思维清晰的时候再看哦:)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;一个例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; a
1

&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'int'&amp;gt;

#等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(a))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(int)
&amp;lt;type 'type'&amp;gt;

#还是等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(type(a)))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(type(int))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们反向推导一个&lt;code&gt;int&lt;/code&gt;对象是怎么生成的.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-shou-xian-ding-yi-yi-chong-lei-xing-jiao-pytypeobject"&gt;1. 首先, 定义一种类型叫PyTypeObject&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/object.h"&gt;Include/object.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; typedef struct _typeobject {

  /* MARK: base …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 Aug 2014 19:31:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-type.html</guid><category>python</category></item><item><title>Python 源码阅读 - 对象</title><link>http://www.wklken.me/posts/2014/08/05/python-source-object.html</link><description>&lt;p&gt;结束休息期, 开始准备面试事宜了, 发现要准备的东西好多(╯‵□′)╯︵┻━┻,  顺手整理下Python源码阅读笔记(力争在写完前找到工作)&lt;/p&gt;
&lt;p&gt;参考内容: Python源码 + &lt;code&gt;&amp;lt;&amp;lt;Python源码剖析&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;源代码+说明+图解&lt;/code&gt;的方式, 尽量说明白吧, 有一份注释在github上&lt;/p&gt;
&lt;p&gt;内容:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; 对象/类型
-&amp;gt; 各种内建类型对象及机制
-&amp;gt; 虚拟机相关(编译及执行)
-&amp;gt; 内存管理/动态加载/多线程等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: 画图的话google doc很好用&lt;/p&gt;
&lt;p&gt;好的, 第一篇开始&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;一切皆为对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象, 在C语言是如何实现的?&lt;/p&gt;
&lt;p&gt;Python中对象分为两类: 定长(int等), 非定长(list/dict等)&lt;/p&gt;
&lt;p&gt;所有对象都有一些相同的东西, 源码中定义为&lt;code&gt;PyObject&lt;/code&gt;和&lt;code&gt;PyVarObject&lt;/code&gt;, 两个定义都有一个共同的头部定义&lt;code&gt;PyObject_HEAD&lt;/code&gt;(其实PyVarObject有自己的头部定义&lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt;, 但其实际上用的也是&lt;code&gt;PyObject_HEAD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;源码位置 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 Aug 2014 17:32:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-object.html</guid><category>python</category></item><item><title>Python后端相关技术/工具栈</title><link>http://www.wklken.me/posts/2014/07/26/python-tech-stack.html</link><description>&lt;p&gt;整理下目前涉及到的python的技术栈和工具栈(用过或了解的, 其他的后续用到再补充)&lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="/imgs/python/python-logo.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见: vim / &lt;a href="http://www.sublimetext.com/2"&gt;SublimeText2&lt;/a&gt; / &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim有兴趣可以看看 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 适合Python/Golang开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境
pip/easy_install 包管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;viertualenv&lt;/a&gt; + &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 库/版本管理, 环境隔离&lt;/p&gt;
&lt;p&gt;ipython/ipdb&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 框架
Python 的Web 框架非常多......&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人偏好[有分先后]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt; 轻量! 可以灵活组合各类组件进行开发(第三方组件很丰富), 简单高效, 便于快速开发和维护.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tornadoweb.org/en/stable/"&gt;tornado&lt;/a&gt; 异步, 高性能, 最新版本4.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; 有些重, 配置和约定众多, 可以快速开发一些"管理"性质的后台, 其版本更新非常快&lt;/p&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;bottle …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-07-26:/posts/2014/07/26/python-tech-stack.html</guid><category>python</category></item><item><title>[翻译]Python中staticmethod和classmethod的差异</title><link>http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</link><description>&lt;p&gt;原文地址 &lt;a href="http://www.pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很短，顺手一翻&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="class-vs-static-methods-in-python"&gt;Class vs static methods in Python&lt;/h3&gt;
&lt;p&gt;这篇文章试图解释：什么事staticmethod/classmethod,并且这两者之间的差异.&lt;/p&gt;
&lt;p&gt;staticmethod和classmethod均被作为装饰器，用作定义一个函数为"staticmethod"还是"classmethod"&lt;/p&gt;
&lt;p&gt;如果想要了解Python装饰器的基础，可以看 &lt;a href="http://www.pythoncentral.io/python-decorators-overview/"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="simple-static-and-class-methods"&gt;Simple, static and class methods&lt;/h3&gt;
&lt;p&gt;类中最常用到的方法是 实例方法(instance methods), 即，实例对象作为第一个参数传递给函数&lt;/p&gt;
&lt;p&gt;例如，下面是一个基本的实例方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 22 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-22:/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</guid><category>python</category></item><item><title>[翻译]Python中如何使用*args和**kwargs</title><link>http://www.wklken.me/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</link><description>&lt;p&gt;不知道有没有人翻译了，看到了，很短，顺手一翻&lt;/p&gt;
&lt;p&gt;原文地址 &lt;a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;或者可以叫做，在Python中如何使用可变长参数列表&lt;/p&gt;
&lt;h3 id="han-shu-ding-yi"&gt;函数定义&lt;/h3&gt;
&lt;p&gt;这是一种特殊的语法，在函数定义中使用*args和&lt;strong&gt;kwargs传递可变长参数.  *args用作传递非命名键值可变长参数列表（位置参数）; &lt;/strong&gt;kwargs用作传递键值可变长参数列表&lt;/p&gt;
&lt;p&gt;下面的例子传递一个位置参数以及两个可变长参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;formal arg: 1
another arg: two
another arg: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个键值的例子，传递一个位置参数和两个键值参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</guid><category>python</category></item><item><title>Python模板-Jinja2</title><link>http://www.wklken.me/posts/2013/12/21/python-template-jinja2.html</link><description>&lt;p&gt;&lt;img alt="jinja" src="/imgs/python/jinja.png"/&gt;&lt;/p&gt;
&lt;p&gt;Jinja2的一些使用摘要&lt;/p&gt;
&lt;p&gt;Jinja2作为flask的默认页面模板，感觉蛮强大的，可适用于各种模板类相关的项目&lt;/p&gt;
&lt;p&gt;特别是模板继承，写页面很舒服&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;文档 http://jinja.pocoo.org/docs/&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install jinja2
sudo pip install jinja2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhong-duan-ban-helloworld"&gt;终端版helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello {{ name }}!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="he"&gt;{%和{{&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;navigation&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-template-jinja2.html</guid><category>python</category></item><item><title>Python模板-Mako</title><link>http://www.wklken.me/posts/2013/12/14/python-template-mako.html</link><description>&lt;p&gt;&lt;img alt="mako" src="/imgs/python/mako.png"/&gt;&lt;/p&gt;
&lt;p&gt;一直使用Jinja2，前段时间听说mako，一试&lt;/p&gt;
&lt;p&gt;大同小异，天下模板都差不多&lt;/p&gt;
&lt;p&gt;要写代码测试，文档先行&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;官网 http://www.makotemplates.org/&lt;/p&gt;
&lt;p&gt;文档 http://docs.makotemplates.org/en/latest/&lt;/p&gt;
&lt;p&gt;文档翻译 Mako模板入门 http://help.42qu.com/code/mako.html&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mako
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;HelloWorld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-------------------------&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 14 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-14:/posts/2013/12/14/python-template-mako.html</guid><category>python</category></item><item><title>[摘要]Python 最佳实践指南</title><link>http://www.wklken.me/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</link><description>&lt;p&gt;文档地址 &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's Guide to Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份文档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;目标对象：入门后，有一定基础的Pythonista
关键词：最佳实践，Pythonic，各类工具介绍
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;粗粗粗略地过了一遍，大体捞了一些东西出来，大段大段英文太费眼了，回头细读在更新进来&lt;/p&gt;
&lt;p&gt;浓缩版，20分钟可大体过完，然后根据自己需要去看详细的吧&lt;/p&gt;
&lt;p&gt;整体内容还是很不错的，建议细读英文&lt;/p&gt;
&lt;p&gt;PS:文档含有巨量的TODO(没写空白着待补充的)，不过但从目录上来看还是很强大滴，相信完善后，会成为一份很牛逼的指南(难度比官方指南高一点点)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-ling-bu-fen-getting-started"&gt;第零部分 Getting Started&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/#getting-started"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不解释，不翻译，自个看....真的没啥(每本入门书籍第一章...)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-bu-fen-writing-great-code"&gt;第一部分 Writing Great Code&lt;/h1&gt;
&lt;h3 id="structuring-your-project"&gt;Structuring Your Project&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#structuring-your-project"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 最佳实践&lt;/p&gt;
&lt;p&gt;Very …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 25 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-25:/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</guid><category>python</category></item><item><title>[翻译]快速Python性能优化要点</title><link>http://www.wklken.me/posts/2013/09/07/quick-python-performance-optimization.html</link><description>&lt;p&gt;翻译，两篇博文 Quick Python Performance Optimization&lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-i/"&gt;一&lt;/a&gt; &lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-ii/"&gt;二&lt;/a&gt;, 很短&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仅是解释,如何用正确并且高效的方式完成在日常Python编码中简单的事情&lt;/p&gt;
&lt;p&gt;1.在ipython交互shell中使用%timeit (per line) 和 %prun (cProfile)&lt;/p&gt;
&lt;p&gt;测量你的代码，并且找到性能的瓶颈.这和"过早优化是一切罪恶的根源"并不矛盾.这是第一级的性能优化，而不是重量级的性能优化序列.&lt;/p&gt;
&lt;p&gt;更多的测量Python代码性能，可参考 &lt;a href="http://www.huyng.com/posts/python-performance-analysis/"&gt;http://www.huyng.com/posts/python-performance-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一个有趣的库，line_profiler,逐行的性能测量&lt;a href="https://bitbucket.org/robertkern/line_profiler"&gt;https://bitbucket.org/robertkern/line_profiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.减少函数调用次数.如果你需要处理一个列表，传递整个列表，而不是遍历列表，调用函数传递每个元素并获取返回值&lt;/p&gt;
&lt;p&gt;3 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 07 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-09-07:/posts/2013/09/07/quick-python-performance-optimization.html</guid><category>python</category></item><item><title>Python-进阶-itertools模块小结</title><link>http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html</link><description>&lt;p&gt;这货很强大, 必须掌握&lt;/p&gt;
&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pymotw &lt;a href="http://pymotw.com/2/itertools/"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本是基于文档的翻译和补充，相当于翻译了&lt;/p&gt;
&lt;p&gt;itertools用于高效循环的迭代函数集合&lt;/p&gt;
&lt;h2 id="zu-cheng"&gt;组成&lt;/h2&gt;
&lt;p&gt;总体，整体了解&lt;/p&gt;
&lt;p&gt;无限迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器         参数         结果                                                例子
count()     start, [step]   start, start+step, start+2*step, ...                count(10) --&amp;gt; 10 11 12 13 14 ...
cycle()     p               p0, p1, ... plast, p0, p1, ...                      cycle('ABCD') --&amp;gt; A B C D A B C D …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 20 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-20:/posts/2013/08/20/python-extra-itertools.html</guid><category>python</category></item><item><title>Python-进阶-functools模块小结</title><link>http://www.wklken.me/posts/2013/08/18/python-extra-functools.html</link><description>&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/functools.html"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="functoolspartial"&gt;functools.partial&lt;/h3&gt;
&lt;p&gt;作用:&lt;/p&gt;
&lt;p&gt;functools.partial 通过包装手法，允许我们 "重新定义" 函数签名&lt;/p&gt;
&lt;p&gt;用一些默认参数包装一个可调用对象,返回结果是可调用对象，并且可以像原始对象一样对待&lt;/p&gt;
&lt;p&gt;冻结部分函数位置函数或关键字参数，简化函数,更少更灵活的函数参数调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#args/keywords 调用partial时参数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#合并，调用原始函数，此时用了partial的参数&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;newfunc …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 18 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-18:/posts/2013/08/18/python-extra-functools.html</guid><category>python</category></item></channel></rss>