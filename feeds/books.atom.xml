<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog - books</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/books.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2017-06-17T23:39:00+08:00</updated><entry><title>重构 - 读书笔记(Python示例)</title><link href="http://www.wklken.me/posts/2017/06/17/refactoring-07.html" rel="alternate"></link><published>2017-06-17T23:39:00+08:00</published><updated>2017-06-17T23:39:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-06-17:/posts/2017/06/17/refactoring-07.html</id><summary type="html">&lt;p&gt;去年十二月, 重读时, 输出了几篇博文, 主要几章重构技巧梳理 &lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html"&gt;6&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html"&gt;7&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html"&gt;8&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html"&gt;9&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html"&gt;10&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html"&gt;11&lt;/a&gt;, 这周重读时, 从另一个角度总结一下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是想着, 找个时间重构, 额, 其实, 重构更应该放在平时, 每一次去变更代码时处理. 毕竟, 所谓的重构契机有时候太过遥远; 而如果不做重构, 痛苦的是每时每刻维护代码的自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外, 如果可能, 尽量加单元测试, 哪怕一次只增加一两个, 一段时间后, 你会发现, 你会感谢过去的自己&lt;/p&gt;
&lt;h2 id="yuan-ze"&gt;原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小步前进, 频繁测试&lt;/li&gt;
&lt;li&gt;隔离变化&lt;/li&gt;
&lt;li&gt;控制可见范围, 让变量/常量/函数/类等, 在最小的范围内可见. 例如设为私有变量/私有函数, 移除不必要的设值函数&lt;/li&gt;
&lt;li&gt;重构时, 不要关注性能. 到性能优化阶段 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;去年十二月, 重读时, 输出了几篇博文, 主要几章重构技巧梳理 &lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html"&gt;6&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html"&gt;7&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html"&gt;8&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html"&gt;9&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html"&gt;10&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html"&gt;11&lt;/a&gt;, 这周重读时, 从另一个角度总结一下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是想着, 找个时间重构, 额, 其实, 重构更应该放在平时, 每一次去变更代码时处理. 毕竟, 所谓的重构契机有时候太过遥远; 而如果不做重构, 痛苦的是每时每刻维护代码的自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外, 如果可能, 尽量加单元测试, 哪怕一次只增加一两个, 一段时间后, 你会发现, 你会感谢过去的自己&lt;/p&gt;
&lt;h2 id="yuan-ze"&gt;原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小步前进, 频繁测试&lt;/li&gt;
&lt;li&gt;隔离变化&lt;/li&gt;
&lt;li&gt;控制可见范围, 让变量/常量/函数/类等, 在最小的范围内可见. 例如设为私有变量/私有函数, 移除不必要的设值函数&lt;/li&gt;
&lt;li&gt;重构时, 不要关注性能. 到性能优化阶段, 再关注性能. 不同阶段关注点不一样, 不要过早优化. 很多时候, 性能并不是瓶颈, 可读性和可维护性更重要&lt;/li&gt;
&lt;li&gt;任何时候, 都不要拷贝代码, 拷贝类, 甚至拷贝源码文件&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="1-ming-ming"&gt;1. 命名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;好的名字, 清晰表达其含义. 命名至关重要&lt;/li&gt;
&lt;li&gt;好的代码应该清楚表达出自己的功能, 变量名称是代码清晰的关键&lt;/li&gt;
&lt;li&gt;如果为了提高代码的可读性, 需要修改某些名字, 大胆去改!&lt;/li&gt;
&lt;li&gt;IDE/单元测试/好的查找替换工具&lt;/li&gt;
&lt;li&gt;建议读&lt;code&gt;编写可读代码的艺术&lt;/code&gt;这本书.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-chang-liang-he-lin-shi-bian-liang"&gt;2. 常量和临时变量&lt;/h2&gt;
&lt;h4 id="ti-qu-chang-liang"&gt;提取常量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个字面数值, 带有特别含义. 创建一个常量, 根据其意义为它命名, 并将上述字面数值替换为这个常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任何时候, 都不要拷贝常量, 当你发现要改一个数据, 要到非常多的文件去改字面值时, 你就需要意识到, 该提取常量了&lt;/p&gt;
&lt;h4 id="jia-ru-yin-ru-jie-shi-xing-bian-liang"&gt;加入: 引入解释性变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个复杂的表达式, 将复杂表达式或其中一部分放入临时变量, 以变量名称来解释表达式用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;was_resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_resized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fen-jie-fen-jie-lin-shi-bian-liang"&gt;分解: 分解临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个临时变量被赋值超过一次, 非循环变量, 也不用于收集计算结果.每次赋值, 创砸一个独立, 对应的临时变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;perimeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;perimeter&lt;/span&gt;

&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qu-chu-yi-chu-lin-shi-bian-liang"&gt;去除: 移除临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;临时变量仅被一个简单表达式赋值一次, 可以去除这个临时变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;临时变量, 简单表达式, 另外, 需要考虑使用次数, 如果仅使用一次, 可以去除, 如果多次, 则需谨慎考虑对可读性的而影响&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;best_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="yi-chu-kong-zhi-biao-ji"&gt;移除: 控制标记&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在一系列布尔表达式中, 某个变量带有"控制标记"(control flag)的作用. 以break语句或return取代控制标记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;yyy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_success&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;yyy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# 一定不要忘记&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意力相关.&lt;/p&gt;
&lt;p&gt;这类逻辑中, 很痛苦的是, 你必须无时无刻关注这些控制标记的值, &lt;code&gt;追踪&lt;/code&gt;变量在每一个逻辑之后的变化, 会带来额外的思考负担, 从而让代码变得不易读.&lt;/p&gt;
&lt;h2 id="3-han-shu_1"&gt;3. 函数&lt;/h2&gt;
&lt;h4 id="chai-fen-extract-methodti-lian-han-shu"&gt;拆分: Extract Method提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qu-chu-inline-methodnei-lian-han-shu"&gt;去除: Inline Method内联函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个函数的本体与名称同样清楚易懂, 在函数调用点插入函数本体, 然后移除该函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小型函数, 函数太过简单了, 可能只有一个表达式, 去除函数!&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_length_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'the length is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'valid'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_length_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;'invalid'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'the length is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'valid'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;'invalid)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="he-bing-he-bing-duo-ge-han-shu-shi-yong-can-shu"&gt;合并: 合并多个函数, 使用参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;若干函数做了类似的工作. 但在函数本体中却包含了不同的值. 建立单一函数, 以参数表达那些不同的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;five_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ten_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;percent_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fu-zuo-yong-han-shu-bu-ying-gai-you-fu-zuo-yong"&gt;副作用: 函数不应该有副作用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数既返回对象状态值, 又修改对象状态. 建立两个不同函数, 一个负责查询, 一个负责修改.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则, 一个函数不应该做两件事, 函数粒度尽量小.&lt;/p&gt;
&lt;h2 id="4-biao-da-shi_1"&gt;4. 表达式&lt;/h2&gt;
&lt;h4 id="guardzhu-yi-li-xiang-guan"&gt;guard(注意力相关)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;过多的条件逻辑, 难以理解正常的执行路径. 在python中的特征是, 缩进太深&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;coolshell中曾经讨论过的问题 &lt;a href="http://coolshell.cn/articles/17757.html"&gt;如何重构“箭头型”代码&lt;/a&gt;, 而在python中的现象是, 缩进嵌套层级太深, 有时候甚至有十几层缩进, 整体难以理解&lt;/p&gt;
&lt;p&gt;而减少嵌套缩进的方式是, 使用&lt;code&gt;guard&lt;/code&gt;语句, 尽早返回,&lt;/p&gt;
&lt;p&gt;注意力相关, 尽早&lt;code&gt;return&lt;/code&gt;, 你也就不用关心已经过去的逻辑了, 只需关注后面代码的逻辑.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="he-bing-he-bing-tiao-jian-biao-da-shi"&gt;合并: 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_seniority&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_months_disabled&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_part_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_not_eligible_for_disability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fen-jie-fen-jie-fu-za-tiao-jian-biao-da-shi"&gt;分解: 分解复杂条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="ti-qu-he-bing-zhong-fu-de-tiao-jian-pian-duan"&gt;提取: 合并重复的条件片段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在条件表达式的每个分支上有着相同的一段代码. 将这段重复代码搬移到条件表达式之外&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是维护系统, 特别是中后期很容易忽略的问题. 很容易在代码中出现, 特别是遇到那种&lt;code&gt;加需求&lt;/code&gt;的地方, 通常, 会选择不动原来的代码, 加个分支, 复制代码下来改. 但这样的后果是, 逐步地, 会发现每个分支中都有重复代码.&lt;/p&gt;
&lt;h2 id="5-can-shu-ji-fan-hui-zhi_1"&gt;5. 参数及返回值&lt;/h2&gt;
&lt;h4 id="can-shu-he-fan-hui-zhi-ti-qu-dui-xiang"&gt;参数和返回值: 提取对象&lt;/h4&gt;
&lt;p&gt;如果参数/返回值是一组相关的数值, 且总是一起出现, 可以考虑提取成一个对象.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_width_height&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_shape&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似的还有: &lt;code&gt;start_time/end_time -&amp;gt; TimeRange&lt;/code&gt; /&lt;/p&gt;
&lt;h4 id="jian-shao-can-shu"&gt;减少参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;对象调用了某个函数, 并将所得结果作为参数, 传递给另一个函数. 而接受该参数的函数本身也能调用前一个函数. 让参数接收者去除该参数, 并直接调用前一个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;discount_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_discount_level&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;discount_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="6-lei_1"&gt;6. 类&lt;/h2&gt;
&lt;h4 id="ban-yi-han-shu-zi-duan"&gt;搬移: 函数/字段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;搬移函数: 某个函数与所在类之外的另一个类有更多的交互, 调用或被调用(例如: 使用另一个对象的次数比使用自己所在对象的次数还多). 即, 跟另一个类更相关. 则搬移过去&lt;/li&gt;
&lt;li&gt;搬移字段: 某个字段被其所在类之外的另一个类更多地用到&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="chai-fen-chai-fen-lei"&gt;拆分: 拆分类&lt;/h4&gt;
&lt;p&gt;某个类做了应该由两个类做的事. 类太大/太臃肿. 建立一个新类, 将相关字段和函数从旧类版移到新类&lt;/p&gt;
&lt;p&gt;特征: 类中某些字段是有关系的整体, 或者有相同的前缀&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Persion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qu-chu"&gt;去除&lt;/h4&gt;
&lt;p&gt;一个类没有做太多的事情, 不再有独立存在的理由.&lt;/p&gt;
&lt;h2 id="7-mo-shi_1"&gt;7. 模式&lt;/h2&gt;
&lt;p&gt;原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慎用&lt;/li&gt;
&lt;li&gt;只使用你理解的模式&lt;/li&gt;
&lt;li&gt;只在符合的业务场景使用对应模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="adapter"&gt;adapter&lt;/h4&gt;
&lt;p&gt;你需要为提供服务的类增加功能, 但是你无法修改这个类.&lt;/p&gt;
&lt;p&gt;使用组合(推荐, 持有对象)/继承(加子类), 持有该对象, 增加对应附加功能&lt;/p&gt;
&lt;p&gt;adapter思维.&lt;/p&gt;
&lt;p&gt;使用场景: 使用一些第三方库处理外部依赖, 例如依赖一个系统, &lt;code&gt;业务A&lt;/code&gt;(requests)/&lt;code&gt;es&lt;/code&gt;(Elasticsearch)/&lt;code&gt;redis&lt;/code&gt;(redispy), 但是, 基于第三方系统, 你需要有自己业务相关的统一处理逻辑, 此时, 你可以建立一个&lt;code&gt;XXClient&lt;/code&gt;, 持有第三方组件底层调用逻辑, 同时封装自身业务逻辑, 在上层直接调用&lt;/p&gt;
&lt;h4 id="facade"&gt;facade&lt;/h4&gt;
&lt;p&gt;适配模式中举的例子, 也有&lt;code&gt;facade&lt;/code&gt;的思想, 将复杂的东西, 统一封装, 对外提供相对简单清晰地接口&lt;/p&gt;
&lt;h4 id="template-method"&gt;template method&lt;/h4&gt;
&lt;p&gt;出现的次数也很高&lt;/p&gt;
&lt;h4 id="zhuang-shi-qi"&gt;装饰器&lt;/h4&gt;
&lt;p&gt;python中最常用&lt;/p&gt;
&lt;h4 id="qi-ta"&gt;其他&lt;/h4&gt;
&lt;p&gt;根据使用场景, 应用策略/桥梁/工厂/观察者等等, 具体看业务场景&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ju-li_1"&gt;举例&lt;/h2&gt;
&lt;p&gt;重构一个相对较大的&lt;code&gt;django&lt;/code&gt;项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确业务对象, 对象概念, 对象边界&lt;/li&gt;
&lt;li&gt;明确分层&lt;/li&gt;
&lt;li&gt;明确代码目录结构, 划分模块, 明确每个模块可以放入的东西&lt;/li&gt;
&lt;li&gt;粗粒度重构: 移动模块/类/函数, 根据前几步的划分, 将模块/类/函数等, 移动到对应模块中, 同时, 修改&lt;code&gt;import&lt;/code&gt;和调用点&lt;/li&gt;
&lt;li&gt;中粒度重构: 根据&lt;code&gt;django&lt;/code&gt;项目本身划分, 移动函数&lt;/li&gt;
&lt;li&gt;中粒度重构: Extract Method. 读具体函数代码, 遇到 &lt;code&gt;重复代码 / 过长函数 / 过大的类 / 超大的if-else或switch / 包含大段注释的代码&lt;/code&gt; 等, 思考, 提炼函数, 放入对应模块&lt;/li&gt;
&lt;li&gt;细粒度重构: 提取常量 / 提取枚举 / 修改模块名类名函数名变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;django&lt;/code&gt;项目, 原则&lt;code&gt;fat models, helper modules, thin views, stupid templates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fat model&lt;/code&gt;, 将对象本身相关的, 尽量放入&lt;code&gt;models&lt;/code&gt;, 这个对象相关的, 可以加入补充一系列&lt;code&gt;porperty&lt;/code&gt;/&lt;code&gt;classmethod&lt;/code&gt;/&lt;code&gt;staticmethod&lt;/code&gt;, 可以有效地降低使用这个对象时调用处的代码复杂度. 例如, 每次取兑现改一个字段都需要进行转换, 则搞个&lt;code&gt;property&lt;/code&gt;替换每次都需要的转换逻辑. (找拿到&lt;code&gt;model&lt;/code&gt;对象后的处理逻辑代码中那些反复出现的, 重复的)&lt;/li&gt;
&lt;li&gt;将对象查询相关的, 全部迁移到&lt;code&gt;manager&lt;/code&gt;中, 需要先通过&lt;code&gt;Model.objects&lt;/code&gt;查询然后做各种事情的, 迁移放入到&lt;code&gt;manager&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utils&lt;/code&gt;, 将业务逻辑无关的工具函数等, 统一归入&lt;code&gt;utils&lt;/code&gt;模块中; 将业务有关但多个&lt;code&gt;application&lt;/code&gt;共用的&lt;code&gt;utils&lt;/code&gt;放入到&lt;code&gt;common.utils&lt;/code&gt;模块中, 而将&lt;code&gt;appication&lt;/code&gt;依赖的局部&lt;code&gt;utils&lt;/code&gt;, 放入到&lt;code&gt;application.utils&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constants&lt;/code&gt;, 同上, 区分通用, 还是某个&lt;code&gt;applications&lt;/code&gt;中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thin view&lt;/code&gt;, 业务逻辑, 尽量瘦小简短&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stupid template&lt;/code&gt;, 模板, 尽量傻瓜, 不要包含复杂计算/判断逻辑, 将复杂迁移到后端代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta_1"&gt;其他&lt;/h2&gt;
&lt;p&gt;善用工具, 有方案设计评审, 平时通过&lt;code&gt;pull request&lt;/code&gt;, 走&lt;code&gt;code review&lt;/code&gt;, 有代码风格自动检查, 要求单元测试, 走cicd流程. 在平时, 就有意识地控制代码质量&lt;/p&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章11 处理概括关系</title><link href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html" rel="alternate"></link><published>2016-12-04T20:56:00+08:00</published><updated>2016-12-04T20:56:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-06.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-11-chu-li-gai-gua-guan-xi"&gt;章11 处理概括关系&lt;/h2&gt;
&lt;p&gt;多是类相关, 浅显易懂, 不写示例代码了, 有兴趣可以看看原书的例子&lt;/p&gt;
&lt;h4 id="111-pull-up-field-zi-duan-shang-yi"&gt;11.1 Pull Up Field 字段上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个子类拥有相同的字段. 将该字段移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="112-pull-up-method-han-shu-shang-yi"&gt;11.2 Pull Up Method 函数上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏函数, 在各个子类中产生完全相同的结果. 将该函数移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="113-pull-up-constructor-body-gou-zao-han-shu-ben-ti-shang-yi"&gt;11.3 Pull Up Constructor Body 构造函数本体上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在各个子类中拥有一些构造函数, 他们的本体几乎完全一致. 在超类中新建一个构造函数, 并在子类的构造函数中调用它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="114-push-down-method-han-shu-xia-yi"&gt;11.4 Push Down Method 函数下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个函数只与部分(而非全部)子类有关. 将这个函数移到相关的那些子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="115-push-down-field-zi-duan-xia-yi"&gt;11.5 Push …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-11-chu-li-gai-gua-guan-xi"&gt;章11 处理概括关系&lt;/h2&gt;
&lt;p&gt;多是类相关, 浅显易懂, 不写示例代码了, 有兴趣可以看看原书的例子&lt;/p&gt;
&lt;h4 id="111-pull-up-field-zi-duan-shang-yi"&gt;11.1 Pull Up Field 字段上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个子类拥有相同的字段. 将该字段移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="112-pull-up-method-han-shu-shang-yi"&gt;11.2 Pull Up Method 函数上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏函数, 在各个子类中产生完全相同的结果. 将该函数移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="113-pull-up-constructor-body-gou-zao-han-shu-ben-ti-shang-yi"&gt;11.3 Pull Up Constructor Body 构造函数本体上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在各个子类中拥有一些构造函数, 他们的本体几乎完全一致. 在超类中新建一个构造函数, 并在子类的构造函数中调用它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="114-push-down-method-han-shu-xia-yi"&gt;11.4 Push Down Method 函数下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个函数只与部分(而非全部)子类有关. 将这个函数移到相关的那些子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="115-push-down-field-zi-duan-xia-yi"&gt;11.5 Push Down Field 字段下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个字段只被部分(而非全部)子类用到. 将这个字段移到需要它的那些子类去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="116-extract-subclass-ti-lian-zi-lei"&gt;11.6 Extract Subclass 提炼子类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类中的某些特性只被某些(而非全部)实例用到. 新建一个子类, 将上面所说的那一部分特性移到子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="117-extract-superclass-ti-lian-chao-lei"&gt;11.7 Extract Superclass 提炼超类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类有相似特性. 为这两个类建立一个超类, 将相同特性移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="118-extract-interface-ti-lian-jie-kou"&gt;11.8 Extract Interface 提炼接口&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;若干客户使用类接口中的同一子集, 或者两个类的接口有部分相同. 将相同的子集提炼到一个独立接口中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="119-collapse-hierarchy-zhe-die-ji-cheng-ti-xi"&gt;11.9 Collapse Hierarchy 折叠继承体系&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类和子类之间无太大区别. 将它们合为一体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="1110-from-template-method-su-zao-mo-ban-han-shu"&gt;11.10 From Template Method 塑造模板函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一些子类, 其中相应的某些函数以相同顺序执行类似的操作, 但各个操作细节上有所不同. 将这些操作分别放进独立函数中, 并保持他们有相同的签名, 于是原函数也就变得相同了. 然后将原函数上移至超类.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;模板方法模式&lt;/p&gt;
&lt;h4 id="1111-replace-inheritance-with-delegation-yi-wei-tuo-qu-dai-ji-cheng"&gt;11.11 Replace Inheritance with Delegation 以委托取代继承&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个子类只是用超类接口中的一部分, 或是根本不需要继承而来的数据. 在子类中新建一个字段用以保存超类; 调整子函数, 令它改而委托超类; 然后去掉两者之间的继承关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;判断是否误用/滥用了继承&lt;/p&gt;
&lt;h4 id="1112-replace-delegation-with-inheritance-yi-ji-cheng-qu-dai-wei-tuo"&gt;11.12 Replace Delegation with Inheritance 以继承取代委托&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在两个类之间使用了委托关系, 并经常为整个接口编写许多极简单的委托函数. 让委托类继承受托类.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章10 简化函数调用</title><link href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html" rel="alternate"></link><published>2016-12-04T20:55:00+08:00</published><updated>2016-12-04T20:55:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-05.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-10-jian-hua-han-shu-diao-yong"&gt;章10: 简化函数调用&lt;/h2&gt;
&lt;h4 id="101-rename-method-han-shu-gai-ming"&gt;10.1 Rename Method 函数改名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的名称未能揭示函数的用途. 修改函数名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给函数一个好名字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_office_telephone_numer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="102-add-parameter-tian-jia-can-shu"&gt;10.2 Add Parameter 添加参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数需要从调用端得到更多信息. 为此函数添加一个对象参数, 让对象带进函数所需要的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动机: 必须修改一个函数, 而修改后的函数需要一些过去没有的信息, 此时需要添加一个参数&lt;/p&gt;
&lt;h4 id="103-remove-parameter-yi-chu-can-shu"&gt;10.3 Remove Parameter 移除参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数本体不再需要某个参数. 将该参数去除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员可能经常添加参数, 却往往不愿意去去除它们.&lt;/p&gt;
&lt;h4 id="104-separate-query-from-modifier-jiang-cha-xun-han-shu-he-xiu-gai-han-shu-fen-chi"&gt;10 …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-10-jian-hua-han-shu-diao-yong"&gt;章10: 简化函数调用&lt;/h2&gt;
&lt;h4 id="101-rename-method-han-shu-gai-ming"&gt;10.1 Rename Method 函数改名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的名称未能揭示函数的用途. 修改函数名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给函数一个好名字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_office_telephone_numer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="102-add-parameter-tian-jia-can-shu"&gt;10.2 Add Parameter 添加参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数需要从调用端得到更多信息. 为此函数添加一个对象参数, 让对象带进函数所需要的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动机: 必须修改一个函数, 而修改后的函数需要一些过去没有的信息, 此时需要添加一个参数&lt;/p&gt;
&lt;h4 id="103-remove-parameter-yi-chu-can-shu"&gt;10.3 Remove Parameter 移除参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数本体不再需要某个参数. 将该参数去除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员可能经常添加参数, 却往往不愿意去去除它们.&lt;/p&gt;
&lt;h4 id="104-separate-query-from-modifier-jiang-cha-xun-han-shu-he-xiu-gai-han-shu-fen-chi"&gt;10.4 Separate Query from Modifier 将查询函数和修改函数分离&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数既返回对象状态值, 又修改对象状态. 建立两个不同的函数, 其中一个负责查询, 另一个负责修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则. 任何有返回值的函数, 都不应该有看得到的副作用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_total_and_set_ready_state&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_ready_ste&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="105-parameterize-method-ling-han-shu-xi-dai-can-shu"&gt;10.5 Parameterize Method 令函数携带参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;若干函数做了类似的工作. 但在函数本体中却包含了不同的值. 建立单一函数, 以参数表达那些不同的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;five_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ten_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;percent_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="106-replace-parameter-with-explicit-methods-yi-ming-que-han-shu-qu-dai-can-shu"&gt;10.6 Replace Parameter with Explicit Methods 以明确函数取代参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个函数, 其中完全取决于参数值而采取不同行为. 针对该参数的每一个可能值, 建立一个独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'width'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="107-preserve-whole-object-bao-chi-dui-xiang-wan-zheng"&gt;10.7 Preserve Whole Object 保持对象完整&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你从某个对象中取出若干值, 将他们作为某一次函数调用时的参数. 改为传递整个对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;within_rangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;within_rangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="108-replace-parameter-with-methods-yi-han-shu-qu-dai-can-shu"&gt;10.8 Replace Parameter with Methods 以函数取代参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;对象调用了某个函数, 并将所得结果作为参数, 传递给另一个函数. 而接受该参数的函数本身也能调用前一个函数. 让参数接收者去除该参数, 并直接调用前一个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;discount_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_discount_level&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;discount_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discount_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="109-introduce-parameter-object-yin-ru-can-shu-dui-xiang"&gt;10.9 Introduce Parameter Object 引入参数对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某些参数总是很自然地同时出现. 以一个对象取代这些参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_range&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_range&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1010-remove-setting-method-yi-chu-she-zhi-han-shu"&gt;10.10 Remove Setting Method 移除设值函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类中某个字段应该在类创建时被设值, 然后就不再改变. 去掉该字段的所有设值函数.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1011-hide-method-yin-cang-han-shu"&gt;10.11 Hide Method 隐藏函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个函数, 从来没有被其他任何类用到. 将这个函数改成private&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1012-replace-constructor-with-factory-method-yi-gong-han-han-shu-qu-dai-gou-zao-han-shu"&gt;10.12 Replace Constructor with Factory Method 以工厂函数取代构造函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你希望在创建对象时不仅仅是做简单的建构动作. 将构造函数替换为工厂函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1013-encapsulate-downcast-feng-zhuang-xiang-xia-zhuan-xing"&gt;10.13 Encapsulate Downcast 封装向下转型&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数返回的对象, 需要由函数调用者执行向下转型(downcast). 将向下转型动作移到函数中.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强类型OO语言中. python不涉及, 但是道理相通. 如果调用某个函数, 每次都要对返回值进行处理. 那么, 可以将处理逻辑放入到函数中&lt;/p&gt;
&lt;h4 id="1014-replace-error-code-with-exception-yi-yi-chang-qu-dai-cuo-wu-ma"&gt;10.14 Replace Error Code with Exception 以异常取代错误码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数返回一个特定的代码, 用以表示某种错误情况. 改用异常.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1015-replace-exception-with-test-yi-ce-shi-qu-dai-yi-chang"&gt;10.15 Replace Exception with Test 以测试取代异常&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;面对一个调用者可以预先检查的条件, 你抛出了一个一行. 修改调用者, 使它在调用函数之前先做检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章9 简化表达式</title><link href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html" rel="alternate"></link><published>2016-12-04T20:50:00+08:00</published><updated>2016-12-04T20:50:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-04.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-9-jian-hua-biao-da-shi"&gt;章9: 简化表达式&lt;/h2&gt;
&lt;h4 id="91-decompose-conditional-fen-jie-tiao-jian-biao-da-shi"&gt;9.1 Decompose Conditional 分解条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="92-consolidate-cnditional-expression-he-bing-tiao-jian-biao-da-shi"&gt;9.2 Consolidate Cnditional Expression 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-9-jian-hua-biao-da-shi"&gt;章9: 简化表达式&lt;/h2&gt;
&lt;h4 id="91-decompose-conditional-fen-jie-tiao-jian-biao-da-shi"&gt;9.1 Decompose Conditional 分解条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="92-consolidate-cnditional-expression-he-bing-tiao-jian-biao-da-shi"&gt;9.2 Consolidate Cnditional Expression 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_seniority&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_months_disabled&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_part_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_not_eligible_for_disability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="93-consolidate-dumplicate-conditional-fragments-he-bing-zhong-fu-de-tiao-jian-pan-duan"&gt;9.3 Consolidate Dumplicate Conditional Fragments 合并重复的条件判断&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在条件表达式的每个分支上有着相同的一段代码. 将这段重复代码搬移到条件表达式之外&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="94-remove-control-flag-yi-chu-kong-zhi-biao-ji"&gt;9.4 Remove Control Flag 移除控制标记&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在一系列布尔表达式中, 某个变量带有"控制标记"(control flag)的作用. 以break语句或return取代控制标记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="95-replace-nested-conditional-with-guard-clauses-yi-shou-wei-yu-ju-qu-dai-qian-tao-tiao-jian-biao-da-shi"&gt;9.5 Replace Nested Conditional with Guard Clauses 以守卫语句取代嵌套条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数中的条件逻辑使人难以看清正常的执行路径. 使用守卫语句表现所有特殊情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Python中相当有用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="96-replace-conditional-with-polymorphism-yi-duo-tai-qu-dai-tiao-jian-biao-da-shi"&gt;9.6 Replace Conditional with Polymorphism 以多态取代条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你手上有多个条件表达式, 它根据对象类型的不同而选择不同的行为. 将这个条件表达式的每个分支放进一个子类内的覆写函数中, 然后将原始函数声明为抽象函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'EUROPEAN'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'AFRICAN'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;get_load_factor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_number_of_coconuts&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_nailed&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_voltage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;European&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;African&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="97-introduce-null-object-yin-ru-nulldui-xiang"&gt;9.7 Introduce Null Object 引入Null对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要再三检查某对象是否为null. 将null值替换为null对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多态的根本好处是你不必再向对象询问: 你是什么类型, 然后根据类型调用其行为.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billing_plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_plan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;customer_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'occupant'&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;customer_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;billing_plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'occupant'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="98-introduce-assertion-yin-ru-duan-yan"&gt;9.8 Introduce Assertion 引入断言&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某一段代码需要对程序状态做出某种假设. 以断言明确表示这种假设&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# note: limit must greater 100 here&lt;/span&gt;
&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章8 重新组织数据</title><link href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html" rel="alternate"></link><published>2016-12-03T11:10:00+08:00</published><updated>2016-12-03T11:10:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-03.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-8-zhong-xin-zu-zhi-shu-ju"&gt;章8: 重新组织数据&lt;/h2&gt;
&lt;h4 id="81-self-encapsulate-field-zi-feng-zhuang-zi-duan"&gt;8.1 Self Encapsulate Field 自封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你直接访问一个字段, 但字段间的耦合关系逐渐变额笨拙. 为这个字段建立取值/设置函数, 并且只以这些函数来访问字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;间接访问的好处是, 可以灵活改变获取数据的途径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;low&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-8-zhong-xin-zu-zhi-shu-ju"&gt;章8: 重新组织数据&lt;/h2&gt;
&lt;h4 id="81-self-encapsulate-field-zi-feng-zhuang-zi-duan"&gt;8.1 Self Encapsulate Field 自封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你直接访问一个字段, 但字段间的耦合关系逐渐变额笨拙. 为这个字段建立取值/设置函数, 并且只以这些函数来访问字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;间接访问的好处是, 可以灵活改变获取数据的途径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;low&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_low&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="82-replace-data-value-with-object-yi-dui-xiang-qu-dai-shu-ju-zhi"&gt;8.2 Replace Data Value with Object 以对象取代数据值&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个数据项, 需要与其他数据和行为一起使用才有意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;独立成对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;def__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Phone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;def__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="83-change-value-to-reference-jiang-zhi-dui-xiang-gai-wei-yin-yong-dui-xiang"&gt;8.3 Change Value to Reference 将值对象改为饮用对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你从一个类衍生出许多彼此相等的实例, 希望将他们替换为同一个对象. 将这个值对象变成引用对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# only 4 types, but 10000 A instance&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="84-change-reference-to-value-jiang-yin-yong-dui-xiang-gai-wei-zhi-dui-xiang"&gt;8.4 Change Reference to Value 将引用对象改为值对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个引用对象, 很小且值不可变, 而且不易管理. 将它变成一个值对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手法, 将重构目标变成不可变对象. 即, 只有可以变成不可变对象的才能运用这个技巧&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_code&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="85-replace-array-with-object-yi-dui-xiang-qu-dai-shu-zu"&gt;8.5 Replace Array with Object 以对象取代数组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个数组, 其中元素各自代表不同的东西. 以对象替换数组, 对于数组中的每个元素, 以一个字段来表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Liverpoo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;claas&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wins&lt;/span&gt;

&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Liverpoo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="86-duplicate-observed-data-fu-zhi-bei-jian-shi-shu-ju"&gt;8.6 Duplicate Observed Data 复制"被监视数据"&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一些领域数据置身于 GUI 控件中, 而领域函数需要访问这些数据. 将数据复制到一个领域对象中. 建立Observer模式, 用以同步领域对象和GUI对象内的重复数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;observer模式, 不解释&lt;/p&gt;
&lt;h4 id="87-change-unidirectional-association-to-bidirectional-jiang-dan-xiang-guan-lian-gai-wei-shuang-xiang-guan-lian"&gt;8.7 Change Unidirectional Association to Bidirectional 将单向关联改为双向关联&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类都需要使用对方特性, 但其间只有一条单向连接. 添加一个反向指针, 并使修改函数能够同时更新到两条连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_orders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# need a lot of codes here&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;
    &lt;span class="nd"&gt;@customer.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_customer_address&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_orders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;

    &lt;span class="nd"&gt;@customer.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_customer_address&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="88-change-bidirectional-association-to-unidirectional-jiang-shuang-xiang-guan-lian-gai-wei-dan-xiang-guan-lian"&gt;8.8 Change Bidirectional Association to Unidirectional 将双向关联改为单向关联&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类之间有双向关联, 但其中一个类如今不再需要另一个类的特性了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的例子, 如果&lt;code&gt;Customer&lt;/code&gt;不再需要&lt;code&gt;get_orders&lt;/code&gt;. 则可以去掉双向连接, 防止僵尸对象出现&lt;/p&gt;
&lt;h4 id="89-replace-magic-number-with-symbolic-constant-yi-zi-mian-chang-liang-qu-dai-mo-fa-shu"&gt;8.9 Replace Magic Number with Symbolic Constant 以字面常量取代魔法数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个字面数值, 带有特别含义. 创建一个常量, 根据其意义为它命名, 并将上述字面数值替换为这个常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="810-encapsulate-field-feng-zhuang-zi-duan"&gt;8.10 Encapsulate Field 封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的类中存在一个public字段, 将它声明为private, 并提供相应访问函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt;

    &lt;span class="nd"&gt;@value.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="811-encapsulate-collection-feng-zhuang-ji-he"&gt;8.11 Encapsulate Collection 封装集合&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有个函数返回一个集合. 让这个函数返回该集合的一个只读副本, 并在这个类中提供添加/移除集合元素的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_members&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_members&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="812-replace-record-with-data-class-yi-shu-ju-lei-qu-dai-ji-lu"&gt;8.12 Replace Record with Data Class 以数据类取代记录&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要面对传统编程环境中的记录结构. 为该记录创建一个"哑"数据对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能面对的是一个遗留程序, 需要与其记录进行结构交流. 例如从数据库读出来的记录, 接口调用返回数据等&lt;/p&gt;
&lt;h4 id="813-replace-type-code-with-class-yi-lei-qu-dai-lei-xing-ma"&gt;8.13 Replace Type Code with Class 以类取代类型码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类之中有一个类型码, 但它并不影响类的行为. 以一个新的类替换该数值类型码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;slef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;
        &lt;span class="n"&gt;slef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="814-replace-type-code-with-subclasses-yi-zi-lei-qu-dai-lei-xing-ma"&gt;8.14 Replace Type Code with Subclasses 以子类取代类型码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个不可变的类型码, 它会影响到类行为. 以子类取代类型码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用多态来处理, 需要在一个类中使用&lt;code&gt;if-else&lt;/code&gt;或者&lt;code&gt;switch&lt;/code&gt;来根据类型码做出不同行为的类&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENGINEER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SALESMAN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Engineer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Salesman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="815-replace-type-code-with-statestrategy-yi-statstrategyqu-dai-lei-xing-ma"&gt;8.15 Replace Type Code with State/Strategy 以Stat/Strategy取代类型码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个类型码, 它会影响类的行为, 但你无法通过继承手法消除它. 以状态对象取代类型码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;State模式和Strategy模式&lt;/p&gt;
&lt;h4 id="816-replace-subclass-with-fields-yi-zi-duan-qu-dai-zi-lei"&gt;8.16 Replace Subclass with Fields 以字段取代子类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的各个子类的唯一差别只在"返回常量数据"的函数上. 修改这些函数, 使它们返回超类中的某个(新增)字段, 然后销毁子类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"M"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Feale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"F"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_is_male&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_is_male&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;"F"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章7 在对象之间搬移特性</title><link href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html" rel="alternate"></link><published>2016-12-03T11:05:00+08:00</published><updated>2016-12-03T11:05:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-02.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-7-zai-dui-xiang-zhi-jian-ban-yi-te-xing"&gt;章7: 在对象之间搬移特性&lt;/h2&gt;
&lt;h4 id="71-move-method-ban-yi-han-shu"&gt;7.1 Move Method 搬移函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序中, 有个函数与其所驻之外的另一个类进行更多交流: 调用后者, 或者被后者调用. 在该函数最常引用的类中建立一个有着类似行为的新函数. 将就函数变成一个单纯的委托函数, 或是将就函数完全移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-7-zai-dui-xiang-zhi-jian-ban-yi-te-xing"&gt;章7: 在对象之间搬移特性&lt;/h2&gt;
&lt;h4 id="71-move-method-ban-yi-han-shu"&gt;7.1 Move Method 搬移函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序中, 有个函数与其所驻之外的另一个类进行更多交流: 调用后者, 或者被后者调用. 在该函数最常引用的类中建立一个有着类似行为的新函数. 将就函数变成一个单纯的委托函数, 或是将就函数完全移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="72-move-field-ban-yi-zi-duan"&gt;7.2 Move Field 搬移字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个字段被其所驻类之外的另一个类更多地用到. 在目标类新建一个字段, 修改原字段的所有用户, 令他们改用新字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="73-extract-class-ti-lian-lei"&gt;7.3 Extract Class 提炼类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个类做了应该由两个类做的事情. 建立以一个新的类, 将相关字段和函数从旧类版移到新的类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Persion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="74-inline-class-jiang-lei-nei-ju-hua"&gt;7.4 Inline Class 将类内聚化&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个类没有做太多事情. 将这个类的所有特性移动到另一个类中, 然后移除原类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="75-hide-delegate-yin-cang-wei-tuo-guan-xi"&gt;7.5 Hide Delegate 隐藏"委托关系"&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;客户通过一个委托来调用另一个对象. 在服务类上建立客户所需要的所有函数, 用以隐藏委托关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_department&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_department&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="76-remove-middle-man-yi-chu-zhong-jian-ren"&gt;7.6 Remove Middle Man 移除中间人&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个类做了过多的简单委托动作. 让客户直接调用受托类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当上一步实例中&lt;code&gt;Employee&lt;/code&gt;承载了大量的委托行为. 可以反向处理, 移除中间人. (当受托类功能越来越多, 完全变成了一个"中间人")&lt;/p&gt;
&lt;h4 id="77-introduce-foreign-method-yin-ru-wai-jia-han-shu"&gt;7.7 Introduce Foreign Method 引入外加函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要为提供服务的类增加一个函数, 但你无法修改这个类. 在客户类中建立一个函数, 并以第一参数形式传入一个服务类实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_year&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_month&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_year&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_month&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="78-introduce-local-extension-yin-ru-ben-di-kuo-zhan"&gt;7.8 Introduce Local Extension 引入本地扩展&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要为服务类提供一些额外函数, 但你无法修改这个类. 建立一个新类, 使它包含这些额外函数. 让这个扩展品成为原类的子类或者包装类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# add extra methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章6 重新组织函数</title><link href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html" rel="alternate"></link><published>2016-12-03T11:00:00+08:00</published><updated>2016-12-03T11:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-01.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-6-zhong-xin-zu-zhi-han-shu"&gt;章6: 重新组织函数&lt;/h2&gt;
&lt;h4 id="61-extract-method-ti-lian-han-shu"&gt;6.1 Extract Method 提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-inline-method-nei-lian-han-shu"&gt;6 …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-6-zhong-xin-zu-zhi-han-shu"&gt;章6: 重新组织函数&lt;/h2&gt;
&lt;h4 id="61-extract-method-ti-lian-han-shu"&gt;6.1 Extract Method 提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-inline-method-nei-lian-han-shu"&gt;6.2 Inline Method 内联函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个函数的本体与名称同样清楚易懂. 在函数调用点插入函数本体, 然后移除该函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;more_than_five_late_deliveries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;more_than_five_late_deliveries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="63-inline-temp-nei-lian-lin-shi-bian-liang"&gt;6.3 Inline Temp 内联临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个临时变量, 只被一个简单表达式赋值一次, 而它妨碍了其他重构手法. 将所有对该变量的引用动作, 替换为对它复制的哪个表达式自身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="64-replace-temp-with-query-yi-cha-xun-qu-dai-lin-shi-bian-liang"&gt;6.4 Replace Temp with Query 以查询取代临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序以一个临时变量保存着某一表达式的运算结果. 将表达式提炼到一个独立函数中. 将这个临时变量的所有引用点替换为对新函数的调用. 伺候新函数就可以被其他函数使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意: 开始时可以不用担心带来性能问题. 只有存在复用, 且去临时变量.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;itme_price&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="65-introduce-explaining-variable-yin-ru-jie-shi-xing-bian-liang"&gt;6.5  Introduce Explaining Variable 引入解释性变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的表达式, 将该复杂表达式或其中一部分的结果放入一个临时变量, 以此变量名称来解释表达式的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;was_resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_resized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="66-split-temporary-variable-fen-jie-lin-shi-bian-liang"&gt;6.6 Split Temporary Variable 分解临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序有某个临时变量被赋值过一次, 它既不是循环变量, 也不被利用与收集计算结果. 针对每次赋值, 创造一个独立, 对应的临时变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;perimeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;perimeter&lt;/span&gt;

&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="67-remove-assignments-to-parameters-yi-chu-dui-can-shu-de-fu-zhi"&gt;6.7  Remove Assignments to Parameters 移除对参数的赋值&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;代码对一个参数进行赋值. 以一个临时变量取代该参数的位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="68-replace-method-with-method-object-yi-han-shu-dui-xiang-qu-dai-han-shu"&gt;6.8 Replace Method with Method Object 以函数对象取代函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个大型函数, 其中对局部变量的使用使你无法采用Extract method. 将这个函数放进一个单独对象中, 如此一来局部变量就成了对象内的字段, 然后你可以在同一个对象中将这个大型函数分解成多个小型函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;i_value_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i_value_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
        &lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="c1"&gt;# and so on.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i_value_1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year_to_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

        &lt;span class="n"&gt;important_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="c1"&gt;# and so on.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;important_thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year_to_date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="69-substitute-algorithm-ti-huan-suan-fa"&gt;6.9 Substitute Algorithm 替换算法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你想要把某个算法那替换成另一个更清晰的算法. 将函数本体替换成另一个算法. 用更清晰的替换原先的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Don"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"D"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"J"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Kent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"K"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"Don"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"D"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"J"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"Kent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"k"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>摘录&gt;</title><link href="http://www.wklken.me/posts/2016/02/17/master-en-in-six-months.html" rel="alternate"></link><published>2016-02-17T00:00:00+08:00</published><updated>2016-02-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-17:/posts/2016/02/17/master-en-in-six-months.html</id><summary type="html">&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="guan-dian"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="guan-dian"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到！&lt;/p&gt;
&lt;p&gt;长期误解的错误的观点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有语言天赋的人才能学会外语&lt;/li&gt;
&lt;li&gt;到国外待一段时间就能学会外语&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="zhang-wo-yi-chong-wai-yu-de-biao-zhun"&gt;掌握一种外语的标准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;（1）你已经掌握了有关语言的最高频单词和词组，你能听懂，也能自己独立使用。在外语里边，掌握1000个最高频词，完全满足日常生活沟通所需的85%，3000个高频词可以覆盖日常沟通、工作及商务交流的98%以上。&lt;/li&gt;
&lt;li&gt;（2）你完全可以很自然地使用你已经会的词组和单词，来创造你想说的任何句子，沟通你想表达的意思。当然，有时候你会找不到最确切和最巧妙的说法，但是你完全有能力找到能用的词来表达你想说的东西。&lt;/li&gt;
&lt;li&gt;（3）听到陌生单词的时候，你会轻松地邀请别人解释给你听。而在这个过程当中，你完全有能力用外语来了解和接受这个新的概念。同时，你也有能力吸收这个概念带给你的生词。&lt;/li&gt;
&lt;li&gt;（4）你的发音已经接近母语者。可能有的地方不是100%一样，但是这些绝对不会对你的沟通造成阻碍。&lt;/li&gt;
&lt;li&gt;（5）你说外语的节奏、速度、轻重、停顿等，已经完全符合外语母语者的习惯，而且你在说的时候，总是感到很自然。你也会很恰当地用礼节和最普遍的感叹方式来进行日常“共鸣”，从而达到友好沟通的目的。&lt;/li&gt;
&lt;li&gt;（6）你已经完全掌握了新的肢体语言的表达方式，包括一些面部表情、不同手势等。&lt;/li&gt;
&lt;li&gt;（7）你已经建立了语感，在肚子里能知道哪些说法算是大家都认同的，也会感觉到哪些说法有一点儿偏离大家习惯的规矩。&lt;/li&gt;
&lt;li&gt;（8）同时，为了学得更快，你也要懂得累了就休息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="xue-hui-wai-yu-de-wu-xiang-he-xin-yuan-ze"&gt;学会外语的五项核心原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从和你有密切关联的外语内容学起: 只要信息跟你个人没有重要关联，你就自然会觉得没有重要意义，因此不会给注意力。不给注意力的自然结果是记不得、学得慢甚至学不会。反之，任何对你本人有重要意义的信息，都会引起你的注意，并且当你可以给它足够注意力时，你就会自然而然学得特别快 =&amp;gt; 结论: 为了把外语学好，你要找到这门外语跟你的重要关联。在学习时，你一定要选择跟自己的兴趣、动力有重要关联的外语内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和学习技术挺类似, 技术深入以及眼界扩展, 从自己工作内容相关的东西开始才能事半功倍, 才能有效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把外语当成沟通工具: 1. 把外语当成工具，会让你通过“用”来学外语，而不是先学后用. 把外语当成沟通工具的第一个必然结果是，只要你会一点，就会马上去用，从而体验这个工具发挥的效力。2. 把外语当成工具，会让你从功能出发，把形式放在后面学通过用外语来学外语的关键，是把自己的注意力先放在单词和词组的功能。这样，你会先用功能最明显的几个单词和词组来沟通，不让形式成为卡住自己学习的节点。3. 把外语当成工具，会让你自然接受多种说法，因此不拘泥于一个“标准答案” 4. 把外语当成工具，可以获取“反馈”带来的巨大帮助，因此效果好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做技术的这种机会还是比较多的. 从实践中学习, 在实践中验证理论.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;理解了含义，自然能“获取”外语: 1. 可理解输入就是首先理解含义，然后下意识自动“获取”外语的过程。为了把你的外语学习速度加快，你需要在学习的过程中，给自己创造可理解输入的条件。2. 相信自己的潜意识学外语的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生理训练为主: 要学好外语，更重要的是要进行合适的生理训练，也就是说，外语学习的一个非常重要的部分，是训练大脑神经和外语肌肉。与练健美体操一样，练好外语的过程是一个肌肉训练的过程。1. 一定要用足够时间锻炼耳朵里的外语听觉神经！ 2. 发音训练绝对是肌肉训练的一个过程，因此要用体育训练的思路，指导自己找对路，这包括经常练，同时在练习的过程中注意动作的准确度。3. 创造外语条件反射！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;掌握好心理状态: 用深度放松的状态来学习, 保持良好学习状态的另外一个重要因素，就是管理自己的渴望。必须开心忍受听不懂的阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="xue-hui-wai-yu-de-qi-ge-guan-jian-xing-wei"&gt;学会外语的七个关键行为&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多听——快速长好“外语DNA”: “泡脑子”表面的意思很简单，就是说要把自己的大脑“泡”在外语的声音里。除此之外，也有一些自我管理的方式和态度方面的问题需要注意，这样才能把“泡脑子”的作用发挥到极致。&lt;/li&gt;
&lt;li&gt;先认识含义，后明白词: 作为学外语的成年人，也必须运用这个基本原理。不管怎么样，要把注意力先放在明白含义上，在这个基础上，你的大脑就很容易吸收你正在学的语言。换句话说，为了学会外语，要先懂意思，不是为了懂意思要先学会外语！ 肢体语言/整体环境和场景/通过已知”获取”未知/&lt;/li&gt;
&lt;li&gt;大胆组合，大量去用&lt;/li&gt;
&lt;li&gt;从核心高频内容开始学起: 为了把英语学得透彻，并且达到完全像母语者一样，根本不需要学那么多，更不需要同时什么都学，只需要把注意力放在外语的核心，掌握外语的高频词即可。所谓高频词就是沟通中出现频率高的外语单词，高频词是外语沟通的核心。所以，学到8000个单词以后，你的英文水平已经和普通的英语母语者一样好！外语学习内容贵精不贵多，学习的过程一定要遵守质量第一，数量第二的原则的&lt;/li&gt;
&lt;li&gt;找一个好的外语家长&lt;/li&gt;
&lt;li&gt;掌握发音的绝招: 除了听声音并调整自己面部肌肉之外，练发音的时候，还有一个“绝招”能用，就是“看脸说话”，意思是模仿外语母语者的面部和口型来练发音。&lt;/li&gt;
&lt;li&gt;一个盒子两条路（Same Box-Different Path）: 我相信你很清楚，为了真正会外语，迟早必须懂得用外语思考。也就是说，自己的大脑能够直接将头脑中的意义联结到外语的声音。根本不需要经过中文翻译. 只有把外语的声音和内心的画面含义联结到一起，才是下意识高效率的学习，也就是用外语沟通的时候，自己沟通的感觉和效果与说母语一样。其实所谓“外语思维”就是这个意思——听到外语，在头脑中看到画面，同时注意到自己的感觉，说话时也是直接从画面和感觉联结到外语. “同一个盒子，两条路”的主要含义，来自于我们对人类大脑处理信息的科学认识。人对世界的认识和记忆，最主要来源不是文字或语言，更基层的，是神经层面的5种感觉，包括：视觉、听觉、触觉、嗅觉和味觉。 方法: 故意创造和运用画面/用比喻找到含义的本质/找到沟通的对象, 用外语交流/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过已知获取未知, 有点类似&lt;code&gt;如何高效学习&lt;/code&gt;中提到的观点, 建立高速公路, 建立关联, 比喻.&lt;/p&gt;
&lt;p&gt;还有, kindle中生词模式就是类似这样的....&lt;/p&gt;
&lt;p&gt;外语家长, 其实类似mentor的角色, 虽然多年以来....还有, 实际的code review&lt;/p&gt;
&lt;h4 id="ju-ti-de-xue-xi-ji-hua"&gt;具体的学习计划&lt;/h4&gt;
&lt;p&gt;自己看书吧, 有挺多借鉴的地方&lt;/p&gt;
&lt;p&gt;不过, 对于我这个散漫闲人, 严格按部就班有些困难, 所以, 只能培养所谓的&lt;code&gt;习惯&lt;/code&gt;, 侵占覆盖掉碎片时间, 同时把相关的方法论给&lt;code&gt;践行&lt;/code&gt;了, 至于效果, 额, 过段时间看看......&lt;/p&gt;
&lt;h4 id="yi-xie-shu-zhong-ti-dao-de-xi-guan"&gt;一些书中提到的习惯&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;习惯一：开始用自己的右脑，调整到每天进入英语频道。&lt;/li&gt;
&lt;li&gt;习惯二：想到任何关于英语问题的时候，自动想起如何用英语发问。&lt;/li&gt;
&lt;li&gt;习惯三：把自己的耳朵和嘴巴连接起来，变成一个“发音准确度反馈循环”。&lt;/li&gt;
&lt;li&gt;习惯四：把英语声音直接连接到脑海中的画面和感觉。&lt;/li&gt;
&lt;li&gt;习惯五：把玩词变成每天的习惯和乐趣。拼凑词，创造含义。&lt;/li&gt;
&lt;li&gt;习惯六：完全建立自言自语的习惯&lt;/li&gt;
&lt;li&gt;习惯七：每天用英语开口说话，进行真实沟通。&lt;/li&gt;
&lt;li&gt;习惯八：随时开口练习发音。&lt;/li&gt;
&lt;/ul&gt;</content><category term="books"></category></entry><entry><title>读书笔记-调试九法</title><link href="http://www.wklken.me/posts/2015/11/29/debugging-9-rules.html" rel="alternate"></link><published>2015-11-29T00:00:00+08:00</published><updated>2015-11-29T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-11-29:/posts/2015/11/29/debugging-9-rules.html</id><summary type="html">&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1-li-jie-xi-tong"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是“墨菲定律”的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1-li-jie-xi-tong"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是“墨菲定律”的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处。当你找到bug时，必须在不破坏其他地方的前提下修复它们。理解系统行为是不破坏系统的第一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有个段子, 修了一个, 结果改出了3个bug...只有对系统足够了解, 才能修复而不破坏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们在调试的时候，通常都不会彻底地阅读系统手册。他们采取跳读的方式，查看他们认为重要的一些章节，但问题的线索可能就隐藏在被略过的那些章节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时是这样的, 但是可能时间有限, 这个没法子, 只能在闲时, 多多阅读, 例如, 隔段时间回去浏览一遍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道什么是正常的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是正常的, 什么是异常的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道工作流程, 当你尝试寻找bug时，必须知道要查找的路线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不多说, 捞数据, 追数据, 基本功&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解你的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要修车, 有趁手的工具才能更高效地解决问题&lt;/p&gt;
&lt;h4 id="2-zhi-zao-shi-bai"&gt;2. 制造失败&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;关键是在发生失败的时候要看到它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志, 现场, 栈等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“当你发现一个故障时该怎么办？” “试着让它再次发生。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察你做了什么，然后再做一次，并且记下你做的每个步骤。然后，按照你自己所写的步骤去做，确定这样做确实导致了错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现的步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要引发失败, 而不是模拟失败......如果你猜测失败机理，模拟往往不会成功。原因通常有两个，要么你的猜测是错误的；要么测试改变了条件，模拟的系统可以正确工作，或者更糟，发生新的错误，因而分散了你对正在查找的问题的注意力......注意，不要用一个看似完全相同（而实际上不同）的环境来代替并希望看到相同的错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注问题本身, 不要错误的转移到了猜测的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察失败&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔细观察失败! 仔细观察! 仔细....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是已修复bug，还是仅仅由于运气好，它不再发生了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你必须确认这一点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要丢掉调试工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调试工具, 不要当成一次性的工具用完即仍, 可能是错误的&lt;/p&gt;
&lt;h4 id="3-bu-yao-xiang-er-yao-kan"&gt;3. 不要想, 而要看&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;亲眼看到底层的失败是非常重要的。如果你猜测失败是如何发生的，那常常会修复一些根本不是bug的问题。这样的修复不仅不会解决问题，而且还会浪费时间和金钱，甚至会破坏其他地方。请记住，不要这样做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;观察是很难的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确很难&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须仔细观察，找到足够多的问题细节，才能调试它......如果你不能留意实际情况发生的全过程，那么你极有可能曲解很多问题。你猜测某个地方出了问题，于是修复它，但实际上错误发生在另一个地方......一定要亲眼看到实际错误是如何发生的。观察往往比猜测能够更快地找到问题。因为猜测虽然看起来是捷径，但这条捷径并不会带你找到问题的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观察而不是猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在停下来思考问题之前，对细节的观察应该到什么程度才合适呢？简单的答案是：“一直观察，直到把问题的原因锁定在几种可能性之内。”&lt;/p&gt;
&lt;p&gt;海森堡测不准原理: 换言之，测试工具影响了被测系统......。任何插装都可能对系统造成影响，只是程度不同而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插装, 类似于工具的调试模式, 会影响系统, 所以要注意&lt;/p&gt;
&lt;h4 id="4-fen-er-zhi-zhi"&gt;4. 分而治之&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;缩小搜索范围......在查找问题时，“分而治之”实际上是第一条需要使用的原则。事实上，在查找问题时它也是唯一需要应用的规则。所有其他规则都只是帮助你遵循这条规则。分而治之是调试的核心，很多人都知道它，但很多人都没有遵守它，这也正是我写本章的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二分法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确定范围...你必须知道搜索范围，而且必须知道在一端一切正常，而在另一端出现了问题.....从有问题的支路开始查找问题......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时出现了多个问题，当你确实查明了其中的一个问题时，应该立即修复它，然后再查找其他问题......有时修复了一个问题，另一个问题也解决了，两个问题实际上是同一个bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是有这种情况&lt;/p&gt;
&lt;h4 id="5-yi-ci-zhi-gai-yi-ge-di-fang"&gt;5. 一次只改一个地方&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;使用步枪，而不要用散弹枪......一次只改一个地方......此外，如果你真的看到了错误，应该只修复这个地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这点很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你在两个测试之间更改了很多代码，或者为两个测试设置了不同的环境，那么这两个测试将很难对比。它们之间有很多差别并不是由bug引起的，而你必须不断地解释这些差别。你必须把它们之间的差别减少到只与bug有关。排除其他的干扰因素&lt;/p&gt;
&lt;p&gt;自从上一次能够正常工作以来你更改了什么......有时，正常的系统和错误的系统之间的区别是由于一项更改造成的。做了更改之后，正常的系统开始出现故障。一种非常有效的办法是找出第一个导致系统出错的版本，尽管这可能需要连续测试原来的版本，直到找到没有故障的版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分问题都是出现在最近一次修改&lt;/p&gt;
&lt;h4 id="6-bao-chi-shen-ji-gen-zong"&gt;6. 保持审计跟踪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有时看起来最不起眼的事情实际上却是导致发生bug的关键......因此，你必须记录下每一件事情，不起眼的事情可能会很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节, 步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记下你的每步操作、顺序和结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;魔鬼隐藏在细节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在细节方面，永远都不要相信你的记忆，而要把它写下来。如果你相信你的记忆，将会制造很多麻烦。你会忘掉一些你认为不重要的细节，当然，这些细节将会被证明是非常重要的。你会忘掉一些在你看来不重要的细节，而这些细节对于后来解决另一个不同问题的人可能很重要。除了口头表述以外，你无法将信息传递给别人，而这会浪费所有人的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="7-jian-cha-cha-tou"&gt;7. 检查插头&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;怀疑自己的假设......当我们看到一个问题时，通常在某个特定位置看到了问题，但导致这个问题的原因却在上游或者是一个基础性的问题。系统不具备正确操作的条件，于是出现了非常奇怪的行为。当你看到完全来自另一个世界的问题时，应该停下来，看看你是不是还在地球上&lt;/p&gt;
&lt;p&gt;从头开始检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="8-huo-de-quan-xin-guan-dian"&gt;8. 获得全新观点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;寻求帮助: 向别人寻求帮助至少有3个原因（还不算把整个问题甩给别人）：获得全新观点、专业知识和经验。而且，人们通常很愿意帮忙，因为这给了他们一个证明自己很聪明的机会&lt;/p&gt;
&lt;p&gt;事实上，有时向别人解释问题也会使你有全新的认识，之后你自己就解决了问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小黄鸭调试法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报告症状, 而不是理论: 让他提出自己的观点。他们的观点可能与你的观点相符，也可能全然不同，而这正是你想要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="9ru-guo-ni-bu-xiu-fu-bug-ta-jiang-yi-ran-cun-zai"&gt;9.如果你不修复bug, 它将依然存在&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;检查问题确实已被修复&lt;/p&gt;
&lt;p&gt;bug 从来不会自己消失&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="books"></category></entry><entry><title>重读&gt;</title><link href="http://www.wklken.me/posts/2014/12/06/are-your-lights-on.html" rel="alternate"></link><published>2014-12-06T00:00:00+08:00</published><updated>2014-12-06T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-12-06:/posts/2014/12/06/are-your-lights-on.html</id><summary type="html">&lt;p&gt;书今年到是读了不少, 50本的目标目测已然超标了:), 发现今年的博客目标还差11篇(50篇), 目测完不成指标了, 随性写写吧, 能写几篇是几篇&lt;/p&gt;
&lt;p&gt;&lt;img alt="are-your-lights-on" src="/imgs/books/are-your-lights-on.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这本书是原先团队老大推荐的, 看过一遍, 后来自己入了一本, 今天重读(发现我越来越喜欢这类很薄的树)&lt;/p&gt;
&lt;p&gt;做事情本质上就是遇到问题，分析问题，解决问题的过程。而对如何解决问题本身，这本书做了一些讨论
           &lt;/p&gt;
&lt;p&gt;三点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 问题是什么（期望和体验）
2. 谁的问题（不同人会有不同的解决方式，责任）
3. 问题来源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了一些原则性的结论，每一点仔细思考分析.&lt;/p&gt;
&lt;p&gt;记得当时总结过一句话: 当”问题”成为问题时, 才是问题.&lt;/p&gt;
&lt;p&gt;值得反复阅读, 以下更多的是做一些摘录&lt;/p&gt;
&lt;h2 id="di-yi-bu-fen-wen-ti-shi-shi-yao"&gt;第一部分: 问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是什么类型的问题? 谁碰到了问题? 问题是什么? 或者说, 此时此刻, 问题的本质是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁碰到了问题? 问题的本质是什么?&lt;/p&gt;
&lt;p&gt;谁的问题? 如果没有负责人, 那将永远得不到解决. 具体到了细节 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;书今年到是读了不少, 50本的目标目测已然超标了:), 发现今年的博客目标还差11篇(50篇), 目测完不成指标了, 随性写写吧, 能写几篇是几篇&lt;/p&gt;
&lt;p&gt;&lt;img alt="are-your-lights-on" src="/imgs/books/are-your-lights-on.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这本书是原先团队老大推荐的, 看过一遍, 后来自己入了一本, 今天重读(发现我越来越喜欢这类很薄的树)&lt;/p&gt;
&lt;p&gt;做事情本质上就是遇到问题，分析问题，解决问题的过程。而对如何解决问题本身，这本书做了一些讨论
           &lt;/p&gt;
&lt;p&gt;三点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 问题是什么（期望和体验）
2. 谁的问题（不同人会有不同的解决方式，责任）
3. 问题来源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了一些原则性的结论，每一点仔细思考分析.&lt;/p&gt;
&lt;p&gt;记得当时总结过一句话: 当”问题”成为问题时, 才是问题.&lt;/p&gt;
&lt;p&gt;值得反复阅读, 以下更多的是做一些摘录&lt;/p&gt;
&lt;h2 id="di-yi-bu-fen-wen-ti-shi-shi-yao"&gt;第一部分: 问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是什么类型的问题? 谁碰到了问题? 问题是什么? 或者说, 此时此刻, 问题的本质是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁碰到了问题? 问题的本质是什么?&lt;/p&gt;
&lt;p&gt;谁的问题? 如果没有负责人, 那将永远得不到解决. 具体到了细节, 责任人负责并弄清楚. 分配到人&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题就是理想状态和现实状态之间的差别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调整理想状态或者改变现实状态.&lt;/p&gt;
&lt;p&gt;期望和结果, 你能做的, 降低期望, 或者去改变结果.&lt;/p&gt;
&lt;p&gt;“忽略问题”是一种古老但有效的方法(降低敏感度, 降低期望)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们永远不知道问题是什么, 直到我们彻底解决了拜托了这些问题&lt;/p&gt;
&lt;p&gt;别去费力榜缺乏幽默感的人解决问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-er-bu-fen-zhe-ci-de-wen-ti-shi-shi-yao"&gt;第二部分: 这次的问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;不要把别人的解决方法作为定义问题的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你的最终目的是什么? 你的问题本质是什么. focus在问题本身, 而不是问题的解决方法上, 错误地将解决方法作为你的问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;别把问题的解决方案误当做问题的定义, 当这个解决方案是由你提出的时候尤其如此&lt;/p&gt;
&lt;p&gt;如果你解决问题太过神速, 别人根本不会相信你真的解决了问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;头疼.....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面对有利可图的问题时, 道德考量很可能就烟消云散了&lt;/p&gt;
&lt;p&gt;即使问题已经解决, 你也无法确定你的问题定义是正确的.&lt;/p&gt;
&lt;p&gt;你永远无法确定已经找到的问题定义是正确的, 但是永远不要停下寻找正确定义的脚步&lt;/p&gt;
&lt;p&gt;不要仓促下结论, 但也不要忽视第一印象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-san-bu-fen-wen-ti-dao-di-shi-shi-yao"&gt;第三部分: 问题到底是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个解决方案都是下一个问题的来源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修复一个bug可能引起另外一个bug&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某些问题最困难的部分就在于发现问题的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你已经麻木了, 无法站在新的视角对事情进行评估, 确定是否有问题存在&lt;/p&gt;
&lt;p&gt;问题和习惯，一旦我们习惯了某些东西，就会对某些问题视而不见，改变习惯是非常困难的事情，每做一件事情的时候，都有必要问下自己，有必要真么做么？
             
事不过三，每次改善一点点，都能节约出很多时间和精力，放在重要的事情&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看你对问题的理解, 如果想不出至少三个可能有出错的地方, 你就没有真正理解这个问题&lt;/p&gt;
&lt;p&gt;问题的关键就是在于首先要意识到问题的存在, 或者让设计者意识到有问题存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;吃自己的狗粮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数不协调之处一经发现很容易解决&lt;/p&gt;
&lt;p&gt;借助外国人/盲人/儿童来检验你给出的定义, 或者让自己设身处地地站到外国人/盲人/儿童的角度来检验.......每转换一次视角, 都会发现新的不协调之处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;切换角度看问题, 发现不协调&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想得到不同的解决方案, 该怎样变换问题的表述方式?......一旦你将一个问题描述拟成了文字, 做些文字游戏, 以确保每个人对问题的理解可以统一.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先, 语义层面, 问问题的方式, 都可能带有偏向或误导, 如何客观地阐述问题?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你沿着定义问题的道路疲倦前行时, 过一会就要回头看看, 确定字节没有走错路&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-si-bu-fen-wen-ti-gai-you-shui-jie-jue"&gt;第四部分: 问题该由谁解决?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当别人可以妥善解决自己的问题是, 不要越俎代庖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特别是leader....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果这是别人的问题, 就把它当成是别人的问题&lt;/p&gt;
&lt;p&gt;如果一个人处于解决问题的位置, 却并不受问题困扰, 那就采取一些行动使他能亲身体验到问题.&lt;/p&gt;
&lt;p&gt;你的灯亮着么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何让别人意识到问题?&lt;/p&gt;
&lt;h2 id="di-wu-bu-fen-wen-ti-lai-zi-na-li"&gt;第五部分: 问题来自哪里?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;人们觉得无力解决问题, 常常把问题归因为天性, 以逃避解决问题的责任.&lt;/p&gt;
&lt;p&gt;大多数情况下, 问题的根源在你自己身上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记住这一点, 我们往往不承认这一点, 但这是无可辩驳的事实.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;世界上有两种人, 一种人做事, 另一种人制造出事来让其他人做. 远离那些找事让别人做的人, 你就能好好过日子了.&lt;/p&gt;
&lt;p&gt;世界上有两种人, 一种人做事, 另一种人领赏, 做第一种人吧, 那里的争斗比较少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-liu-bu-fen-ni-zhen-de-xiang-jie-jue-wen-ti-yao"&gt;第六部分: 你真的想解决问题么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数情况下, 只要知道问题是什么, 解决问题就是一件非常不值一提的事情.&lt;/p&gt;
&lt;p&gt;无论表面上如何, 在你提供他们所要求的东西之前, 他们极少知道自己想要什么.&lt;/p&gt;
&lt;p&gt;从最后的情况看, 想要真正解决问题的人并不是很多.&lt;/p&gt;
&lt;p&gt;人们永远没有足够的时间把它做好, 但永远有足够的时间重新来过.&lt;/p&gt;
&lt;p&gt;人们永远没有足够的时间去考虑到底是不是想要它, 但永远有足够的时间去为之后悔&lt;/p&gt;
&lt;p&gt;鱼, 总是最后一个看到水的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当局者迷.&lt;/p&gt;
&lt;hr/&gt;</content><category term="books"></category></entry><entry><title>重读&gt;</title><link href="http://www.wklken.me/posts/2014/11/30/pomodoro-technique-illustrated.html" rel="alternate"></link><published>2014-11-30T00:00:00+08:00</published><updated>2014-11-30T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-30:/posts/2014/11/30/pomodoro-technique-illustrated.html</id><summary type="html">&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我…)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我…)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很赞同, 打断是效率杀手.&lt;/p&gt;
&lt;p&gt;如果一天打断太多, 加上会太多, 很可能意味着晚上要花时间补回这段时间. That is not cool!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要想做到专注, 你就得坚决抛开各种杂念&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是番茄工作法? 简单来说, 就是列出你当天要做的事, 设置25分钟闹钟, 然后从第一件事开始.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很简单的做法, 但是实践两年多, 感觉行之有效. 而自己的番茄钟, 也根据任务性质长短不一, 从10分钟到1小时不等, 特别是半夜码代码写东西根本停不下来.&lt;/p&gt;
&lt;p&gt;而对于我这种比较懒散的人来说, 最简单的方式才是最好的方式, 例如每个番茄钟的休息时间, 只要自己感觉精力ok, 可以进入下一步, 就开始. 如果感觉一定要继续下去, 那么继续. 灵活运用, 不要僵化了(但是最开始的时候应该对自己严格些).&lt;/p&gt;
&lt;p&gt;同样, 你没有必要买一个番茄钟(我就买了一个…现在放厨房里落灰, 原因是滴答滴答的声音太干扰了), 手机/网页/软件, 你可以发现各类好用的东西, 主旨: 能在适时通知你, 不干扰你的工作和思路, 能记录. (我用的是&lt;code&gt;Vitamin-R 2&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;每隔一段时间, 回顾下所有步骤, 看看有没有需要简化或干脆去掉的步骤.&lt;/p&gt;
&lt;p&gt;我是&lt;code&gt;伪GTD&lt;/code&gt;爱好者, 从狂热到降温, 使用一个个工具, 最终确定了&lt;code&gt;things&lt;/code&gt;这个工具(足够轻). 而GTD步骤, 也被简化到了适合我工作场景的情况.&lt;/p&gt;
&lt;p&gt;不要僵化于步骤, 不要狂热于工具, 关注自己, 关注做事, 工具神马的, 够轻够用就好, 适合自己的才是最好的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一次只做一件事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人是并行动物, 但不意味着你可以同时干几件事.&lt;/p&gt;
&lt;p&gt;同时并行干几件事, 代价太大, 先不说最坏的情况是都干砸了, 最好的都干成了, 但是你也把自己搞得筋疲力尽.&lt;/p&gt;
&lt;p&gt;不断的中断, 上下文切换, 最终导致了&lt;code&gt;cpu&lt;/code&gt;过载......&lt;/p&gt;
&lt;p&gt;一次只做一件事, 集中精力, 高效搞定, 然后下一件.&lt;/p&gt;
&lt;p&gt;或者, 你可以将&lt;code&gt;想法&lt;/code&gt;挂起后台, 到了你真正去做的时候, &lt;code&gt;想法&lt;/code&gt;已经进化并成熟了很多.(亲测有效)&lt;/p&gt;
&lt;p&gt;so, 不要在&lt;code&gt;一边....一边....&lt;/code&gt;, 或许看起来很忙很努力, 就像&amp;lt;&amp;lt;Rewrok&amp;gt;&amp;gt;中提到的&lt;code&gt;工作狂&lt;/code&gt;, 这是很愚蠢的事情.(能多线doing的天才除外啊)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么要用番茄工作法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面对复杂, 望而却步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;无聊琐事, 越拖越久&lt;/li&gt;
&lt;li&gt;小事忙活一天, 大事一件没办&lt;/li&gt;
&lt;li&gt;最后期限, 步步紧逼&lt;/li&gt;
&lt;li&gt;从休息回到工作, 心智调整不过来&lt;/li&gt;
&lt;li&gt;一错再错, 不长记性&lt;/li&gt;
&lt;li&gt;没想到一件事要做这么久&lt;/li&gt;
&lt;li&gt;没想到一件事越做越复杂&lt;/li&gt;
&lt;li&gt;头脑被各种想法占据&lt;/li&gt;
&lt;li&gt;时间都用来学习适应复杂的工作方法了&lt;/li&gt;
&lt;li&gt;只顾低头干活, 忘了抬头看路&lt;/li&gt;
&lt;li&gt;把预估当做承诺            &lt;/li&gt;
&lt;li&gt;牵着不走, 打着倒退&lt;/li&gt;
&lt;li&gt;完美主义, 碍手碍脚&lt;/li&gt;
&lt;li&gt;前怕狼后怕虎, 害怕失败和批评&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过执行一套相同的动作和准备程序, 可以使大脑自我调整, 进入执行某类事务的最佳状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点&lt;code&gt;迷信&lt;/code&gt;的感觉. 但是, 其实目的仅仅是像书里说的, 通知大脑, 我要开始做什么了, 准备好.&lt;/p&gt;
&lt;p&gt;另一个我觉得, 是为了防止中断, 例如开工前去倒好水, 调整好电脑, IM和邮件通知关掉等等,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;短暂的定期休息, 能够促进融会贯通的能力.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It works.&lt;/p&gt;
&lt;p&gt;每隔25分钟, 常规休息, 4个番茄钟后进行15~30分钟阶段休息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“心流”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种精神状态, 创造性的状态.&lt;/p&gt;
&lt;p&gt;明确的目标, 集中, 专注, 自我意识消失, 时间感扭曲, 直接和即时反馈, 能力水平与面对挑战的平衡, 个人控制感, 工作本身的内在奖励, 行为与认知的合一.&lt;/p&gt;
&lt;p&gt;在那种状态下, 效率奇高, 你感觉自己无所不能, 集中专注, 自我意识消失(你不会意识到自己在这种状态下)&lt;/p&gt;
&lt;p&gt;虽然书中提到&lt;code&gt;节奏&lt;/code&gt;一说, 要定时从&lt;code&gt;心流&lt;/code&gt;中跳出规划全局再进入, 但我更倾向于多进入这种状态, 尽可能长地维持, 因为要进入&lt;code&gt;心流&lt;/code&gt;状态, 是很困难的. 如何快速进入也是需要逐渐训练的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在短时间内对工作方法做反复调整&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑, 调整得到&lt;code&gt;正确的姿势&lt;/code&gt;—论如何优雅地工作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法的阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计划: 从inbox里, 得到一张&lt;code&gt;今日待办&lt;/code&gt;的清单(当天的自我承诺)&lt;/li&gt;
&lt;li&gt;跟踪: 开始番茄钟后, 收集一些过程指标, 比如中断次数&lt;/li&gt;
&lt;li&gt;记录: 一天结束时, 将跟踪数据记录归档&lt;/li&gt;
&lt;li&gt;处理: 对跟踪数据进行分析思考, 得到一些特征和规律&lt;/li&gt;
&lt;li&gt;可视化: 将信息组织起来, 找出改进流程的思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是每天要进行的, 个人感觉太重了, 而且重心在改进, 而不再&lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;前期还没有形成自己节奏的时候, 适用, 中后期, 应该将重心放在&lt;code&gt;do&lt;/code&gt;上, 轻化&lt;code&gt;计划&lt;/code&gt;和&lt;code&gt;跟踪&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;处理外部中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是&lt;code&gt;别人的问题&lt;/code&gt;, 进行分派.&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;我的问题&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;邮件/IM过来的, 可视为不紧急, 完成番茄钟后处理&lt;/li&gt;
&lt;li&gt;电话, 一两分钟能done的, 做掉. 不能, 确认紧急程度, 不紧急, 给承诺, add to TODO list, back to work. 紧急的, 到4&lt;/li&gt;
&lt;li&gt;当面, 同2, 确认对方最晚可接受的时间, 如果不紧急, 承诺, 结束对话&lt;/li&gt;
&lt;li&gt;紧急, 给当前工作打断点, 注释或纸笔, 写下当前状态思路, 然后去做紧急的事情.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;书中提到的处理策略: &lt;code&gt;告知(dong something)-协商(when)-计划(todo list)-答复(done)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;怎么区分&lt;code&gt;紧急&lt;/code&gt;, 需要慢慢去学习.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;邮件的处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果答复时间不超过1分钟, 立即答复&lt;/p&gt;
&lt;p&gt;如果需要分派, 分派&lt;/p&gt;
&lt;p&gt;如果可以委托他人, 委托&lt;/p&gt;
&lt;p&gt;如果需要我处理, 不紧急, 回复处理时间, 记todo list&lt;/p&gt;
&lt;p&gt;如果需要我处理, 紧急?(紧急的事情会用邮件? 一般是&lt;code&gt;伪紧急&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;过度学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;达到熟练程度后, 继续学习或者练习的行为.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续改善&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种工作方法, 以改进为目标, 对渐进变化的专注.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事前预估与时间所花工夫之间经常不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;做预估的方法或能力有待改进&lt;/li&gt;
&lt;li&gt;工作开始后, 又出现新情况, 新问题, 使得环境发生改变.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;p&gt;很多时候, 我们的工作倾向于&lt;code&gt;无序&lt;/code&gt;的, 如何将有限的时间分配到无限的工作中, 需要一些技巧, 并且辅助以工具, 不要神化&lt;code&gt;技巧&lt;/code&gt;, 也不要狂热于&lt;code&gt;工具&lt;/code&gt;, 最重要的是人本身, 是完成事情本身, 学习一些方法(番茄/GTD), 应用, 思考, 改进, 这就够了:)&lt;/p&gt;</content><category term="books"></category></entry><entry><title>简约之美 &amp; 编写可读代码的艺术</title><link href="http://www.wklken.me/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html" rel="alternate"></link><published>2014-11-16T00:00:00+08:00</published><updated>2014-11-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-16:/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</id><summary type="html">&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美—软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;———————————&lt;/p&gt;
&lt;h2 id="jian-yue-zhi-mei"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美—软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;———————————&lt;/p&gt;
&lt;h2 id="jian-yue-zhi-mei"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是&lt;code&gt;反馈有效问题&lt;/code&gt;, 还是&lt;code&gt;反馈不是你的问题的问题空耗你的时间&lt;/code&gt;. 所以花费时间去理解需求, 想明白之后再开始写代码, 这个很重要! (真正团队干活你会有直观感受的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题的根源通常在于编程......这一切都与复杂性有关......编程就成了把复杂问题化解为简单问题的劳动......”好程序员”应当竭尽全力, 把程序写得让其他程序员容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;bug的本质, 归根结底在于编程本身. &lt;/p&gt;
&lt;p&gt;我们往往容易把问题复杂化(大而全, 追求完美, 过早优化, 过早关注细节), 而过度复杂的后果导致后期代码的难以维护.(所谓的到时候再改/重构, 都是虚妄的), 程序员遇到一坨代码(别人写的或者之前写的), 有优化的冲动, 但是迫于需求或者时间或者系统稳定性, 往往惧怕&lt;code&gt;变化&lt;/code&gt;, 这段代码能工作就行.&lt;/p&gt;
&lt;p&gt;但是为什么要复杂化呢? 最简单的, 莫过于在最初就做到最好, 不要给自己&lt;code&gt;到时候再重构&lt;/code&gt;的念头. 写好每行代码.&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;其他程序员&lt;/code&gt;, 也可能是&lt;code&gt;一个月&lt;/code&gt;后的自己. 如果经常发现回头看自己的代码都看不懂, 那么说明进步的余地还是很大的:). &lt;/p&gt;
&lt;p&gt;到这里, 我们的目标转向: 寻找提高代码质量的科学方法.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个写代码的人都是设计师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小到一个变量名, 一个判断逻辑, 大到一个函数, 一个类, 一个算法, 从代码里可以感受到很多东西. 拿建筑设计师对比, 写代码, 如同构筑一栋建筑, 不管是小屋/公寓还是摩天大厦, 好的设计永远美好, 而糟糕的设计, 无论大小, 永远丑陋. 很多概念, 意识和技巧在里面.(建议阅读&lt;code&gt;编写可读代码的艺术&lt;/code&gt;, 然后是&lt;code&gt;代码大全&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全部软件都有一个相同的目标: 帮助其他人......不能理解&lt;code&gt;帮助其他人&lt;/code&gt;的程序员, 只能写出糟糕的程序, 也就是说, 他们的程序提供不了什么帮助……在做与软件有关的决策时, 指导法则就是判断能够提供什么样的帮助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样, 这里的&lt;code&gt;其他人&lt;/code&gt;, 可能是你自己. &lt;/p&gt;
&lt;p&gt;需求的优先级, 取决于这个需求对于用户帮助的大小.&lt;/p&gt;
&lt;p&gt;你这样做/这个功能/这么处理, 对于目标, 对于团队, 对于个人, 有何帮助?
如果没有, 为什么要这么做?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计科学的目标: 1.确保软件能够提供尽可能多的帮助. 2.确保软件能够持续提供尽可能多的帮助 3.设计程序员能尽可能简单地开发和维护的软件系统. 才能实现1/2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1代表软件本身的价值, 2代表软件的可维护性可扩展性, 3代表, 好的/简单的设计, 决定了可维护性和可扩展性, 是万丈高楼的地基. 不过1和3, 在有限资源的情况下(资源永远是不够的), 是互相冲突的, 所以要思考如何保持平衡.&lt;/p&gt;
&lt;p&gt;这里提到, 软件的开发和维护都应当简单, 要避免困难和复杂.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计方程式 可取程度=价值/成本  =&amp;gt;  可行性=(当前价值+未来价值)/(实现成本+维护成本)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前价值和实现成本往往是可评估的, 人们会关注于这一点, 带来的问题就是忽略了未来价值和维护成本, 这两个和时间相关, 不易评估, 但是却更为重要. 人很容易只着眼于现在而忽略了未来. 所以写代码时需要注意, &lt;code&gt;存在着未来&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;相比降低实现成本, 降低维护成本更为重要&lt;/code&gt;. 很直观的感觉, 一个设计良好的接口, 在需求变更的时候, 只需要动个参数或者动几行代码或者压根不需要改. 而一个糟糕的设计里, 每次需求变更, 会发现需要改动很多代码, 甚至是重写, 连带测试等时间, 你会发现很多时间耗费在里面. 所以应该一开始就理解, 往未来看一眼(预测短期未来是可行的, 预测长期未来是不靠谱的), 再进行设计, 再进行代码.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变化定律: 程序存在的时间越久, 它的某个部分需要变化的可能性就越高.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一切都是变化的, 你自己, 还有这个世界.&lt;/p&gt;
&lt;p&gt;所以需求变更是必然的:)&lt;/p&gt;
&lt;p&gt;之前学到一个很重要的观点: &lt;code&gt;拥抱变化&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计三大误区: 1.编写不必要的代码 2.代码难以修改 3.过分追求通用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;YAGIN, &lt;code&gt;不要编写不是必须的代码, 并且要删除没有用到的代码&lt;/code&gt;. 版本库干嘛用的? 提交, 然后删除那些没用的, 然后再提交:)&lt;/p&gt;
&lt;p&gt;僵化设计的原因: 1.对未来做了太多假设(......) 2.不仔细设计就编写代码(新手需注意). &lt;code&gt;设计程序时, 应当根据你现在确切知道的需求, 而不是你认为未来会出现的需求&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;避免过度设计: 仅仅根据目前确知的需求来考虑通用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷概率定律: 在程序中新增缺陷的可能性与代码修改量成正比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的设计, 代码少(很大可能), 代码变更少, 而糟糕的设计, 反之. 从而, bug出现的概率显而易见&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最好的设计, 就是能够适应外界尽可能多的变化. 而软件自身的变化要尽可能少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不变应万变, 追求之&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要&lt;code&gt;修正&lt;/code&gt;任何东西, 除非它真的可能有问题, 而且有证据表明问题确实存在.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如: “过早优化”!&lt;/p&gt;
&lt;p&gt;当问题成为问题的时候, 才是问题, 才需要去处理!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理想情况下, 任何系统里的任何信息, 都应当只存在一次.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;避免重复. 变更时代价最小.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简洁定律: 软件任何一部分的维护难度, 反比于该部分的简洁程度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简洁是相对的.&lt;/p&gt;
&lt;p&gt;保持一致/可读性(代码被阅读的次数远远多于编写和修改的次数)/命名/注释(代码的意图通常不应该用注释来说明, 直接阅读代码就应当能够理解)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂性是会叠加的, 而不是简单的线性叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题复杂, 解法不一定复杂. &lt;/p&gt;
&lt;p&gt;解决复杂性: 把它分解成独立的小部分, 并进行重新设计.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试法则: 你对软件行为的了解程度, 等于你真正测试它的程度......除非亲自测试过, 否则你不知道软件是否能正常运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;about test.&lt;/p&gt;
&lt;h2 id="bian-xie-ke-du-dai-ma-de-yi-zhu"&gt;编写可读代码的艺术&lt;/h2&gt;
&lt;p&gt;关于如何编写高质量可读的代码的方法论:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/the-art-of-readable-code.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;The Art of Readable Code&amp;gt;&amp;gt;, 这本书就不细写了, 因为不到两百页, 几乎每一页都是干货.&lt;/p&gt;
&lt;p&gt;强烈推荐.&lt;/p&gt;
&lt;p&gt;代码大全太厚, &amp;lt;&amp;lt;Clean Code&amp;gt;&amp;gt;太晦涩, 建议来读这本. 本次总能得到一些感悟.&lt;/p&gt;</content><category term="books"></category></entry><entry><title>重读Rework</title><link href="http://www.wklken.me/posts/2014/11/09/rework.html" rel="alternate"></link><published>2014-11-09T00:00:00+08:00</published><updated>2014-11-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-09:/posts/2014/11/09/rework.html</id><summary type="html">&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优秀是一种习惯, 进化是建立在成功的基础之上的. 每个人, 无时无刻都是在往前走的, 然而, 每个人最终得到的并不一样. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计划即瞎猜......现在就决定你这周要做什么,不必去管全年的计划, 只要找出下一项最重要的任务, 然后起而行之.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准确理解应该是: 长期计划即瞎猜......你不需要年度/季度/月度计划, 但是你需要年度/季度/月度目标, 计划总是赶不上变化的, 你总是花费很长一段时间或者很多精力给自己制定一个非常完美的计划, 但是计划永远只是计划而已.不去做, 只是徒费精力.我的做法是, 有目标, 然后拆解成小目标, 小目标更灵活可变, 而在do的时候, 只专注于一两个, 并且根据自己的心情/状态等灵活变动. 
拥抱变化, 只要保证不偏离目标主体就行.
不过短期计划还是需要的, 例如每天的todo list. 我现在切换成了&lt;code&gt;things&lt;/code&gt;管理, &lt;code&gt;wunderlist&lt;/code&gt;貌似也不错, 不过你需要找一个最适合你自己的工具.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作狂的行为不但没有必要, 而是愚蠢至极......真正的英雄早已想出办法, 搞定一切, 然后回家了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取三年前刚毕业那会, 我不会完全赞同这个观点, 经过三年, 三家公司, 三种完全不同的工作风格和模式, 看法已经彻底改变了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;快乐工作, 认真生活&lt;/code&gt;, 这句话我一年多前才完全认同之. &lt;code&gt;Work Smarter, Not Harder&lt;/code&gt;—来自zapier的一篇博文&lt;a href="https://zapier.com/blog/best-ways-work-smarter-not-harder/"&gt;16 of the Best Ways to Work Smarter, Not Harder
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前的博文提过, 恶性循环/良性循环, 所谓的工作狂, 就是处在恶性循环中而不自知, 如果觉得自己有点苗头, 需要自省.&lt;/p&gt;
&lt;p&gt;拼的是效率, 而不是时间.&lt;/p&gt;
&lt;p&gt;首先, 工作永远是干不完的, 你必须明确知道这一点. 其次, 效率是可以提升的, 你也必须认同这一点, 并通过不断完善自己的工作风格/模式, 优化共同方式, 积累经验, 技术栈工具栈补完, 你可以达到一个很好的状态. 再次, 努力成为&lt;code&gt;英雄&lt;/code&gt;而不是&lt;code&gt;工作狂&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用自己的方式, 做自己喜欢做的事情, 并从中获得回报.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这才是工作.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在宇宙中留下你的足迹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的一生有限.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;挠自己痒处,......最好还是做自己真正关心的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写代码, 有一个&lt;code&gt;吃自己的狗粮&lt;/code&gt;一说. 这里同, 做自己关心的东西, 感兴趣的东西, 优秀到卓越的区别在于此.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在你的人生中真正有意义的是你做了什么, 而不是你想过什么,说过什么, 或者计划过什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计划党/拖延症患者需注意....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不会有正当其时的时候.....完美的时机永远不会出现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以, 不要找借口了吧骚年? 活在当下, 现在就开始.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Draw a line in the sand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;信念, 你所坚守的到底是什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;坚守某种信念并不仅仅是把它写下来. 不但要相信它, 还要让他成为你的生活方式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;think about it&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要的是承诺策略, 而不是退出策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你做事情的第一反应是?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与其做半个成品, 不如做好半个产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;以后再重构&lt;/code&gt;, 这句话是很虚无缥缈的, 可以说是遥遥无期, 所以, 经手的每一件事情, 每一行代码, 做到最好. 不要考虑&lt;code&gt;退出策略&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要过早关注细节......你只有在真正开始后, 才能认清到底哪些细节才是最重要的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同&lt;code&gt;不要过早优化&lt;/code&gt;:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关注不变因素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么才是不变的? 才是核心? 才是重要的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们把装备当做取胜的法宝, 却不愿花时间去练习......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;妄图寻找捷径? &lt;/p&gt;
&lt;p&gt;有一段时间是工具控, 沉迷各种工具，编辑器，插件，操作系统，效率，gtd,浏览器等等&lt;/p&gt;
&lt;p&gt;其实，更重要的是事情本身, 是人本身&lt;/p&gt;
&lt;p&gt;Get things done, 就足够了&lt;/p&gt;
&lt;p&gt;花时间找到适合自己的工具, 不太重, 不过轻, 刚刚合适就好. 而不是花时间收集一大堆东西, 徒耗精力.&lt;/p&gt;
&lt;p&gt;现在，已经没那么狂热了，只遵循一个原则，尝试新事物，针对所有工具，使用二八原则，只关心最核心的20%. 足够了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;立马就上线...为了迅速上线,要砍掉一切不必要的东西…最有效的成功方法是不断尝试. 不要再臆测到底会发生什么事了, 到现实中去寻找答案吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑才是王道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;退出的理由?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么要这么做? 你在解决什么问题?这真的有用么?你加上去的东西有价值么? 这种改变真的会起作用么? 这种方法更简单吗? 有其他更值得做的事情吗? 这样做值吗?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interruption is the enemy of productivity……你的生活被各种干扰包围着, 只有你自己才能去发起反击.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;干扰不可避免, 只看你如何去解决. 你必须要形成行之有效的工作风格/模式, 以及沟通方式, 并&lt;code&gt;培训&lt;/code&gt;你的战友.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会议有毒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何更高效地开会? 这几个月已经彻底杜绝了&lt;code&gt;被动&lt;/code&gt;的会议, 但是有些必要的会议时间还是太长了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good enough is fine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有更好, 只有合适. 简单有效就ok.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t be a hero&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些时候, 需要考虑适时退出.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该睡觉时睡觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作息规律, 高效保证, 熬夜苦撑没有任何好处&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;积累动力的方法就是完成一项任务，然后紧接去完成下一项任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重要, 不要给自己设置一个不可能完成的东西, 然后被恐惧压垮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;预估都是垃圾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是不预估, 而是, 你需要聪明地去预估. 分治, 小的任务总是更容易把控些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要做得比你的对手少, 并以此来击败他们.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要相信”客户永远是正确的”这种废话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要相信”产品/老板永远是正确的”这句话, 思辨地看待问题, 提出问题, 解决问题. 学会说’no’. (处理需求的时候很重要)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;头脑发热不等于当务之急&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做当前最重要的事情, 而不是最想去做的事情.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要保持低调, 你可以利用这段时间继续调整你的策略, 解决纠结的问题, 测试各种创意, 尝试新事物.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;黑暗森林?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一夜成名只是传说......道路很艰难, 但你必须充满信心.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生活&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;受不了时再招人......不要提前招人.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你最终会明确你想要招的是什么样的人.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鸡尾酒会上的陌生人......要营造一个能让人直言不讳并且有安全感的环境.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所处的环境是不是这样的? 你能否感觉到自己是一份子, 能改变些什么? 而不是深深的无力感?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多年的无关经验......真正的差别来自于个人的努力程度, 性格差异以及智力水平.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人和人的区别和工作年限相关性其实蛮低的, 深有体会.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文化不是由谁创造的......企业文化是行为, 不是语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连着实习, 四家公司, 企业文化? 有两家白纸黑字进去新员工培训就有, 大大的标语什么的, 迄今没有记得是什么. 杭州一年多, 是那种潜移默化的, 你从大家的身上可以感受到的东西, 对我影响很大, 受益良多. 现在感受到的, 同样是身体力行, 在一件件事情中. 所以找工作, 如果觉得契合, ok, 如果感觉所谓的&lt;code&gt;文化&lt;/code&gt;很SB, 果断些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会写代表会思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码/总结/博客&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要一受伤就结疤, 不要因为一个人的一次错误而去指定规章制度.只有当一件事情反复发生时，才需要为之制定规章制度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们做事的时候是不是也这样? 一遭被蛇咬, 十年怕井绳. 这样自己的领域会不断地受限的.&lt;/p&gt;
&lt;p&gt;所以, 事不过三的原则很重要:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵感稍纵即逝......想法是不朽的, 一直都会存在. 最不可能长存的是灵感.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="books"></category></entry><entry><title>读书笔记-软件测试的艺术</title><link href="http://www.wklken.me/posts/2014/07/26/the-art-of-software-testing.html" rel="alternate"></link><published>2014-07-26T00:00:00+08:00</published><updated>2014-07-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-07-26:/posts/2014/07/26/the-art-of-software-testing.html</id><summary type="html">&lt;p&gt;这本书是三年前毕业时读的, 毕业时的职位是"测试开发工程师".&lt;/p&gt;
&lt;p&gt;好吧, 这本书年龄比我还大:), 毕业那会绝版了, 读的是电子版的. 前阵子看到有在卖就买了一本珍藏, 最近重读了一遍.&lt;/p&gt;
&lt;p&gt;可以作为测试入门读本.(测试界的经典书籍), 摘录一些, 一些关键字感兴趣可以自己google.&lt;/p&gt;
&lt;p&gt;&lt;img alt="software-test" src="/imgs/books/the-art-of-software-testing.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;好吧, 在很多人眼里, 测试只是点点鼠标等没技术含量的工作, 干开发干不了才干测试. But, 这个观点是错误的, 测试还是非常博大精深的, 要求还是非常高的(需要懂各类语言, 需要写各种代码, 需要懂各种业务, 需要懂各类场景, 需要项目管理, 需要......).&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓软件测试, 就是一个过程或一系列过程, 用来确认计算机代码完成了其应该完成的功能, 不执行其不该有的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意后半段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的心理学&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是为了发现错误而执行的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的行为总是倾向于具有高度目的性. 所以需要将目标定为: 证明程序中存在错误(某些情况下, 测试人员的态度可能比实际的测试过程本身还重要)&lt;/p&gt;
&lt;p&gt;所以, 要假设测试的程序是存在错误的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试的原则
(直接摘录了, 很多观点值得借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;编号&lt;/th&gt;
&lt;th align="left"&gt;原则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;测试用例中一个必需部分是对预期输出或结果进行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;这本书是三年前毕业时读的, 毕业时的职位是"测试开发工程师".&lt;/p&gt;
&lt;p&gt;好吧, 这本书年龄比我还大:), 毕业那会绝版了, 读的是电子版的. 前阵子看到有在卖就买了一本珍藏, 最近重读了一遍.&lt;/p&gt;
&lt;p&gt;可以作为测试入门读本.(测试界的经典书籍), 摘录一些, 一些关键字感兴趣可以自己google.&lt;/p&gt;
&lt;p&gt;&lt;img alt="software-test" src="/imgs/books/the-art-of-software-testing.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;好吧, 在很多人眼里, 测试只是点点鼠标等没技术含量的工作, 干开发干不了才干测试. But, 这个观点是错误的, 测试还是非常博大精深的, 要求还是非常高的(需要懂各类语言, 需要写各种代码, 需要懂各种业务, 需要懂各类场景, 需要项目管理, 需要......).&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓软件测试, 就是一个过程或一系列过程, 用来确认计算机代码完成了其应该完成的功能, 不执行其不该有的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意后半段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的心理学&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是为了发现错误而执行的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的行为总是倾向于具有高度目的性. 所以需要将目标定为: 证明程序中存在错误(某些情况下, 测试人员的态度可能比实际的测试过程本身还重要)&lt;/p&gt;
&lt;p&gt;所以, 要假设测试的程序是存在错误的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试的原则
(直接摘录了, 很多观点值得借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;编号&lt;/th&gt;
&lt;th align="left"&gt;原则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;测试用例中一个必需部分是对预期输出或结果进行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;程序员应当避免测试自己编写的程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;编写软件的组织不应当测试自己编写的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="left"&gt;应当彻底检查每个测试的执行结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="left"&gt;测试用例的编写不仅应当根据有限和预料到的输入情况, 而且也应当根据无效和未预料到的输入情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="left"&gt;检查程序是否"未做其应该做的"仅是测试的一半, 测试的另一半是检查程序是否"做了其不应该做的"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="left"&gt;应该避免测试用例用后即弃, 除非软件本身就是一个一次性的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="left"&gt;计划测试工作时不应默许假定不会发生错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="left"&gt;程序某部分存在更多错误的可能性, 与该部分已发生错误的数量成正比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="left"&gt;软件测试是一项极富创造性, 极具智力挑战性的工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;错误发现的越早, 改正错误的成本越低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so, 单元测试很重要, 代码走查很重要,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黑盒白盒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;黑盒测试(数据驱动测试), 将程序视为一个黑盒, 不用去理解程序的内部结构(测试目标与程序内部机制和结构完全无关), 构造测试数据(来源于软件规范), 检查输出是否符合预期.&lt;/p&gt;
&lt;p&gt;白盒测试(逻辑驱动测试), 对程序的逻辑结构进行检查, 从中获取测试数据.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;p&gt;功能测试&lt;/p&gt;
&lt;p&gt;系统测试: 能力, 容量, 强度, 可用性, 安全性, 性能, 存储, 配置, 兼容性, 安装, 可靠性, 可恢复性, 服务/可维护性, 文档, 过程&lt;/p&gt;
&lt;p&gt;验收测试&lt;/p&gt;
&lt;p&gt;安装测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试用例的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;白盒测试:&lt;/p&gt;
&lt;p&gt;逻辑覆盖测试, 从弱到强依次是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;语句覆盖,每个语句至少执行一次
判定覆盖(也称分支覆盖) 每个判断都至少有一个为真和为假的输出结果
条件覆盖, 确保将一个判断中的每个条件的所有可能结果都至少执行一次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;黑盒测试:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;等价划分, 穷举输入是不可能的, 但是可以将其划分成有限数量等价类, 获取一个子集输入.
边界值分析, 输入和输出等价类中那些恰好处于/大于/小于边界的状态
因果图, 需求规格 -&amp;gt; 因果关系分析 -&amp;gt; 因果图 -&amp;gt; 测试用例
错误猜测, 基于直觉和经验的猜测
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;做测试还是做开发?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我做了一年又三个月测试开发, 后来转职Python后端开发了.&lt;/p&gt;
&lt;p&gt;原因? 兴趣, 仅此而已.&lt;/p&gt;
&lt;p&gt;如果更在乎创造一些东西，做开发.&lt;/p&gt;
&lt;p&gt;如果更喜欢发现一些东西，做测试开发(现在似乎没有单纯的测试了吧?)&lt;/p&gt;
&lt;p&gt;(开发就像工匠, 测试就如寻宝的)&lt;/p&gt;
&lt;p&gt;开发主动权在手中，测试需要更多的博弈.&lt;/p&gt;
&lt;p&gt;(这么看来测试要求更高一些, 哈哈)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个开发都应该懂些测试的基本思想和原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写出的代码会更健壮. 多注意测试, 可以给后续维护以及重构节省一大笔时间.&lt;/p&gt;
&lt;p&gt;可以拿这本书作为入门.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管有没有专职测试, 单元测试都是必须的.(最好要有, 重构复杂项目的时候会发现感动的哭了)&lt;/p&gt;
&lt;p&gt;如果有专职测试, 开发测试比应该蛮高的, 好钢用在刀刃上, 对重要项目进行测试, 另外留出时间研究自动化测试/回归测试/测试工具等, 以及对项目流程进行优化, 最大化提高生产力.&lt;/p&gt;
&lt;p&gt;没有专职测试, 需要开发人员足够靠谱, 并且需要建立一套完善的生产部署流程, 监控机制, 以及用户反馈机制, 以小步快跑, 频繁发布的方式处理需求, 同时关注反馈.&lt;/p&gt;</content><category term="books"></category></entry><entry><title>读书笔记--你就是极客!软件开发人员生存指南</title><link href="http://www.wklken.me/posts/2014/05/03/BeingGeek.html" rel="alternate"></link><published>2014-05-03T00:00:00+08:00</published><updated>2014-05-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-05-03:/posts/2014/05/03/BeingGeek.html</id><summary type="html">&lt;p&gt;BeingGeek:The Software Developer's Carrer Handbook&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/being-geek.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;五一三天,读完五本书.....这本算是重读&lt;/p&gt;
&lt;p&gt;写作风格类似&amp;lt;黑客与画家&amp;gt;&lt;/p&gt;
&lt;p&gt;10分标准,打个7.5&lt;/p&gt;
&lt;p&gt;个人职业生涯面临的种种境遇和问题:跳槽,面试,管理,招聘,危机处理,沟通,合作,团队建设,演讲,绩效考核等,甚至还有一篇是专门写给我们背后的支持者的(例如女朋友,如果有的话.....).&lt;/p&gt;
&lt;p&gt;书上关于 团队管理,沟通,换工作的几章,可以重点看下&lt;/p&gt;
&lt;p&gt;里面包含了很多观点,隔一段时间来重看认识会有不同,摘录几点.....算是读书摘要吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;阅读时,要不断重复3个问题(明确方向)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我正在做什么?
2.我真正想做的是什么?
3.我在乎的是什么?我关心的是什么?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-sheng-zhi-dao"&gt;致胜之道&lt;/h3&gt;
&lt;p&gt;系统思维:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们寻找 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;BeingGeek:The Software Developer's Carrer Handbook&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/being-geek.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;五一三天,读完五本书.....这本算是重读&lt;/p&gt;
&lt;p&gt;写作风格类似&amp;lt;黑客与画家&amp;gt;&lt;/p&gt;
&lt;p&gt;10分标准,打个7.5&lt;/p&gt;
&lt;p&gt;个人职业生涯面临的种种境遇和问题:跳槽,面试,管理,招聘,危机处理,沟通,合作,团队建设,演讲,绩效考核等,甚至还有一篇是专门写给我们背后的支持者的(例如女朋友,如果有的话.....).&lt;/p&gt;
&lt;p&gt;书上关于 团队管理,沟通,换工作的几章,可以重点看下&lt;/p&gt;
&lt;p&gt;里面包含了很多观点,隔一段时间来重看认识会有不同,摘录几点.....算是读书摘要吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;阅读时,要不断重复3个问题(明确方向)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我正在做什么?
2.我真正想做的是什么?
3.我在乎的是什么?我关心的是什么?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-sheng-zhi-dao"&gt;致胜之道&lt;/h3&gt;
&lt;p&gt;系统思维:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们寻找"定义"来了解
"系统",以便找出
"规则",这样我们才能
明白下一步该做什么
并最终获得胜利
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要投入足够的时间和精力,是可以完全地认识系统的&lt;/p&gt;
&lt;p&gt;麻烦的"人", 人总是会把事情搞砸,他们是系统故障的根源&lt;/p&gt;
&lt;p&gt;提高胜率:为不可预测事件做好准备&lt;/p&gt;
&lt;p&gt;只有自己,才能成就自己的事业.认为身边所有人都要对你的职业生涯负责的想法是错误的.&lt;/p&gt;
&lt;h3 id="san-yao-su"&gt;三要素&lt;/h3&gt;
&lt;p&gt;将职业发展与管理哲学归结为三要素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.技术方向
最接近代码的人最有资格为工作设定技术方向
你才是代码的拥有者,你需要关心它,每天都要
你是否主动地确定产品的技术方向?

2.保持成长
不进则退,不胜则亡,成长的基本单位是知识
增长代表一种战略.可以学到更多,完成更多的工作,获得晋升,改善自己,并承担更多责任.
你是否明白要做的哪些事情才能一直成长?

3.交付工作
言出必行,兑现承诺,重视自己的信誉
你是否能按时完成工作?兑现承诺?言出必行?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gong-zuo-zhi-yang"&gt;工作之痒&lt;/h3&gt;
&lt;p&gt;检验:我满意现在的工作么?你对自己的工作有多投入?你的动机是什么?&lt;/p&gt;
&lt;p&gt;不要在一气之下换工作.没有什么比愤怒更能让人失去理智.&lt;/p&gt;
&lt;p&gt;你需要以自信的立场来考虑换工作.不应该是为了逃避一个错误.而应该是去迎接一个新的机遇.&lt;/p&gt;
&lt;p&gt;关于移交工作:工作永远是做不完的,从来没有哪个时刻是适合辞职离开的&lt;/p&gt;
&lt;h3 id="gong-si-wen-hua"&gt;公司文化&lt;/h3&gt;
&lt;p&gt;如果想获得提拔,就要成功地满足某一群人的需求.&lt;/p&gt;
&lt;p&gt;问题是,永远要想在管理着前面,&lt;/p&gt;
&lt;h3 id="gou-tong"&gt;沟通&lt;/h3&gt;
&lt;p&gt;不要用借口来回答问题&lt;/p&gt;
&lt;p&gt;每次开口,应该言之有物,在令人不安的沉默中,应该坚持这种观点,而不是把自己放在受害者的角度上寻求借口&lt;/p&gt;
&lt;h3 id="chu-li-wei-ji"&gt;处理危机&lt;/h3&gt;
&lt;p&gt;几点:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.如果缺乏指引,人么会追随错误的导向

2.人们不停地讨论正在面对的危机,以互相提供群体治疗

3.每个人都想了解全部的真相
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三场会议&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.一对一面谈
2.部门会议
3.成果检查会议
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xi-tong-de-you-xi-hua"&gt;系统的游戏化&lt;/h3&gt;
&lt;p&gt;让某些事情变得有趣,积极参与&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.规则必须是明确的
2.规则必须是不可违反的
3.不到万不得已,不要拿金钱作为奖励手段
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hou-xiang-qiao-pai"&gt;后巷桥牌&lt;/h3&gt;
&lt;p&gt;在工作中,应该和同事保持多近的距离?&lt;/p&gt;
&lt;p&gt;彼此信任和尊重的团队会更加多产且高效.我们的目标不适合每个人都成为朋友,而是建立一组关系,这组关系中,我们互相相信对方是可靠地,诚实的,有能力的,有毅力的.&lt;/p&gt;
&lt;h3 id="ren-wu-lie-biao"&gt;任务列表&lt;/h3&gt;
&lt;p&gt;每天的任务事项:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.今天,必须今天完成的
2.稍后,不需要今天,稍后搞定即可
3.永不,我永远不会去完成这项任务
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不需要等级结构,标签,不需要优先级,不需要设定日期.&lt;/p&gt;
&lt;p&gt;保持极简&lt;/p&gt;
&lt;h3 id="juan-di-lie-biao"&gt;涓滴列表&lt;/h3&gt;
&lt;p&gt;坚持长期投入零散的时间,最后能做到的就远远超乎自己的想象.&lt;/p&gt;
&lt;p&gt;例如:人,写作,读书....&lt;/p&gt;
&lt;p&gt;充分利用零散时间&lt;/p&gt;
&lt;h3 id="gong-ju-de-kuang-re-fa-ze"&gt;工具的狂热法则&lt;/h3&gt;
&lt;p&gt;合适的工具将使生产力指数增长&lt;/p&gt;
&lt;p&gt;狂热法则:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.貌似简单
2.不受工作场所限制
3.设计的目的都是免除重复动作
4.只做我让他们做的事情
5.只属于我自己
6.我的工具一直为自己的生存而战
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mian-dui-ze-nan"&gt;面对责难&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.承认你搞砸了这个问题
2.承认"我不知道"
3.具体地解释你准备查明问题的步骤,并给自己定下最后期限.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-xiao-kao-he"&gt;绩效考核&lt;/h3&gt;
&lt;p&gt;描述:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.完成了什么工作
2.完成得如何
3.下一步需要做什么
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dui-ji-yu-de-wan-zheng-bu-fa"&gt;对机遇的完整步法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我打算去哪里?
2.我打算创造什么?
3.我打算如何创造出来?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-yi-que-kou"&gt;注意缺口&lt;/h3&gt;
&lt;p&gt;每个人都是可替代的&lt;/p&gt;
&lt;h3 id="jing-yan"&gt;经验&lt;/h3&gt;
&lt;p&gt;你的经验和你努力拼搏的过去,这些给你做决定所以来的有用的,有价值的直觉&lt;/p&gt;
&lt;p&gt;经验有半衰期&lt;/p&gt;
&lt;p&gt;了解我的世界,预测下一步会发生什么?&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;仅仅是现在做得很棒,并不意味着你是成功的
困难是有益的
冲突就是学习
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记--高效能人士的七个习惯+执行4原则</title><link href="http://www.wklken.me/posts/2014/03/30/highly-effective-and-execution.html" rel="alternate"></link><published>2014-03-30T00:00:00+08:00</published><updated>2014-03-30T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-30:/posts/2014/03/30/highly-effective-and-execution.html</id><summary type="html">&lt;p&gt;今天打算写的是，关于两本“成功学”的书&lt;/p&gt;
&lt;p&gt;《高效能人士的七个习惯》和《高效能人士的执行4原则》&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面1" src="/imgs/books/the-7-habits-of-highly-effective-people.jpg"/&gt;
&lt;img alt="封面2" src="/imgs/books/the-4-disciplines-of-execution.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;一直以来对“成功学”都不感冒，“虚”，“扯淡”，“毫无意义”，一直没搞明白为什么那么多人，会专门去花费大量金钱学习和研究这些东西&lt;/p&gt;
&lt;p&gt;以前不感冒，当然，现在也是，一如既往&lt;/p&gt;
&lt;p&gt;以上两本书，一本书是刚毕业那会部门老大推荐的，跳槽之后，新的老大也推了这本书，所以从书堆里翻出来，认认真真地看完了（很惊讶走了那么多地方书还能留着），后面一本是亚马逊kindle上捞到的。&lt;/p&gt;
&lt;p&gt;这两本，算是成功学，也不算，很多东西讲到了点上，有些道理，认同，也会去遵循&lt;/p&gt;
&lt;p&gt;值得一看，能从中能借鉴一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-qi-ge-xi-guan"&gt;高效能人士的七个习惯&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图1" src="/imgs/books/the-7-habits-of-highly-effective-people-concepts.jpg"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;习惯一：积极主动——个人愿景的原则
习惯二：以终为始——自我领导的原则
习惯三：要事第一——自我管理的原则
习惯四：双赢思维——人际领导的原则
习惯五 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;今天打算写的是，关于两本“成功学”的书&lt;/p&gt;
&lt;p&gt;《高效能人士的七个习惯》和《高效能人士的执行4原则》&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面1" src="/imgs/books/the-7-habits-of-highly-effective-people.jpg"/&gt;
&lt;img alt="封面2" src="/imgs/books/the-4-disciplines-of-execution.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;一直以来对“成功学”都不感冒，“虚”，“扯淡”，“毫无意义”，一直没搞明白为什么那么多人，会专门去花费大量金钱学习和研究这些东西&lt;/p&gt;
&lt;p&gt;以前不感冒，当然，现在也是，一如既往&lt;/p&gt;
&lt;p&gt;以上两本书，一本书是刚毕业那会部门老大推荐的，跳槽之后，新的老大也推了这本书，所以从书堆里翻出来，认认真真地看完了（很惊讶走了那么多地方书还能留着），后面一本是亚马逊kindle上捞到的。&lt;/p&gt;
&lt;p&gt;这两本，算是成功学，也不算，很多东西讲到了点上，有些道理，认同，也会去遵循&lt;/p&gt;
&lt;p&gt;值得一看，能从中能借鉴一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-qi-ge-xi-guan"&gt;高效能人士的七个习惯&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图1" src="/imgs/books/the-7-habits-of-highly-effective-people-concepts.jpg"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;习惯一：积极主动——个人愿景的原则
习惯二：以终为始——自我领导的原则
习惯三：要事第一——自我管理的原则
习惯四：双赢思维——人际领导的原则
习惯五: 知彼解己——移情沟通的原则
习惯六: 统合综效——创造性合作的原则
习惯七：不断更新——平衡的自我更新的原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xi-guan-yi-ji-ji-zhu-dong-ge-ren-yuan-jing-de-yuan-ze"&gt;习惯一：积极主动——个人愿景的原则&lt;/h4&gt;
&lt;p&gt;人性的本质是主动而非被动地——人类确实能主动努力以提升生命价值(主观能动性)&lt;/p&gt;
&lt;p&gt;积极主动，不仅指行事的态度，还意味着为人一定要对自己的人生负责&lt;/p&gt;
&lt;p&gt;积极主动的人专注于“影响圈”，专心做自己力所能及的事情，能量是积极的，是影响圈不断扩大&lt;/p&gt;
&lt;p&gt;影响圈的核心就是，作出承诺与信守诺言的能力&lt;/p&gt;
&lt;p&gt;其他习惯的基础！！！&lt;/p&gt;
&lt;h4 id="xi-guan-er-yi-zhong-wei-shi-zi-wo-ling-dao-de-yuan-ze"&gt;习惯二： 以终为始——自我领导的原则&lt;/h4&gt;
&lt;p&gt;以你的人生目标作为衡量一切的标准。由个人最重视的期许或价值观来决定一切&lt;/p&gt;
&lt;p&gt;在做任何事情之前，都需要认清方向——定目标&lt;/p&gt;
&lt;p&gt;你以什么为中心？你为谁而活？&lt;/p&gt;
&lt;p&gt;以原则为中心！！！！&lt;/p&gt;
&lt;p&gt;以永恒不变的原则作为生活重心，就能建立高效能的思维定势，也就能正确审视所有其他的生活中心。(一个人的思维定式能决定他的态度和行为)&lt;/p&gt;
&lt;p&gt;原因：主动的选择，没有受到环境和他人的影响；最有效的选择，且长期可预料；基于原则所作出的选择，能提高自身的价值。&lt;/p&gt;
&lt;p&gt;所以，撰写使命宣言并付诸实践(确定角色和目标)&lt;/p&gt;
&lt;p&gt;书写个人使命宣言 —— 即人生哲学或基本信念
（个人宪法，基于正确原则的个人使命宣言也同样是评价一切的标准）&lt;/p&gt;
&lt;h4 id="xi-guan-san-yao-shi-di-yi-zi-wo-guan-li-de-yuan-ze"&gt;习惯三：要事第一——自我管理的原则&lt;/h4&gt;
&lt;p&gt;把最重要的事情放在第一位，先做重要的事情&lt;/p&gt;
&lt;p&gt;矩阵： 重要/不重要  *  紧急/不紧急&lt;/p&gt;
&lt;p&gt;关注重要不紧急的事情&lt;/p&gt;
&lt;p&gt;重要不紧急的事情： 建立人际关系，撰写使命宣言，规划长期目标，防患于未然等等&lt;/p&gt;
&lt;p&gt;在必要时，勇于说“不”&lt;/p&gt;
&lt;p&gt;学会授权&lt;/p&gt;
&lt;h4 id="xi-guan-si-shuang-ying-si-wei-ren-ji-ling-dao-de-yuan-ze"&gt;习惯四：双赢思维——人际领导的原则&lt;/h4&gt;
&lt;p&gt;双赢 - 不断地在人际交往中寻求双边利益&lt;/p&gt;
&lt;p&gt;要明确意识到其重要性&lt;/p&gt;
&lt;p&gt;基础：信任&lt;/p&gt;
&lt;p&gt;双赢关系&lt;/p&gt;
&lt;p&gt;双赢的精髓就是信用，即情感账户&lt;/p&gt;
&lt;p&gt;双赢过程：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.要从对方的角度看问题，真正理解对方的想法
2.认清主要问题和顾虑（而非立场）
3.确定大家都能接受的结果
4.实现这种结果的各种可能途径
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xi-guan-wu-zhi-bi-jie-ji-yi-qing-gou-tong-de-yuan-ze"&gt;习惯五 知彼解己——移情沟通的原则&lt;/h4&gt;
&lt;p&gt;首先寻求去了解对方，然后再争取让对方了解自己。（进行有效人际交流的关键）&lt;/p&gt;
&lt;p&gt;你真的听懂了么？&lt;/p&gt;
&lt;p&gt;移情聆听&lt;/p&gt;
&lt;p&gt;以理解为目的的聆听，要求听者站在说话者的角度理解他们的思维模式和感受&lt;/p&gt;
&lt;p&gt;不仅要耳到，还要眼到，心到。用眼睛去观察，用心灵去体会&lt;/p&gt;
&lt;p&gt;有效的沟通：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.第一阶段，复述语句，至少能使人专心聆听
2.第二阶段，加入解释，纯用自己的词句表达，用左脑的逻辑思考去理解
3.第三阶段，深入个人的感觉，右脑发挥作用，开始体会对方的心情
4.即加以理解，又带有感情，左右脑并用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你真正爱一个人，那么花时间了解对方将有益于今后的坦诚相待&lt;/p&gt;
&lt;h4 id="xi-guan-liu-tong-he-zong-xiao-chuang-zao-xing-he-zuo-de-yuan-ze"&gt;习惯六 统合综效——创造性合作的原则&lt;/h4&gt;
&lt;p&gt;统合综效的基本心态是——如果一位具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会的奥妙，值得加以理解&lt;/p&gt;
&lt;p&gt;有分歧才有收获&lt;/p&gt;
&lt;p&gt;统合综效就是整体大于部分之和&lt;/p&gt;
&lt;p&gt;统合综效的精髓就是判断和尊重差异，取长补短&lt;/p&gt;
&lt;p&gt;所谓统合综效的沟通，是指敞开胸怀，接纳一切奇怪的想法，同时也贡献自己的浅见&lt;/p&gt;
&lt;p&gt;尊重差异，要尊重，不偏激&lt;/p&gt;
&lt;p&gt;即使处于不利的境地，也不应该放弃追求统合综效。&lt;/p&gt;
&lt;h4 id="xi-guan-qi-bu-duan-geng-xin-ping-heng-de-zi-wo-geng-xin-de-yuan-ze"&gt;习惯七：不断更新——平衡的自我更新的原则&lt;/h4&gt;
&lt;p&gt;拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠&lt;/p&gt;
&lt;p&gt;自我提升和完善的四个层面：身体，精神，智力，社会/情感&lt;/p&gt;
&lt;p&gt;不断更新，意味着要兼顾这四种要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身体层面：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;健康饮食、充足休息以及定期锻炼&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    耐力：源于有氧运动
    韧性：源于伸展运动
    力量：源于持久的肌肉运动
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;精神层面：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人的本质，核心，对价值体系的坚持，是生活中非常私人但是至关重要的领域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智力层面：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要靠教育，借此不断学习知识，魔力心智，开阔视野&lt;/p&gt;
&lt;p&gt;养成定期阅读优秀文学作品的习惯&lt;/p&gt;
&lt;p&gt;另一种有效的方式是写作，不断记录自己的想法，经历深刻见解和学习心得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社会、情感层面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在与他人的日常交往中完成，还需要必要的练习&lt;/p&gt;
&lt;p&gt;坚守原则，肯定自我，与人为善，相信人生不止输赢两种抉择&lt;/p&gt;
&lt;p&gt;平衡，要把握平衡！！！！！&lt;/p&gt;
&lt;p&gt;螺旋式上升，良性循环，学习-坚持-时间，并沿着螺旋式上升的路线不断提高实践的层次&lt;/p&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-zhi-xing-4yuan-ze_1"&gt;高效能人士的执行4原则&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图2" src="/imgs/books/the-4-disciplines-of-execution-concepts.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="yuan-ze-1ju-jiao-zui-zhong-yao-de-mu-biao-focus-on-the-wildly-important"&gt;原则1：聚焦最重要的目标(Focus on the Wildly Important)&lt;/h4&gt;
&lt;p&gt;将你最好的精力集中到一两个重要的目标（能够使你得到革命性结果的事情）&lt;/p&gt;
&lt;p&gt;日常事务（周而复始，要做但不是重点）-&amp;gt;    &amp;lt;- 新目标（聚集精力在此）&lt;/p&gt;
&lt;p&gt;好主意的数量总会超出执行能力的范围（learn to say no）&lt;/p&gt;
&lt;p&gt;（How）最重要的目标是能够给你的组织带来巨大变化的目标：如果其他方便都保持现状的话，改进哪一个会给我们带来巨大的收益？&lt;/p&gt;
&lt;p&gt;两类：来源于日常范围之内的（改进提升）来源于日常范围之外的（创新）&lt;/p&gt;
&lt;p&gt;注意：没有任何团队可以同时关注两个以上的最重要目标。你选择的局部战斗必须要为赢得整个战争服务。领导可以否决，但不能独断。所有最重要的目标必须要有完成的时限和标准（SMART原则）&lt;/p&gt;
&lt;h4 id="yuan-ze-2guan-zhu-yin-ling-xing-zhi-biao-act-on-the-lead-measures"&gt;原则2：关注引领性指标(Act on the Lead Measures)&lt;/h4&gt;
&lt;p&gt;引领性指标是指那些和达成最终目标关系最为紧密的事情&lt;/p&gt;
&lt;p&gt;滞后性指标（不能改变些什么，已经发生了，更容易获得，更直观）可以告诉你是否完成了目标，而引领性指标（预见性，可控性）可以教会你怎样做才能去完成目标&lt;/p&gt;
&lt;p&gt;引领性指标，指针对最终目标而制定的，可预见可控的阶段性目标（杠杆作用-&amp;gt;高效益）
显著特征：预见性，意味着一旦某个引领性指标发生变化，你就可以根据这个推断出滞后性指标之后会有什么变化。可控的，可以被你的团队所影响，你们可以靠自己的力量使促使引领性指标发生变化&lt;/p&gt;
&lt;p&gt;引领性指标的数据往往比滞后性指标数据更难以获取&lt;/p&gt;
&lt;h4 id="yuan-ze-3jian-chi-ji-li-xing-ji-fen-biao-keep-a-compelling-scoreboard"&gt;原则3：坚持激励性计分表(Keep a Compelling Scoreboard)&lt;/h4&gt;
&lt;p&gt;这是一条激励士气的原则&lt;/p&gt;
&lt;p&gt;确保每个人都能随时获知自己的成绩，这样他们才能知道自己领先还是落后（当面对成绩时，人们的表现将会发生变化）&lt;/p&gt;
&lt;p&gt;将引领性指标和滞后性指标-&amp;gt;看得见摸得着的量化指标&lt;/p&gt;
&lt;p&gt;一个伟大的团队，在任何时候都知道自己的进度是否成功&lt;/p&gt;
&lt;p&gt;建立激励性的选手型记分表：1.它是否简单？2.它是否显而易见3.是否能同时展示引领性指标和滞后性指标4.能否一眼从记分表上看出是否胜利&lt;/p&gt;
&lt;h4 id="yuan-ze-4jian-li-gui-lu-de-wen-ze-zhi-create-a-cadence-of-accountability"&gt;原则4：建立规律的问责制(Create a Cadence of Accountability)&lt;/h4&gt;
&lt;p&gt;建立有规律的责任机制，一个对过去表现和未来计划的有规律的周期性问责&lt;/p&gt;
&lt;p&gt;最重要目标会议：每周，20-30分钟之内，有一套完整流程并快速进行，为工作确定每一周的节奏，从而带动最重要目标的不断进展。&lt;/p&gt;
&lt;p&gt;两条原则：1.应该在每周的同一天的同一时间召开 2.永远不要把日常事务带到最重要目标会议中来&lt;/p&gt;
&lt;p&gt;组成部分：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.问责：汇报工作计划的完成情况
2.回顾记分表：寻找成功和不足
3.计划：清除障碍，作出新计划
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记——我编程，我快乐</title><link href="http://www.wklken.me/posts/2014/03/08/the-passionate-programmer.html" rel="alternate"></link><published>2014-03-08T00:00:00+08:00</published><updated>2014-03-08T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-08:/posts/2014/03/08/the-passionate-programmer.html</id><summary type="html">&lt;p&gt;这是读到的第四本和37signals有联系的书&lt;/p&gt;
&lt;p&gt;春节在回家的动车上读完的(飞机火车阅读效率加成&amp;gt;_&amp;lt;)，有些收获，今天翻出来重读了一次&lt;/p&gt;
&lt;p&gt;一系列观点和方法论，很多还是值得借鉴和思考的&lt;/p&gt;
&lt;p&gt;记录观点以及自己一两句话的总结整理&lt;/p&gt;
&lt;p&gt;这本书还是值得一读的，建议入手&lt;/p&gt;
&lt;p&gt;PS:年后买纸质书需三思再三思，开始多读电子书吧&lt;/p&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选好技术和领域: 通才和专家
2.跟上潮流
3.学会更好更高效地工作：目标，计划，沟通，协作，写作，执行力....很多（重点）
4.避免思维僵固
5.写博客
6.维护自己的开源项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/passionate-programmer.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;帮你成就更卓越、更有意义的人生，工作只是其中的一部分&lt;/p&gt;
&lt;p&gt;如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活&lt;/p&gt;
&lt;p&gt;制定自己的计划&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选择市场——关注的技术和商业领域
2.投资——知识和技术
3.执行 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;这是读到的第四本和37signals有联系的书&lt;/p&gt;
&lt;p&gt;春节在回家的动车上读完的(飞机火车阅读效率加成&amp;gt;_&amp;lt;)，有些收获，今天翻出来重读了一次&lt;/p&gt;
&lt;p&gt;一系列观点和方法论，很多还是值得借鉴和思考的&lt;/p&gt;
&lt;p&gt;记录观点以及自己一两句话的总结整理&lt;/p&gt;
&lt;p&gt;这本书还是值得一读的，建议入手&lt;/p&gt;
&lt;p&gt;PS:年后买纸质书需三思再三思，开始多读电子书吧&lt;/p&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选好技术和领域: 通才和专家
2.跟上潮流
3.学会更好更高效地工作：目标，计划，沟通，协作，写作，执行力....很多（重点）
4.避免思维僵固
5.写博客
6.维护自己的开源项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/passionate-programmer.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;帮你成就更卓越、更有意义的人生，工作只是其中的一部分&lt;/p&gt;
&lt;p&gt;如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活&lt;/p&gt;
&lt;p&gt;制定自己的计划&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选择市场——关注的技术和商业领域
2.投资——知识和技术
3.执行——更好地产出
4.市场
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-zhang-xuan-ze-shi-chang"&gt;第一章 选择市场&lt;/h3&gt;
&lt;h5 id="1-wen-ding-cheng-shou-de-ji-zhu-huan-shi-wei-cheng-shou-de-ji-zhu"&gt;1. 稳定成熟的技术还是未成熟的技术？&lt;/h5&gt;
&lt;p&gt;前瞻性，业界&lt;/p&gt;
&lt;p&gt;决定权在你自己手中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论做出哪种选择，最终的目的是，产生利润&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="2-gong-ying-he-xu-qiu"&gt;2. 供应和需求&lt;/h5&gt;
&lt;p&gt;供需关系导致的薪资变化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要再价格上竞争，你承受不起&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要在能力上与之抗争,更高层面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发现市场上的不平衡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="3-zhi-hui-bian-cheng-shi-bu-gou-de"&gt;3. 只会编程是不够的&lt;/h5&gt;
&lt;p&gt;必须要深入了解你所处的领域&lt;/p&gt;
&lt;p&gt;你的行业经历应该成为你的重要才能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细思考在哪个商业领域投入时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="4-zuo-tuan-dui-zhong-zui-chai-de"&gt;4. 做团队中最差的&lt;/h5&gt;
&lt;p&gt;和优秀的人一起工作&lt;/p&gt;
&lt;p&gt;与一个团队合作时间长了，会对自身的能力产生持久的影响&lt;/p&gt;
&lt;p&gt;你身边的人会对你产生很大的影响，明智地选择你的圈子&lt;/p&gt;
&lt;h5 id="5-zai-si-wei-shang-tou-zi"&gt;5. 在思维上投资&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;没人给过我机会....?要学会抓住机遇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="6-bu-yao-ting-cong-fu-mu"&gt;6. 不要听从父母&lt;/h5&gt;
&lt;p&gt;父母总不希望儿女去冒险&lt;/p&gt;
&lt;p&gt;在职业道路上，需要一些有目的性的冒险。别让恐惧征服了你&lt;/p&gt;
&lt;h5 id="7-zuo-yi-ming-tong-cai"&gt;7. 做一名通才&lt;/h5&gt;
&lt;p&gt;传说中的全栈？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通才很少，所以珍贵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IT职业分解&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 职业阶梯的各层
- 平台和操作系统
- 代码和数据
- 系统和应用
- 业务和IT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;学会适应以及胜任不同角色的价值所在&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的技术应该超越技术平台&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="8-cheng-wei-yi-ming-zhuan-jia"&gt;8. 成为一名专家&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;很多人认为专攻某种技术就简单地意味着不知道其他技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很显然，这是错误的&lt;/p&gt;
&lt;p&gt;能搞定工作中遇到80%可预见的问题，并且有足够的知识来应付另外还未出现的20%的问题&lt;/p&gt;
&lt;h5 id="9-qie-ji-gu-zhu-yi-zhi"&gt;9. 切忌孤注一掷&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;以特定技术厂商为中心的观点，缺乏远见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确如此，厂商悲催了，你承受不了代价&lt;/p&gt;
&lt;h5 id="10-re-ai-ta-bu-ran-jiu-chi-kai-ta"&gt;10. 热爱它，不然就离开它&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;工作，因为你无法停止工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="di-er-zhang-zai-chan-pin-shang-tou-zi_1"&gt;第二章 在产品上投资&lt;/h3&gt;
&lt;h5 id="11-xue-hui-diao-yu"&gt;11. 学会钓鱼&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;需要主动问，不要等着别人来告诉你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要自己主动学习，自学能力&lt;/p&gt;
&lt;h5 id="12-xue-xi-xing-ye-shi-ru-he-yun-zhuan-de"&gt;12. 学习行业是如何运转的&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;只有了解了一个行业后，你才能创造性地有所建树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;业务领域很重要&lt;/p&gt;
&lt;h5 id="13-xun-zhao-liang-shi"&gt;13. 寻找良师&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;可以依赖别人，但需确保这个人是靠得住的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;减少试错成本&lt;/p&gt;
&lt;h5 id="14-zuo-yi-ming-liang-shi"&gt;14. 做一名良师&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;想要弄明白自己是不是真的懂得某一知识，那就把它讲给其他人听&lt;/p&gt;
&lt;p&gt;做导师不会下岗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="15-lian-xi-lian-xi-zai-lian-xi"&gt;15. 练习、练习、再练习&lt;/h5&gt;
&lt;p&gt;需要刻意练习&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在极限处练习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="16-zuo-shi-de-fang-fa"&gt;16. 做事的方法&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;想要拥有自己的步骤，那就执行它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习，实践某些方法论，优化工作流&lt;/p&gt;
&lt;h5 id="17-zhan-zai-ju-ren-de-jian-bang-shang"&gt;17. 站在巨人的肩膀上&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;从现有的程序中得到领悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习其他程序猿是如何系统地解决某一特定问题的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用现有的程序反思自己的程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要有更开阔的眼界&lt;/p&gt;
&lt;h5 id="18-zai-gong-zuo-zhong-jiang-zi-ji-zi-dong-hua"&gt;18. 在工作中，将自己自动化&lt;/h5&gt;
&lt;p&gt;找出消耗你时间的东西，自动化之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-san-zhang-zhi-xing_1"&gt;第三章 执行&lt;/h3&gt;
&lt;h5 id="19-jiu-shi-xian-zai"&gt;19. 就是现在&lt;/h5&gt;
&lt;p&gt;流程问题？拖延症等？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就现在，我们能做些什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;帕金森定律： 工作会自动膨胀到占满所有可用的时间&lt;/p&gt;
&lt;p&gt;开始行动，不要总是安于现状，要做推动者(活血这正是我目前缺乏的)&lt;/p&gt;
&lt;h5 id="20-du-xin-zhu"&gt;20. 读心术&lt;/h5&gt;
&lt;p&gt;仔细观察，倾听，了解所需要做的，所能改善的(前提，你了解的信息时正确的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读心术用得好，人们就会信任你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="21-mei-ri-cheng-ji"&gt;21. 每日成绩&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;每天都有可汇报的成绩&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录目标，并记录下来&lt;/p&gt;
&lt;h5 id="22-bie-wang-liao-ni-zai-wei-shui-gong-zuo"&gt;22. 别忘了你在为谁工作&lt;/h5&gt;
&lt;p&gt;确保你的目标和工作与你公司的目标一致&lt;/p&gt;
&lt;p&gt;即使不愿意，但需要绝对的执行力&lt;/p&gt;
&lt;p&gt;在结构良好的环境中，经历的目标，就是整个团队的目标，解决了经历的问题，就是解决了整个团队的问题&lt;/p&gt;
&lt;p&gt;好的经理的职责应该是为团队设定优先级，确保团队具备完成工作的一切需要，保证团队保持干劲和工作效率，并出示团队最终顺利完成工作。&lt;/p&gt;
&lt;h5 id="23-an-fen-shou-ji"&gt;23. 安分守己&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;要有雄心，但不必路人皆知&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;专注于现在的工作&lt;/p&gt;
&lt;p&gt;做好当下正确的事情&lt;/p&gt;
&lt;h5 id="24-jin-tian-wo-neng-ba-gong-zuo-zuo-dao-duo-hao"&gt;24. 今天我能把工作做到多好？&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;你能为工作增添多少乐趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发挥创造力来应对那些平凡的工作&lt;/p&gt;
&lt;h5 id="25-ni-de-jie-zhi-duo-shao"&gt;25. 你的价值多少&lt;/h5&gt;
&lt;p&gt;了解公司在你身上的开销和你的产出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问自己"今天实现自己的价值了么"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="26-yi-tong-shui-zhong-de-e-luan-shi"&gt;26. 一桶水中的鹅卵石&lt;/h5&gt;
&lt;p&gt;如果你明天离开公司，对公司造成的影响与其他同事离开有没有区别？&lt;/p&gt;
&lt;p&gt;永远不要高枕无忧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小心，别让成功冲昏了头脑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会让自己不可替代，要建立一种友好的工作关系&lt;/p&gt;
&lt;p&gt;同时也要知道，每个人都不是不可替代的，清楚知道这一点，并努力工作&lt;/p&gt;
&lt;h5 id="27-ai-shang-wei-hu"&gt;27. 爱上维护&lt;/h5&gt;
&lt;p&gt;人们都喜欢创造&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;维护也可以成为自由和创造的沃土&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最小开支维持软件正常运行&lt;/p&gt;
&lt;p&gt;可以设计更可见的改进&lt;/p&gt;
&lt;p&gt;可以有机会和其他客户直接进行交流&lt;/p&gt;
&lt;p&gt;最讽刺的是，项目工作其实就是维护，只要项目团队写下来的第一行编码。&lt;/p&gt;
&lt;h5 id="28-8xiao-shi-ji-qing-ran-shao"&gt;28. 8小时激情燃烧&lt;/h5&gt;
&lt;p&gt;在工作上，更少的工作时间可以有更高的效率&lt;/p&gt;
&lt;p&gt;创造力和工作质量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做项目像是马拉松，而不是全速短跑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;减少工作时间，你的收获更多&lt;/p&gt;
&lt;h5 id="29-xue-xi-ru-he-shi-bai"&gt;29. 学习如何失败&lt;/h5&gt;
&lt;p&gt;带着防御性错失进行编程是很重要的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个错误的音调离正确的音调不过一步之遥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决计数、沟通或者项目管理中的错误&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 发现错误第一时间提出，不要企图隐瞒错误
- 接受批评
- 提供解决方法
- 寻求帮助
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;充满压力的时候是赢得忠诚的最好时机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="30-shuo-bu"&gt;30. 说"不"&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;为了避免失望而说“是”，就是在说谎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这不是个好习惯&lt;/p&gt;
&lt;p&gt;要勇于诚实&lt;/p&gt;
&lt;h5 id="31-bu-yao-kong-huang"&gt;31. 不要恐慌&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;英雄从不恐慌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恐慌会导致丧失判断力&lt;/p&gt;
&lt;p&gt;遇到问题，分析情境，获取意见，换角度思考问题&lt;/p&gt;
&lt;h5 id="32-shuo-chu-lai-xing-dong-zhan-shi"&gt;32. 说出来、行动、展示&lt;/h5&gt;
&lt;p&gt;承诺 - 做计划&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;状态报告可以帮助你推销自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做计划时要时刻谨记的是，出现在计划上的每一项工作必须是要与后续工作相关，要么被完成、推迟、去除或被替代&lt;/p&gt;
&lt;p&gt;碰到问题，做出计划来解决问题，而不是抱怨&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-si-zhang-tui-xiao-bu-jin-jin-shi-ying-he_1"&gt;第四章 推销,不仅仅是迎合&lt;/h3&gt;
&lt;p&gt;表面上看，宣传自己很简单&lt;/p&gt;
&lt;p&gt;你的目标有两个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 让别人知道你的存在
- 以及让他们知道，当他们碰到难题时，你是那个可以解决问题的人
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="33-bu-yao-hu-shi-gan-jue"&gt;33. 不要忽视感觉&lt;/h5&gt;
&lt;p&gt;如果你非常出色，但并没有人知道，那你真的优秀么？谁会在意？没人会在意(很残酷，但是是对的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绩效考核永远不会是客观的(很不幸，这句也是对的)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何地方对你的评价都是主观的，意味着对你做出的评价总是基于别人对你的感觉&lt;/p&gt;
&lt;h5 id="34-tan-xian-xiang-dao"&gt;34. 探险向导&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;客户害怕您&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让人们了解到你的沟通能力是非常重要的&lt;/p&gt;
&lt;h5 id="35-xue-hui-gou-tong-shan-yu-xie-zuo"&gt;35. 学会沟通，善与写作&lt;/h5&gt;
&lt;p&gt;文字表达能力非常重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你自己就是你需要解释的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="36-dao-chang"&gt;36. 到场&lt;/h5&gt;
&lt;p&gt;能够与上司和客户面对面地沟通是你的优势，不要浪费这个机会&lt;/p&gt;
&lt;p&gt;面对面沟通是必要的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解你的同事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="37-gua-dang-de-yu-yan"&gt;37. 适当的语言&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;请用行业术语推销你的成就&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="38-gai-bian-shi-jie"&gt;38. 改变世界&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;带着任务去上班，并确保别人知道你的任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你不知道自己要做的改变是什么，那你就没有在做任何改变&lt;/p&gt;
&lt;p&gt;如果你没有主动让自己获得承认，那你就还没有获得承认&lt;/p&gt;
&lt;h5 id="39-rang-ren-men-ting-dao-ni-de-sheng-yin"&gt;39. 让人们听到你的声音&lt;/h5&gt;
&lt;p&gt;暮光放的更远一些，不要把自己局限在某一特定公司中的程序员&lt;/p&gt;
&lt;p&gt;博客文章代码&lt;/p&gt;
&lt;h5 id="40-chuang-jian-zi-ji-de-shang-biao"&gt;40. 创建自己的商标&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;你的名字就是你的商标&lt;/p&gt;
&lt;p&gt;Google永远不会忘记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="41-fa-bu-ni-bian-xie-de-cheng-xu"&gt;41. 发布你编写的程序&lt;/h5&gt;
&lt;p&gt;开源&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人人都能使用Rails,但很少有人能开发出Rails&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="42-bian-wei-zhuo-yue-de-neng-li"&gt;42. 变为卓越的能力&lt;/h5&gt;
&lt;p&gt;卓越的意思是值得被关注&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;展示或者让它死亡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="43-jian-li-guan-xi"&gt;43. 建立关系&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;恐惧感是我们无法接近专业人士&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="di-wu-zhang-bao-chi-ji-zhu-ling-xian_1"&gt;第五章 保持技术领先&lt;/h3&gt;
&lt;h5 id="44-yi-jing-guo-shi-de-ji-zhu"&gt;44. 已经过时的技术&lt;/h5&gt;
&lt;p&gt;需要想想，哪些为何过时，哪些又不会？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你引以为傲的新技术已经过时了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间就是一切，学习之前要先动动脑子&lt;/p&gt;
&lt;p&gt;这就像是赌博，但是如果你不参加，就一定会输(....)&lt;/p&gt;
&lt;p&gt;向前看，清楚地知道你的技术发展方向&lt;/p&gt;
&lt;h5 id="45-ni-yi-jing-shi-qu-gong-zuo-liao"&gt;45. 你已经失去工作了&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;你不是你的工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何事情都是处于变化之中&lt;/p&gt;
&lt;p&gt;永远不要把自己当成一名程序员（记住这一点）&lt;/p&gt;
&lt;p&gt;不要给自己设限&lt;/p&gt;
&lt;h5 id="46-mei-you-zhong-dian-de-dao-lu"&gt;46. 没有终点的道路&lt;/h5&gt;
&lt;p&gt;职业生涯，最重要的部分不是晋升或者加薪，而是想这些发展方向努力工作的过程，或者，更重要的是，你抛开着一切忘我工作的过程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要关注结果，需要关注做事情的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（但是考核的时候，结果为导向?）&lt;/p&gt;
&lt;p&gt;都有个度的问题&lt;/p&gt;
&lt;h5 id="47-gei-zi-ji-yi-fen-lan-tu"&gt;47. 给自己一份蓝图&lt;/h5&gt;
&lt;p&gt;不要原地踏步&lt;/p&gt;
&lt;p&gt;个人产品路线蓝图是用来判断你是否在不断向前发展的依据&lt;/p&gt;
&lt;h5 id="48-yao-zhu-yi-guan-cha-shi-chang-bian-hua"&gt;48. 要注意观察市场变化&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;留意那些技术达人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;防止被淘汰哈&lt;/p&gt;
&lt;h5 id="49-jing-zi-li-de-pang-zi"&gt;49. 镜子里的胖子&lt;/h5&gt;
&lt;p&gt;自身很那去观察注意自己的职业发展&lt;/p&gt;
&lt;p&gt;找一个可信赖的第三方，是衡量进步的简单方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发员们，要自我反省&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;评价系统！&lt;/p&gt;
&lt;h5 id="50-nan-yin-du-zhuo-hou-xian-jing"&gt;50. 南印度捉猴陷阱&lt;/h5&gt;
&lt;p&gt;价值僵固：当你过于坚信某事的价值时，就会无法客观地来评判它&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;价值僵固是你脆弱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语言之争，编辑器之战等等&lt;/p&gt;
&lt;h5 id="51-bi-mian-pu-bu-xing-zhi-ye-ji-hua"&gt;51. 避免瀑布型职业计划&lt;/h5&gt;
&lt;p&gt;职业改变不仅是有可能的，并且是非常必要的&lt;/p&gt;
&lt;p&gt;从实践中学习，不断改变你的目标&lt;/p&gt;
&lt;h5 id="52-mei-tian-du-you-jin-bu"&gt;52. 每天都有进步&lt;/h5&gt;
&lt;p&gt;每一个改变之后，你可能无法看到整体发生明显的不同&lt;/p&gt;
&lt;p&gt;量变引起质变&lt;/p&gt;
&lt;p&gt;即使一点小进步，你也应该感到高兴&lt;/p&gt;
&lt;p&gt;人，总是不断在进步和成长的，多读些书，多学写一些东西&lt;/p&gt;
&lt;h5 id="53-du-li"&gt;53. 独立&lt;/h5&gt;
&lt;p&gt;独立不是件简单的事情，这把你所有的技术作为一个专业来测试&lt;/p&gt;
&lt;p&gt;把它当做是个人发展项目&lt;/p&gt;
&lt;p&gt;好奇，是一种优点&lt;/p&gt;</content><category term="books"></category></entry><entry><title>读书笔记——写给大家看的设计书</title><link href="http://www.wklken.me/posts/2014/03/02/the-non-designers-design-book.html" rel="alternate"></link><published>2014-03-02T00:00:00+08:00</published><updated>2014-03-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/the-non-designers-design-book.html</id><summary type="html">&lt;p&gt;&lt;img alt="cover" src="/imgs/books/design-book.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对设计，知之甚少，战5渣&lt;/p&gt;
&lt;p&gt;读到这本书，感觉蛮有收获的，起码会有一个基本的设计意识和概念，有些作用&lt;/p&gt;
&lt;p&gt;这本书主要围绕设计的四个基本原则展开说明，有详细的说明和对比案例&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="she-ji-yuan-ze"&gt;设计原则&lt;/h3&gt;
&lt;p&gt;得到优秀的设计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学习四大基本原则
2.认识到自己没有运用这些原则
3.应用基本原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1qin-mi-xing"&gt;1.亲密性&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;将相关项目组织在一起：移动这些项，使它们的物理位置互相靠近。
相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段

亲密性意味着存在关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，人们查看时的视觉感受，顺序(视线如何移动的，起点-路径-结束)、停留、重点。将有很近的亲密性的多个项目放一起，成为一个视觉单元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应当有关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;亲密性也同时意味着，对非亲密项进行隔离（利用空白、线、图等）,使孤立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;位置是否靠近可以体现出元素之间是否存在关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要对所有元素有一个分类组织的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲密性的根本目的是视线组织性(条理性)

条理，意味着更容易被阅读和记住
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cover" src="/imgs/books/design-book.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对设计，知之甚少，战5渣&lt;/p&gt;
&lt;p&gt;读到这本书，感觉蛮有收获的，起码会有一个基本的设计意识和概念，有些作用&lt;/p&gt;
&lt;p&gt;这本书主要围绕设计的四个基本原则展开说明，有详细的说明和对比案例&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="she-ji-yuan-ze"&gt;设计原则&lt;/h3&gt;
&lt;p&gt;得到优秀的设计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学习四大基本原则
2.认识到自己没有运用这些原则
3.应用基本原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1qin-mi-xing"&gt;1.亲密性&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;将相关项目组织在一起：移动这些项，使它们的物理位置互相靠近。
相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段

亲密性意味着存在关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，人们查看时的视觉感受，顺序(视线如何移动的，起点-路径-结束)、停留、重点。将有很近的亲密性的多个项目放一起，成为一个视觉单元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应当有关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;亲密性也同时意味着，对非亲密项进行隔离（利用空白、线、图等）,使孤立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;位置是否靠近可以体现出元素之间是否存在关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要对所有元素有一个分类组织的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲密性的根本目的是视线组织性(条理性)

条理，意味着更容易被阅读和记住
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不要仅仅因为有空白就把元素放在角落或者中间
避免一个页面上有太多孤立的元素
不要再元素之间留出相同大小的空白，除非各组同属于一个子集
不属于同一组的元素之间一定不要建立关系
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2dui-qi"&gt;2.对齐&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任何元素都不能在页面上随意安放，每一项都应当与页面上的某个内容存在某种视觉联系

对齐-更内聚的单元，虽然其物理位置可能是彼此分离的

建立一种看不见的关联

应该找到一条明确的对齐线，并用它来对齐(皆为线)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;左对齐和右对齐看起来外观更为清晰,效果更分明，而居中对齐不是，所以，尽量避免，多留意居中对齐的效果是否是你想要表达的。当然，慎用两端对齐&lt;/p&gt;
&lt;p&gt;勇敢一些，不要畏缩&lt;/p&gt;
&lt;p&gt;在得到更多培训之前，一定要坚持一个原则：页面上只是用一种文本对齐（所有文本都左对齐、右对齐或者居中）,避免混合使用多种对齐方式&lt;/p&gt;
&lt;p&gt;如果使用两种，需要懂得，聚聚项目之间的布局关系&lt;/p&gt;
&lt;p&gt;根本目的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;是页面统一而且有条理

统一性：页面上所有元素看上去统一、有联系而且彼此相关，需要在各个单独的元素之间存在某种视觉纽带
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要特别注意元素放在哪里。应当总能在页面上找出与之对齐的元素，尽管这两个对象的物理位置可能相距很远&lt;/p&gt;
&lt;h4 id="3zhong-fu"&gt;3.重复&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设计的某些方面需要在整个作品中重复

读者看到的任何方面都可以作为重复元素：字体，线，项目符号，颜色，设计要素，某种格式，空间关系

重复有助于组织信息:利于将设计中单独的部分统一起来，可以帮助读者浏览各个页面
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重复的最大好处是是各项看起来同属一组,虽然元素看起来都不完全相同.变换成一致的外观&lt;/p&gt;
&lt;p&gt;重复，将各个部分连在一起，从而同意并增强整个作品，否者这些部分只是彼此孤立的单元&lt;/p&gt;
&lt;p&gt;根本目的：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;统一，并增强视觉效果
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何实现&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;可以认为是保持一致性：需要把现有的一致性更向前推进一步
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;避免太多地重复一个元素，重复太多会让人讨厌.要注意对比的价值
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4dui-bi"&gt;4.对比&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果两个项不完全相同，就应当使之不同，而且应当是截然不同

要想实现有效地对比，对比就必须强烈！千万不要畏畏缩缩
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设计页面很少只是用某一种原则&lt;/p&gt;
&lt;p&gt;在页面上增加对比能吸引眼球，我们的眼睛喜欢看到对比的事物&lt;/p&gt;
&lt;p&gt;根本目的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;增强页面效果：更有意思，更好的可读性
有效于信息的组织
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何实现&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;最简单方法是实现字体对比，也可以利用线宽、颜色、大小、空间、元素之间间隔、材质等形成对比
重要的是：对比一定要强烈
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;避免的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不要犹豫，如果想形成对比，就加大力度
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提高视觉敏感度&lt;/p&gt;
&lt;p&gt;从好的设计中获得理念，寻找灵感&lt;/p&gt;
&lt;h4 id="5she-ji-guo-cheng"&gt;5.设计过程&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.从中心点开始
确定希望读者最新看什么。除非你已经决定要建立一个非常协调的设计，否则就应该创建一个有强烈对比的中心店

2.将信息分组
按逻辑进行你分组，确定这些组之间的关系。通过组之间靠近与否来显示这些关系
在页面上组织文本和图片时，要建立并维护明确的对齐
创建重复，或者找出可以重复的项，建立重复
除非你已经决定要建立一个非常协调的设计，否则就应该创建强烈的对比
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;书中还有关于颜色选择、字体设计的部分章节，需要可以自查&lt;/p&gt;
&lt;p&gt;总的来说，很好的一本书，推荐&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2014-03-02 于深圳&lt;/p&gt;</content><category term="books"></category></entry><entry><title>读书笔记——追随你的心，用思想改变世界</title><link href="http://www.wklken.me/posts/2014/01/19/follow-your-heart.html" rel="alternate"></link><published>2014-01-19T00:00:00+08:00</published><updated>2014-01-19T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-19:/posts/2014/01/19/follow-your-heart.html</id><summary type="html">&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录，可以反复读，即使读不懂，随着时间，阅历丰富，有些东西会逐渐懂得。&lt;/p&gt;
&lt;p&gt;第二章，斯坦福的演讲，看看不错, &lt;a href="http://v.163.com/special/opencourse/jobs.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后面的，大部分是发布会，以及采访，可以直接看视频，看文字没啥特别的感觉，感觉编辑纯粹是凑字数&lt;/p&gt;
&lt;p&gt;另外，还有一个遗失的访谈，蛮长的，一个多小时，但是不得不说，值得一看，&lt;a href="http://v.163.com/movie/2013/5/N/R/M8TBJIK7D_M8TBLIINR.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下，是一些感受&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我活着，就是为了改变世界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我只能说，帮主做到了。&lt;/p&gt;
&lt;p&gt;很多时候，我都在思考，为什么活着，这个是个哲学问题，又不是，很难想明白的&lt;/p&gt;
&lt;p&gt;每个工程师，都有改变世界的梦想&lt;/p&gt;
&lt;p&gt;这么多年，有些端倪了，活着，对我而言，更像是：“创造价值”，让我，以及我所能影响到的人，生活更加美好些&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;领袖和跟风者的区别就在于创新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有所感受，不敢妄加评论，起码我所接触到的中国互联网环境还太狭窄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人要么是天才，要么是笨蛋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些偏激，但是蛮有道理的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热忱是胜利的秘诀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对所做的事情，需要有热情&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;佛教中有一句话：初学者心态。拥有初学者心态是件了不起的事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每隔一段时间，都需要倒掉，空杯心态，去接触新的东西，去重新认识已有的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求知若渴，虚怀若谷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前者是现在必须努力达到的目标，后者，是一生需要学习和感悟的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人的时间有限，所以你不要为别人活着。不要让自己的内心被别人的意见左右，不要活在他人的观念里，更不要被平庸的教条限制。最重要的是，坚定地寻找和倾听自己心灵发出的声音，那才是你的真实想法。要相信你的直觉和心灵。除此之外，其他的一切都是次要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得，每个人都有必要自己读一读这段话，从小到大，我们的思想受到了太多束缚和限制，所以导致很多人，终其一生，都为了别人而活，活在别人的观念里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网创业不在于有多少人开始创办公司，而在于有多少人能坚持到底&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有经验，你就永远不可能知道经验的价值，或者永远不可能知道如何正确地保有经验所创造的财富&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经验很重要，见过多年只有一年经验的人，也见过一年有多年经验的人。刚毕业那会，对所谓的“经验”很不屑，两年多过来，有了蛮多认识的。经验，很重要，而且通过书本什么的很那学来的，实践出真知。经验，应该可以作为“聪明”和“智慧”的分界线吧。and，经验是需要积累的，不断持续的积累，有意识地积累。帮主也提到，过去的一切，点滴，即使再小，在未来的某个时刻，也会起到作用，所有的事情和经历，都是关联的。all connected!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为海盗吧，成为海盗比加入海军更有意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;海军的优势，或许是“纪律”，但是劣势，或许也是“纪律”，向往自由的人，成为“海盗”更为合适。我的征途是星辰大海&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你若想将未来的点联系在一起，那你就只能先将过去的点联系起来。你得相信你的未来和你的过去是联系着的。你必须要相信直觉、命运、生活等这些东西。这个方法从来没有让我失望过，它反而让我的生活发生了奇妙的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多事情，并非一蹴而就，或许在外人看来是，但是背后，都以一段很长的过去。我们的现在，就是未来的过去，未来想要变成什么得到什么，和现在是相关的。&lt;/p&gt;
&lt;p&gt;另外，我开始相信直觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的工作将会占据你的大部分时间，做你自己认为最了不起的工作时唯一让你真正满意的方法。而做好你最满意的工作的唯一方法就是热爱你所做的事情。因此，继续找你满意的工作，直到找到它，不要气馁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常赞同，在懵懂中度过了大学四年，花了接近两年，看是有点懂了。做自己喜欢的事情。决定并不难，难的是，如何真正知道自己喜欢什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记住一点，就是每个人都会死去。这是我遇到的最重要的决策工具，很多重大的人生选择都是在它的帮助下完成的。外部所有的骄傲、期望、对失败或尴尬的恐惧，在死亡面前，都会消失殆尽，只留下真正重要的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点感觉，但是还做不到，可能，还是自己太年轻了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热爱你所做的事是做伟大工作的最佳方法。如果你还没有找到你想要的工作，继续找。不要停下来。只要你全力以赴，你知道你一定会找到它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短，你总有一天会离开人世。一个人没有机会去做那么多事，所以每个人都应该极其优秀才行。因为这就是我们的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做选择的时候，多想想这个问题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2014-01-19&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="books"></category></entry><entry><title>读书笔记-程序员的思维训练</title><link href="http://www.wklken.me/posts/2014/01/05/pragmatic-thinking-and-learning.html" rel="alternate"></link><published>2014-01-05T00:00:00+08:00</published><updated>2014-01-05T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-05:/posts/2014/01/05/pragmatic-thinking-and-learning.html</id><summary type="html">&lt;p&gt;================&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;程序员的思维修炼——开发认知潜能的九堂课&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;不是教你学习如何写代码之类的，而是，如何使用大脑，培养习惯，训练自己的思维&lt;/p&gt;
&lt;p&gt;当然，不仅限于程序员，我觉得对大多数人都有适用性&lt;/p&gt;
&lt;p&gt;方法论，有点类似程序员的成功学的味道，选择性阅读和实践&lt;/p&gt;
&lt;p&gt;以下是摘录&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;诀窍汇总:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;诀窍一：始终关注情境
诀窍二：新手使用规则，专家使用直觉
诀窍三：知道你不知道什么
诀窍四：通过观察和模仿来学习
诀窍五：保持实践以维持专家水平
诀窍六：如果你需要创造力，直觉或者独创技能，避免使用形式方法
诀窍七：学习如何学习的技能
诀窍八：捕获所有的想法以从中获益更多
诀窍九：综合学习与分析学习并重
诀窍十：争取好的设计，它真的很有效
诀窍十一：重新连线大脑，坚信这一点并不断实践
诀窍十二：增加感官体验以促进大脑的使用
诀窍十三：R型开路，L型紧跟
诀窍十四：使用隐喻作为L型和R型相融之处
诀窍十五 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;================&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;程序员的思维修炼——开发认知潜能的九堂课&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;不是教你学习如何写代码之类的，而是，如何使用大脑，培养习惯，训练自己的思维&lt;/p&gt;
&lt;p&gt;当然，不仅限于程序员，我觉得对大多数人都有适用性&lt;/p&gt;
&lt;p&gt;方法论，有点类似程序员的成功学的味道，选择性阅读和实践&lt;/p&gt;
&lt;p&gt;以下是摘录&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;诀窍汇总:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;诀窍一：始终关注情境
诀窍二：新手使用规则，专家使用直觉
诀窍三：知道你不知道什么
诀窍四：通过观察和模仿来学习
诀窍五：保持实践以维持专家水平
诀窍六：如果你需要创造力，直觉或者独创技能，避免使用形式方法
诀窍七：学习如何学习的技能
诀窍八：捕获所有的想法以从中获益更多
诀窍九：综合学习与分析学习并重
诀窍十：争取好的设计，它真的很有效
诀窍十一：重新连线大脑，坚信这一点并不断实践
诀窍十二：增加感官体验以促进大脑的使用
诀窍十三：R型开路，L型紧跟
诀窍十四：使用隐喻作为L型和R型相融之处
诀窍十五：培养幽默感以建立更强大的隐喻
诀窍十六：离开键盘去解决难题
诀窍十七：改变解决问题的角度
诀窍十八：推迟下结论
诀窍十九：适应不确定性
诀窍二十：信任记录而不是记忆，每一次思维的输出都是一次输入
诀窍二十一：从多个角度看待问题
诀窍二十二：尊重不同人的不同性格
诀窍二十三：想高级动物一样行动，请做深呼吸，而不要张口嘶鸣
诀窍二十四：相信直觉，但是要验证
诀窍二十五：建立SMART任务实现你的目标
诀窍二十六：对主动学习的投资做好计划
诀窍二十七：发现你的最佳学习方式
诀窍二十八：组织学习小组学习和辅导
诀窍二十九：主动阅读
诀窍三十：同时用R型和L型做笔记
诀窍三十一：写文档的过程比文档本身更重要
诀窍三十二：观察、实践、教学
诀窍三十三：为了更好地学习，请更好地玩
诀窍三十四：从相似点中学习，从差异中忘却
诀窍三十五：在你的环境中安全地探索、创造和应用
诀窍三十六：观察，不做判断，然后行动
诀窍三十七：允许失败，你会走向成功
诀窍三十八：让大脑为成功形成惯例
诀窍三十九：学会集中注意力
诀窍四十：挤出思维时间
诀窍四十一：使用wiki来管理信息和知识
诀窍四十二：指定交流规则来管理干扰
诀窍四十三：少发送邮件，你就会少收到邮件
诀窍四十四：为邮件通信选择你自己的进度
诀窍四十五：屏蔽中断来保持注意力
诀窍四十六：使用多台显示器来避免情境切换
诀窍四十七：优化你的个人工作流以达到最大化情境
诀窍四十八：抓住方向盘，你不能自动驾驶
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-zhang-xu-lun"&gt;第一章 绪论&lt;/h3&gt;
&lt;p&gt;认知科学，神经学，学习和行为理论&lt;/p&gt;
&lt;p&gt;对大脑进行重新设计和重新连线——更高效的工作&lt;/p&gt;
&lt;p&gt;程序设计其实就是解决问题，需要发明，创造和灵感&lt;/p&gt;
&lt;p&gt;软件开发失败——我们自己的错误造成的，我们自身往往增加了程序设计的难度&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件是在头脑中创造的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最重要的两项技能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;沟通能力:简单，有效沟通的重要性
学习和思考能力: 学习能力，批判性的思考能力和创造力——完全取决于你自己
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个人都是不同的，尝试执行一些建议，在判断哪些对你有用&lt;/p&gt;
&lt;p&gt;随着不断成长和适应，人么需要改变自己的习惯和方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;切忌随波逐流&lt;/p&gt;
&lt;p&gt;一切都是互相关联的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有什么事物是孤立存在的，一切都是系统和更大的情境的一部分&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有些东西是基础的，各领域相通的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;瑜伽和冥想&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-er-zhang-cong-xin-shou-dao-zhuan-jia-de-li-cheng"&gt;第二章 从新手到专家的历程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;制造问题的思维方式无法用来解决问题 ——爱因斯坦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解释观察到的现象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;事件理论:可以被测量，验证或证明
构建理论：无形的抽象，无法被证明.通过它的用处来很亮的，无法判断准确与否
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新手和专家&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;专家——使工作看起来更轻松
通常很难把他们的行为恰如其分的解释清楚，如此熟练以至于已经变成无意识的。大量经验都是通过大脑而非语言、无意识区存储的，难以观察表述
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;清晰表述专业技能十分困难&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新手和专家的根本区别，是他们看待世界的方式不同，反应也不同——不只是知道更多或者获得了技术，而且在如何认识世界，解决问题和形成思维模型等方面体验到的根本区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;德雷福斯模型针对每项技能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;德雷福斯模型的5个阶段&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.新手：经验很少或者根本没有经验（通过实施这项技术促进了思维的改变）
        新手需要指令清单
        可以通过与情境无关的规则。但是，规则只能让你启程，不会让你走的更远
2.高级新手：能够多少拜托固定规则，可以独立尝试任务，但是仍难以解决问题
            高级新手想要快速获取信息，但是不追根究底
            能够根据过去经验，逐步在正确的情境里采纳建议，但是比较吃力——开始形成一些总体原则
            高级新手不需要全局思维
3.胜任者：建立问题域的概念模型，并有效地使用它们，可以独立地解决自己遇到的问题
          胜任者能够解决问题
          有主动性、足智多谋
          还没有足够的能力反思和自我纠正
4.精通者：需要全局思维，围绕这个技术，寻找并想了解更大的概念框架
          能够纠正以往不好的工作表现，会烦死以前是如何做的，并修改其做法，期望下一次表现得更好——自我改进
          会学习他人经验
          有足够的经验，知道下一步会发生什么
          可以有效地运用软件模式
          更像初级的专家，而不是高级的胜任者
5.专家：各个领域知识和信息的主要来源，总是不断地寻找更好的方法和方式去做事
        根据直觉做事，不需要理由
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;规则断送专家&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直觉是专家的工具，但公司往往轻视它，错误地认为，不科学或不可重复&lt;/p&gt;
&lt;p&gt;敏捷开发&lt;/p&gt;
&lt;p&gt;开发人员之间存在20：1-40：1的生产力差异&lt;/p&gt;
&lt;p&gt;企业的压力和所谓的公平，伤害了新手和专家&lt;/p&gt;
&lt;p&gt;新手到专家的变化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;从依赖规则想依赖直觉转变
观念变化，问题已不再是一个相关度等同的所有单元的集合体，而是一个完整的独特的整体，其中只有某些单元是相关的
从问题的旁观者转变为问题涉及的系统本身
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数人都是高级新手&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;专家 != 老师&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直觉和模式匹配能力超载了显性知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十年成就专家？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;大约十年的努力，需要辛勤工作
-需要一个明确定义的任务
-任务需要有适当的难度——有挑战性但可行
-任务环境可以提供大量反馈，以便于你采取行动
-提供重复犯错和纠正错误的机会

一旦你成为某个领域的专家，在别的领域成为专家就变得更容易
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没有实践就没有技能,而且没有什么东西可以替代实践&lt;/p&gt;
&lt;p&gt;模仿-吸收-创新&lt;/p&gt;
&lt;p&gt;在实践中保持技能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优胜者不会帮扶失败者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编程专家必须持续编程，并找到一个有意义有价值的职业生涯&lt;/p&gt;
&lt;p&gt;警惕工具陷阱——规则无法告诉你在某种情况下应该采取的最合适的行动,不要屈服于工具或者模型的虚假权威。没有什么可以替代思考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;警惕非情境化的客观性&lt;/p&gt;
&lt;p&gt;一种规格并非处处适用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="di-san-zhang-ren-shi-ni-de-da-nao"&gt;第三章 认识你的大脑&lt;/h3&gt;
&lt;p&gt;L模式，线性模式:细致工作并实现目标&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;语言能力
分析能力
符号能力
抽象能力
时间能力
推理能力
数字能力
逻辑能力
线性思维能力
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;R模式，富模式:直觉、问题解决和创造性,对于复杂的问题，不受直接意识控制。异步的，可以作为后台进程运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;非语言
非理性
综合
空间性
具体
直觉
分析
全面

能够提供直觉（专家必要）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随时记录想法(24*7)&lt;/p&gt;
&lt;p&gt;钢笔、记事本、索引卡片、PDA、语音设备、&lt;/p&gt;
&lt;p&gt;每个人都有好点子，点子价值并不高。拥有想法-跟踪想法-付诸行动-成功实现&lt;/p&gt;
&lt;p&gt;设计胜于功能——商品化意味着美学品味的竞争&lt;/p&gt;
&lt;p&gt;神经可塑性，意味着你能够学习的最大容量或者你可以获得的基恩能够数量不是固定的,没有上限，只要你相信这一点&lt;/p&gt;
&lt;p&gt;多编码，深思熟虑，专注实践&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-si-zhang-li-yong-you-nao"&gt;第四章 利用右脑&lt;/h3&gt;
&lt;p&gt;启动感官输入——使用多感官技术，通过增强触觉获得成功  积木等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用多感官反馈&lt;/p&gt;
&lt;p&gt;刺激你的大脑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用右脑画画——学习绘画&lt;/p&gt;
&lt;p&gt;激活右脑：听音乐、绘画、静思、慢跑、针线活、攀岩等等 建立L-R型互相转换&lt;/p&gt;
&lt;p&gt;需要用R型打头阵，然后转到L型去“生产”出来&lt;/p&gt;
&lt;p&gt;酒醉写作，酒醒修改——顺其自然，不要做完美主义者，如果想法过早的收到束缚，那么创造力就会被扼杀&lt;/p&gt;
&lt;p&gt;结对编程——一个L型，一个R型&lt;/p&gt;
&lt;p&gt;L型和R型在隐喻（创建类比的过程）相同&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;隐喻，一中激发创造力的强大技术
语言和意向共同的基础，实在左右半脑之间，在潜意识和意识之间游弋的途径
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;幽默能力都来自于发掘或者扩展常规之外的关系，真正突破思维界限&lt;/p&gt;
&lt;p&gt;收获R型线索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;你已经知道——一切输入都会被存储
许多想法无法用语言表述
利用图像流
利用自由日记
晨写技术——坚持天天写，限定页数，各类，不用审查，倾倒想法
自由写技术
利用散步——非目标驱动思维，把一切写到某个地方，不要试图思考，记住它，简单记住，让事实和问题自由地浸泡
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;收获模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码，一次编写，多次阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换种思路，角度——逆向思维，夸大想法，组合完全异类的想法&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-wu-zhang-diao-shi-ni-de-da-nao"&gt;第五章 调试你的大脑&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;直觉是伟大的，除了当它不伟大的时候&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四大问题 (读一读：批判性思维/决策与判断)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;认知偏见——如何被误导：思维定势，基本归因错误，自私的偏见，需要定论，认可上的偏见
时代影响
个性倾向
硬件故障
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;推迟下结论——通过明确的概率进行猜想&lt;/p&gt;
&lt;p&gt;记忆是靠不住的&lt;/p&gt;
&lt;p&gt;认清时代影响——当你强烈的支持或赞成一个观点时，你的论据是逻辑性的还是情感作怪？&lt;/p&gt;
&lt;p&gt;了解个性倾向(MBTI性格测评)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E/I 外向内向
S/N 感觉直觉
T/F 思考情感
J/P 判断知觉

INTJ 内向 - 直觉 - 思考 - 判断
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-liu-zhang-zhu-dong-xue-xi"&gt;第六章 主动学习&lt;/h3&gt;
&lt;p&gt;学习：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;学习不是强加于你的，而是需要你主动做的事情
仅仅掌握知识，而不去实践，没有用
随机的方法，没有目标和反馈，往往会导致随机的结果
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;目标任务使你更靠近目标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SMART目标&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;具体，可度量，可实现，相关的，时间可控的
相关的：兴趣，热情
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建立一个务实的投资计划&lt;/p&gt;
&lt;p&gt;把技术和才干看做一个只是投资组合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;制定具体计划
    现在（你的下一步行动）
    明年的目标
    五年后的目标
多样化
    不要把所有的鸡蛋放到同一个篮子里：更好地组合语言，环境，技术，行业和非技术领域（管理、公共演讲、人类学、音乐、艺术等）
主动投资
    需要客观地按天来评估你的计划，判断运作情况
定期投资
    成本平均法——养成一种习惯
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用你的原生学习模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;视觉型
听觉型
动觉型
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多元智力&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;身体-动觉：体育、舞蹈、DIY项目、木工、工艺、烹饪
语言：口头辩论，讲故事、阅读和写作
逻辑-数学：数学，数字，科学，分类学，几何
视觉-空间：图标图解，素描，绘画等
音乐：演奏，识别声音，节奏，模式，记忆标语，诗文
人际：感情共鸣、感觉、意图、他人的鼓励
自我认知：自我反省、了解内心世界、梦，和他人的关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一起工作一起学习&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;寻求建议
选择一项提议或者一个负责人
买书
安排午餐会议
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用增强的学习方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主动阅读和总结书面材料的更好方式
使用思维导图探索和发现模式和关系
以教代学
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SQ3R主动阅读&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;调查(Survey)：扫描每章目录和总结，得出总的看法
问题(Question)：记录所有问题
阅读(Read)：阅读全部内容
复述(Recite)：总结，笔记，用自己的话描述
回顾(Review)：重读，扩展笔记，与同事讨论
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用思维导图&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-qi-zhang-ji-lei-jing-yan"&gt;第七章 积累经验&lt;/h3&gt;
&lt;p&gt;积累经验是学习和成长的关键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通过构造来学习，而不是通过学习来构造
更好的利用反馈，让失败也变得有意义
让大脑提前为成功构建神经网络
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;真正的学习——对你有用的学习——来自实践和认知，而不是外部的教学活动或者死记硬背&lt;/p&gt;
&lt;p&gt;玩耍的意义Play&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;非目的性的探索，不仅仅接受信息，而且亲自探索和构建思维模型，犯错，吸取经验
引入一种新奇的感觉，乐趣
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用一种好玩的方式学习新资料或者解决问题，可以让这个过程变得更让人销售，也让学习变得容易&lt;/p&gt;
&lt;p&gt;利用现有的知识&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;未知量是什么-已知量是什么-条件是什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正确对待实践中的失败——失败是成功的关键，但不是任意的失败，需要管理失败&lt;/p&gt;
&lt;p&gt;一种高效有益的学习环境应该允许你安全地做三件事：探索、创造、应用&lt;/p&gt;
&lt;p&gt;建立探索环境&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;自由实验-能够原路返回-重现任意时刻的工作产品-能够证实进展
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;了解内在诀窍&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通过探索可以学得更好，而不是指令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;培养情境反馈&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;意识
不要把精力放在纠正一个个细节上，只需要具有意识
不要想着来纠正，但是在出错的时候要知道，然后再采取行动纠正
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压力扼杀认知——当面对时间压力时，人最没有创造力.面对压力时，我们要放松&lt;/p&gt;
&lt;p&gt;允许失败——允许失败会促进成功.一旦允许失败，你就不会失败&lt;/p&gt;
&lt;p&gt;想象超越感官——从大脑中获取经验&lt;/p&gt;
&lt;p&gt;利用大脑模拟成功&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-ba-zhang-kong-zhi-zhu-yi-li"&gt;第八章 控制注意力&lt;/h3&gt;
&lt;p&gt;信息过载，需要更好地管理你的思维&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;增强注意力
管理你的知识
优化当前情境
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;放松的，集中的注意力&lt;/p&gt;
&lt;p&gt;如何冥想&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;沉浸到一种宽松的思维中，可以意识到自己和你的情境，不用做出任何判断和回应
——内观冥想：意识到某些事情，但是没有额外的思考

寻找一个安静的地方，拜托干扰或中断
舒适，清醒地坐着，挺直背
闭上眼睛，将注意力集中在呼吸
注意呼吸节奏，吸气的长度和质量，吸气后屏气的短暂间歇，呼气的质量，呼气后屏气的短暂间歇。不要试图去改变它，只是感受
将思维集中于呼吸，不要说或，不要描述任何想法，不要和自己交谈
每当注意力游荡开，摒弃想法，注意力回到呼吸上
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内心的平静与强大&lt;/p&gt;
&lt;p&gt;通过分散注意力来集中注意力&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;你必须有意识地忘掉问题，让问题在思维中浸泡一会
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不做某些事&lt;/p&gt;
&lt;p&gt;管理你的知识：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;有一个外部的系统，有效地记录、管理等，可以快速获取
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优化当前情境&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;多任务处理将耗费你百分之二十至四十的生产力
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;避免分心&lt;/p&gt;
&lt;p&gt;有效地组织和处理任务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;仅扫描输入队列一次
顺序地处理每组工作
不要再头脑中保留清单
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;积极主动地去管理干扰&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;制定项目交流的规则
放缓电子邮件，做到异步定时而非实时: 设定邮件通知-加大检查邮件间隔 - 注意设定期望答复的速度和电子邮件数量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保持情境的一个办法是，提高进出情境的物力成本，有助于提醒你隐藏的精神成本&lt;/p&gt;
&lt;p&gt;启动可屏蔽中断&lt;/p&gt;
&lt;p&gt;保存情境堆栈：出栈时记录关键词等，方便回来&lt;/p&gt;
&lt;p&gt;保持任务注意力&lt;/p&gt;
&lt;p&gt;如何保持注意力：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学会安慰喋喋不休的L型思维
2.主动在前进中思考和增强思想，即使是不成熟的
3.明确情境切换的昂贵代价，尽可能地避免
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-jiu-zhang-chao-yue-zhuan-jia"&gt;第九章 超越专家&lt;/h3&gt;
&lt;p&gt;有效地改变&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;制定计划
“不作为”是敌人，而“错误”不是
给新习惯适应的时间
信念是真实的
采取步步为营的细小步骤
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;明天上午做什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不管你能做什么，或者期望自己能做什么，现在就开始做。勇敢可以给人智慧，力量和神奇。现在就开始做吧——歌德

一个笔记本，涂鸦，思维导图，几比几
开始写博客，为读过的书写书评
让散步成为你每天生活的一部分
再拿一个显示器,开始使用虚拟桌面
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;认识你自己，人士当前时刻，认识你所处的情境&lt;/p&gt;
&lt;p&gt;自由的代价是永远提高警惕。这也是意识的代价&lt;/p&gt;
&lt;hr/&gt;</content><category term="books"></category></entry><entry><title>读书笔记-程序员的职业素养</title><link href="http://www.wklken.me/posts/2013/11/24/the-clean-coder.html" rel="alternate"></link><published>2013-11-24T00:00:00+08:00</published><updated>2013-11-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-11-24:/posts/2013/11/24/the-clean-coder.html</id><summary type="html">&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xu"&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3 id="qian-yan"&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3 id="yin-yan"&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨, note about that)&lt;/p&gt;
&lt;h3 id="di-yi-zhang-zhuan-ye-zhu-yi"&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xu"&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3 id="qian-yan"&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3 id="yin-yan"&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨, note about that)&lt;/p&gt;
&lt;h3 id="di-yi-zhang-zhuan-ye-zhu-yi"&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务&lt;/p&gt;
&lt;p&gt;"专业主义"就意味着担当责任&lt;/p&gt;
&lt;p&gt;1.2 担当责任&lt;/p&gt;
&lt;p&gt;尽职尽责&lt;/p&gt;
&lt;p&gt;1.3 首先，不行损害之事&lt;/p&gt;
&lt;p&gt;1.3.1 不要破坏软件的功能&lt;/p&gt;
&lt;p&gt;要做得专业，就不能留下bug&lt;/p&gt;
&lt;p&gt;要对自己的不完美负责&lt;/p&gt;
&lt;p&gt;所谓专业人士，就是能对自己犯下的错误负责的人，哪怕那些错误实际上是在所难免的&lt;/p&gt;
&lt;p&gt;你有责任让失误率无限接近0&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.让QA找不出任何问题(每次 QA 找出问题时, 更糟糕的是用户找出问题时, 你都该震惊羞愧, 并决心以此为戒)
2.要确信代码正常运行:
  如何确保-测试，一遍遍测试.自动化测试
  要求: 你写的每一行代码都要测试，完毕
3.自动化QA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.3.2 不要破坏结构&lt;/p&gt;
&lt;p&gt;聪明人不会为了发布新功能而破坏结构&lt;/p&gt;
&lt;p&gt;所有软件项目的根本指导原则是，软件要易于修改&lt;/p&gt;
&lt;p&gt;如果你希望自己的软件灵活可变，那就应该时常修改它: 要证明易于修改，唯一办法就是做些实际的修改&lt;/p&gt;
&lt;p&gt;"无情重构"，每次读、修改代码，就要比原来更简洁&lt;/p&gt;
&lt;p&gt;不要害怕修改代码，（有一套完整测试，你就根本不会害怕）&lt;/p&gt;
&lt;p&gt;1.4 职业道德&lt;/p&gt;
&lt;p&gt;职业发展是你自己的事(雇主没有义务确保你在职场能够立于不败之地, 也没有义务培训你)&lt;/p&gt;
&lt;p&gt;将自己的职业发展寄希望于雇主的软件开发人员将会很惨&lt;/p&gt;
&lt;p&gt;"术业有专攻",需要投入时间去追求&lt;/p&gt;
&lt;p&gt;1.4.1 了解你的领域&lt;/p&gt;
&lt;p&gt;每个专业软件开发人员必须精通的事项(感觉有些可借鉴，并非全部)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.设计模式
2.设计原则。必须了解SOLID原则，而且要深刻理解组件设计原则
3.方法。必须了解XP/Scrum/精益/看板/瀑布/结构化分析/结构化设计
4.实践。TDD、OOP、结构化编程、持续集成和结对编程
5.工件、UML/DFD/结构图/Petri网络图/状态迁移图表、流程图和决策表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.4.2 坚持学习&lt;/p&gt;
&lt;p&gt;读书，看相关文章，关注博客和微博，参加技术大会，访问用户群，多参与读书与学习小组&lt;/p&gt;
&lt;p&gt;不懂就学，不要畏难&lt;/p&gt;
&lt;p&gt;1.4.2 练习&lt;/p&gt;
&lt;p&gt;练习，指的是在日常工作之余专门练习技能，以期自我提升&lt;/p&gt;
&lt;p&gt;解决一些简单的编程问题, 把它当做热身练习或静心过程&lt;/p&gt;
&lt;p&gt;1.4.4 合作&lt;/p&gt;
&lt;p&gt;学习的第二个最佳方法是与他人合作.&lt;/p&gt;
&lt;p&gt;1.4.5 辅导&lt;/p&gt;
&lt;p&gt;教学相长, 传道授业的同时, 导师也会从中受益&lt;/p&gt;
&lt;p&gt;1.4.6 了解业务领域&lt;/p&gt;
&lt;p&gt;对新领域有所了解, 未必需要成为该领域的专家, 但是仍然需要勤勉, 付出相当的努力来仍是业务领域.&lt;/p&gt;
&lt;p&gt;1.4.7 与雇主/客户保持一致&lt;/p&gt;
&lt;p&gt;必需弄明白雇主的真正问题, 站在其角度思考.&lt;/p&gt;
&lt;p&gt;1.4.8 谦逊&lt;/p&gt;
&lt;p&gt;专业人士都清楚自己的自负，不会故作谦逊&lt;/p&gt;
&lt;h3 id="di-er-zhang-shuo-bu"&gt;第二章 说不&lt;/h3&gt;
&lt;p&gt;专业人士敢于说明真相而不屈从于权势。专业人士有勇气对他们的经理说“不”&lt;/p&gt;
&lt;p&gt;2.1 对抗角色&lt;/p&gt;
&lt;p&gt;不靠谱的承诺是失职&lt;/p&gt;
&lt;p&gt;说不，然后找到双方都能接受的解决方案&lt;/p&gt;
&lt;p&gt;有时候需要提供必要细节, 解释说服, 但有时候提供太多细节会导致更多的微观管理&lt;/p&gt;
&lt;p&gt;2.2 高风险时刻&lt;/p&gt;
&lt;p&gt;最要说“不”的时那些高风险的关键时刻&lt;/p&gt;
&lt;p&gt;2.3 要有团队精神&lt;/p&gt;
&lt;p&gt;恪尽职守，关心队友，提供帮助，最大可能做到尽职尽责&lt;/p&gt;
&lt;p&gt;有团队精神的人不会总是说“是”&lt;/p&gt;
&lt;p&gt;2.3.1 试试看&lt;/p&gt;
&lt;p&gt;没有“试试看”这回事&lt;/p&gt;
&lt;p&gt;许诺“尝试”，就意味着你承认自己之前未尽全力，承认自己还有余力可施，意味着你只要再加把劲还是可以达成目标的&lt;/p&gt;
&lt;p&gt;本质上，承诺“尝试”是一种不诚实的表现&lt;/p&gt;
&lt;p&gt;2.3.2 消极对抗&lt;/p&gt;
&lt;p&gt;直接交流沟通，而不是消极对抗&lt;/p&gt;
&lt;p&gt;2.4 说“是”的成本&lt;/p&gt;
&lt;p&gt;运作良好的团队的经理和开发人员, 会相互协商, 直至达成共同认可的行动方案.&lt;/p&gt;
&lt;p&gt;有时候，获取正确决策的唯一途径，便是勇敢无畏的说出“不”字。&lt;/p&gt;
&lt;p&gt;2.5 如何写出好代码&lt;/p&gt;
&lt;p&gt;"客户所要的任何一项功能, 一旦写起来, 总是远比它开始时所说的药复杂许多...."&lt;/p&gt;
&lt;p&gt;专业人士常常成为英雄，但这样的荣誉并非他们所刻意追求的&lt;/p&gt;
&lt;p&gt;成为英雄与“解决问题”的诱惑诚然巨大，只是我们要明白，委屈专业原则以求全，并非问题的解决之道。舍弃这些原则，只会制造出更多的麻烦&lt;/p&gt;
&lt;p&gt;坚守专业原则(问题: 哪些是专业原则?)&lt;/p&gt;
&lt;p&gt;要学会说"不"&lt;/p&gt;
&lt;h3 id="di-san-zhang-shuo-shi"&gt;第三章 说“是”&lt;/h3&gt;
&lt;p&gt;3.1 承诺用语&lt;/p&gt;
&lt;p&gt;做出承诺，包含三个步骤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;口头上说自己将会去做
心里认真对待做出的承诺
真正付诸行动
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们承诺某事时，必须认证对待承诺&lt;/p&gt;
&lt;p&gt;3.1.1 识别“缺乏承诺”的征兆&lt;/p&gt;
&lt;p&gt;一类词语&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;需要、应当
希望、但愿
让我们（不是让我）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.1.2 真正的承诺听起来是怎样的&lt;/p&gt;
&lt;p&gt;你，你自己，始终能掌控某些事情，也就是说，总有些事是你可以承诺做到的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我将在....之前...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你对自己将会做某件事做了清晰的事实陈述，而且明确了完成期限&lt;/p&gt;
&lt;p&gt;之所以没成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.是因为我寄希望于某某去做这件事
你只能承诺自己能完全掌控的事
最终目标依赖与他人，那么就应该采取些具体行动，接近最终目标

2.是因为我不大确信是否真能完成得了
即使目标无法完成，你仍能全力前进，离目标更近些3

3.是因为有些时候我真的无能为力
如果你无法兑现承诺，最重要的就是，尽早向你的承诺对象发出预警，越快越好，越早越好
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.2  学习如何说“是”&lt;/p&gt;
&lt;p&gt;3.2.1 “试试”的另一面&lt;/p&gt;
&lt;p&gt;试试尽力xxxx&lt;/p&gt;
&lt;p&gt;3.2.2 坚守原则&lt;/p&gt;
&lt;p&gt;如果是专业人员，就不会放弃底线。&lt;/p&gt;
&lt;p&gt;写测试/重构/回归....打破这些纪律和原则, 必然会拖慢进度&lt;/p&gt;
&lt;p&gt;专业人士对自己的能力极限了如指掌, 他们十分清楚自己还能保持效率加班多长时间, 也非常明白要付出的代价.&lt;/p&gt;
&lt;h3 id="di-si-zhang-bian-ma"&gt;第四章 编码&lt;/h3&gt;
&lt;p&gt;具备"出错感知力", 说明你已经能够非常迅速地获得反馈, 能够更为快速地从错误中学习.&lt;/p&gt;
&lt;p&gt;要精熟掌握每项技艺, 关键都是要具备"信心"和"出错感知"能力&lt;/p&gt;
&lt;p&gt;4.1 做好准备&lt;/p&gt;
&lt;p&gt;编码是一项智力活动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.代码必须能够正常工作
2.代码必须能够帮你解决客户提出的问题
3.代码必须能和现有系统结合得天衣无缝
4.其他程序员必须能读懂你的代码
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果感到疲劳或者心烦意乱, 千万不要写代码. 要找到一种方法来消除干扰, 让心绪平静下来.&lt;/p&gt;
&lt;p&gt;4.1.1 凌晨3点写出的代码&lt;/p&gt;
&lt;p&gt;疲劳的时候，千万不要写代码&lt;/p&gt;
&lt;p&gt;要确保自己已经将睡眠、健康和生活方式调整到最佳状况，这样才能在每天的8个小时里全力以赴&lt;/p&gt;
&lt;p&gt;4.1.2 焦虑时写下的代码&lt;/p&gt;
&lt;p&gt;专业开发人员善于合理分配个人时间，以确保工作时间段中尽可能富有成效。&lt;/p&gt;
&lt;p&gt;在家中时，应该专门安排时间解决焦虑，这样就不会把焦虑情绪带到办公室里&lt;/p&gt;
&lt;p&gt;4.2 流态区&lt;/p&gt;
&lt;p&gt;意识高度专注，但思维视野收拢到狭窄的状态&lt;/p&gt;
&lt;p&gt;避免进入流态区！并非真的极为高效，也绝非毫无错误&lt;/p&gt;
&lt;p&gt;流态区写的代码可能会快些，但是后面你将不得不更多的回头重新审视这些代码&lt;/p&gt;
&lt;p&gt;切换思维、结对编程等&lt;/p&gt;
&lt;p&gt;ps: 为何我反而喜欢这种流态&lt;/p&gt;
&lt;p&gt;4.2.1 音乐&lt;/p&gt;
&lt;p&gt;对不同人，音乐帮助不一样，不一定有助于编码&lt;/p&gt;
&lt;p&gt;4.2.2 中断&lt;/p&gt;
&lt;p&gt;礼貌地回应中断&lt;/p&gt;
&lt;p&gt;当然，要想办法减少中断&lt;/p&gt;
&lt;p&gt;4.2.3 阻塞&lt;/p&gt;
&lt;p&gt;不要干坐，找一些其他事情干&lt;/p&gt;
&lt;p&gt;或者，结对编程&lt;/p&gt;
&lt;p&gt;另一种方法：创造性输出依赖于创造性输入，增加自己知识体系的广度&lt;/p&gt;
&lt;p&gt;4.4 调试&lt;/p&gt;
&lt;p&gt;TDD?&lt;/p&gt;
&lt;p&gt;衡量你是否是一个专业人士的重要方面，能否将调试时间尽量降到最低!&lt;/p&gt;
&lt;p&gt;绝对的零调试时间是一个理想化的目标, 无法达到, 但要将之作为努力方向&lt;/p&gt;
&lt;p&gt;4.5 保持节奏&lt;/p&gt;
&lt;p&gt;软件开发是一场马拉松, 而不是短跑冲刺&lt;/p&gt;
&lt;p&gt;4.5.1 知道何时应该离开一会&lt;/p&gt;
&lt;p&gt;阻塞，疲倦等，让自己保持好节奏&lt;/p&gt;
&lt;p&gt;当碰到困难而受阻时, 当你感到疲倦时, 就离开一会儿, 让富有创造力的潜意识接管问题.&lt;/p&gt;
&lt;p&gt;4.6 进度延迟&lt;/p&gt;
&lt;p&gt;管理延迟的秘诀, 便是早期检测和保持透明.&lt;/p&gt;
&lt;p&gt;三个考虑到多种因素的期限：乐观预估，标称预估，悲观预估&lt;/p&gt;
&lt;p&gt;尽量严守这三个时间点.&lt;/p&gt;
&lt;p&gt;4.6.1 期望&lt;/p&gt;
&lt;p&gt;调整和确认期望&lt;/p&gt;
&lt;p&gt;除非另有后背元, 否则不要轻易松口退步, 不要让其他任何人对此抱有期望.&lt;/p&gt;
&lt;p&gt;(自身承诺, 个人信誉)&lt;/p&gt;
&lt;p&gt;4.6.2 盲目冲刺&lt;/p&gt;
&lt;p&gt;坚持维持你的估算&lt;/p&gt;
&lt;p&gt;不要经受不住诱惑盲目冲刺&lt;/p&gt;
&lt;p&gt;不要让其他人抱有不实际的期望.&lt;/p&gt;
&lt;p&gt;4.6.3 加班加点&lt;/p&gt;
&lt;p&gt;不应该采用额外加班加点工作的方案，除非以下三个条件都能满足：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.你个人能挤出时间
2.短期加班，最多加班两周
3.你的老板要有后备预案，以防止万一加班措施失败了(最为关键)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.6.4 交付失误&lt;/p&gt;
&lt;p&gt;最糟糕：明知道没有完成任务却宣称已经完成&lt;/p&gt;
&lt;p&gt;4.6.5 定义完成&lt;/p&gt;
&lt;p&gt;创建一个确切定义的“完成”标准&lt;/p&gt;
&lt;p&gt;4.7 帮助&lt;/p&gt;
&lt;p&gt;4.7.1 帮助他人&lt;/p&gt;
&lt;p&gt;清楚状态，腾出时间&lt;/p&gt;
&lt;p&gt;作为专业人士，要以能够随时帮助别人为荣&lt;/p&gt;
&lt;p&gt;4.7.2 接受他人的帮助&lt;/p&gt;
&lt;p&gt;要以乐于接受别人的帮助为荣&lt;/p&gt;
&lt;p&gt;同时要学会如何请求帮助&lt;/p&gt;
&lt;p&gt;4.7.3 辅导&lt;/p&gt;
&lt;h3 id="di-wu-zhang-ce-shi-qu-dong-kai-fa"&gt;第五章 测试驱动开发&lt;/h3&gt;
&lt;p&gt;TDD,测试驱动开发，先写测试的编程&lt;/p&gt;
&lt;p&gt;5.1 此事已有定论&lt;/p&gt;
&lt;p&gt;TDD绝不仅仅是一种用于缩短编码周期的简单技巧&lt;/p&gt;
&lt;p&gt;此事已有定论：TDD是确切可行，并且，每个开发者都要适应和掌握TDD&lt;/p&gt;
&lt;p&gt;5.2 TDD的三项法则(似乎有些过了)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.在编写好失败单元测试之前，不要编写任何产品代码
2.只要有一个单元测试失败了，就不要再写测试代码；无法通过编译也是一种失败情况
3.产品代码恰好能够让当前失败的单元测试成功通过即可，不要多写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.3 TDD的优势&lt;/p&gt;
&lt;p&gt;5.3.1 确定性&lt;/p&gt;
&lt;p&gt;代码有任何修改，都必须运行手头有的全部测试&lt;/p&gt;
&lt;p&gt;确定状态&lt;/p&gt;
&lt;p&gt;5.3.2 缺陷注入率&lt;/p&gt;
&lt;p&gt;TDD能够显著降低缺陷&lt;/p&gt;
&lt;p&gt;5.3.3 勇气&lt;/p&gt;
&lt;p&gt;拥有一套值得信赖的测试，便可完全打消对修改代码的全部恐惧。&lt;/p&gt;
&lt;p&gt;放手整理，代码变得更具有可塑性，可以安全地将之雕琢为简单而满意的结构&lt;/p&gt;
&lt;p&gt;5.3.4 文档&lt;/p&gt;
&lt;p&gt;单元测试即文档&lt;/p&gt;
&lt;p&gt;5.3.5 设计&lt;/p&gt;
&lt;p&gt;测试先行，会迫使你去考虑什么是好的设计&lt;/p&gt;
&lt;p&gt;事后测试只是一种防守，而先行测试是一种进攻&lt;/p&gt;
&lt;p&gt;5.3.6 专业人士的选择&lt;/p&gt;
&lt;p&gt;TDD是专业人士的选择&lt;/p&gt;
&lt;p&gt;它是一项能够提升代码确定性, 给程序员孤立, 降低代码缺陷率, 优化文档和设计的原则.&lt;/p&gt;
&lt;p&gt;5.4 TDD的局限&lt;/p&gt;
&lt;p&gt;TDD并非万能&lt;/p&gt;
&lt;p&gt;某些场合显得不切实际或不合适&lt;/p&gt;
&lt;h3 id="di-liu-zhang-lian-xi"&gt;第六章 练习&lt;/h3&gt;
&lt;p&gt;专业人士都需要借助专门的训练提升自己的技能&lt;/p&gt;
&lt;p&gt;6.1 引子&lt;/p&gt;
&lt;p&gt;6.1.1 10的22次方&lt;/p&gt;
&lt;p&gt;现在我们有更好的工具，更好的语言，但是，语句的本质并没有随时间而改变&lt;/p&gt;
&lt;p&gt;6.1.2 转变&lt;/p&gt;
&lt;p&gt;工作方式已经截然不同&lt;/p&gt;
&lt;p&gt;任何事情，要做得快，都离不开练习&lt;/p&gt;
&lt;p&gt;无论搏斗还是编程, 速度都来源于练习.&lt;/p&gt;
&lt;p&gt;6.2 编程柔道场&lt;/p&gt;
&lt;p&gt;需要找一些东西，来做实际的练习&lt;/p&gt;
&lt;p&gt;6.3 自身经验的扩展&lt;/p&gt;
&lt;p&gt;会受限，即所解决问题的种类比较单一&lt;/p&gt;
&lt;p&gt;所以，要自己扩展&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.开源，提升技能的最好方式
2.自己规划，不要局限在公司的语言和平台
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.4 结论&lt;/p&gt;
&lt;p&gt;无论如何，专业人士都需要练习&lt;/p&gt;
&lt;p&gt;保持自己的技能不落伍是自己的责任, 而不是雇主的责任&lt;/p&gt;
&lt;p&gt;联系的时候你是赚不到钱的, 但是联系之后, 你会获得回报, 而且是丰厚的回报.&lt;/p&gt;
&lt;h3 id="di-qi-zhang-yan-shou-ce-shi"&gt;第七章 验收测试&lt;/h3&gt;
&lt;p&gt;专业开发人员既要做好开发, 也要做好沟通.&lt;/p&gt;
&lt;p&gt;7.1 需求的沟通&lt;/p&gt;
&lt;p&gt;7.1.1 过早精细化&lt;/p&gt;
&lt;p&gt;陷阱：过早精细化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不确定原则
需求完成得越精细，就越容易被忽视, 系统因此也谈不上完工
观察者效应/不确定原则：每次你想业务方提供一个功能，他们获取比之前更多的信息，反过来影响他们对整个系统的看法
2.预估焦虑
所谓的预估，预估整个系统，对需求进行精确评估
其实：即便拥有全面准确的信息，评估通常也会存在很大的变数
     不确定原则，需求是一定会变化的，追求的那种精确是徒劳的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.1.2 迟来的模糊性&lt;/p&gt;
&lt;p&gt;推迟过早精细化的另一个问题，迟来的模糊性&lt;/p&gt;
&lt;p&gt;需求的模糊，带来分歧或争论&lt;/p&gt;
&lt;p&gt;寻找各方都同意的关于需求的表述, 而不是去解决争端&lt;/p&gt;
&lt;p&gt;7.2 验收测试&lt;/p&gt;
&lt;p&gt;业务方与开发方合作编写的测试，其目的在于确定需求已经完成&lt;/p&gt;
&lt;p&gt;7.2.1 “完成”的定义&lt;/p&gt;
&lt;p&gt;完成，就是完成&lt;/p&gt;
&lt;p&gt;完成意味着，所有代码都写完了，所有测试都通过了，QA和需求方已经认可。这，才是完成&lt;/p&gt;
&lt;p&gt;7.2.2 沟通&lt;/p&gt;
&lt;p&gt;验收测试的目的是沟通，澄清，精确化&lt;/p&gt;
&lt;p&gt;7.2.3 自动化&lt;/p&gt;
&lt;p&gt;手工测试成本太高，相比手动测试，自动化测试的成本非常低&lt;/p&gt;
&lt;p&gt;7.2.4 额外工作&lt;/p&gt;
&lt;p&gt;不要把测试看做额外工作，而应当看成节省时间和金钱的办法&lt;/p&gt;
&lt;p&gt;7.2.5 验收测试什么时候写，由谁来写&lt;/p&gt;
&lt;p&gt;理想状态下：业务方和QA协作编写，程序员检查是否有矛盾和冲突&lt;/p&gt;
&lt;p&gt;只需要确保测试者和开发者不是同一人&lt;/p&gt;
&lt;p&gt;7.2.6 开发人员的角色&lt;/p&gt;
&lt;p&gt;开发人员有责任把验收测试与系统联系起来，然后让这些测试通过&lt;/p&gt;
&lt;p&gt;7.2.7 测试的协商与被动推进&lt;/p&gt;
&lt;p&gt;身为专业的开发人员，与编写测试的人协商并改进测试是你的职责，绝不能被动接受测试&lt;/p&gt;
&lt;p&gt;请记住, 身为专业开发人员, 你的职责是协助团队开发出最棒的软件. 也就是说, 每个人都需要关心错误和疏忽, 并协力改正.&lt;/p&gt;
&lt;p&gt;7.2.8 验收测试和单元测试&lt;/p&gt;
&lt;p&gt;单元测试是程序员写给程序员的&lt;/p&gt;
&lt;p&gt;验收测试是业务方写给业务方的&lt;/p&gt;
&lt;p&gt;7.2.9 图形界面及其他复杂因素&lt;/p&gt;
&lt;p&gt;恰当地测试&lt;/p&gt;
&lt;p&gt;尽可能减少GUI测试&lt;/p&gt;
&lt;p&gt;7.2.10 持续集成&lt;/p&gt;
&lt;p&gt;保持持续集成系统的时刻运行&lt;/p&gt;
&lt;p&gt;7.3 结论&lt;/p&gt;
&lt;p&gt;要解决开发方和业务方沟通问题，有效的办法就是，编写自动化的验收测试&lt;/p&gt;
&lt;h3 id="di-ba-zhang-ce-shi-ce-lue"&gt;第八章 测试策略&lt;/h3&gt;
&lt;p&gt;每个专业的开发团队都需要一套好的测试策略&lt;/p&gt;
&lt;p&gt;8.1 QA应该找不到任何错误&lt;/p&gt;
&lt;p&gt;QA在团队中扮演需求规约定义者和特性描述者&lt;/p&gt;
&lt;p&gt;8.2 自动化测试金字塔&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5%   人工探索式测试
10%  系统测试
20%  集成测试
50%  组件测试
100% 单元测试
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.2.1 单元测试&lt;/p&gt;
&lt;p&gt;在最低层次上定义系统&lt;/p&gt;
&lt;p&gt;单元测试是可行的&lt;/p&gt;
&lt;p&gt;单元测试可以做到90%以上的覆盖率&lt;/p&gt;
&lt;p&gt;开发人员&lt;/p&gt;
&lt;p&gt;8.2.2 组件测试&lt;/p&gt;
&lt;p&gt;验收测试的一种，针对系统的各个组件编写的&lt;/p&gt;
&lt;p&gt;QA和业务人员&lt;/p&gt;
&lt;p&gt;8.2.3 集成测试&lt;/p&gt;
&lt;p&gt;只能对那些组件很多的较大型系统才有意义&lt;/p&gt;
&lt;p&gt;测试组件装配到一起是否协调,是装配测试&lt;/p&gt;
&lt;p&gt;系统架构师或者主设计师&lt;/p&gt;
&lt;p&gt;8.2.4 系统测试&lt;/p&gt;
&lt;p&gt;针对真个击沉完毕的系统来运行的自动化测试,是最终的集成测试&lt;/p&gt;
&lt;p&gt;测试系统是否正确组装完毕，以及系统各个组件之间是否能正常交互&lt;/p&gt;
&lt;p&gt;系统架构师和技术负责人来编写.&lt;/p&gt;
&lt;p&gt;8.2.5 人工探索性测试&lt;/p&gt;
&lt;p&gt;人工，对系统进行深入研究和探索&lt;/p&gt;
&lt;p&gt;8.3 结论&lt;/p&gt;
&lt;p&gt;开发团队要和QA紧密配合，创建有单元测试，组件测试，集成测试，系统测试和探索式测试构成的测试体系&lt;/p&gt;
&lt;h3 id="di-jiu-zhang-shi-jian-guan-li"&gt;第九章 时间管理&lt;/h3&gt;
&lt;p&gt;9.1 会议&lt;/p&gt;
&lt;p&gt;关于会议，有两条真理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.会议是必须的
2.会议浪费了大量的时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;专业开发人员同样清楚会议额的高昂成本。所以，如果会议没有现实且显著的成效，他们会主动拒绝&lt;/p&gt;
&lt;p&gt;9.1.1 拒绝&lt;/p&gt;
&lt;p&gt;邀请你参加会议的人并不负责管理你的时间，为时间负责的人只有你&lt;/p&gt;
&lt;p&gt;理智地使用时间，谨慎选择，应当参加哪些会议，礼貌拒绝哪些会议&lt;/p&gt;
&lt;p&gt;领导的最重要责任之一, 就是帮你从某些会议脱身. 好的领导一定会主动维护你拒绝出席的决定, 因为她和你一样关心你的时间.&lt;/p&gt;
&lt;p&gt;9.1.2 离席&lt;/p&gt;
&lt;p&gt;会议并不总按计划进行的&lt;/p&gt;
&lt;p&gt;如果会议然人厌烦，就离席(想个办法礼貌地退出来)&lt;/p&gt;
&lt;p&gt;9.1.3 确定议程与目标&lt;/p&gt;
&lt;p&gt;会议应当有清晰的议程，确定每个议题所花的时间，以及明确的目标&lt;/p&gt;
&lt;p&gt;9.1.4 立会&lt;/p&gt;
&lt;p&gt;站立会议&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我昨天做了什么
2.今天打算做什么
3.我遇到了什么问题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个人发言不超过1分钟&lt;/p&gt;
&lt;p&gt;9.1.5 迭代计划会议&lt;/p&gt;
&lt;p&gt;会议的节奏应该很快，简明扼要地讨论各个候选人物，然后决定是选择还是放弃&lt;/p&gt;
&lt;p&gt;会议是每轮迭代时间的5%以内&lt;/p&gt;
&lt;p&gt;9.1.6 迭代回顾和DEMO展示&lt;/p&gt;
&lt;p&gt;在迭代的末尾召开&lt;/p&gt;
&lt;p&gt;9.1.7 争论/反对&lt;/p&gt;
&lt;p&gt;凡事不能再5分钟内解决的争论，都不能靠辩说解决&lt;/p&gt;
&lt;p&gt;用数据说话&lt;/p&gt;
&lt;p&gt;如果你同意了, 就必须拿出行动来.&lt;/p&gt;
&lt;p&gt;9.2 注意力点数&lt;/p&gt;
&lt;p&gt;编程是需要持续投入精力和注意力的智力活动&lt;/p&gt;
&lt;p&gt;注意力点数会随时间流逝而减少.&lt;/p&gt;
&lt;p&gt;9.2.1 睡眠&lt;/p&gt;
&lt;p&gt;保证睡眠，好好睡上7小时&lt;/p&gt;
&lt;p&gt;9.2.2 咖啡因&lt;/p&gt;
&lt;p&gt;适度&lt;/p&gt;
&lt;p&gt;9.2.3 恢复&lt;/p&gt;
&lt;p&gt;在注意力不集中的时候，无法控制注意力，可以想办法花30到60分钟恢复&lt;/p&gt;
&lt;p&gt;9.2.4 肌肉注意力&lt;/p&gt;
&lt;p&gt;肌肉注意力有助于改善心智注意力&lt;/p&gt;
&lt;p&gt;定期训练肌肉注意力&lt;/p&gt;
&lt;p&gt;9.2.5 输入与输出&lt;/p&gt;
&lt;p&gt;平衡输入与输出&lt;/p&gt;
&lt;p&gt;9.3 时间拆分和番茄工作法&lt;/p&gt;
&lt;p&gt;25分钟高效工作+5分钟休息，每4个番茄钟休息30分钟&lt;/p&gt;
&lt;p&gt;25分钟内，可以拒绝任何干扰&lt;/p&gt;
&lt;p&gt;9.4 要避免的行为&lt;/p&gt;
&lt;p&gt;优先级错乱：提高某个任务优先级来借口推迟真正急迫的任务&lt;/p&gt;
&lt;p&gt;专业开发人员会评估每个人物的优先级，排除个人喜好和需求，按照真实的紧急程度来执行任务&lt;/p&gt;
&lt;p&gt;9.5 死胡同&lt;/p&gt;
&lt;p&gt;慎重的态度和积累的经验可以帮你避免某些死胡同，但无法避免所有&lt;/p&gt;
&lt;p&gt;在走入死胡同时，要迅速意识到，并有足够的勇气走回头路&lt;/p&gt;
&lt;p&gt;坑法则，The Rule of Holes：如果你掉进坑里，别挖&lt;/p&gt;
&lt;p&gt;9.6 泥潭&lt;/p&gt;
&lt;p&gt;泥潭会减慢你的速度，但不会让你彻底停下来&lt;/p&gt;
&lt;p&gt;泥潭不容易被发现&lt;/p&gt;
&lt;p&gt;发现自己深处泥潭还要固执前进，是最严重的优先级错乱&lt;/p&gt;
&lt;p&gt;9.7 结论&lt;/p&gt;
&lt;p&gt;专业的开发人员会用心管理自己的时间和注意力&lt;/p&gt;
&lt;h3 id="di-shi-zhang-yu-gu"&gt;第十章 预估&lt;/h3&gt;
&lt;p&gt;预估是软件开发人员面对的最简单、也是最可怕的活动之一&lt;/p&gt;
&lt;p&gt;10.1 什么是预估&lt;/p&gt;
&lt;p&gt;问题在于，不同人不同看法，业务方认为是承诺，开发方认为是猜测. 两者相差迥异&lt;/p&gt;
&lt;p&gt;10.1.1 承诺&lt;/p&gt;
&lt;p&gt;承诺是必须做到的。&lt;/p&gt;
&lt;p&gt;如果你承诺在某天做成某事, 就必须按时完成.&lt;/p&gt;
&lt;p&gt;专业开发人员不随便承诺，除非他们确切知道可以完成&lt;/p&gt;
&lt;p&gt;如果被要求承诺做自己不确定的事情, 那么就应当坚决拒绝.&lt;/p&gt;
&lt;p&gt;10.1.2 预估&lt;/p&gt;
&lt;p&gt;预估是一种猜测。它不包含任何承诺的色彩，他不需要做任何约定&lt;/p&gt;
&lt;p&gt;大多数软件开发人员不擅长预估。&lt;/p&gt;
&lt;p&gt;预估不是个定数，预估的结果是一种概率分布&lt;/p&gt;
&lt;p&gt;10.1.3 暗示性承诺&lt;/p&gt;
&lt;p&gt;专业开发人员能够清楚区分预估和承诺，只有在确切知道可以完成的情况下，他们才会给出承诺&lt;/p&gt;
&lt;p&gt;另外，需要小心避免给出暗示性的承诺&lt;/p&gt;
&lt;p&gt;10.2 PERT&lt;/p&gt;
&lt;p&gt;计划评审技术&lt;/p&gt;
&lt;p&gt;三元分析法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;O，乐观估计
N，标称估计 
P，悲观估计

u = (O+4N+P)/6
u是任务期望完成时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10.3 预估任务 &lt;/p&gt;
&lt;p&gt;德尔菲法：一组人集合起来，讨论某项任务，预估完成时间，然后重复“讨论-预估”的过程，直到意见统一&lt;/p&gt;
&lt;p&gt;10.4 大数定理&lt;/p&gt;
&lt;p&gt;把大任务切分成许多小任务，分开预估再加总，结果会比单独平谷大人物要准确很多&lt;/p&gt;
&lt;p&gt;10.5 结论&lt;/p&gt;
&lt;p&gt;懂得如何为业务人员提供可信的预估结果，以便做出计划&lt;/p&gt;
&lt;p&gt;如果做不到, 或者不确定能做到, 专业开发人员不会给出承诺.&lt;/p&gt;
&lt;h3 id="di-shi-yi-zhang-ya-li"&gt;第十一章 压力&lt;/h3&gt;
&lt;p&gt;即使有压力，专业开发人员也会冷静果断。尽管压力不断增大，他依然会坚守所受的训练和纪律，他知道这是他赖以战胜有最后期限和承诺所带来压力感的最好方法&lt;/p&gt;
&lt;p&gt;11.1 避免压力&lt;/p&gt;
&lt;p&gt;在压力下保持冷静的最好方式，便是规避会导致压力的处境&lt;/p&gt;
&lt;p&gt;规避的方式也许无法完全减除压力, 但是可以大大降低压力并缩短高压力期的时间.&lt;/p&gt;
&lt;p&gt;11.1.1 承诺&lt;/p&gt;
&lt;p&gt;我们要做的就是使风险定量化并将他们陈述给业务方, 这样他们就能做好相应的准备.&lt;/p&gt;
&lt;p&gt;避免不切实际的承诺&lt;/p&gt;
&lt;p&gt;11.1.2 保持整洁 &lt;/p&gt;
&lt;p&gt;快速前进确保最后期限的方法，便是保持整洁&lt;/p&gt;
&lt;p&gt;让系统、代码和设计尽可能简洁，就可以避免压力&lt;/p&gt;
&lt;p&gt;要尽力保持输出成功整洁干净&lt;/p&gt;
&lt;p&gt;11.1.3 危机中的纪律&lt;/p&gt;
&lt;p&gt;选择那些你在危急时刻依然会遵循的纪律原则，并且在所有工作中都遵守这些纪律。&lt;/p&gt;
&lt;p&gt;遵守这些纪律原则是避免陷入危机的最好途径&lt;/p&gt;
&lt;p&gt;11.2 应对压力&lt;/p&gt;
&lt;p&gt;11.2.1 不要惊慌失措&lt;/p&gt;
&lt;p&gt;放松下来，对问题深思熟虑&lt;/p&gt;
&lt;p&gt;努力寻找可以带来最好结果的路径，然后沿着那条路径以合理稳定的节奏前进&lt;/p&gt;
&lt;p&gt;11.2.2 沟通&lt;/p&gt;
&lt;p&gt;让你的团队和主管知道你正深陷困境之中&lt;/p&gt;
&lt;p&gt;11.2.3 依靠你的纪律原则&lt;/p&gt;
&lt;p&gt;当事情十分困难时，要坚信你的纪律原则&lt;/p&gt;
&lt;p&gt;11.2.4 寻求帮助&lt;/p&gt;
&lt;p&gt;11.3 总结&lt;/p&gt;
&lt;p&gt;应对压力的诀窍在于, 能回避压力时尽可能地回避, 当无法回避时则勇敢直面压力.&lt;/p&gt;
&lt;h3 id="di-shi-er-zhang-xie-zuo"&gt;第十二章 协作&lt;/h3&gt;
&lt;p&gt;大多数软件都是有团队开发出来的&lt;/p&gt;
&lt;p&gt;单打独斗与有利于团队之外都是不专业的表现.&lt;/p&gt;
&lt;p&gt;12.1 程序员与人&lt;/p&gt;
&lt;p&gt;12.1.1 程序员与雇主&lt;/p&gt;
&lt;p&gt;专业程序员的首要职责是满足雇主的需求&lt;/p&gt;
&lt;p&gt;专业程序员会花时间去理解业务&lt;/p&gt;
&lt;p&gt;12.1.2 程序员与程序员&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.代码个体所有
不正常团队的糟糕症状
2.协作性的代码共有权
共有, 每个人都可以做出合适的修改
3.结对
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12.2 小脑&lt;/p&gt;
&lt;p&gt;专业人士会共同工作&lt;/p&gt;
&lt;p&gt;有些时候，单独工作是正确的。但是一般来说，和他人紧密协作，在大部分时间段中结对工作，是最好的做法&lt;/p&gt;
&lt;p&gt;12.3 结论&lt;/p&gt;
&lt;p&gt;一定要学会交流，和人们交流&lt;/p&gt;
&lt;h3 id="di-shi-san-zhang-tuan-dui-yu-xiang-mu"&gt;第十三章 团队与项目&lt;/h3&gt;
&lt;p&gt;13.1 只是简单混合吗？&lt;/p&gt;
&lt;p&gt;13.1.1 有凝聚力的团队&lt;/p&gt;
&lt;p&gt;形成团队是需要时间的.&lt;/p&gt;
&lt;p&gt;团队成员首先需要建立关系。需要学习如何写作，需要了解彼此的批号，强项，弱项，最终，才能凝聚成团队&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.发酵期 
成员克服个体差异，默契配合，彼此信任，形成真正有凝聚力的团队，是需要一定时间的

2.团队和项目，何者为先
把项目分配给形成凝聚力的团队，而不是围绕项目来组件团队
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有凝聚力的团队确实有些神奇之处, 他们能够一起创造奇迹.&lt;/p&gt;
&lt;p&gt;13.1.2 如何管理有凝聚力的团队&lt;/p&gt;
&lt;p&gt;每个团队都有自己的速度。团队的速度，即是在一定时间段内团队能够完成的工作量&lt;/p&gt;
&lt;p&gt;13.1.3 项目承包人的困境&lt;/p&gt;
&lt;p&gt;13.2 结论&lt;/p&gt;
&lt;p&gt;团队比项目更难构建. 因此, 组建稳健的团队, 让团队在一个有一个项目中整体移动共同工作是较好的做法.&lt;/p&gt;
&lt;h3 id="di-shi-si-zhang-fu-dao-xue-tu-qi-yu-ji-yi"&gt;第十四章 辅导、学徒期与技艺&lt;/h3&gt;
&lt;p&gt;14.1 失败的学位教育&lt;/p&gt;
&lt;p&gt;14.2 辅导&lt;/p&gt;
&lt;p&gt;14.3 学徒期&lt;/p&gt;
&lt;p&gt;14.3.1 软件学徒期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.大师
2.熟练工
3.学徒、实习生
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14.3.2 现实情况&lt;/p&gt;
&lt;p&gt;程序员的水平是否能够提升和最终是否能够得到职位晋升，全视乎程序员自己的表现&lt;/p&gt;
&lt;p&gt;14.4 技艺&lt;/p&gt;
&lt;p&gt;技艺是工匠所持的精神状态&lt;/p&gt;
&lt;hr/&gt;</content><category term="books"></category></entry><entry><title>读书笔记-拖拉一点也无妨</title><link href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html" rel="alternate"></link><published>2013-11-17T00:00:00+08:00</published><updated>2013-11-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-11-17:/posts/2013/11/17/the-art-of-procrastination.html</id><summary type="html">&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;facebook效应&amp;gt;&amp;gt;和这本 &amp;lt;&amp;lt;拖拉一点也无妨&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="procrastination" src="/imgs/books/the-art-of-procrastination.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后天能做的事情，就别赶着明天做了——马克吐温 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——结构化拖延法则正是一门关于如何利用这一消极特性、让它为你服务的艺术&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情(拖延，并不等于什么都不做)&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;利用这种心态，给必须完成的任务梳理一个结构
将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面,将另外一些重要的值得做的事情排在后面

于是，完成这些任务，就会变成避免去做清单最上方任务的一种手段

-&amp;gt; 拖延的人变成有用的人
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要的是，一个排序得当的任务结构&lt;/p&gt;
&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;facebook效应&amp;gt;&amp;gt;和这本 &amp;lt;&amp;lt;拖拉一点也无妨&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="procrastination" src="/imgs/books/the-art-of-procrastination.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后天能做的事情，就别赶着明天做了——马克吐温 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——结构化拖延法则正是一门关于如何利用这一消极特性、让它为你服务的艺术&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情(拖延，并不等于什么都不做)&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;利用这种心态，给必须完成的任务梳理一个结构
将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面,将另外一些重要的值得做的事情排在后面

于是，完成这些任务，就会变成避免去做清单最上方任务的一种手段

-&amp;gt; 拖延的人变成有用的人
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要的是，一个排序得当的任务结构&lt;/p&gt;
&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有），2）它看似重要得不得了（实际上不是）&lt;/p&gt;
&lt;p&gt;实际上是一种自我欺骗，但是有用：用一种性格缺陷去抵消另一种性格缺陷&lt;/p&gt;
&lt;p&gt;最终由于没有做某些事，从而做成了不少别的事&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;减少承诺？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拖延者常常错误的做法——尽量少想别人做出承诺，以为事情越少就能改掉拖延的毛病&lt;/p&gt;
&lt;p&gt;错误的，即使再少，也会拖延&lt;/p&gt;
&lt;p&gt;所以，勇于去做承诺&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拖延与完美主义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完美主义导致了拖延: 为何会导致拖延？因为做到完美不容易！&lt;/p&gt;
&lt;p&gt;要接受一个事实：没有完美，我们从来没有干过完美的事情，就连接近完美的事情也没有(停留在脑海里的幻想层面的东西,而非真实的状况,是自我的幻想)&lt;/p&gt;
&lt;p&gt;观点：对于一件无需做到完美的任务，就不去苛求完美（关于完美主义的幻想，浪费时间，影响情绪）。烂的开始是成功的一半，不要过于苛求完美&lt;/p&gt;
&lt;p&gt;验伤选择:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;根据紧急程度进行分类排列
对于大多数事情，要做的时候，心里有数：做到“蛮好”就可以了，或许比“蛮好”再好一点，但是犯不着追求完美
养成习惯，做事之前逼自己分析一下，看看“不那么完美”的代价有多大，做到“完美无缺”有多大意义

很多事情，没那么完美也就足够了，不要等到任务过期,现在就开始做
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚刚好才是真的好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待办事项清单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当日待办事项清单，列好，大任务拆分成小任务，每完成一个鼓励自己一下&lt;/p&gt;
&lt;p&gt;宏大的令人望而却步的大任务拆分成小的，没有那么吓人的任务&lt;/p&gt;
&lt;p&gt;把令人分心的事情也写下来，提醒自己不要去做&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;放点音乐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;音乐和情绪之间存在着直接的关联&lt;/p&gt;
&lt;p&gt;找到合适自己节奏的音乐(轻快的歌,极富感染力欢乐的歌)&lt;/p&gt;
&lt;p&gt;可以选择合适长短的音乐，开始做事，直到音乐结束&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑与拖延&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从某些方面，电脑是拖延者们的恩物,也是个祸害，因为人们太容易把时间浪费在毫无价值，又与手边任务毫不相干的事情上&lt;/p&gt;
&lt;p&gt;找到最好的方法，使用电脑——处理邮件(分类，标记，存档)的方式，处理IM，处理社交网络等等,学会如何控制，防止上网迷路&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“平摊型“人士的呼吁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把手上所做的事情平摊在眼前，根据当前情境决定处理哪件，轮转地处理问题&lt;/p&gt;
&lt;p&gt;叠放起来，或许也就意味着，不会再次打开查看&lt;/p&gt;
&lt;p&gt;好吧，我是“叠放型”人士&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与敌人合作？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和非拖延人士合作，去做一大堆相对没那么重要的事情，非拖延人士绝对不会抽时间做的&lt;/p&gt;
&lt;p&gt;学会如何与非拖延人士合作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;额外福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构化拖延者的额外福利：有时候，排在清单项顶头的重要事项会自动消失&lt;/p&gt;
&lt;p&gt;有些事情放一放，到最后可能就不需要去做了, 切勿把那些在明天到来之前可能会消失不见的事情在今天就做掉&lt;/p&gt;
&lt;p&gt;拖延是缺点，但并非是最糟糕的缺点，有时候，缺点也有额外福利&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你看拖延不顺眼？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最让人讨厌的拖延行为，往往是那些为了证明你不受他人控制的举动&lt;/p&gt;
&lt;p&gt;结构化拖延是一码事，故意做给其他人看，让他知道你不受他辖制又是另一回事&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从哲学的角度替拖延说两句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nothing&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-11-17 create
2014-02-16 update&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</content><category term="books"></category></entry></feed>