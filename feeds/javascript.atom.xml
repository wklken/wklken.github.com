<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog - javascript</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/javascript.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2014-05-25T00:00:00+08:00</updated><entry><title>JavaScript学习补充</title><link href="http://www.wklken.me/posts/2014/05/25/Learning-JavaScript.html" rel="alternate"></link><published>2014-05-25T00:00:00+08:00</published><updated>2014-05-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-05-25:/posts/2014/05/25/Learning-JavaScript.html</id><summary type="html">&lt;p&gt;以下笔记全部摘录和整理(缩减)自互联网文章, 太多了已然没法找到对应作者, 在此感谢分享者&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="js-advance" src="/imgs/front/js-advance.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="null-he-undefined"&gt;null 和 undefined&lt;/h3&gt;
&lt;p&gt;Undefined相当于一个变量并没有明确的被赋值(是否被赋值, 可能无心忽略, 逻辑问题)
JS的怪异之处就在于undefined真的是一个可以使用的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; var foo;
&amp;gt; foo
undefined
同理，当缺失参数时 JavaScript 会分配一个 undefined：

&amp;gt; function id(x) { return x }
&amp;gt; id()
undefined

a = 1;
a !== undefined // true

a = undefined
var b
a === b //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Null相当于变量被明确指定了没有值，而不是由于意外的原因被忽略掉了(赋值null, 正当逻辑)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与运算&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS的null如果进入运算，真的会被解析成为0或false：&lt;/p&gt;
&lt;p&gt;(1 + null …&lt;/p&gt;</summary><content type="html">&lt;p&gt;以下笔记全部摘录和整理(缩减)自互联网文章, 太多了已然没法找到对应作者, 在此感谢分享者&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="js-advance" src="/imgs/front/js-advance.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="null-he-undefined"&gt;null 和 undefined&lt;/h3&gt;
&lt;p&gt;Undefined相当于一个变量并没有明确的被赋值(是否被赋值, 可能无心忽略, 逻辑问题)
JS的怪异之处就在于undefined真的是一个可以使用的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; var foo;
&amp;gt; foo
undefined
同理，当缺失参数时 JavaScript 会分配一个 undefined：

&amp;gt; function id(x) { return x }
&amp;gt; id()
undefined

a = 1;
a !== undefined // true

a = undefined
var b
a === b //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Null相当于变量被明确指定了没有值，而不是由于意外的原因被忽略掉了(赋值null, 正当逻辑)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与运算&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS的null如果进入运算，真的会被解析成为0或false：&lt;/p&gt;
&lt;p&gt;(1 + null) # 1
(1 * null) # 0
(1 * null) # Infinity&lt;/p&gt;
&lt;p&gt;undefined进入运算，一律得到NaN：&lt;/p&gt;
&lt;p&gt;(1 + undefined) # NaN
(1 * undefined) # NaN
(1 / undefined) # NaN&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑判断&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;null和undefined逻辑判断时都认为是false。&lt;/p&gt;
&lt;p&gt;只用一个判断，就可以同时检验这两项是否为真:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//也会把 false, -0, +0, NaN 与 '' 当成“空值”
if (v) {
    // v 有值
} else {
    // v 没有值
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果碰到大坑==的时候&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var foo;
console.log(foo == null); // true
console.log(foo == undefined); // true
console.log(foo === null); // false
console.log(foo === undefined); // true
console.log(null == undefined); // true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好的做法, 一律使用&lt;code&gt;===&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;判断一个量已定义且非空，只使用：if (a !== null &amp;amp;&amp;amp; a !== undefined)。
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="he"&gt;=== 和 ==&lt;/h3&gt;
&lt;p&gt;1.==用来判断两个值是否相等&lt;/p&gt;
&lt;p&gt;当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉，这可能不是你想要的结果。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"" == "0" // false
0 == "" // true
0 == "0" // true
false == "false" // false
false == "0" // true
false == undefined // false
false == null // false
null == undefined // true
" \t\r\n" == 0 // true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.===&lt;/p&gt;
&lt;p&gt;类型+值比较&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"如果两边的操作数具有相同的类型和值，===返回true，!==返回false。"——《JavaScript：语言精粹》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最佳实践:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任何时候在比较操作中使用 === 和  !==
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jsoncao-zuo"&gt;json操作&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var person = {name :'Saad', age : 26, department : {ID : 15, name : "R&amp;amp;D"} };

var stringFromPerson = JSON.stringify(person);
/* stringFromPerson is equal to "{"name":"Saad","age":26,"department":{"ID":15,"name":"R&amp;amp;D"}}"   */

var personFromString = JSON.parse(stringFromPerson);
/* personFromString is equal to person object  */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to string&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var obj = {
    name: 'myObj'
};

JSON.stringify(obj);
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="han-shu-dui-xiang-ji-ni-ming-han-shu"&gt;函数对象及匿名函数&lt;/h3&gt;
&lt;p&gt;1.函数对象赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var slice_func = [].slice
//slice_func()

var a = function() {
};
// a()

var a = {
    fun : function() {
    };
}
// a.fun()

someElement.addEventListener("click", function(e) {
    // I'm anonymous!
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var f = function foo(){
    return typeof foo; // foo是在内部作用域内有效
};
// foo在外部用于是不可见的
typeof foo; // "undefined"
f(); // "function"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匿名函数&lt;/p&gt;
&lt;p&gt;from&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Chris'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'34'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'single'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createMember&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getMemberDetails&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myApplication = function(){
var name = 'Chris';
var age = '34';
var status = 'single';
return{
createMember:function(){
// [...]
},
getMemberDetails:function(){
// [...]
}
}
}();
// myApplication.createMember() and
// myApplication.getMemberDetails() now works.
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="zui-jia-shi-jian"&gt;最佳实践&lt;/h3&gt;
&lt;p&gt;1.定义多个变量时，省略var关键字，用逗号代替&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var someItem = 'some string';
var anotherItem = 'another string';
var oneMoreItem = 'one more string';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var someItem = 'some string',
    anotherItem = 'another string',
    oneMoreItem = 'one more string';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.谨记，不要省略分号, 不要省略花括号&lt;/p&gt;
&lt;p&gt;省略分号,可能导致更大的,未知的,难以发现的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;someItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'some string'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething() {&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;someItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'some string'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething() {&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.使用{}代替 new Ojbect()&lt;/p&gt;
&lt;p&gt;在JavaScript中创建对象的方法有多种。可能是传统的方法是使用”new”加构造函数，像下面这样:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var o = new Object();
o.name = 'Jeffrey';
o.lastName = 'Way';
o.someFunction = function() {
console.log(this.name);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var o = {}; //空对象

var o = {
name: 'Jeffrey',
lastName = 'Way',
someFunction : function() {
    console.log(this.name);
}
};
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;只要把多个全局变量都整理在一个名称空间下，拟将显著降低与其他应用程序、组件或类库之间产生糟糕的相互影响的可能性。——Douglas Crockford&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.使用[]代替 new Array()&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var a = new Array();
a[0] = "Joe";
a[1] = 'Plumber';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var a = ['Joe','Plumber'];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.typeof判断&lt;/p&gt;
&lt;p&gt;typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined&lt;/p&gt;
&lt;p&gt;expr:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typeof xx === ''
typeof xx !== ''
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Numbers&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;37&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;14&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;尽管&lt;/span&gt;&lt;span class="nt"&gt;NaN&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="s2"&gt;"Not-A-Number"&lt;/span&gt;&lt;span class="err"&gt;的缩写&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;意思是&lt;/span&gt;&lt;span class="s2"&gt;"不是一个数字"&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Strings&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="s2"&gt;"bla"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;typeof&lt;/span&gt;&lt;span class="err"&gt;返回的肯定是一个字符串&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Booleans&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'boolean'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'boolean'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Undefined&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;blabla&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;一个未定义的变量&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;或者一个定义了却未赋初值的变量&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Objects&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;使用&lt;/span&gt;&lt;span class="nt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isArray&lt;/span&gt;&lt;span class="err"&gt;或者&lt;/span&gt;&lt;span class="nt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;call&lt;/span&gt;&lt;span class="err"&gt;方法可以分辨出一个数组和真实的对象&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Functions&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'function'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'function'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;null&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;从&lt;/span&gt;&lt;span class="nt"&gt;JavaScript&lt;/span&gt;&lt;span class="err"&gt;诞生以来&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一直是这样的&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.三元运算符 :强大且风骚&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;expression ? xxx : yyy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var direction;
if(x &amp;lt; 200){
  direction = 1;
} else {
  direction = -1;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var direction = x &amp;lt; 200 ? 1 : -1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.使用逻辑 AND/OR 做条件判断&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var foo = 10;
foo == 10 &amp;amp;&amp;amp; doSomething(); // 等价于 if (foo == 10) doSomething();
foo == 5 || doSomething(); // 等价于 if (foo != 5) doSomething();

//默认值
a = b || 'default'
return b || c || d &amp;gt; 1 ? 0 : 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.给一个变量赋值的时候不要忘记使用var关键字&lt;/p&gt;
&lt;p&gt;给一个未定义的变量赋值会导致创建一个全局变量。要避免全局变量&lt;/p&gt;
&lt;p&gt;9.自我调用的函数&lt;/p&gt;
&lt;p&gt;自调用匿名函数（Self-Invoked Anonymous Function）或者即时调用函数表达式（IIFE-Immediately Invoked Function Expression)。这是一个在创建后立即自动执行的函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(function(){
    // some private code that will be executed automatically
})();

(function(a,b){
    var result = a+b;
    return result;
})(10,20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10.避免使用 eval() 和 Function 构造函数&lt;/p&gt;
&lt;p&gt;Eval=邪恶, 不仅大幅降低脚本的性能（译注：JIT编译器无法预知字符串内容，而无法预编译和优化），而且这也会带来巨大的安全风险，因为这样付给要执行的文本太高的权限，避而远之&lt;/p&gt;
&lt;p&gt;使用 eval 和 Function 构造函数是非常昂贵的操作，因为每次他们都会调用脚本引擎将源代码转换成可执行代码。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var func1 = new Function(functionCode);
var func2 = eval(functionCode);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;11.避免使用 with()&lt;/p&gt;
&lt;p&gt;使用 with() 会插入一个全局变量。因此，同名的变量会被覆盖值而引起不必要的麻烦&lt;/p&gt;
&lt;p&gt;12.脚本放在页面的底部&lt;/p&gt;
&lt;p&gt;记住——首要目标是让页面尽可能快的呈献给用户，脚本的夹在是阻塞的，脚本加载并执行完之前，浏览器不能继续渲染下面的内容。因此，用户将被迫等待更长时间&lt;/p&gt;
&lt;p&gt;13.避免在For语句内声明变量&lt;/p&gt;
&lt;p&gt;bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;container&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;document.getElementById('container')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;container.innerHtml&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;'my&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;console.log(i)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;getElementById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'container'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;len&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;container.innerHtml&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;'my&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;console.log(i)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14.给代码添加注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 循环数组，输出每项名字（译者注：这样的注释似乎有点多余吧）.
for(var i = 0, len = array.length; i &amp;lt; len; i++) {
console.log(array[i]);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;15.instanceof&lt;/p&gt;
&lt;p&gt;instanceof 方法要求开发者明确地确认对象为某特定类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oStringObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oStringObject&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 输出 "true"&lt;/span&gt;

&lt;span class="c1"&gt;// 判断 foo 是否是 Foo 类的实例&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//true&lt;/span&gt;

&lt;span class="c1"&gt;// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Aoo&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Aoo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//JavaScript 原型继承&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Aoo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;16.apply/call&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someFn.call(this, arg1, arg2, arg3);
someFn.apply(this, [arg1, arg2, arg3]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;apply&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function.apply(obj,args)方法能接收两个参数

obj：这个对象将代替Function类里this对象
args：这个是数组，它将作为参数传给Function（args--&amp;gt;arguments）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;call&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function.call(obj,[param1[,param2[,…[,paramN]]]])
obj：这个对象将代替Function类里this对象
params：这个是一个参数列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用哪个取决于参数的类型&lt;/p&gt;
&lt;h3 id="kuo-zhan-yue-du"&gt;扩展阅读&lt;/h3&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/8087/"&gt;Limu：JavaScript的那些书&lt;/a&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;mozilla js文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编程风格&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html"&gt;Javascript编程风格&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/12203/"&gt;完全理解关键字this&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/39305/"&gt;详解JavaScript中的this&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/54267/"&gt;解密 JavaScript 中的 this&lt;/a&gt;
| &lt;a href="http://blog.jobbole.com/67347/"&gt;JavaScript中this的工作原理以及注意事项&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/31951/"&gt;编写快速、高效的JavaScript代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/37306/"&gt;Javascript执行效率小结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/47304/"&gt;JavaScript的性能优化：加载和执行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;闭包&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html"&gt;学习Javascript闭包（Closure）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模块化编程&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html"&gt;Javascript模块化编程（一）：模块的写法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/40409/"&gt;深入研究JavaScript的Module模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/66135/"&gt;为现代JavaScript开发做好准备&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;面向对象&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/23563/"&gt;Javascript定义类（class）的三种方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oschina.net/question/100267_52409"&gt;JavaScript面向对象15分钟教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/18191/"&gt;如何编写可维护的面向对象JavaScript代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/31274/"&gt;拥抱原型面向对象编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/6441.html"&gt;Javascript 面向对象编程&lt;/a&gt; | &lt;a href="http://coolshell.cn/articles/6668.html"&gt;再谈javascript面向对象编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/38614/"&gt;全面理解面向对象的 JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/19795/"&gt;JavaScript原型和继承&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/66441/"&gt;JavaScript中的原型和继承&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;事件&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/39446/"&gt;生动详细解释javascript的冒泡和捕获&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/52430/"&gt;DOM事件简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chajn.org/project/javascript-events-responding-user/"&gt;你若触发，我就处理——浅谈JavaScript的事件响应&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计模式&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/25537/"&gt;理解JavaScript中的设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/29454/"&gt;常用的Javascript设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/9648/"&gt;理解JavaScript原型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;console&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.segmentfault.com/classicemi/1190000000481884"&gt;你真的了解console吗?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/60787/"&gt;通过console.table()做高级JavaScript调试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tools&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/64771/"&gt;JavaScript基础工具清单&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/60938/"&gt;给开发者提供的 35 款 JavaScript 图形图表库&lt;/a&gt; + &lt;a href="http://echarts.baidu.com/"&gt;百度图标库Echarts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/60245/"&gt;Responsive Javascript 是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/53487/"&gt;JavaScript 跨域总结与解决办法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html"&gt;Javascript的10个设计缺陷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/43649/"&gt;从零开始写JavaScript框架（一）&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/43663/"&gt;从零开始写JavaScript框架（二&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/52069/"&gt;JavaScript核心&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/39571/"&gt;JavaScript必知必会+理解总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/47296/"&gt;JavaScript变量作用域之殇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/66699/"&gt;JavaScript 的常见“陷阱”&lt;/a&gt;&lt;/p&gt;</content><category term="javascript"></category></entry></feed>