<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/all.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2018-06-30T00:00:00+08:00</updated><entry><title>[分享]bash日常: bash-utils</title><link href="http://www.wklken.me/posts/2018/06/30/the-project-bash-utils.html" rel="alternate"></link><published>2018-06-30T00:00:00+08:00</published><updated>2018-06-30T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2018-06-30:/posts/2018/06/30/the-project-bash-utils.html</id><summary type="html">&lt;p&gt;早上优化了下自己的一个项目 &lt;a href="https://github.com/wklken/bash-utils"&gt;bash-utils&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I always use the bash as my devops script, while it's boring to write the condition judgement/echo statement/exit.
So, I want to make the bash script short and clear.
I have collected some useful function into this repo, which save me a lot of time in …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;早上优化了下自己的一个项目 &lt;a href="https://github.com/wklken/bash-utils"&gt;bash-utils&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I always use the bash as my devops script, while it's boring to write the condition judgement/echo statement/exit.
So, I want to make the bash script short and clear.
I have collected some useful function into this repo, which save me a lot of time in past few years.
Just source the &lt;code&gt;utils.sh&lt;/code&gt; and write the expression calling the functions.
I can just focus on the logical, not the bash syntax and expression&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日常在写一些脚本的时候, 偏好于用bash, 当然, 逻辑太过复杂的时候会用python.&lt;/p&gt;
&lt;p&gt;bash相对于python来说, 已经很精简了.&lt;/p&gt;
&lt;p&gt;但是, 日常经常做一些逻辑比较重复的自动化任务, 写着写着发现bash这么写还是太冗长了, 而且每次需要重复类似却又不尽相同的动作.&lt;/p&gt;
&lt;p&gt;所以, 逐步的, 将一些东西梳理出来了.&lt;/p&gt;
&lt;p&gt;目的是, 只要&lt;code&gt;source utils.sh&lt;/code&gt;, 就能将注意力集中在业务逻辑上, 而不是&lt;code&gt;bash&lt;/code&gt;语法. &lt;/p&gt;
&lt;p&gt;往往只需要原先四分之一左右的行数, 搞定逻辑&lt;/p&gt;
&lt;p&gt;其实, bash中最多的无非条件判断+字符串处理, 以及我们写脚本需要打印日志. 所以集中将这三块经常做的抽离出函数, 十几个函数, 顶掉80%的工作&lt;/p&gt;
&lt;p&gt;有兴趣可以看看, 欢迎提pr&lt;/p&gt;
&lt;p&gt;2018-06 深圳&lt;/p&gt;</content><category term="share"></category></entry><entry><title>你需要更多的思考时间</title><link href="http://www.wklken.me/posts/2018/06/23/you-need-more-time-to-think-along.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2018-06-23:/posts/2018/06/23/you-need-more-time-to-think-along.html</id><summary type="html">&lt;p&gt;目前每天都七点半准时起, 无论是否工作日, 几个月下来, 觉得时间多了好多.&lt;/p&gt;
&lt;p&gt;最近三个月阅读时间多了很多, 无他, 只因每天要早起坐班车, 下班也坐班车, 每天有大概一个半小时在车上, 只能用kindle打发时间.&lt;/p&gt;
&lt;p&gt;每天比其他同事差不多早了一个小时到公司, 这段时间用来做什么呢?&lt;/p&gt;
&lt;p&gt;我的答案是: 不要立刻开始工作&lt;/p&gt;
&lt;p&gt;当然, 每个人选择不一样, 可能这一个小时没人打扰, 编码效率会高一点.&lt;/p&gt;
&lt;p&gt;但是, 为什么不将这个时间空出来, 做一些其他事情,  这些事情, 可以起到类似杠杆作用, 撬动你的工作, 提升效率, 减少无畏的时间浪费, 以便更好地享受生活呢?&lt;/p&gt;
&lt;h2 id="dang-xia"&gt;当下&lt;/h2&gt;
&lt;p&gt;我们总是被当下的工作所淹没, 即, 注意力被现在的工作抓走. 例如: 昨天有个bug没修, 今天会有个需求会,  下午要和谁对接口,  晚上要上线等等.&lt;/p&gt;
&lt;p&gt;而当一天的工作开始后, 你将马不停蹄, 奔波在各种事务中,  忙累了一天之后, 下班回家洗洗睡, 明天继续&lt;/p&gt;
&lt;p&gt;你可能某天觉得好累, 厌倦, 生活过成了模式&lt;/p&gt;
&lt;h2 id="jia-she-ni-you-geng-duo-de-shi-jian-si-kao"&gt;假设你有更多的时间思考&lt;/h2&gt;
&lt;p&gt;所以, 假设你每天有一小时时间, 用来做什么?&lt;/p&gt;
&lt;p&gt;思考 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;目前每天都七点半准时起, 无论是否工作日, 几个月下来, 觉得时间多了好多.&lt;/p&gt;
&lt;p&gt;最近三个月阅读时间多了很多, 无他, 只因每天要早起坐班车, 下班也坐班车, 每天有大概一个半小时在车上, 只能用kindle打发时间.&lt;/p&gt;
&lt;p&gt;每天比其他同事差不多早了一个小时到公司, 这段时间用来做什么呢?&lt;/p&gt;
&lt;p&gt;我的答案是: 不要立刻开始工作&lt;/p&gt;
&lt;p&gt;当然, 每个人选择不一样, 可能这一个小时没人打扰, 编码效率会高一点.&lt;/p&gt;
&lt;p&gt;但是, 为什么不将这个时间空出来, 做一些其他事情,  这些事情, 可以起到类似杠杆作用, 撬动你的工作, 提升效率, 减少无畏的时间浪费, 以便更好地享受生活呢?&lt;/p&gt;
&lt;h2 id="dang-xia"&gt;当下&lt;/h2&gt;
&lt;p&gt;我们总是被当下的工作所淹没, 即, 注意力被现在的工作抓走. 例如: 昨天有个bug没修, 今天会有个需求会,  下午要和谁对接口,  晚上要上线等等.&lt;/p&gt;
&lt;p&gt;而当一天的工作开始后, 你将马不停蹄, 奔波在各种事务中,  忙累了一天之后, 下班回家洗洗睡, 明天继续&lt;/p&gt;
&lt;p&gt;你可能某天觉得好累, 厌倦, 生活过成了模式&lt;/p&gt;
&lt;h2 id="jia-she-ni-you-geng-duo-de-shi-jian-si-kao"&gt;假设你有更多的时间思考&lt;/h2&gt;
&lt;p&gt;所以, 假设你每天有一小时时间, 用来做什么?&lt;/p&gt;
&lt;p&gt;思考!&lt;/p&gt;
&lt;p&gt;一个人思考!&lt;/p&gt;
&lt;p&gt;不管是上班前, 还是下班后, 不管是在公司, 还是回家了, 你都有必要给思考留一些时间, 如果一小时太多, 十五分钟就够了.&lt;/p&gt;
&lt;p&gt;思考什么呢? 任何事情,  工作或者生活的问题, 抛出来, 思考, 做一些决策和记录&lt;/p&gt;
&lt;p&gt;例如: 工作的风格是不是有需要改进的地方? 昨天与人沟通是不是太过激进了? 今天这个方案有个细节似乎有问题? 今天周五晚上去哪浪?  昨天的bug可能是什么原因?  最近有个手工操作频率很高, 自动化要花多久每次能省多少时间?&lt;/p&gt;
&lt;p&gt;注意, 这时候不要开 vim 或者 IDE, 不要开文档等等, 不要在意细节, 思考, 得到结论, 记录, 该做的加入todo list.&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 将xx操作自动化 =&amp;gt; 加入到trello的近期事项中
- 晚上去xx 吃饭   =&amp;gt; 直接发微信给老婆
- 方案 XX 有问题  =&amp;gt; 记录事项到list, 具体确定时注意
- bug可能原因是:xxx   =&amp;gt; 将猜测记录到对应issues
- xxx需要优化  =&amp;gt; 到对应issue评论
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些都是很发散的问题, 但是有了安静思考的时间, 可以做出更好的决策, 或者有更好的想法.&lt;/p&gt;
&lt;p&gt;每件事情, 都会随着时间推移, 变得更好.&lt;/p&gt;
&lt;p&gt;另外, 还可以针对近期工作做下梳理, 以及对今日的todo list做下排期;&lt;/p&gt;
&lt;p&gt;然后进入第二步&lt;/p&gt;
&lt;h2 id="learn-something"&gt;Learn something&lt;/h2&gt;
&lt;p&gt;第一步, 花的时间可能10分钟不到, 你可以理清楚很多事情.&lt;/p&gt;
&lt;p&gt;那么, 剩下的40-50分钟做什么?&lt;/p&gt;
&lt;p&gt;学习!&lt;/p&gt;
&lt;p&gt;学什么? 跟项目相关的, 跟工作相关, 跟自己思考问题得到结论相关的内容.&lt;/p&gt;
&lt;p&gt;例如, 合作项目对方用的xxx技术, 你从来没有接触过, 昨天接入只是扫了眼文档完成接入, 那么你可以google下这个关键词, 然后开始了解, 甚至深入学习.&lt;/p&gt;
&lt;p&gt;例如, 昨天遇到一个报错, 解决了但是没有来得及深究, 这时候可以开始深究&lt;/p&gt;
&lt;p&gt;你的经验, 主要来自于你的工作, 以及工作相关的领域. 所以,  需要从这些部分学习, 深入, 得到最大化的成长.&lt;/p&gt;
&lt;p&gt;注意, 尽量关注跟工作相关的领域, 那些可能跟你工作相关性很低的领域, 除非0)你在不远的将来会涉及 1) 你想转领域了 2) 你感兴趣或者对你成长有帮助 3) 你对本领域已经很有经验了想尝试下(或许有些激进, 个人观点)&lt;/p&gt;
&lt;p&gt;例如, 你是个初级的前端开发, 每日忙于工作, 工作所涉及的技术还没有吃透, 看到机器学习很火想学, 每天花一两个小时在上面, 但是工作中用不到, 你短期内又不可能转,  绝大多数人, 最终是跑了一大堆开源项目的hello world, 走马观花了下文档和各种公司. 那么, 每天的这一两个小时相当于是损耗时间, 作用很小(性价比不高), 即使最终要转, 一样需要重头学习积累.&lt;/p&gt;
&lt;p&gt;我的经验是:&lt;/p&gt;
&lt;p&gt;跟当前工作相关,  才能事半功倍.  这样或许会有些功利, 但你我以及大部分人都是普通人, 精力有限, 用在刀刃上.&lt;/p&gt;
&lt;p&gt;知行合一, 从工作内容出发去拓展, 未来实践的概率高, 对个人成长提升也大.&lt;/p&gt;
&lt;p&gt;不说那么多,  40分钟过去, 差不多同事都陆续到了, 你只有几分钟时间, 就要进入战斗模式了&lt;/p&gt;
&lt;p&gt;进入战斗模式之前,  建议第三步&lt;/p&gt;
&lt;h2 id="mei-ri-ji-hua"&gt;每日计划&lt;/h2&gt;
&lt;p&gt;近两年, 个人一直在使用 trello 作为个人看板&lt;/p&gt;
&lt;p&gt;每天在开始工作前, review下今天以及本周需要做的事情, 移动下卡片, 标注下deadline, 备注下注意事项等等&lt;/p&gt;
&lt;p&gt;然后, 选择一个, 开始干活.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是容易沉溺于繁杂的事务, 而忘了身在何处.&lt;/p&gt;
&lt;p&gt;每天独处的思考时间, 可以让我们脱出局中, 而无论是工作还是生活, 都会逐步改善&lt;/p&gt;
&lt;p&gt;每天学习, 然后在工作中实践, 才能感受到成长的力量&lt;/p&gt;
&lt;p&gt;每日计划, 效率加成&lt;/p&gt;
&lt;p&gt;2019-06-23 深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>2017总结: 予时光以意义</title><link href="http://www.wklken.me/posts/2017/12/31/summary-14-2017end-2018begin.html" rel="alternate"></link><published>2017-12-31T00:00:00+08:00</published><updated>2017-12-31T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-12-31:/posts/2017/12/31/summary-14-2017end-2018begin.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;予时光以意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的2017&lt;/p&gt;
&lt;p&gt;这句话， 算是过去一段时间的一个思考; 最初应该是在看三体“给岁月以文明，而不是给文明以岁月”, 后来偶然间, 在匆匆忙忙后, 闲暇时的一个感悟;&lt;/p&gt;
&lt;p&gt;过去的2017, 一如既往地繁忙, 有段时间, 还是陷入了&lt;code&gt;周一到周五&lt;/code&gt;的模式, 时间匆匆流逝, 转眼快2018了, 回首一年, 收获良多.&lt;/p&gt;
&lt;p&gt;絮絮叨叨, 做一次总结, 坚持了好几年的总结, 前两年断了, 这次看能否续上一续.&lt;/p&gt;
&lt;h2 id="guan-yu-gong-zuo"&gt;关于工作&lt;/h2&gt;
&lt;p&gt;效率上, 今年又又又对自己的工作流重构了下; 目前全面使用trello看板在管理自己的任务; 买了个实体番茄钟, 严格按照35分钟工作/5分钟休息, 在持续运转, 每天正常7个番茄钟, 火力全开的时候可以到达11个(不过会很累啊…….)&lt;/p&gt;
&lt;p&gt;沟通交流上, 变得更淡定了吧, 对于一些突发的变更不会再那么慌乱;&lt;/p&gt;
&lt;p&gt;今年对自己做的工作, 大体上只能到70分的样子, 起码没做到优秀;&lt;/p&gt;
&lt;p&gt;盯了一个项目, 一年半了, 非常冗长琐碎, 事情比较多, 虽然经历一次次优化和调整, 也算是走上正轨, 但是后期感觉个人精力上占用比较多,  导致没法全面投入去做其他项目 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;予时光以意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的2017&lt;/p&gt;
&lt;p&gt;这句话， 算是过去一段时间的一个思考; 最初应该是在看三体“给岁月以文明，而不是给文明以岁月”, 后来偶然间, 在匆匆忙忙后, 闲暇时的一个感悟;&lt;/p&gt;
&lt;p&gt;过去的2017, 一如既往地繁忙, 有段时间, 还是陷入了&lt;code&gt;周一到周五&lt;/code&gt;的模式, 时间匆匆流逝, 转眼快2018了, 回首一年, 收获良多.&lt;/p&gt;
&lt;p&gt;絮絮叨叨, 做一次总结, 坚持了好几年的总结, 前两年断了, 这次看能否续上一续.&lt;/p&gt;
&lt;h2 id="guan-yu-gong-zuo"&gt;关于工作&lt;/h2&gt;
&lt;p&gt;效率上, 今年又又又对自己的工作流重构了下; 目前全面使用trello看板在管理自己的任务; 买了个实体番茄钟, 严格按照35分钟工作/5分钟休息, 在持续运转, 每天正常7个番茄钟, 火力全开的时候可以到达11个(不过会很累啊…….)&lt;/p&gt;
&lt;p&gt;沟通交流上, 变得更淡定了吧, 对于一些突发的变更不会再那么慌乱;&lt;/p&gt;
&lt;p&gt;今年对自己做的工作, 大体上只能到70分的样子, 起码没做到优秀;&lt;/p&gt;
&lt;p&gt;盯了一个项目, 一年半了, 非常冗长琐碎, 事情比较多, 虽然经历一次次优化和调整, 也算是走上正轨, 但是后期感觉个人精力上占用比较多,  导致没法全面投入去做其他项目,  所以导致总体结果并没有达到自己预定的目标, 几个项目都不错, 但是没有做到最好;&lt;/p&gt;
&lt;p&gt;其他几个项目, 涉及业务及基础功能开发, 也都保质保量按时交付, 对很多东西也都有了成体系的了解和实践, 但是还是欠缺深入;&lt;/p&gt;
&lt;p&gt;总之一年下来,  逐步地有些缺乏定位, 不知道自己的定位和方向在哪里.&lt;/p&gt;
&lt;p&gt;接近年底的时候, 也做了一次重新梳理, 大体确认了后续深入的方向, 也算是一个收获.&lt;/p&gt;
&lt;p&gt;明年, 仔细做个规划, 深入去做一些事情, 希望有所改善;
 今年尝试开了下知乎专栏, 写一些东西, 然而最终没有坚持下来……博客更新也有限, 主要是刚迈入新的领域, 还没有更深入和深刻的了解, 后面再慢慢来吧.&lt;/p&gt;
&lt;p&gt;工作, 占据了生活很大一部分, 起码时间上, 目前会占用很多, 所以很多时候, 要让自己开心, 有快乐地去完成一些事情, 做自己想做的事情.&lt;/p&gt;
&lt;p&gt;如何自己充电提升能力, 如何持续优化和改进工作流, 如何愉快的合作, 如何专注工作, 如何按时交付…..这些都是需要在不断的思考和实践中持续前进, 往前走.&lt;/p&gt;
&lt;h2 id="guan-yu-du-shu"&gt;关于读书&lt;/h2&gt;
&lt;p&gt;2017年, 读书相对以前少了很多;&lt;/p&gt;
&lt;p&gt;今年书目中多了一项: 经济学; 主要是因为穷, 继去年看了&amp;lt;&amp;lt;贫穷的本质&amp;gt;&amp;gt;之后, 一月份看了&amp;lt;&amp;lt;稀缺&amp;gt;&amp;gt;, 但是这个书更多的是对个人工作方法论有所帮助, 开始在意工作中各种稀缺, 也学习利用这种稀缺变相提升某种场景下的效率; 经济学另外读了下&amp;lt;&amp;lt;穷爸爸富爸爸&amp;gt;&amp;gt;/&amp;lt;&amp;lt;小岛经济学&amp;gt;&amp;gt;/&amp;lt;&amp;lt;微观经济学&amp;gt;&amp;gt;(在读)/聪明的投资者…….要成体系, 目前还差很多&lt;/p&gt;
&lt;p&gt;四月, 补了东野圭吾的&amp;lt;&amp;lt;虚无的十字架&amp;gt;&amp;gt;和&amp;lt;&amp;lt;幻夜&amp;gt;&amp;gt;, 一如既往地好看, 还有好多后面慢慢读了, 不轻易开启一本, 因为这类小说一读就停不下来;&lt;/p&gt;
&lt;p&gt;八月, 在去台湾的旅途中, 开启了&amp;lt;&amp;lt;巨人的陨落&amp;gt;&amp;gt;, 篇幅很长, 多线并行, 整体还不错, 可以一读, 但是没有&amp;lt;&amp;lt;平凡的世界&amp;gt;&amp;gt;那种厚重感, 更多的是对那个时代的那个情况下的好奇;&lt;/p&gt;
&lt;p&gt;技术方面, 七月中旬再次过了一遍&amp;lt;&amp;lt;代码大全&amp;gt;&amp;gt;, 其他时候, 补了三四本容器相关/k8s相关的书, 算是自己在技术方面的一个补充和充电吧.&lt;/p&gt;
&lt;p&gt;快要搬家才发现买那么多书的痛苦;  但是依然会持续地买, 因为书真真的很便宜啊;&lt;/p&gt;
&lt;h2 id="guan-yu-you-xi"&gt;关于游戏&lt;/h2&gt;
&lt;p&gt;生活中, 比以前少了一项&lt;code&gt;骑行&lt;/code&gt;(可惜了我在墙角落灰的大行 P8), 多了一项&lt;code&gt;打游戏&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;十一的时候, 入了ps4, 哈哈, 第一次股票操作换得的奖励;&lt;/p&gt;
&lt;p&gt;然后, 带着妹子打通&lt;code&gt;Knack&lt;/code&gt;,  然后一起分屏打&lt;code&gt;植物大战僵尸&lt;/code&gt;, 一个人&lt;code&gt;猥琐&lt;/code&gt;地过&lt;code&gt;美国末日&lt;/code&gt;, 后来又开新坑, 打&lt;code&gt;神海四&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;想起了很小的时候, 打小霸王的日子; 也算是圆了一个梦;&lt;/p&gt;
&lt;p&gt;手机这边,  &lt;code&gt;纪念碑谷2&lt;/code&gt;第一时间下载通关, 感觉沿袭了经典, 但是没有更多的出彩;  十一的时候, 最后一天跟妹子一人一个手机, 玩&lt;code&gt;To the moon&lt;/code&gt;.  直到玩完最后一幕, 也没有太大感伤, 跟妹子交流里面的剧情, 才恍然大悟, 唏嘘不已;&lt;/p&gt;
&lt;h2 id="guan-yu-sheng-huo"&gt;关于生活&lt;/h2&gt;
&lt;p&gt;2017, 年初的时候, 见了回家长&lt;/p&gt;
&lt;p&gt;2017, 年中的时候, 订了个婚&lt;/p&gt;
&lt;p&gt;2017, 八月份, 公司outing去了趟台湾,&lt;/p&gt;
&lt;p&gt;2017, 快年底的时候, 买了个房, 途中虽然有些波折, 但是最终还是走完流程, 顺利交房;&lt;/p&gt;
&lt;p&gt;2017, 快年底的时候, 结了个婚 
予时光以意义,  2017, 做了很多事情, 也改变了很多;&lt;/p&gt;
&lt;p&gt;首先一个改变, 是从一个大龄单身男青年变成一个已婚人士, 并且步入了法定的中年; 身上的担子和责任更大了, 也需要以不一样的思维去面对这个世界;&lt;/p&gt;
&lt;p&gt;其次, 提前开始了&lt;code&gt;中年危机&lt;/code&gt;的思考, 危机感更强了, 早几年的时候, 是技术焦虑, 而现在, 变成了定位焦虑, 人总是在不断焦虑中, 从一个阶段进入另一个; 磕磕碰碰, 一路向前;&lt;/p&gt;
&lt;p&gt;另外, 年中的时候, 咬咬牙, 彻底戒掉了微博, 改成订阅; 每天刷微博的习惯去掉后, 发现生活其实并不需要信息流的那些刺激, 没了那些, 每天其实可以有更多的时间去做一些有意义的事情;&lt;/p&gt;
&lt;p&gt;到十月份的时候, 还在坚持跑步, 虽然已经退化成一个只能跑七八公里的渣渣, 但是毕竟坚持下来了, 体重也得到了很好的控制;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;予时光以意义, 时间并不会等你, 你必须一点点往前走, 而这一切时光, 不能虚度;&lt;/p&gt;
&lt;p&gt;2017-12-31 于老家&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>k8s APIServer源码: api注册详细细节</title><link href="http://www.wklken.me/posts/2017/09/23/source-apiserver-04.html" rel="alternate"></link><published>2017-09-23T15:00:00+08:00</published><updated>2017-09-23T15:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-04.html</id><summary type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;前面介绍了, api注册过程&lt;/p&gt;
&lt;p&gt;问题: &lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;的&lt;code&gt;route&lt;/code&gt;中, &lt;code&gt;handler&lt;/code&gt;和&lt;code&gt;path&lt;/code&gt;是如何绑定在一起的? &lt;code&gt;handler&lt;/code&gt;在哪里定义的?&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;/api&lt;/code&gt;为例&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-02.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;前面介绍到&lt;code&gt;/api&lt;/code&gt;和&lt;code&gt;/apis&lt;/code&gt;分别注册加入到&lt;code&gt;Container&lt;/code&gt;, 而最终, 二者调用&lt;code&gt;installer.Install(ws)&lt;/code&gt;. 这一步, 我们需要进一步了解细节.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-03.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="webserviceaddroute"&gt;webservice.add(route)&lt;/h2&gt;
&lt;p&gt;问题: 构建Route加入到WebService在哪里处理的?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/endpoints/installer.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;前面介绍了, api注册过程&lt;/p&gt;
&lt;p&gt;问题: &lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;的&lt;code&gt;route&lt;/code&gt;中, &lt;code&gt;handler&lt;/code&gt;和&lt;code&gt;path&lt;/code&gt;是如何绑定在一起的? &lt;code&gt;handler&lt;/code&gt;在哪里定义的?&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;/api&lt;/code&gt;为例&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-02.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;前面介绍到&lt;code&gt;/api&lt;/code&gt;和&lt;code&gt;/apis&lt;/code&gt;分别注册加入到&lt;code&gt;Container&lt;/code&gt;, 而最终, 二者调用&lt;code&gt;installer.Install(ws)&lt;/code&gt;. 这一步, 我们需要进一步了解细节.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-03.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="webserviceaddroute"&gt;webservice.add(route)&lt;/h2&gt;
&lt;p&gt;问题: 构建Route加入到WebService在哪里处理的?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/endpoints/installer.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiResources&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Register the paths in a deterministic (sorted) order to get a deterministic swagger spec.&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;apiResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerResourceHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proxyHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;apiserver/pkg/endpoints/installer.go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅摘录部分核心代码, 这里, 获取&lt;code&gt;handler&lt;/code&gt;之后, 构建&lt;code&gt;route&lt;/code&gt;, 然后加入到&lt;code&gt;webservice&lt;/code&gt;中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;registerResourceHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proxyHandler&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;appendIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourcePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resourceParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

     &lt;span class="c1"&gt;// 获取handler&lt;/span&gt;
    &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CreateResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reqScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Typer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; next&lt;/span&gt;
    &lt;span class="c1"&gt;// 构建route,  action.Path -&amp;gt; handler&lt;/span&gt;
      &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="nx"&gt;Doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="nx"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;QueryParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pretty"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"If 'true', then the output is pretty printed."&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;
                &lt;span class="nx"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"create"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;namespaced&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subresource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;operationSuffix&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="nx"&gt;Produces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storageMeta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProducesMIMETypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Verb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;mediaTypes&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="nx"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;versionedObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="nx"&gt;Reads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;versionedObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="nx"&gt;Writes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;versionedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;addParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 添加route到webservice&lt;/span&gt;
        &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="create-handler"&gt;create handler&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/endpoints/handlers/rest.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// CreateResource returns a function that will handle a resource creation.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;CreateResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt; &lt;span class="nx"&gt;RequestScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;typer&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectTyper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admit&lt;/span&gt; &lt;span class="nx"&gt;admission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RouteFunction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;namedCreaterAdapter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;typer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;createHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NamedCreater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt; &lt;span class="nx"&gt;RequestScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;typer&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectTyper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admit&lt;/span&gt; &lt;span class="nx"&gt;admission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;includeName&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RouteFunction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; here&lt;/span&gt;
        &lt;span class="nx"&gt;responsewriters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusCreated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Kind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersion&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即, 最终&lt;code&gt;handler&lt;/code&gt;执行时, 调用的是&lt;code&gt;rest.Creater.New()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里的 &lt;code&gt;Creater&lt;/code&gt; 是一个&lt;code&gt;interface&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;k8s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;apiserver&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;

&lt;span class="c1"&gt;// Creater is an object that can create an instance of a RESTful object.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Creater&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// New returns an empty object that can be used with Create after request data has been put into it.&lt;/span&gt;
    &lt;span class="c1"&gt;// This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)&lt;/span&gt;
    &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt;

    &lt;span class="c1"&gt;// Create creates a new version of a resource.&lt;/span&gt;
    &lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="nx"&gt;genericapirequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="hui-dao-zui-chu-de-wen-ti"&gt;回到最初的问题&lt;/h2&gt;
&lt;p&gt;最终, &lt;code&gt;handler&lt;/code&gt;调用的是&lt;code&gt;rest.Creater.New()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;creater&lt;/code&gt;声明的位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apiserver/pkg/endpoints/installer.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    creater, isCreater := storage.(rest.Creater)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里, 想要知道&lt;code&gt;handler&lt;/code&gt;最终调用的是哪里定义的方法, 我们需要分析&lt;code&gt;storage&lt;/code&gt;的来源&lt;/p&gt;
&lt;h2 id="di-yi-bu-lian-lu-fen-xi"&gt;第一步:  链路分析&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-04.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;调用链&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// pkg/master/master.go&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; got: apiGroupInfo 初始化&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt; &lt;span class="nx"&gt;corerest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LegacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;legacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewLegacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genericapiserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultLegacyAPIPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallLegacyAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPrefix&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;installAPIResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/span&gt;
&lt;span class="c1"&gt;// NOTE =&amp;gt; apigroup TO apigroupversion&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; got: apigroupversion&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;installAPIResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPrefix&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groupVersion&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupMeta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;apiGroupVersion&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAPIGroupVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groupVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiPrefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;apiGroupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallREST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandlerContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; got: APIGroupVersion.Storage = make(map[string]rest.Storage&lt;/span&gt;
&lt;span class="c1"&gt;//         APIGroupVersion.Storage[path] = apiGroupInfo.VersionedResourcesStorageMap[groupVersion.Version][path]&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getAPIGroupVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groupVersion&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiPrefix&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;genericapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIGroupVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;groupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newAPIGroupVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groupVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Root&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiPrefix&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vendor/k8s.io/apiserver/pkg/endpoints/groupversion.go&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; got: installer.group = APIGroupVersion&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallREST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;installer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newInstaller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;newInstaller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;installer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c1"&gt;// group = APIGroupVersion&lt;/span&gt;
        &lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;minRequestTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MinRequestTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;installer&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vendor/k8s.io/apiserver/pkg/endpoints/installer.go&lt;/span&gt;
&lt;span class="c1"&gt;// got: a.group.Storage[path] = APIInstaller.group.Storage[path] = APIGroupVersion.Storage[path]&lt;/span&gt;
&lt;span class="c1"&gt;//      APIGroupVersion.Storage[path] = apiGroupInfo.VersionedResourcesStorageMap[groupVersion.Version][path]&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiResources&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Register the paths in a deterministic (sorted) order to get a deterministic swagger spec.&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;apiResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerResourceHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proxyHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// apiserver/pkg/endpoints/installer.go&lt;/span&gt;
&lt;span class="c1"&gt;// got: storage = apiGroupInfo.VersionedResourcesStorageMap[groupVersion.Version][path]&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;registerResourceHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proxyHandler&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到了这里, 其实有了一个清晰的结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// apiGroupInfo.VersionedResourcesStorageMap&lt;/span&gt;
&lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;groupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 我们再反向寻找&lt;code&gt;apiGroupInfo&lt;/code&gt;初始化的位置&lt;/p&gt;
&lt;h2 id="di-er-bu-apigroupinfo-chu-shi-hua"&gt;第二步: apiGroupInfo 初始化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt; &lt;span class="nx"&gt;corerest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LegacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;legacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewLegacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; next&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genericapiserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultLegacyAPIPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pkg/registry/core/rest/storage_core.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;LegacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;NewLegacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LegacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;genericapiserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 初始化: VersionedResourcesStorageMap&lt;/span&gt;
    &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;genericapiserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;GroupMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupOrDie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                      &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;ParameterCodec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ParameterCodec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;NegotiatedSerializer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Codecs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;SubresourceGroupVersionKind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersionKind&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ......&lt;/span&gt;

    &lt;span class="c1"&gt;// 初始化了一个restStorage的map，然后赋值给APIGroupInfo.VersionedResourcesStorageMap["v1"]&lt;/span&gt;
    &lt;span class="nx"&gt;restStorageMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"pods"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"pods/attach"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Attach&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"pods/status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"services"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;serviceRest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;nodeStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;restStorageMap&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;restStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"pods"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"pods/attach"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Attach&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"pods/status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"services"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;serviceRest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;nodeStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 根据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// apiGroupInfo.VersionedResourcesStorageMap&lt;/span&gt;
&lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;groupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以得到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"pods"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// equals&lt;/span&gt;
&lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;
&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;&lt;span class="p"&gt;).(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 我们再看下&lt;code&gt;podStorage.Pod&lt;/code&gt;的实现&lt;/p&gt;
&lt;h2 id="di-san-bu-podstoragepod"&gt;第三步: podStorage.Pod&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pkg/registry/core/pod/storage/storage.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PodStorage&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Pod&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;REST&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// REST implements a RESTStorage for pods&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;REST&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;genericregistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;     &lt;span class="c1"&gt;// =&amp;gt; NOTE&lt;/span&gt;
    &lt;span class="nx"&gt;proxyTransport&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RoundTripper&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即, &lt;code&gt;PodStorage.Pod&lt;/code&gt; 类型是 &lt;code&gt;REST&lt;/code&gt;, 而&lt;code&gt;REST.genericregistry.Store&lt;/code&gt;, 其定义文件中存在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/registry/generic/registry/store.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// New implements RESTStorage.New.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="nx"&gt;genericapirequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即,&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VersionedResourcesStorageMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"pods"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// equals&lt;/span&gt;
&lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;
&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;podStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;&lt;span class="p"&gt;).(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// equals&lt;/span&gt;
&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;REST&lt;/span&gt;&lt;span class="p"&gt;).(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;creater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isCreater&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;genericregistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;).(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Creater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-si-bu-creaternew"&gt;第四步: creater.New()&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-05.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/registry/generic/registry/store.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// New implements RESTStorage.New.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pkg/registry/core/pod/storage/storage.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optsGetter&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConnectionInfoGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;proxyTransport&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RoundTripper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;podDisruptionBudgetClient&lt;/span&gt; &lt;span class="nx"&gt;policyclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PodDisruptionBudgetsGetter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;PodStorage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;genericregistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;NewFunc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pod&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// pkg/api/types.go&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Pod&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TypeMeta&lt;/span&gt;
    &lt;span class="c1"&gt;// +optional&lt;/span&gt;
    &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt;

    &lt;span class="c1"&gt;// Spec defines the behavior of a pod.&lt;/span&gt;
    &lt;span class="c1"&gt;// +optional&lt;/span&gt;
    &lt;span class="nx"&gt;Spec&lt;/span&gt; &lt;span class="nx"&gt;PodSpec&lt;/span&gt;

    &lt;span class="c1"&gt;// Status represents the current information about a pod. This data may not be up&lt;/span&gt;
    &lt;span class="c1"&gt;// to date.&lt;/span&gt;
    &lt;span class="c1"&gt;// +optional&lt;/span&gt;
    &lt;span class="nx"&gt;Status&lt;/span&gt; &lt;span class="nx"&gt;PodStatus&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;etcd相关的, 在后面介绍&lt;/p&gt;</content><category term="paas"></category></entry><entry><title>k8s APIServer源码: api注册主体流程</title><link href="http://www.wklken.me/posts/2017/09/23/source-apiserver-03.html" rel="alternate"></link><published>2017-09-23T14:00:00+08:00</published><updated>2017-09-23T14:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-03.html</id><summary type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-01.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;k8s使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;, 在前面, 已经介绍了&lt;code&gt;container&lt;/code&gt;如何初始化的.&lt;/p&gt;
&lt;p&gt;这里, 需要关注, api是如何注册进来的. 即, &lt;code&gt;route -&amp;gt; webservice -&amp;gt; container&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="begin"&gt;begin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;completedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;//  register /api&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;//  register /apis&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallAPIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResourceConfigSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-01.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;k8s使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;, 在前面, 已经介绍了&lt;code&gt;container&lt;/code&gt;如何初始化的.&lt;/p&gt;
&lt;p&gt;这里, 需要关注, api是如何注册进来的. 即, &lt;code&gt;route -&amp;gt; webservice -&amp;gt; container&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="begin"&gt;begin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;completedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;//  register /api&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;//  register /apis&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallAPIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResourceConfigSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restStorageProviders&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="1-api"&gt;1. /api&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt; &lt;span class="nx"&gt;corerest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LegacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;legacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewLegacyRESTStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genericapiserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultLegacyAPIPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallLegacyAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPrefix&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;installAPIResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-apis"&gt;2. /apis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallAPIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiResourceConfigSource&lt;/span&gt; &lt;span class="nx"&gt;serverstorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResourceConfigSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restOptionsGetter&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restStorageProviders&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;RESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;apiGroupsInfo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;apiGroupsInfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallAPIGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;installAPIResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;APIGroupPrefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-all-to-installapiresources"&gt;3. all to installAPIResources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;installAPIResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiPrefix&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;groupVersion&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;apiGroupInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupMeta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;apiGroupVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallREST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandlerContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/endpoints/groupversion.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIGroupVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;InstallREST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;installer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newInstaller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// 新建一个WebService&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewWebService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// 关键, URL注册, add router into ws&lt;/span&gt;
    &lt;span class="nx"&gt;apiResources&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;registrationErrors&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;installer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;lister&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResourceLister&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;lister&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;lister&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;staticLister&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apiResources&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;AddSupportedResourcesWebService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lister&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// container.add(webservice)&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;utilerrors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewAggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;registrationErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建一个&lt;code&gt;WebService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由&lt;code&gt;installer.Install(ws)&lt;/code&gt;将API 对应的&lt;code&gt;route&lt;/code&gt;新建初始化后, 加入到 &lt;code&gt;WebService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;WebService&lt;/code&gt;加入到&lt;code&gt;Container&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完成了&lt;code&gt;router -&amp;gt; webservice -&amp;gt; container&lt;/code&gt;的流程&lt;/p&gt;
&lt;p&gt;后面, 分析 &lt;code&gt;installer.Install(ws)&lt;/code&gt; 具体做了哪些事情(&lt;code&gt;vendor/k8s.io/apiserver/pkg/endpoints/installer.go&lt;/code&gt;)&lt;/p&gt;</content><category term="paas"></category></entry><entry><title>k8s APIServer源码: 服务启动</title><link href="http://www.wklken.me/posts/2017/09/23/source-apiserver-02.html" rel="alternate"></link><published>2017-09-23T13:00:00+08:00</published><updated>2017-09-23T13:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-02.html</id><summary type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;h2 id="qi-dong-liu-cheng"&gt;启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-start-01.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/apiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/app/server.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServerRunOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 构建master配置信息&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;BuildMasterConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// 调用RunServer&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeverStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt; &lt;span class="nx"&gt;informers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SharedInformerFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;h2 id="qi-dong-liu-cheng"&gt;启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-start-01.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/apiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/app/server.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServerRunOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 构建master配置信息&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;BuildMasterConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// 调用RunServer&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeverStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt; &lt;span class="nx"&gt;informers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SharedInformerFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 执行相关初始化&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Complete&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;// =&amp;gt; TO: Container初始化&lt;/span&gt;
    &lt;span class="c1"&gt;// 启动&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PrepareRun&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; next&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/server/genericapiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动主体函数都在这个文件中, 绑定地址/端口号, 并最终启动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;preparedGenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NonBlockingRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;preparedGenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;NonBlockingRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serveSecurely&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;internalStopCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// or&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serveInsecurely&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;internalStopCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; next&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/server/serve.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func &lt;span class="p"&gt;(&lt;/span&gt;s &lt;span class="o"&gt;*&lt;/span&gt;GenericAPIServer&lt;span class="p"&gt;)&lt;/span&gt; serveInsecurely&lt;span class="p"&gt;(&lt;/span&gt;stopCh &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;chan struct&lt;span class="p"&gt;{})&lt;/span&gt; error &lt;span class="p"&gt;{&lt;/span&gt;
    insecureServer &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;http.Server&lt;span class="p"&gt;{&lt;/span&gt;
        Addr&lt;span class="o"&gt;:&lt;/span&gt;           s.InsecureServingInfo.BindAddress&lt;span class="p"&gt;,&lt;/span&gt;
        Handler&lt;span class="o"&gt;:&lt;/span&gt;        s.InsecureHandler&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="o"&gt;//&lt;/span&gt; s.Hnalder &lt;span class="kr"&gt;for&lt;/span&gt; secure
        MaxHeaderBytes&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   runServer&lt;span class="p"&gt;(&lt;/span&gt;insecureServer&lt;span class="p"&gt;,&lt;/span&gt; s.InsecureServingInfo.BindNetwork&lt;span class="p"&gt;,&lt;/span&gt; stopCh&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;next&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


func runServer&lt;span class="p"&gt;(&lt;/span&gt;server &lt;span class="o"&gt;*&lt;/span&gt;http.Server&lt;span class="p"&gt;,&lt;/span&gt; network string&lt;span class="p"&gt;,&lt;/span&gt; stopCh &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;chan struct&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;int&lt;span class="p"&gt;,&lt;/span&gt; error&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    go func&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            var listener net.Listener
            listener &lt;span class="o"&gt;=&lt;/span&gt; tcpKeepAliveListener&lt;span class="p"&gt;{&lt;/span&gt;ln.&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;net.TCPListener&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;http.Server
            err &lt;span class="o"&gt;:=&lt;/span&gt; server.Serve&lt;span class="p"&gt;(&lt;/span&gt;listener&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="containerchu-shi-hua"&gt;Container初始化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/app/server.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt; &lt;span class="nx"&gt;informers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SharedInformerFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 执行相关初始化&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Complete&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;// =&amp;gt; TO: Container初始化&lt;/span&gt;
    &lt;span class="c1"&gt;// 启动&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PrepareRun&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; next&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes/pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;completedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// m.GenericAPIServer.HandlerContainer = APIContainer,   APIContainer.Container =  restful.NewContainer()&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SkipComplete&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// completion is done in Complete, no need for a second time&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/server/config.go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到这里, 完成了 &lt;code&gt;s.Handler, s.InsecureHandler&lt;/code&gt; 的初始化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;completedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;GenericAPIServer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// s.HandlerContainer = APIContainer&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandlerContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewAPIContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewServeMux&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; next 1&lt;/span&gt;

  &lt;span class="c1"&gt;// 生成 Handler&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InsecureHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BuildHandlerChainsFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandlerContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServeMux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; next 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1: vendor/k8s.io/apiserver/pkg/server/mux/container.go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新建一个&lt;code&gt;APIContainer&lt;/code&gt;, 包含&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// NewAPIContainer constructs a new container for APIs&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewAPIContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServeMux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NegotiatedSerializer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;APIContainer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 新建一个Container&lt;/span&gt;
        &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewContainer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nx"&gt;NonSwaggerRoutes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PathRecorderMux&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;UnlistedRoutes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 配置 http.ServerMux&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServeMux&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;
    &lt;span class="c1"&gt;// 配置路由方式, 使用CurlyRouter&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CurlyRouter&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// e.g. for proxy/{kind}/{name}/{*}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;2: vendor/k8s.io/apiserver/pkg/server/config.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Config&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;BuildHandlerChainsFunc&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiHandler&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;insecure&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewConfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;BuildHandlerChainsFunc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="nx"&gt;DefaultBuildHandlerChain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;DefaultBuildHandlerChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiHandler&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;insecure&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;protect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiHandler&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;audit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// add filters to handler&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 这里传递的参数是: &lt;code&gt;s.HandlerContainer.ServeMux&lt;/code&gt;, &lt;code&gt;DefaultBuildHandlerChain&lt;/code&gt;的参数是&lt;code&gt;apiHandler http.Handler&lt;/code&gt;, 前者包含后者&lt;code&gt;interface&lt;/code&gt;定义的方法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net/http/server.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ServeHTTP dispatches the request to the handler whose&lt;/span&gt;
&lt;span class="c1"&gt;// pattern most closely matches the request URL.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;ServeMux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RequestURI&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProtoAtLeast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Connection"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"close"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-start-02.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;初始化后, &lt;code&gt;Hnalder&lt;/code&gt; 以及 &lt;code&gt;InsecureHandler&lt;/code&gt;赋值Container, 然后在&lt;code&gt;new Server&lt;/code&gt;前, 将&lt;code&gt;handler&lt;/code&gt;放入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Addr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InsecureServingInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BindAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InsecureHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;// s.Hanlder for secure&lt;/span&gt;
        &lt;span class="nx"&gt;MaxHeaderBytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="paas"></category></entry><entry><title>k8s APIServer源码: go-restful框架</title><link href="http://www.wklken.me/posts/2017/09/23/source-apiserver-01.html" rel="alternate"></link><published>2017-09-23T12:00:00+08:00</published><updated>2017-09-23T12:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-01.html</id><summary type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;k8s的APIServer, 使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful&lt;/a&gt;作为其处理框架, 注册资源并接收处理 HTTP 请求.&lt;/p&gt;
&lt;p&gt;在阅读APIServer源码之前, 需先理解go-restful主要概念.&lt;/p&gt;
&lt;h2 id="intro"&gt;intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;package for building REST-style Web Services using Google Go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="go-restfu" src="/imgs/k8s/go-restful.png"/&gt;&lt;/p&gt;
&lt;h2 id="concepts"&gt;concepts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Container: 一组WebService的集合, 目的: &lt;code&gt;Containers for WebServices on different HTTP endpoints.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WebService: Route的集合; 为一组Route定义统一的 root path / 请求类型 / 响应类型&lt;/li&gt;
&lt;li&gt;Route: 定义method/ULR path/调用函数/文档/参数 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;k8s的APIServer, 使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful&lt;/a&gt;作为其处理框架, 注册资源并接收处理 HTTP 请求.&lt;/p&gt;
&lt;p&gt;在阅读APIServer源码之前, 需先理解go-restful主要概念.&lt;/p&gt;
&lt;h2 id="intro"&gt;intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;package for building REST-style Web Services using Google Go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="go-restfu" src="/imgs/k8s/go-restful.png"/&gt;&lt;/p&gt;
&lt;h2 id="concepts"&gt;concepts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Container: 一组WebService的集合, 目的: &lt;code&gt;Containers for WebServices on different HTTP endpoints.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WebService: Route的集合; 为一组Route定义统一的 root path / 请求类型 / 响应类型&lt;/li&gt;
&lt;li&gt;Route: 定义method/ULR path/调用函数/文档/参数/  &lt;a href="https://github.com/emicklei/go-restful/blob/master/curly.go"&gt;curly&lt;/a&gt; route; 支持正则及动态谭树&lt;/li&gt;
&lt;li&gt;Filter: &lt;code&gt;Filters for intercepting the request → response flow on Service or Route level&lt;/code&gt;, 可以加&lt;code&gt;global / Webservice / Route&lt;/code&gt; 各自的filter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="init-steps"&gt;init steps:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create container&lt;/li&gt;
&lt;li&gt;create resource WebService&lt;/li&gt;
&lt;li&gt;define route, path, filter and bind to route handler&lt;/li&gt;
&lt;li&gt;add router to WebService&lt;/li&gt;
&lt;li&gt;add WebService to container&lt;/li&gt;
&lt;li&gt;new server with &lt;code&gt;Handler=container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="examples"&gt;examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;示例1: use default containers&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="nx"&gt;Consumes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_XML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_JSON&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="nx"&gt;Produces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_JSON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_XML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/{user-id}"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="nx"&gt;Doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"get a user"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="nx"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user-id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"identifier of the user"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;
    &lt;span class="nx"&gt;Writes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{}))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;UserResource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user-id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;示例2: 含多个container&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// https://github.com/emicklei/go-restful/blob/master/examples/restful-multi-containers.go&lt;/span&gt;
&lt;span class="c1"&gt;// GET http://localhost:8080/hello&lt;/span&gt;
&lt;span class="c1"&gt;// GET http://localhost:8081/hello&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/emicklei/go-restful"&lt;/span&gt;
    &lt;span class="s"&gt;"io"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// add to default container&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

  &lt;span class="c1"&gt;// container 2&lt;/span&gt;
    &lt;span class="nx"&gt;container2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;ws2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ws2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hello2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;container2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Addr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;":8081"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;container2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"default world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;hello2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"second world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;示例3: 包含 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// filter https://github.com/emicklei/go-restful/blob/master/examples/restful-filters.go&lt;/span&gt;
&lt;span class="c1"&gt;// Global Filter&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;globalLogging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FilterChain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[global-filter (logger)] %s,%s\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProcessFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// install a global (=DefaultContainer) filter (processed before any webservice in the DefaultContainer)&lt;/span&gt;
    &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalLogging&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NewUserService&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"start listening on localhost:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewUserService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
        &lt;span class="nx"&gt;Consumes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_XML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_JSON&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
        &lt;span class="nx"&gt;Produces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_JSON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;restful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIME_XML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// install a webservice filter (processed before any route)&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webserviceLogging&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;measureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// install a counter filter&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NewCountFilter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;routeCounter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getAllUsers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;// install 2 chained route filters (processed before calling findUser)&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/{user-id}"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routeLogging&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NewCountFilter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;routeCounter&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="reference_1"&gt;reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ernestmicklei.com/2012/11/go-restful-api-design/"&gt;api design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emicklei/go-restful/tree/master/examples"&gt;code examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="paas"></category></entry><entry><title>重构 - 读书笔记(Python示例)</title><link href="http://www.wklken.me/posts/2017/06/17/refactoring-07.html" rel="alternate"></link><published>2017-06-17T23:39:00+08:00</published><updated>2017-06-17T23:39:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-06-17:/posts/2017/06/17/refactoring-07.html</id><summary type="html">&lt;p&gt;去年十二月, 重读时, 输出了几篇博文, 主要几章重构技巧梳理 &lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html"&gt;6&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html"&gt;7&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html"&gt;8&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html"&gt;9&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html"&gt;10&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html"&gt;11&lt;/a&gt;, 这周重读时, 从另一个角度总结一下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是想着, 找个时间重构, 额, 其实, 重构更应该放在平时, 每一次去变更代码时处理. 毕竟, 所谓的重构契机有时候太过遥远; 而如果不做重构, 痛苦的是每时每刻维护代码的自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外, 如果可能, 尽量加单元测试, 哪怕一次只增加一两个, 一段时间后, 你会发现, 你会感谢过去的自己&lt;/p&gt;
&lt;h2 id="yuan-ze"&gt;原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小步前进, 频繁测试&lt;/li&gt;
&lt;li&gt;隔离变化&lt;/li&gt;
&lt;li&gt;控制可见范围, 让变量/常量/函数/类等, 在最小的范围内可见. 例如设为私有变量/私有函数, 移除不必要的设值函数&lt;/li&gt;
&lt;li&gt;重构时, 不要关注性能. 到性能优化阶段 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;去年十二月, 重读时, 输出了几篇博文, 主要几章重构技巧梳理 &lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html"&gt;6&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html"&gt;7&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html"&gt;8&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html"&gt;9&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html"&gt;10&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html"&gt;11&lt;/a&gt;, 这周重读时, 从另一个角度总结一下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是想着, 找个时间重构, 额, 其实, 重构更应该放在平时, 每一次去变更代码时处理. 毕竟, 所谓的重构契机有时候太过遥远; 而如果不做重构, 痛苦的是每时每刻维护代码的自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外, 如果可能, 尽量加单元测试, 哪怕一次只增加一两个, 一段时间后, 你会发现, 你会感谢过去的自己&lt;/p&gt;
&lt;h2 id="yuan-ze"&gt;原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小步前进, 频繁测试&lt;/li&gt;
&lt;li&gt;隔离变化&lt;/li&gt;
&lt;li&gt;控制可见范围, 让变量/常量/函数/类等, 在最小的范围内可见. 例如设为私有变量/私有函数, 移除不必要的设值函数&lt;/li&gt;
&lt;li&gt;重构时, 不要关注性能. 到性能优化阶段, 再关注性能. 不同阶段关注点不一样, 不要过早优化. 很多时候, 性能并不是瓶颈, 可读性和可维护性更重要&lt;/li&gt;
&lt;li&gt;任何时候, 都不要拷贝代码, 拷贝类, 甚至拷贝源码文件&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="1-ming-ming"&gt;1. 命名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;好的名字, 清晰表达其含义. 命名至关重要&lt;/li&gt;
&lt;li&gt;好的代码应该清楚表达出自己的功能, 变量名称是代码清晰的关键&lt;/li&gt;
&lt;li&gt;如果为了提高代码的可读性, 需要修改某些名字, 大胆去改!&lt;/li&gt;
&lt;li&gt;IDE/单元测试/好的查找替换工具&lt;/li&gt;
&lt;li&gt;建议读&lt;code&gt;编写可读代码的艺术&lt;/code&gt;这本书.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-chang-liang-he-lin-shi-bian-liang"&gt;2. 常量和临时变量&lt;/h2&gt;
&lt;h4 id="ti-qu-chang-liang"&gt;提取常量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个字面数值, 带有特别含义. 创建一个常量, 根据其意义为它命名, 并将上述字面数值替换为这个常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任何时候, 都不要拷贝常量, 当你发现要改一个数据, 要到非常多的文件去改字面值时, 你就需要意识到, 该提取常量了&lt;/p&gt;
&lt;h4 id="jia-ru-yin-ru-jie-shi-xing-bian-liang"&gt;加入: 引入解释性变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个复杂的表达式, 将复杂表达式或其中一部分放入临时变量, 以变量名称来解释表达式用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;was_resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_resized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fen-jie-fen-jie-lin-shi-bian-liang"&gt;分解: 分解临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个临时变量被赋值超过一次, 非循环变量, 也不用于收集计算结果.每次赋值, 创砸一个独立, 对应的临时变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;perimeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;perimeter&lt;/span&gt;

&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qu-chu-yi-chu-lin-shi-bian-liang"&gt;去除: 移除临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;临时变量仅被一个简单表达式赋值一次, 可以去除这个临时变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;临时变量, 简单表达式, 另外, 需要考虑使用次数, 如果仅使用一次, 可以去除, 如果多次, 则需谨慎考虑对可读性的而影响&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;best_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="yi-chu-kong-zhi-biao-ji"&gt;移除: 控制标记&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在一系列布尔表达式中, 某个变量带有"控制标记"(control flag)的作用. 以break语句或return取代控制标记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;yyy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;is_success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_success&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;yyy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# 一定不要忘记&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意力相关.&lt;/p&gt;
&lt;p&gt;这类逻辑中, 很痛苦的是, 你必须无时无刻关注这些控制标记的值, &lt;code&gt;追踪&lt;/code&gt;变量在每一个逻辑之后的变化, 会带来额外的思考负担, 从而让代码变得不易读.&lt;/p&gt;
&lt;h2 id="3-han-shu_1"&gt;3. 函数&lt;/h2&gt;
&lt;h4 id="chai-fen-extract-methodti-lian-han-shu"&gt;拆分: Extract Method提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qu-chu-inline-methodnei-lian-han-shu"&gt;去除: Inline Method内联函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个函数的本体与名称同样清楚易懂, 在函数调用点插入函数本体, 然后移除该函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小型函数, 函数太过简单了, 可能只有一个表达式, 去除函数!&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_length_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'the length is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'valid'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_length_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;'invalid'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'the length is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'valid'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;'invalid)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="he-bing-he-bing-duo-ge-han-shu-shi-yong-can-shu"&gt;合并: 合并多个函数, 使用参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;若干函数做了类似的工作. 但在函数本体中却包含了不同的值. 建立单一函数, 以参数表达那些不同的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;five_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ten_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;percent_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fu-zuo-yong-han-shu-bu-ying-gai-you-fu-zuo-yong"&gt;副作用: 函数不应该有副作用&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数既返回对象状态值, 又修改对象状态. 建立两个不同函数, 一个负责查询, 一个负责修改.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则, 一个函数不应该做两件事, 函数粒度尽量小.&lt;/p&gt;
&lt;h2 id="4-biao-da-shi_1"&gt;4. 表达式&lt;/h2&gt;
&lt;h4 id="guardzhu-yi-li-xiang-guan"&gt;guard(注意力相关)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;过多的条件逻辑, 难以理解正常的执行路径. 在python中的特征是, 缩进太深&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;coolshell中曾经讨论过的问题 &lt;a href="http://coolshell.cn/articles/17757.html"&gt;如何重构“箭头型”代码&lt;/a&gt;, 而在python中的现象是, 缩进嵌套层级太深, 有时候甚至有十几层缩进, 整体难以理解&lt;/p&gt;
&lt;p&gt;而减少嵌套缩进的方式是, 使用&lt;code&gt;guard&lt;/code&gt;语句, 尽早返回,&lt;/p&gt;
&lt;p&gt;注意力相关, 尽早&lt;code&gt;return&lt;/code&gt;, 你也就不用关心已经过去的逻辑了, 只需关注后面代码的逻辑.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="he-bing-he-bing-tiao-jian-biao-da-shi"&gt;合并: 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_seniority&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_months_disabled&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_part_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_not_eligible_for_disability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fen-jie-fen-jie-fu-za-tiao-jian-biao-da-shi"&gt;分解: 分解复杂条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="ti-qu-he-bing-zhong-fu-de-tiao-jian-pian-duan"&gt;提取: 合并重复的条件片段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在条件表达式的每个分支上有着相同的一段代码. 将这段重复代码搬移到条件表达式之外&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是维护系统, 特别是中后期很容易忽略的问题. 很容易在代码中出现, 特别是遇到那种&lt;code&gt;加需求&lt;/code&gt;的地方, 通常, 会选择不动原来的代码, 加个分支, 复制代码下来改. 但这样的后果是, 逐步地, 会发现每个分支中都有重复代码.&lt;/p&gt;
&lt;h2 id="5-can-shu-ji-fan-hui-zhi_1"&gt;5. 参数及返回值&lt;/h2&gt;
&lt;h4 id="can-shu-he-fan-hui-zhi-ti-qu-dui-xiang"&gt;参数和返回值: 提取对象&lt;/h4&gt;
&lt;p&gt;如果参数/返回值是一组相关的数值, 且总是一起出现, 可以考虑提取成一个对象.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_width_height&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_shape&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似的还有: &lt;code&gt;start_time/end_time -&amp;gt; TimeRange&lt;/code&gt; /&lt;/p&gt;
&lt;h4 id="jian-shao-can-shu"&gt;减少参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;对象调用了某个函数, 并将所得结果作为参数, 传递给另一个函数. 而接受该参数的函数本身也能调用前一个函数. 让参数接收者去除该参数, 并直接调用前一个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;discount_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_discount_level&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;discount_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="6-lei_1"&gt;6. 类&lt;/h2&gt;
&lt;h4 id="ban-yi-han-shu-zi-duan"&gt;搬移: 函数/字段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;搬移函数: 某个函数与所在类之外的另一个类有更多的交互, 调用或被调用(例如: 使用另一个对象的次数比使用自己所在对象的次数还多). 即, 跟另一个类更相关. 则搬移过去&lt;/li&gt;
&lt;li&gt;搬移字段: 某个字段被其所在类之外的另一个类更多地用到&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="chai-fen-chai-fen-lei"&gt;拆分: 拆分类&lt;/h4&gt;
&lt;p&gt;某个类做了应该由两个类做的事. 类太大/太臃肿. 建立一个新类, 将相关字段和函数从旧类版移到新类&lt;/p&gt;
&lt;p&gt;特征: 类中某些字段是有关系的整体, 或者有相同的前缀&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Persion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qu-chu"&gt;去除&lt;/h4&gt;
&lt;p&gt;一个类没有做太多的事情, 不再有独立存在的理由.&lt;/p&gt;
&lt;h2 id="7-mo-shi_1"&gt;7. 模式&lt;/h2&gt;
&lt;p&gt;原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慎用&lt;/li&gt;
&lt;li&gt;只使用你理解的模式&lt;/li&gt;
&lt;li&gt;只在符合的业务场景使用对应模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="adapter"&gt;adapter&lt;/h4&gt;
&lt;p&gt;你需要为提供服务的类增加功能, 但是你无法修改这个类.&lt;/p&gt;
&lt;p&gt;使用组合(推荐, 持有对象)/继承(加子类), 持有该对象, 增加对应附加功能&lt;/p&gt;
&lt;p&gt;adapter思维.&lt;/p&gt;
&lt;p&gt;使用场景: 使用一些第三方库处理外部依赖, 例如依赖一个系统, &lt;code&gt;业务A&lt;/code&gt;(requests)/&lt;code&gt;es&lt;/code&gt;(Elasticsearch)/&lt;code&gt;redis&lt;/code&gt;(redispy), 但是, 基于第三方系统, 你需要有自己业务相关的统一处理逻辑, 此时, 你可以建立一个&lt;code&gt;XXClient&lt;/code&gt;, 持有第三方组件底层调用逻辑, 同时封装自身业务逻辑, 在上层直接调用&lt;/p&gt;
&lt;h4 id="facade"&gt;facade&lt;/h4&gt;
&lt;p&gt;适配模式中举的例子, 也有&lt;code&gt;facade&lt;/code&gt;的思想, 将复杂的东西, 统一封装, 对外提供相对简单清晰地接口&lt;/p&gt;
&lt;h4 id="template-method"&gt;template method&lt;/h4&gt;
&lt;p&gt;出现的次数也很高&lt;/p&gt;
&lt;h4 id="zhuang-shi-qi"&gt;装饰器&lt;/h4&gt;
&lt;p&gt;python中最常用&lt;/p&gt;
&lt;h4 id="qi-ta"&gt;其他&lt;/h4&gt;
&lt;p&gt;根据使用场景, 应用策略/桥梁/工厂/观察者等等, 具体看业务场景&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ju-li_1"&gt;举例&lt;/h2&gt;
&lt;p&gt;重构一个相对较大的&lt;code&gt;django&lt;/code&gt;项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确业务对象, 对象概念, 对象边界&lt;/li&gt;
&lt;li&gt;明确分层&lt;/li&gt;
&lt;li&gt;明确代码目录结构, 划分模块, 明确每个模块可以放入的东西&lt;/li&gt;
&lt;li&gt;粗粒度重构: 移动模块/类/函数, 根据前几步的划分, 将模块/类/函数等, 移动到对应模块中, 同时, 修改&lt;code&gt;import&lt;/code&gt;和调用点&lt;/li&gt;
&lt;li&gt;中粒度重构: 根据&lt;code&gt;django&lt;/code&gt;项目本身划分, 移动函数&lt;/li&gt;
&lt;li&gt;中粒度重构: Extract Method. 读具体函数代码, 遇到 &lt;code&gt;重复代码 / 过长函数 / 过大的类 / 超大的if-else或switch / 包含大段注释的代码&lt;/code&gt; 等, 思考, 提炼函数, 放入对应模块&lt;/li&gt;
&lt;li&gt;细粒度重构: 提取常量 / 提取枚举 / 修改模块名类名函数名变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;django&lt;/code&gt;项目, 原则&lt;code&gt;fat models, helper modules, thin views, stupid templates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fat model&lt;/code&gt;, 将对象本身相关的, 尽量放入&lt;code&gt;models&lt;/code&gt;, 这个对象相关的, 可以加入补充一系列&lt;code&gt;porperty&lt;/code&gt;/&lt;code&gt;classmethod&lt;/code&gt;/&lt;code&gt;staticmethod&lt;/code&gt;, 可以有效地降低使用这个对象时调用处的代码复杂度. 例如, 每次取兑现改一个字段都需要进行转换, 则搞个&lt;code&gt;property&lt;/code&gt;替换每次都需要的转换逻辑. (找拿到&lt;code&gt;model&lt;/code&gt;对象后的处理逻辑代码中那些反复出现的, 重复的)&lt;/li&gt;
&lt;li&gt;将对象查询相关的, 全部迁移到&lt;code&gt;manager&lt;/code&gt;中, 需要先通过&lt;code&gt;Model.objects&lt;/code&gt;查询然后做各种事情的, 迁移放入到&lt;code&gt;manager&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utils&lt;/code&gt;, 将业务逻辑无关的工具函数等, 统一归入&lt;code&gt;utils&lt;/code&gt;模块中; 将业务有关但多个&lt;code&gt;application&lt;/code&gt;共用的&lt;code&gt;utils&lt;/code&gt;放入到&lt;code&gt;common.utils&lt;/code&gt;模块中, 而将&lt;code&gt;appication&lt;/code&gt;依赖的局部&lt;code&gt;utils&lt;/code&gt;, 放入到&lt;code&gt;application.utils&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constants&lt;/code&gt;, 同上, 区分通用, 还是某个&lt;code&gt;applications&lt;/code&gt;中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thin view&lt;/code&gt;, 业务逻辑, 尽量瘦小简短&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stupid template&lt;/code&gt;, 模板, 尽量傻瓜, 不要包含复杂计算/判断逻辑, 将复杂迁移到后端代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta_1"&gt;其他&lt;/h2&gt;
&lt;p&gt;善用工具, 有方案设计评审, 平时通过&lt;code&gt;pull request&lt;/code&gt;, 走&lt;code&gt;code review&lt;/code&gt;, 有代码风格自动检查, 要求单元测试, 走cicd流程. 在平时, 就有意识地控制代码质量&lt;/p&gt;</content><category term="books"></category></entry><entry><title>写给新人的沟通建议</title><link href="http://www.wklken.me/posts/2017/04/09/suggestions-about-communication.html" rel="alternate"></link><published>2017-04-09T00:00:00+08:00</published><updated>2017-04-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-04-09:/posts/2017/04/09/suggestions-about-communication.html</id><summary type="html">&lt;p&gt;最近也碰上抄袭的号, 转了我几年前两个文章, 只改了标题, 然后删掉每篇文章中我个人的一两段吐槽, 然后发出来. 抄袭当原创, 然后在评论里以作者的角度回复别人, 看着有点恶心. 这种成本还是太低了, 举报两次, 知乎给删掉了, 但是对于我来说还是很不爽的, 举报的成本太高了, 来一篇举报一篇. 这个号下面的文章(&lt;a href="https://www.zhihu.com/people/calj/pins/posts"&gt;入口&lt;/a&gt;), 目测都是直接用别人的文章改个标题了事.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多年前写过一篇在自己博客里面, &lt;a href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html"&gt;后端不高兴——关于协作和沟通&lt;/a&gt;, 做后端的同学可以看看吐槽哈.&lt;/p&gt;
&lt;p&gt;工作也好多年了, 前前后后跟不少新人合作过, 实际合作中不免各种问题, 都是从新人过来的, 所以打算写一些点, 算是一些感受吧&lt;/p&gt;
&lt;h2 id="guan-yu-wen-ti-miao-shu"&gt;关于问题描述&lt;/h2&gt;
&lt;p&gt;好像之前有人也讲过.&lt;/p&gt;
&lt;p&gt;不要发: &lt;code&gt;hi, 在吗&lt;/code&gt;, 你可能会发现过了很久对方回复:&lt;code&gt;在&lt;/code&gt;, 然后你可能也没立即接下一句, 晚一会回复:&lt;code&gt;xxxx问题&lt;/code&gt;, 然后对方又隔了很长一段时间才回....如此来来往往, 一次沟通跨度从一两个小时到好几天&lt;/p&gt;
&lt;p&gt;一般新人会觉得心累, 有点&lt;code&gt;玻璃心&lt;/code&gt;的会觉得委屈, 如果事情紧急, 光自己干着急了.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;老鸟&lt;/code&gt;也很累, 一般事情比较多 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近也碰上抄袭的号, 转了我几年前两个文章, 只改了标题, 然后删掉每篇文章中我个人的一两段吐槽, 然后发出来. 抄袭当原创, 然后在评论里以作者的角度回复别人, 看着有点恶心. 这种成本还是太低了, 举报两次, 知乎给删掉了, 但是对于我来说还是很不爽的, 举报的成本太高了, 来一篇举报一篇. 这个号下面的文章(&lt;a href="https://www.zhihu.com/people/calj/pins/posts"&gt;入口&lt;/a&gt;), 目测都是直接用别人的文章改个标题了事.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多年前写过一篇在自己博客里面, &lt;a href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html"&gt;后端不高兴——关于协作和沟通&lt;/a&gt;, 做后端的同学可以看看吐槽哈.&lt;/p&gt;
&lt;p&gt;工作也好多年了, 前前后后跟不少新人合作过, 实际合作中不免各种问题, 都是从新人过来的, 所以打算写一些点, 算是一些感受吧&lt;/p&gt;
&lt;h2 id="guan-yu-wen-ti-miao-shu"&gt;关于问题描述&lt;/h2&gt;
&lt;p&gt;好像之前有人也讲过.&lt;/p&gt;
&lt;p&gt;不要发: &lt;code&gt;hi, 在吗&lt;/code&gt;, 你可能会发现过了很久对方回复:&lt;code&gt;在&lt;/code&gt;, 然后你可能也没立即接下一句, 晚一会回复:&lt;code&gt;xxxx问题&lt;/code&gt;, 然后对方又隔了很长一段时间才回....如此来来往往, 一次沟通跨度从一两个小时到好几天&lt;/p&gt;
&lt;p&gt;一般新人会觉得心累, 有点&lt;code&gt;玻璃心&lt;/code&gt;的会觉得委屈, 如果事情紧急, 光自己干着急了.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;老鸟&lt;/code&gt;也很累, 一般事情比较多, 各种事情混在一起, 面对这种类型沟通, 无法获取足够多的信息, 自然无法快速解决. 其实心里也想事情快速处理掉.&lt;/p&gt;
&lt;p&gt;这种有点类似&lt;code&gt;打乒乓球&lt;/code&gt;的沟通方式是不对的. 每次没有提供足够的信息, 而又期待对方快速反馈, 然而每个人都有自己忙碌的事情, 势必导致这类沟通十分之低效.&lt;/p&gt;
&lt;p&gt;正确的沟通方式应该是: &lt;code&gt;倾倒式&lt;/code&gt;的沟通.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hi xxxx:
我是xxxxx
目前遇到一个问题
现象
数据
结果

这个问题是xxxxxx?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而对方在看到你的消息后, 一次性就可以全面了解你的问题, 了然于胸, 很快就能解决问题.&lt;/p&gt;
&lt;p&gt;而区别是: 一次传达的有效信息量.&lt;/p&gt;
&lt;h2 id="ru-he-wen-ti"&gt;如何问题&lt;/h2&gt;
&lt;p&gt;建议不管是新手还是老鸟, 都读一读 &lt;a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md"&gt;提问的智慧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际上, 有些时候某些问题看起来十分的&lt;code&gt;无奈&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 系统挂了       -- 一脸懵逼, 什么系统
- 接口返回错误   -- excuse me? 哪个接口? 给的参数是? 返回结果/状态码是?
- 页面有点问题   -- 哪个页面? 什么问题?

......
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很是&lt;code&gt;无奈&lt;/code&gt;, 很多问题看起来&lt;code&gt;言简意赅&lt;/code&gt;, 但是蛋疼的也是这个, 缺乏信息量, 缺乏对问题的准确描述, 往往站在信息接收人的角度是: 一脸懵逼. 然后, 就开始来来往往的&lt;code&gt;沟通&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以: 如何准确描述问题, 算是提问的基本要求了&lt;/p&gt;
&lt;h2 id="ji-chu-wen-ti-bu-yao-wen"&gt;基础问题不要问&lt;/h2&gt;
&lt;p&gt;基础问题, 例如某些库的方法/参数, http状态码, 某个异常堆栈信息.&lt;/p&gt;
&lt;p&gt;很多时候, 拿这类问题去问别人, 是十分低效且有害的!&lt;/p&gt;
&lt;p&gt;因为: 这个时代, 搜索引擎这么强大, 技术资料如此丰富, 各类社区如此多前人踩坑, 团队的wiki如此完善, 你还拿一个如此基础的问题去问别人, 似乎说不过去吧.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAxNzI4MTMwMw==&amp;amp;mid=402360586&amp;amp;idx=1&amp;amp;sn=49ee00777438718a73f519742ed5c5d6#rd"&gt;只要是搜索引擎能回答的就别问别人……&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也不是说不能问, 但是前提是, 自己搜索无果, 无法解决的情况下.(google, 且会基本搜索技巧)&lt;/p&gt;
&lt;p&gt;这类问题, 看起来很简单是吧, 对其他人也许也就一句话的事情, 但是, 这样造成不好的结果是, 对方被你打断了! 无论多短暂, 都是打断, 断点-思考-回答-回到断点.&lt;/p&gt;
&lt;p&gt;因为回答你一个本可以自己解决的问题, 而手头正在做的事情被打断.&lt;/p&gt;
&lt;p&gt;而这个, 对效率影响是非常大的.&lt;/p&gt;
&lt;p&gt;所以, 忠告: 不要把同事当做搜索引擎, 尊重对方.&lt;/p&gt;
&lt;h2 id="yu-dao-wen-ti-xian-cong-zi-ji-cha-qi"&gt;遇到问题, 先从自己查起&lt;/h2&gt;
&lt;p&gt;很多人遇到问题后, 第一意识是, 我的代码是ok的, 你的接口有问题.&lt;/p&gt;
&lt;p&gt;然后, 直接抛给对方(对方大写懵逼)&lt;/p&gt;
&lt;p&gt;而此时, 对方心里肯定第一意识也是: 我的代码是ok的, 一定不是我的问题. 此时心态上会有些变化, 然后去确认接口是不是有问题, 如果有问题也就罢了, 没问题会反向再反馈回来, 自己排查.&lt;/p&gt;
&lt;p&gt;而很多时候, 要么没看文档, 没配host, 配错host, 环境不对, 没有遵循协议, 参数传错等等一系列自己代码的低级错误导致的.&lt;/p&gt;
&lt;p&gt;也许这都是小事, 但当次数多了, 而大多数问题不是对方问题时, 你的信誉点已经降到了最低, 你的任何问题反馈, 无形中会被降级.&lt;/p&gt;
&lt;p&gt;想象一下, 有人说你接口有问题, 然后你确认服务没问题(几分钟), 找对方要参数数据复现没问题(十几分钟), 然后到对方电脑查问题(几分钟), 一折腾半个多小时没了. 最后发现是一个低级问题(例如没配host), 你心里.....&lt;/p&gt;
&lt;p&gt;所以, 先确认错误, 排查下是否是自己的问题&lt;/p&gt;
&lt;h2 id="bu-yao-hu-luan-cai-ce-na-shu-ju-shuo-hua"&gt;不要胡乱猜测, 拿数据说话&lt;/h2&gt;
&lt;p&gt;接上个问题, 当你认为别人系统有问题时, 请拿数据说话. 当别人认为你系统有问题的时候, 请对方提供数据.&lt;/p&gt;
&lt;p&gt;发现自己在跟人沟通时, 问的最多的问题是: 把调用的接口/参数/返回值/状态码/日志等等, 发给我, 谢谢.&lt;/p&gt;
&lt;p&gt;发现有问题, 不要猜, 代码是确定的, 查就是了.&lt;/p&gt;
&lt;p&gt;当看到报错, 从上往下查, 一层层向下跟踪, 确认输入/输出/异常/状态码等. 学会追踪调用是必备技能.&lt;/p&gt;
&lt;p&gt;有足够的数据才能断定是哪的问题&lt;/p&gt;
&lt;p&gt;如果是自己的问题, 修正.&lt;/p&gt;
&lt;p&gt;如果是别人的问题, 拿着数据, 也方便别人定位问题.&lt;/p&gt;
&lt;p&gt;特别忌讳的是: 没有数据的情况下, 猜测, 然后把问题抛出去了, 会造成组织效率低下, 可能你一个小小猜测, 花费别人很多时间. 每个人的时间都需要尊重.&lt;/p&gt;
&lt;h2 id="gai-wen-jiu-wen-bu-yao-hai-pa-da-duan"&gt;该问就问, 不要害怕打断&lt;/h2&gt;
&lt;p&gt;基于上面的几点, 假设问题自己没法解决, 需要求助, 那就求助吧.&lt;/p&gt;
&lt;p&gt;不要害怕打扰别人, 一般程序员都很nice, 有问题, 把问题准备好, 精确描述, 自己的尝试, 目前遇到的点等等, 将信息汇聚, 一次性问, 然后直接去问.&lt;/p&gt;
&lt;p&gt;紧急请当面, 次紧急用电话, 不大紧急, 可以用IM 工具, 对方实在忙, 可以先约个时间.&lt;/p&gt;
&lt;h2 id="xiao-jie"&gt;小结&lt;/h2&gt;
&lt;p&gt;学会基本的沟通技巧, 善用之, 同时, 尊重他人的时间, 他人也会尊重你的时间.&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>vim 杂谈 - 关于快速编辑</title><link href="http://www.wklken.me/posts/2017/03/25/vim-about-edit.html" rel="alternate"></link><published>2017-03-25T00:00:00+08:00</published><updated>2017-03-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-03-25:/posts/2017/03/25/vim-about-edit.html</id><summary type="html">&lt;p&gt;在&lt;code&gt;vim&lt;/code&gt;中写代码, 并不是, 我们所见到的代码都要一个个字符输进去, 一定不是这样的.&lt;/p&gt;
&lt;p&gt;这篇, 让我们来谈谈如何进行快速编辑.&lt;/p&gt;
&lt;p&gt;当然, 一篇文章只能概述, 给大家一些参考, 具体每项都可以自行找相关资料. 很多外链, 莫跳丢了&lt;/p&gt;
&lt;p&gt;注意, 其中会涉及到比较多的插件, 而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 用的是 &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, 如果你用得是其他的插件管理工具, 自行转换.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="textobject"&gt;textobject&lt;/h2&gt;
&lt;p&gt;文本对象, 是进行快速编辑的基础秘诀. 将一个单词, 句子, 段落当成一个对象看待, 可以进行快速选中/替换/删除等操作&lt;/p&gt;
&lt;p&gt;有一篇文章解释得很清楚 &lt;a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;Vim Text Objects: The Definitive Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令格式:  操作+范围+对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w  -  word单词
s  -  sentence句子
p  -  paragraph段落 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;在&lt;code&gt;vim&lt;/code&gt;中写代码, 并不是, 我们所见到的代码都要一个个字符输进去, 一定不是这样的.&lt;/p&gt;
&lt;p&gt;这篇, 让我们来谈谈如何进行快速编辑.&lt;/p&gt;
&lt;p&gt;当然, 一篇文章只能概述, 给大家一些参考, 具体每项都可以自行找相关资料. 很多外链, 莫跳丢了&lt;/p&gt;
&lt;p&gt;注意, 其中会涉及到比较多的插件, 而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 用的是 &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, 如果你用得是其他的插件管理工具, 自行转换.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="textobject"&gt;textobject&lt;/h2&gt;
&lt;p&gt;文本对象, 是进行快速编辑的基础秘诀. 将一个单词, 句子, 段落当成一个对象看待, 可以进行快速选中/替换/删除等操作&lt;/p&gt;
&lt;p&gt;有一篇文章解释得很清楚 &lt;a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;Vim Text Objects: The Definitive Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令格式:  操作+范围+对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w  -  word单词
s  -  sentence句子
p  -  paragraph段落
' " ) ] } &amp;gt; 等成对的
t  -  Tag标签
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;范围&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i  -  在里面
a  -  所有, 包括成对的引号等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d  -  删除
v  -  选中
c  -  替换
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子, &lt;code&gt;|&lt;/code&gt;代表光标位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;123(a|bc)456

di)   删除引号内的内容   =&amp;gt; 123()456
da)   删除引号内容, 包括引号  =&amp;gt; 123456
vi)   选中引号内内容 abc
....
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="textobjectzeng-qiang"&gt;textobject增强&lt;/h2&gt;
&lt;p&gt;vim自带了很多文本对象, 但是还可以进一步增强, 例如, 以行&lt;code&gt;l&lt;/code&gt;(&lt;code&gt;line&lt;/code&gt;)/以文件&lt;code&gt;e&lt;/code&gt;(&lt;code&gt;entire file&lt;/code&gt;)/以缩进&lt;code&gt;i&lt;/code&gt;(&lt;code&gt;indent&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 中, 加了如下的几个文本对象, 这样, 在写&lt;code&gt;python&lt;/code&gt;代码时, 你可以很方便的批量选中同一个缩进里面的所有代码块, 即使代码之间有空行.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904505226654.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;还有很多插件, 提供了更加丰富的文本对象, 例如, 函数中的参数等. 可以根据需要自行加入&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="dai-ma-bu-quan"&gt;代码补全&lt;/h2&gt;
&lt;p&gt;代码补全, 是必需品, 也是提升效率的大杀器.&lt;/p&gt;
&lt;p&gt;对比试用过非常多的补全插件之后, 最终选定了 &lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt;. 快速提示/模糊匹配/跳转到函数定义等等, 总之, 非常流畅, 体验很好.&lt;/p&gt;
&lt;p&gt;这个插件唯一缺点是: &lt;code&gt;太难装&lt;/code&gt;. 没错, 就是太难装, 对&lt;code&gt;vim&lt;/code&gt;版本有要求, 然后在天朝这种网络环境下要拉接近&lt;code&gt;300M&lt;/code&gt;的文件下来不是一件很容易的事情, 下完之后还得编译&lt;code&gt;&amp;gt;_&amp;lt;#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是, 历经千辛万苦之后, 你会发现这是值得的, 有了 &lt;code&gt;YCM&lt;/code&gt;, 写代码的速度和质量能提升非常非常非常非常多.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plug 'Valloric/YouCompleteMe'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L368"&gt;k-vim vimrc.bundles#L368&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;几个常用快捷键&lt;code&gt;,jd&lt;/code&gt;/&lt;code&gt;,gd&lt;/code&gt;跳转到定义处, &lt;code&gt;ctrl+空格&lt;/code&gt;主动触发补全(默认输入2个字符以上自动补, 可以什么都没输入触发补全), &lt;code&gt;ctrl+j/k&lt;/code&gt;或者&lt;code&gt;ctrl+p/n&lt;/code&gt;进行补全上下选中&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904511192878.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;golang&lt;/code&gt;, 使用 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dai-ma-pian-duan"&gt;代码片段&lt;/h2&gt;
&lt;p&gt;代码片段, 是代码补全的互补. 当你预先定义一些常用的片段, 就能输入关键字后, 触发补全整个代码片段&lt;/p&gt;
&lt;p&gt;这里推荐的插件是 &lt;a href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt;(代码片段补全工具) 配合 &lt;a href="https://github.com/honza/vim-snippets"&gt;vim-snippets&lt;/a&gt;(常用代码片段, 包含各类预研)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L410"&gt;k-vim vimrc.bundles#L410&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意, &lt;code&gt;ultisnips&lt;/code&gt;快捷键和&lt;code&gt;YCM&lt;/code&gt;冲突, 所以配置两个插件时需注意&lt;/p&gt;
&lt;p&gt;举个栗子: 输入&lt;code&gt;class&lt;/code&gt; 然后 &lt;code&gt;Tab&lt;/code&gt; 触发补全, 就能进行类似完形填空的流程, 一路输入, 然后&lt;code&gt;Tab&lt;/code&gt;到下一个框, 几下就能完成一段代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904519598794.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;当然, 可以自己添加补充代码片段. &lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以&lt;code&gt;python&lt;/code&gt;为例, 除了&lt;code&gt;vim-snippets&lt;/code&gt;中带的那些补全关键字, 我还配置了很多单字符直接补全&lt;code&gt;python&lt;/code&gt;关键字(&lt;a href="https://github.com/wklken/k-vim/blob/master/UltiSnips/python.snippets"&gt;github python.snippets&lt;/a&gt;)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;t -&amp;gt; True
f -&amp;gt; False
n -&amp;gt; None
r -&amp;gt; return
p -&amp;gt; print
....
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yin-hao-gua-hao-deng-ji-html-biao-qian-bu-quan"&gt;引号括号等及 html 标签不全&lt;/h2&gt;
&lt;p&gt;另一个必须品, 当我们输入引号(&lt;code&gt;'' ""&lt;/code&gt;), 括号(&lt;code&gt;() [] {}&lt;/code&gt;) 以及 &lt;code&gt;html&lt;/code&gt;的标签&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, 这类都是成对出现的, &lt;/p&gt;
&lt;p&gt;当我们输入一半, 自动补全另一半字符. 这里用到的插件是 &lt;a href="https://github.com/Raimondi/delimitMate"&gt;delimitMate&lt;/a&gt; 和 &lt;a href="https://github.com/docunext/closetag.vim"&gt;closetag.vim&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 针对Python做了个优化, 可以快速补全&lt;code&gt;docstring&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"""
"""
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L442"&gt;k-vim vimrc.bundles#L442&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前一篇博客: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-delimitmate.html"&gt;VIM插件: DELIMITMATE(符号自动补全)&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="duo-guang-biao-bian-ji"&gt;多光标编辑&lt;/h2&gt;
&lt;p&gt;在编辑一段代码时, 例如, 想修改函数体内某个变量名, 除了用替换(查找+替换相对复杂), 还可以用 &lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt;, 之前写的一篇博客 &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-multiplecursors.html"&gt;VIM插件: MULTIPLE-CURSORS(多光标操作)&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904526993739.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L518"&gt;k-vim vimrc.bundles#L518&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配合 &lt;a href="https://github.com/dyng/ctrlsf.vim"&gt;ctrlsf&lt;/a&gt; 插件, 搜索后多光标直接编辑保存, 简直是重构神器, 后面细说&lt;/p&gt;
&lt;h2 id="kuai-su-zhu-shi"&gt;快速注释&lt;/h2&gt;
&lt;p&gt;很多时候要注释多行的代码, 或者解开注释. 你需要 &lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你只需要 &lt;code&gt;选中&lt;/code&gt;(&lt;code&gt;shift+v+j/k&lt;/code&gt;) 然后 &lt;code&gt;,cc&lt;/code&gt;.  如果仅注释当前行的话, 可以省了&lt;code&gt;选中&lt;/code&gt;这一步, 直接&lt;code&gt;,cc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解开注释 &lt;code&gt;,cu&lt;/code&gt;(注意, 这里的&lt;code&gt;,&lt;/code&gt;等于&lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;键)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" quick edit
" 快速注释
Plug 'scrooloose/nerdcommenter'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示博客: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-nerdcommenter.html"&gt;VIM插件: NERDCOMMENTER(快速注释)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="xiu-gai-huan-rao-zi-fu"&gt;修改环绕字符&lt;/h2&gt;
&lt;p&gt;场景: 给单词加引号, 给十个单词加引号, 删除某一对引号/括号, 加&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;将字符串括起来&lt;/p&gt;
&lt;p&gt;用到两个插件 &lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;(负责环绕字符编辑) 和 &lt;a href="https://github.com/tpope/vim-repeat"&gt;vim-repeat&lt;/a&gt;(负责重复)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 快速加入修改环绕字符
" for repeat -&amp;gt; enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;吐槽下, &lt;code&gt;vim-surround&lt;/code&gt;快捷键特别感人.....&lt;/p&gt;
&lt;p&gt;博客说明: &lt;a href="http://www.wklken.me/posts/2015/06/13/vim-plugin-surround-repeat.html"&gt;VIM插件: SURROUND &amp;amp; REPEAT(成对符号编辑)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dui-qi"&gt;对齐&lt;/h2&gt;
&lt;p&gt;偶尔的需求, 需要根据&lt;code&gt;=&lt;/code&gt;或&lt;code&gt;,&lt;/code&gt;或者空格, 将多行数据对齐, 之前的一篇博客说明 &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easyalign.html"&gt;VIM插件: EASY-ALIGN(快速对齐)&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" easyalign
" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L466"&gt;k-vim vimrc.bundles#L466&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="qu-xing-wei-kong-ge"&gt;去行尾空格&lt;/h2&gt;
&lt;p&gt;轻微强迫症, 忍不了每行代码行尾没用的空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" trailingwhitespace
" 快速去行尾空格 [, + &amp;lt;Space&amp;gt;]
Plug 'bronson/vim-trailing-whitespace'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配了 &lt;code&gt;,+空格&lt;/code&gt;, 一键去除当前文件所有的行尾空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" trailingwhitespace {{{
    map &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :FixWhitespace&amp;lt;cr&amp;gt;
" }}}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后面文章会提及&lt;code&gt;vim中那些被动技能&lt;/code&gt;, 会提到如何配置保存时自动去除行尾空格&lt;/p&gt;
&lt;h2 id="suo-jin"&gt;缩进&lt;/h2&gt;
&lt;p&gt;写代码时, 有时候要进行缩进, 选中后, 例如&lt;code&gt;shift-v&lt;/code&gt;加&lt;code&gt;jk&lt;/code&gt;上下选中多行, &lt;code&gt;&amp;lt;&lt;/code&gt;或者&lt;code&gt;&amp;gt;&lt;/code&gt;可以进行整体缩进, 但是遇到个问题, 有时候需要多次缩进, 而默认, 缩进一次后, 选中消失, 要操作, 得再次选中.....(&lt;code&gt;&amp;gt;_&amp;lt;#&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;增加如下配置, 缩进完自动选中, 可以再次缩进&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 调整缩进后自动选中，方便再次操作
vnoremap &amp;lt; &amp;lt;gv
vnoremap &amp;gt; &amp;gt;gv
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kuai-su-ti-huan-shan-chu-zui-jin-cha-ru-de-nei-rong"&gt;快速替换/删除最近插入的内容&lt;/h2&gt;
&lt;p&gt;当我们插入一段内容, 然后切换到普通模式后, 相对插入的内容进行快速选中, 然后删除或者替换, 可以&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 选中并高亮最后一次插入的内容
nnoremap gv `[v`]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pythonkai-fa"&gt;python开发&lt;/h2&gt;
&lt;p&gt;两个插件推荐&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;" 改变编辑时缩进行为, 更友好的缩进&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'hynek/vim-python-pep8-indent'&lt;/span&gt;

&lt;span class="s2"&gt;" import 排序, 强迫症福音&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'fisadev/vim-isort'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预告: 下一篇, 将快速导航, 如何在项目维度导航跳转&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>vim 杂谈 - 关于移动</title><link href="http://www.wklken.me/posts/2017/03/20/vim-about-move.html" rel="alternate"></link><published>2017-03-20T00:00:00+08:00</published><updated>2017-03-20T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-03-20:/posts/2017/03/20/vim-about-move.html</id><summary type="html">&lt;p&gt;这个专栏的主要目的, 是介绍后台开发, vim, python, 工具, 效率, 项目等等一些所思所想. 欢迎关注及交流.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个项目, 虽然一年只更新一两次, 但是里面很多配置, 都是基于使用中的痛点, 以及 &lt;code&gt;符合自觉&lt;/code&gt; 的原则进行的变更.&lt;/p&gt;
&lt;p&gt;整体而言, &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 虽然做成了一个开箱即用的配置, 但是很多使用者更想知道一些更具体的说明, 包含配置项, 配置原因等等.&lt;/p&gt;
&lt;p&gt;之前有个blog有提过一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't put anything in your .vimrc you don't understand!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我不是十分赞同(我更倾向于基于一个完备的配置再进行深入了解和 DIY, 毕竟从0打造成本略高).&lt;/p&gt;
&lt;p&gt;但是觉得有必要, 写一写, 谈一谈&lt;code&gt;vim&lt;/code&gt;中的一些配置的原因.&lt;/p&gt;
&lt;p&gt;目测会成系列, 从前到后你也能个性化自己的完整配置. 也可以借鉴一些技巧和插件使用(总共会提及约&lt;code&gt;60+&lt;/code&gt;插件)&lt;/p&gt;
&lt;p&gt;第一篇, 移动.&lt;/p&gt;
&lt;h2 id="hjkl"&gt;HJKL …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;这个专栏的主要目的, 是介绍后台开发, vim, python, 工具, 效率, 项目等等一些所思所想. 欢迎关注及交流.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个项目, 虽然一年只更新一两次, 但是里面很多配置, 都是基于使用中的痛点, 以及 &lt;code&gt;符合自觉&lt;/code&gt; 的原则进行的变更.&lt;/p&gt;
&lt;p&gt;整体而言, &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 虽然做成了一个开箱即用的配置, 但是很多使用者更想知道一些更具体的说明, 包含配置项, 配置原因等等.&lt;/p&gt;
&lt;p&gt;之前有个blog有提过一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't put anything in your .vimrc you don't understand!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我不是十分赞同(我更倾向于基于一个完备的配置再进行深入了解和 DIY, 毕竟从0打造成本略高).&lt;/p&gt;
&lt;p&gt;但是觉得有必要, 写一写, 谈一谈&lt;code&gt;vim&lt;/code&gt;中的一些配置的原因.&lt;/p&gt;
&lt;p&gt;目测会成系列, 从前到后你也能个性化自己的完整配置. 也可以借鉴一些技巧和插件使用(总共会提及约&lt;code&gt;60+&lt;/code&gt;插件)&lt;/p&gt;
&lt;p&gt;第一篇, 移动.&lt;/p&gt;
&lt;h2 id="hjkl"&gt;HJKL&lt;/h2&gt;
&lt;p&gt;一谈到移动, 首先想到的是&lt;code&gt;hjkl&lt;/code&gt;, 最基本的上下左右&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h 左移
l 右移

k 上移
j 下移 (记忆 jump)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然, 左右只是字符间移动, 上下是行之间的移动&lt;/p&gt;
&lt;h2 id="you-hua-hjkl"&gt;优化HJKL&lt;/h2&gt;
&lt;p&gt;首先, 为了防止自己&lt;code&gt;情不自禁&lt;/code&gt;使用 &lt;code&gt;上下左右&lt;/code&gt; 方向键, 可以禁用之.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 关闭方向键, 强迫自己用 hjkl
map &amp;lt;Left&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Right&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Up&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Down&amp;gt; &amp;lt;Nop&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次, 当一行超长之后, &lt;code&gt;se wrap&lt;/code&gt;, 一行就显示为多行(一个物理行 - 多个展示行), 如果是默认配置, 使用 &lt;code&gt;jk&lt;/code&gt; 移动时, 将会是物理行维度的, 而直觉上应该在展示行维度跳转(视觉上), 所以加配置, 使得&lt;code&gt;jk&lt;/code&gt;在展示行之间上下跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外, 当上下移动时, 默认光标到顶/到底后, 再用&lt;code&gt;jk&lt;/code&gt;时, 光标是贴着终端顶部或底部的, 需要配置, 保证光标距离顶部或底部一定行数, 这样显示视觉效果更好.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dan-ci-jian-yi-dong"&gt;单词间移动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wbe&lt;/code&gt;, 原先是&lt;code&gt;wWbBeE&lt;/code&gt;, 大小写都是有各自含义的, 但是, 更懒的做法, 只用小写&lt;code&gt;wbe&lt;/code&gt;, 毕竟, 使用大写&lt;code&gt;WBE&lt;/code&gt;, 你还得多按一个&lt;code&gt;shift&lt;/code&gt;键, 以及, 肌肉记忆下, 操作的一瞬间, 你很难将你想要的和&lt;code&gt;使用大写还是小写分别代表什么动作, 句子里哪个是标点&lt;/code&gt;关联起来.&lt;/p&gt;
&lt;p&gt;所以, 直接无视大写吧&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w 移到下一个单词 (记忆 next word)
b 移动到单词开头 (记忆 back)
e 移动到单词尾部
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="guan-yu-0he-yi-ji-hml-de-you-hua"&gt;关于 0和$, 以及 HML 的优化&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;, 分别是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 移动到行首
$ 移动到行尾
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而, &lt;code&gt;0&lt;/code&gt;, 需要手指离开字母区, &lt;code&gt;$&lt;/code&gt;更惨, 还得多按一个&lt;code&gt;shift&lt;/code&gt;. 另外其实还有个&lt;code&gt;^&lt;/code&gt;的, 实在按不着&lt;code&gt;&amp;gt;_&amp;lt;#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HML&lt;/code&gt; 是同屏间, 快速移动到屏幕&lt;code&gt;顶部&lt;/code&gt;/&lt;code&gt;中间&lt;/code&gt;/&lt;code&gt;底部&lt;/code&gt;, 顶部和底部还好, 中间到底在哪? 具体哪一行, 这个是比较范的操作, 非精确操作(不能一次性移动到想要的位置), 所以我的结论是: 废掉&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;H&lt;/code&gt;映射成&lt;code&gt;移动到行首(最左边)&lt;/code&gt;, 将&lt;code&gt;L&lt;/code&gt;映射成&lt;code&gt;移动到行尾(最右边)&lt;/code&gt;, 和原先&lt;code&gt;hjkl&lt;/code&gt;意义同, 且在字母区. 更符合直觉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Go to home and end using capitalized directions
noremap H ^
noremap L $
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="xing-nei-fftt"&gt;行内: fFtT&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;f/F&lt;/code&gt;, 同一行内向前/向后跳转, 而&lt;code&gt;t/T&lt;/code&gt;同, 只是会调到目标位置的前面一个字符&lt;/p&gt;
&lt;p&gt;我的做法是, 忘掉&lt;code&gt;tT&lt;/code&gt;, &lt;code&gt;fF&lt;/code&gt;更符合直觉, 真正的&lt;code&gt;指哪到哪&lt;/code&gt;, 而且&lt;code&gt;f=find&lt;/code&gt;也好记&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f  跳转到向前搜索的字母位置
F  跳转到向后搜索的字母位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里, 推荐一个插件(被动生效), 可以高亮显示目标字母: &lt;a href="https://github.com/unblevable/quick-scope"&gt;quick-scope&lt;/a&gt; A Vim plugin that highlights which characters to target for f, F and family. No mappings are needed.&lt;/p&gt;
&lt;h2 id="wen-jian-guan-yu-ctrl-fbud"&gt;文件: 关于 ctrl + fbud&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ctrl + f/b&lt;/code&gt; 下翻/上翻一页,  而&lt;code&gt;ctrl + u/d&lt;/code&gt; 下翻/上翻半页.&lt;/p&gt;
&lt;p&gt;我的做法是, 忘掉&lt;code&gt;ctrl + f/b&lt;/code&gt;, 只用&lt;code&gt;ctrl + u/d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们经常做的操作是, 不停的上翻/下翻, 连续动作, 一整页太多, 看内容很容易思维上&lt;code&gt;断开&lt;/code&gt;, 需要返回去重看, 而半页有一半的东西是连着的; 而对于使用&lt;code&gt;压掌大法&lt;/code&gt;按&lt;code&gt;ctrl&lt;/code&gt;的人来说,  按住&lt;code&gt;ctrl&lt;/code&gt;再反复&lt;code&gt;fb&lt;/code&gt;, 特别是 &lt;code&gt;b&lt;/code&gt;, 特别难按, &lt;code&gt;fb&lt;/code&gt;都在左边, 左手太累&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;ud&lt;/code&gt;, 可以将操作放到两手, 也方便(肌肉)记忆&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl + u 上翻半页(记忆 up)
ctrl + d 下翻半页(记忆 down)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen-jian-tou-wei-he-mou-yi-xing"&gt;文件: 头尾和某一行&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gg  跳转到文件头
G   跳转到文件尾

:n  精确移动到第几行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;记住这三个, 基本够了吧?&lt;/p&gt;
&lt;h2 id="fen-ping-yi-dong"&gt;分屏移动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ctrl + w + hjkl&lt;/code&gt; 是默认分分屏的快捷键, 去掉&lt;code&gt;w&lt;/code&gt;更快些&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 分屏窗口移动, Smart way to move between windows
map &amp;lt;C-j&amp;gt; &amp;lt;C-W&amp;gt;j
map &amp;lt;C-k&amp;gt; &amp;lt;C-W&amp;gt;k
map &amp;lt;C-h&amp;gt; &amp;lt;C-W&amp;gt;h
map &amp;lt;C-l&amp;gt; &amp;lt;C-W&amp;gt;l
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cha-jian-biao-ji-tiao-zhuan-zeng-qiang-vim-signature"&gt;插件: 标记跳转增强 &lt;code&gt;vim-signature&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;默认, &lt;code&gt;m + 字母&lt;/code&gt;, 可以在当前打一个标记, 然后 &lt;code&gt;反引号+字母&lt;/code&gt; 可以跳转到标记行&lt;/p&gt;
&lt;p&gt;但是存在的缺点是: 标记不可见, 且反引号实在难按&lt;/p&gt;
&lt;p&gt;所以做了些增强&lt;/p&gt;
&lt;p&gt;安装这个插件: &lt;a href="https://github.com/kshenoy/vim-signature"&gt;vim-signature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体安装/配置/演示: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-signature.html"&gt;VIM插件: VIM-SIGNATURE(快速标记跳转)&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 交换 单引号/反引号, 使得可以快速使用 单引号 跳到marked位置
nnoremap ' `
nnoremap ` '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其常用的几个快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m&amp;lt;Space&amp;gt;  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-move/14899311413274.gif"/&gt;&lt;/p&gt;
&lt;h2 id="cha-jian-zhong-ji-tiao-zhuan-easymotion"&gt;插件: 终极跳转 easymotion&lt;/h2&gt;
&lt;p&gt;有一个插件, 对跳转做了深入的定制, 那就是: &lt;a href="https://github.com/easymotion/vim-easymotion"&gt;vim-easymotion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装了之后, 简直想怎么跳就怎么跳. 作为一个必备插件, 大家有必要深入学习下用法, 跳转效率翻倍&lt;/p&gt;
&lt;p&gt;之前写的一篇博文介绍: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html"&gt;VIM插件: EASYMOTION(快速跳转)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法1: 跳转到当前光标前后的位置(w/b)&lt;/li&gt;
&lt;li&gt;用法2: 搜索跳转(s)&lt;/li&gt;
&lt;li&gt;用法3: 行级跳转(jk)&lt;/li&gt;
&lt;li&gt;用法4: 行内跳转(hl)&lt;/li&gt;
&lt;li&gt;用法5: 重复上一次动作(.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体配置及演示见博文&lt;/p&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;p&gt;vim中跳转的配置大抵这些就够用了.&lt;/p&gt;
&lt;p&gt;下一篇, 将介绍如何快速编辑. 后续还有搜索替换等等一系列内容&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>读书笔记-重构: 章11 处理概括关系</title><link href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html" rel="alternate"></link><published>2016-12-04T20:56:00+08:00</published><updated>2016-12-04T20:56:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-06.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-11-chu-li-gai-gua-guan-xi"&gt;章11 处理概括关系&lt;/h2&gt;
&lt;p&gt;多是类相关, 浅显易懂, 不写示例代码了, 有兴趣可以看看原书的例子&lt;/p&gt;
&lt;h4 id="111-pull-up-field-zi-duan-shang-yi"&gt;11.1 Pull Up Field 字段上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个子类拥有相同的字段. 将该字段移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="112-pull-up-method-han-shu-shang-yi"&gt;11.2 Pull Up Method 函数上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏函数, 在各个子类中产生完全相同的结果. 将该函数移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="113-pull-up-constructor-body-gou-zao-han-shu-ben-ti-shang-yi"&gt;11.3 Pull Up Constructor Body 构造函数本体上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在各个子类中拥有一些构造函数, 他们的本体几乎完全一致. 在超类中新建一个构造函数, 并在子类的构造函数中调用它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="114-push-down-method-han-shu-xia-yi"&gt;11.4 Push Down Method 函数下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个函数只与部分(而非全部)子类有关. 将这个函数移到相关的那些子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="115-push-down-field-zi-duan-xia-yi"&gt;11.5 Push …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-11-chu-li-gai-gua-guan-xi"&gt;章11 处理概括关系&lt;/h2&gt;
&lt;p&gt;多是类相关, 浅显易懂, 不写示例代码了, 有兴趣可以看看原书的例子&lt;/p&gt;
&lt;h4 id="111-pull-up-field-zi-duan-shang-yi"&gt;11.1 Pull Up Field 字段上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个子类拥有相同的字段. 将该字段移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="112-pull-up-method-han-shu-shang-yi"&gt;11.2 Pull Up Method 函数上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏函数, 在各个子类中产生完全相同的结果. 将该函数移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="113-pull-up-constructor-body-gou-zao-han-shu-ben-ti-shang-yi"&gt;11.3 Pull Up Constructor Body 构造函数本体上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在各个子类中拥有一些构造函数, 他们的本体几乎完全一致. 在超类中新建一个构造函数, 并在子类的构造函数中调用它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="114-push-down-method-han-shu-xia-yi"&gt;11.4 Push Down Method 函数下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个函数只与部分(而非全部)子类有关. 将这个函数移到相关的那些子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="115-push-down-field-zi-duan-xia-yi"&gt;11.5 Push Down Field 字段下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个字段只被部分(而非全部)子类用到. 将这个字段移到需要它的那些子类去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="116-extract-subclass-ti-lian-zi-lei"&gt;11.6 Extract Subclass 提炼子类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类中的某些特性只被某些(而非全部)实例用到. 新建一个子类, 将上面所说的那一部分特性移到子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="117-extract-superclass-ti-lian-chao-lei"&gt;11.7 Extract Superclass 提炼超类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类有相似特性. 为这两个类建立一个超类, 将相同特性移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="118-extract-interface-ti-lian-jie-kou"&gt;11.8 Extract Interface 提炼接口&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;若干客户使用类接口中的同一子集, 或者两个类的接口有部分相同. 将相同的子集提炼到一个独立接口中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="119-collapse-hierarchy-zhe-die-ji-cheng-ti-xi"&gt;11.9 Collapse Hierarchy 折叠继承体系&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类和子类之间无太大区别. 将它们合为一体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="1110-from-template-method-su-zao-mo-ban-han-shu"&gt;11.10 From Template Method 塑造模板函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一些子类, 其中相应的某些函数以相同顺序执行类似的操作, 但各个操作细节上有所不同. 将这些操作分别放进独立函数中, 并保持他们有相同的签名, 于是原函数也就变得相同了. 然后将原函数上移至超类.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;模板方法模式&lt;/p&gt;
&lt;h4 id="1111-replace-inheritance-with-delegation-yi-wei-tuo-qu-dai-ji-cheng"&gt;11.11 Replace Inheritance with Delegation 以委托取代继承&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个子类只是用超类接口中的一部分, 或是根本不需要继承而来的数据. 在子类中新建一个字段用以保存超类; 调整子函数, 令它改而委托超类; 然后去掉两者之间的继承关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;判断是否误用/滥用了继承&lt;/p&gt;
&lt;h4 id="1112-replace-delegation-with-inheritance-yi-ji-cheng-qu-dai-wei-tuo"&gt;11.12 Replace Delegation with Inheritance 以继承取代委托&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在两个类之间使用了委托关系, 并经常为整个接口编写许多极简单的委托函数. 让委托类继承受托类.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章10 简化函数调用</title><link href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html" rel="alternate"></link><published>2016-12-04T20:55:00+08:00</published><updated>2016-12-04T20:55:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-05.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-10-jian-hua-han-shu-diao-yong"&gt;章10: 简化函数调用&lt;/h2&gt;
&lt;h4 id="101-rename-method-han-shu-gai-ming"&gt;10.1 Rename Method 函数改名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的名称未能揭示函数的用途. 修改函数名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给函数一个好名字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_office_telephone_numer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="102-add-parameter-tian-jia-can-shu"&gt;10.2 Add Parameter 添加参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数需要从调用端得到更多信息. 为此函数添加一个对象参数, 让对象带进函数所需要的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动机: 必须修改一个函数, 而修改后的函数需要一些过去没有的信息, 此时需要添加一个参数&lt;/p&gt;
&lt;h4 id="103-remove-parameter-yi-chu-can-shu"&gt;10.3 Remove Parameter 移除参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数本体不再需要某个参数. 将该参数去除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员可能经常添加参数, 却往往不愿意去去除它们.&lt;/p&gt;
&lt;h4 id="104-separate-query-from-modifier-jiang-cha-xun-han-shu-he-xiu-gai-han-shu-fen-chi"&gt;10 …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-10-jian-hua-han-shu-diao-yong"&gt;章10: 简化函数调用&lt;/h2&gt;
&lt;h4 id="101-rename-method-han-shu-gai-ming"&gt;10.1 Rename Method 函数改名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的名称未能揭示函数的用途. 修改函数名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给函数一个好名字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_office_telephone_numer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="102-add-parameter-tian-jia-can-shu"&gt;10.2 Add Parameter 添加参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数需要从调用端得到更多信息. 为此函数添加一个对象参数, 让对象带进函数所需要的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动机: 必须修改一个函数, 而修改后的函数需要一些过去没有的信息, 此时需要添加一个参数&lt;/p&gt;
&lt;h4 id="103-remove-parameter-yi-chu-can-shu"&gt;10.3 Remove Parameter 移除参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数本体不再需要某个参数. 将该参数去除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员可能经常添加参数, 却往往不愿意去去除它们.&lt;/p&gt;
&lt;h4 id="104-separate-query-from-modifier-jiang-cha-xun-han-shu-he-xiu-gai-han-shu-fen-chi"&gt;10.4 Separate Query from Modifier 将查询函数和修改函数分离&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数既返回对象状态值, 又修改对象状态. 建立两个不同的函数, 其中一个负责查询, 另一个负责修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单一职责原则. 任何有返回值的函数, 都不应该有看得到的副作用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_total_and_set_ready_state&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_total&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_ready_ste&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="105-parameterize-method-ling-han-shu-xi-dai-can-shu"&gt;10.5 Parameterize Method 令函数携带参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;若干函数做了类似的工作. 但在函数本体中却包含了不同的值. 建立单一函数, 以参数表达那些不同的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;five_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ten_percent_raise&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;percent_raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="106-replace-parameter-with-explicit-methods-yi-ming-que-han-shu-qu-dai-can-shu"&gt;10.6 Replace Parameter with Explicit Methods 以明确函数取代参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个函数, 其中完全取决于参数值而采取不同行为. 针对该参数的每一个可能值, 建立一个独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'width'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="107-preserve-whole-object-bao-chi-dui-xiang-wan-zheng"&gt;10.7 Preserve Whole Object 保持对象完整&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你从某个对象中取出若干值, 将他们作为某一次函数调用时的参数. 改为传递整个对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_low&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_high&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;within_rangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;within_rangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="108-replace-parameter-with-methods-yi-han-shu-qu-dai-can-shu"&gt;10.8 Replace Parameter with Methods 以函数取代参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;对象调用了某个函数, 并将所得结果作为参数, 传递给另一个函数. 而接受该参数的函数本身也能调用前一个函数. 让参数接收者去除该参数, 并直接调用前一个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;discount_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_discount_level&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;discount_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;
&lt;span class="n"&gt;final_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discounted_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discount_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="109-introduce-parameter-object-yin-ru-can-shu-dui-xiang"&gt;10.9 Introduce Parameter Object 引入参数对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某些参数总是很自然地同时出现. 以一个对象取代这些参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_range&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_range&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1010-remove-setting-method-yi-chu-she-zhi-han-shu"&gt;10.10 Remove Setting Method 移除设值函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类中某个字段应该在类创建时被设值, 然后就不再改变. 去掉该字段的所有设值函数.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1011-hide-method-yin-cang-han-shu"&gt;10.11 Hide Method 隐藏函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个函数, 从来没有被其他任何类用到. 将这个函数改成private&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1012-replace-constructor-with-factory-method-yi-gong-han-han-shu-qu-dai-gou-zao-han-shu"&gt;10.12 Replace Constructor with Factory Method 以工厂函数取代构造函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你希望在创建对象时不仅仅是做简单的建构动作. 将构造函数替换为工厂函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1013-encapsulate-downcast-feng-zhuang-xiang-xia-zhuan-xing"&gt;10.13 Encapsulate Downcast 封装向下转型&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数返回的对象, 需要由函数调用者执行向下转型(downcast). 将向下转型动作移到函数中.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强类型OO语言中. python不涉及, 但是道理相通. 如果调用某个函数, 每次都要对返回值进行处理. 那么, 可以将处理逻辑放入到函数中&lt;/p&gt;
&lt;h4 id="1014-replace-error-code-with-exception-yi-yi-chang-qu-dai-cuo-wu-ma"&gt;10.14 Replace Error Code with Exception 以异常取代错误码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数返回一个特定的代码, 用以表示某种错误情况. 改用异常.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1015-replace-exception-with-test-yi-ce-shi-qu-dai-yi-chang"&gt;10.15 Replace Exception with Test 以测试取代异常&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;面对一个调用者可以预先检查的条件, 你抛出了一个一行. 修改调用者, 使它在调用函数之前先做检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章9 简化表达式</title><link href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html" rel="alternate"></link><published>2016-12-04T20:50:00+08:00</published><updated>2016-12-04T20:50:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-04.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-9-jian-hua-biao-da-shi"&gt;章9: 简化表达式&lt;/h2&gt;
&lt;h4 id="91-decompose-conditional-fen-jie-tiao-jian-biao-da-shi"&gt;9.1 Decompose Conditional 分解条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="92-consolidate-cnditional-expression-he-bing-tiao-jian-biao-da-shi"&gt;9.2 Consolidate Cnditional Expression 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-9-jian-hua-biao-da-shi"&gt;章9: 简化表达式&lt;/h2&gt;
&lt;h4 id="91-decompose-conditional-fen-jie-tiao-jian-biao-da-shi"&gt;9.1 Decompose Conditional 分解条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="92-consolidate-cnditional-expression-he-bing-tiao-jian-biao-da-shi"&gt;9.2 Consolidate Cnditional Expression 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_seniority&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_months_disabled&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_part_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_not_eligible_for_disability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="93-consolidate-dumplicate-conditional-fragments-he-bing-zhong-fu-de-tiao-jian-pan-duan"&gt;9.3 Consolidate Dumplicate Conditional Fragments 合并重复的条件判断&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在条件表达式的每个分支上有着相同的一段代码. 将这段重复代码搬移到条件表达式之外&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="94-remove-control-flag-yi-chu-kong-zhi-biao-ji"&gt;9.4 Remove Control Flag 移除控制标记&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在一系列布尔表达式中, 某个变量带有"控制标记"(control flag)的作用. 以break语句或return取代控制标记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="95-replace-nested-conditional-with-guard-clauses-yi-shou-wei-yu-ju-qu-dai-qian-tao-tiao-jian-biao-da-shi"&gt;9.5 Replace Nested Conditional with Guard Clauses 以守卫语句取代嵌套条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数中的条件逻辑使人难以看清正常的执行路径. 使用守卫语句表现所有特殊情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Python中相当有用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_dead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dead_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_separated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;separated_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_retired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retired_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;normal_payamount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="96-replace-conditional-with-polymorphism-yi-duo-tai-qu-dai-tiao-jian-biao-da-shi"&gt;9.6 Replace Conditional with Polymorphism 以多态取代条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你手上有多个条件表达式, 它根据对象类型的不同而选择不同的行为. 将这个条件表达式的每个分支放进一个子类内的覆写函数中, 然后将原始函数声明为抽象函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'EUROPEAN'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'AFRICAN'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;get_load_factor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_number_of_coconuts&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_nailed&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_voltage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;European&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;African&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_base_speed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="97-introduce-null-object-yin-ru-nulldui-xiang"&gt;9.7 Introduce Null Object 引入Null对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要再三检查某对象是否为null. 将null值替换为null对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多态的根本好处是你不必再向对象询问: 你是什么类型, 然后根据类型调用其行为.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billing_plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_plan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;customer_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'occupant'&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;customer_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;billing_plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'occupant'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="98-introduce-assertion-yin-ru-duan-yan"&gt;9.8 Introduce Assertion 引入断言&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某一段代码需要对程序状态做出某种假设. 以断言明确表示这种假设&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# note: limit must greater 100 here&lt;/span&gt;
&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章8 重新组织数据</title><link href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html" rel="alternate"></link><published>2016-12-03T11:10:00+08:00</published><updated>2016-12-03T11:10:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-03.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-8-zhong-xin-zu-zhi-shu-ju"&gt;章8: 重新组织数据&lt;/h2&gt;
&lt;h4 id="81-self-encapsulate-field-zi-feng-zhuang-zi-duan"&gt;8.1 Self Encapsulate Field 自封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你直接访问一个字段, 但字段间的耦合关系逐渐变额笨拙. 为这个字段建立取值/设置函数, 并且只以这些函数来访问字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;间接访问的好处是, 可以灵活改变获取数据的途径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;low&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-8-zhong-xin-zu-zhi-shu-ju"&gt;章8: 重新组织数据&lt;/h2&gt;
&lt;h4 id="81-self-encapsulate-field-zi-feng-zhuang-zi-duan"&gt;8.1 Self Encapsulate Field 自封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你直接访问一个字段, 但字段间的耦合关系逐渐变额笨拙. 为这个字段建立取值/设置函数, 并且只以这些函数来访问字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;间接访问的好处是, 可以灵活改变获取数据的途径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;low&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_low&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="82-replace-data-value-with-object-yi-dui-xiang-qu-dai-shu-ju-zhi"&gt;8.2 Replace Data Value with Object 以对象取代数据值&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个数据项, 需要与其他数据和行为一起使用才有意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;独立成对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;def__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Phone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;def__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="83-change-value-to-reference-jiang-zhi-dui-xiang-gai-wei-yin-yong-dui-xiang"&gt;8.3 Change Value to Reference 将值对象改为饮用对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你从一个类衍生出许多彼此相等的实例, 希望将他们替换为同一个对象. 将这个值对象变成引用对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# only 4 types, but 10000 A instance&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="84-change-reference-to-value-jiang-yin-yong-dui-xiang-gai-wei-zhi-dui-xiang"&gt;8.4 Change Reference to Value 将引用对象改为值对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个引用对象, 很小且值不可变, 而且不易管理. 将它变成一个值对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手法, 将重构目标变成不可变对象. 即, 只有可以变成不可变对象的才能运用这个技巧&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Currency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_code&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="85-replace-array-with-object-yi-dui-xiang-qu-dai-shu-zu"&gt;8.5 Replace Array with Object 以对象取代数组&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个数组, 其中元素各自代表不同的东西. 以对象替换数组, 对于数组中的每个元素, 以一个字段来表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Liverpoo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;claas&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wins&lt;/span&gt;

&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Liverpoo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="86-duplicate-observed-data-fu-zhi-bei-jian-shi-shu-ju"&gt;8.6 Duplicate Observed Data 复制"被监视数据"&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一些领域数据置身于 GUI 控件中, 而领域函数需要访问这些数据. 将数据复制到一个领域对象中. 建立Observer模式, 用以同步领域对象和GUI对象内的重复数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;observer模式, 不解释&lt;/p&gt;
&lt;h4 id="87-change-unidirectional-association-to-bidirectional-jiang-dan-xiang-guan-lian-gai-wei-shuang-xiang-guan-lian"&gt;8.7 Change Unidirectional Association to Bidirectional 将单向关联改为双向关联&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类都需要使用对方特性, 但其间只有一条单向连接. 添加一个反向指针, 并使修改函数能够同时更新到两条连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_orders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# need a lot of codes here&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;
    &lt;span class="nd"&gt;@customer.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_customer_address&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_orders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;

    &lt;span class="nd"&gt;@customer.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_customer_address&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="88-change-bidirectional-association-to-unidirectional-jiang-shuang-xiang-guan-lian-gai-wei-dan-xiang-guan-lian"&gt;8.8 Change Bidirectional Association to Unidirectional 将双向关联改为单向关联&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个类之间有双向关联, 但其中一个类如今不再需要另一个类的特性了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的例子, 如果&lt;code&gt;Customer&lt;/code&gt;不再需要&lt;code&gt;get_orders&lt;/code&gt;. 则可以去掉双向连接, 防止僵尸对象出现&lt;/p&gt;
&lt;h4 id="89-replace-magic-number-with-symbolic-constant-yi-zi-mian-chang-liang-qu-dai-mo-fa-shu"&gt;8.9 Replace Magic Number with Symbolic Constant 以字面常量取代魔法数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个字面数值, 带有特别含义. 创建一个常量, 根据其意义为它命名, 并将上述字面数值替换为这个常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;potential_energy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;GRAVITATIONAL_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="810-encapsulate-field-feng-zhuang-zi-duan"&gt;8.10 Encapsulate Field 封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的类中存在一个public字段, 将它声明为private, 并提供相应访问函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt;

    &lt;span class="nd"&gt;@value.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="811-encapsulate-collection-feng-zhuang-ji-he"&gt;8.11 Encapsulate Collection 封装集合&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有个函数返回一个集合. 让这个函数返回该集合的一个只读副本, 并在这个类中提供添加/移除集合元素的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_members&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_members&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="812-replace-record-with-data-class-yi-shu-ju-lei-qu-dai-ji-lu"&gt;8.12 Replace Record with Data Class 以数据类取代记录&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要面对传统编程环境中的记录结构. 为该记录创建一个"哑"数据对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能面对的是一个遗留程序, 需要与其记录进行结构交流. 例如从数据库读出来的记录, 接口调用返回数据等&lt;/p&gt;
&lt;h4 id="813-replace-type-code-with-class-yi-lei-qu-dai-lei-xing-ma"&gt;8.13 Replace Type Code with Class 以类取代类型码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类之中有一个类型码, 但它并不影响类的行为. 以一个新的类替换该数值类型码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;slef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;
        &lt;span class="n"&gt;slef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BloodGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="814-replace-type-code-with-subclasses-yi-zi-lei-qu-dai-lei-xing-ma"&gt;8.14 Replace Type Code with Subclasses 以子类取代类型码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个不可变的类型码, 它会影响到类行为. 以子类取代类型码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用多态来处理, 需要在一个类中使用&lt;code&gt;if-else&lt;/code&gt;或者&lt;code&gt;switch&lt;/code&gt;来根据类型码做出不同行为的类&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENGINEER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SALESMAN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Engineer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Salesman&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="815-replace-type-code-with-statestrategy-yi-statstrategyqu-dai-lei-xing-ma"&gt;8.15 Replace Type Code with State/Strategy 以Stat/Strategy取代类型码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个类型码, 它会影响类的行为, 但你无法通过继承手法消除它. 以状态对象取代类型码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;State模式和Strategy模式&lt;/p&gt;
&lt;h4 id="816-replace-subclass-with-fields-yi-zi-duan-qu-dai-zi-lei"&gt;8.16 Replace Subclass with Fields 以字段取代子类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的各个子类的唯一差别只在"返回常量数据"的函数上. 修改这些函数, 使它们返回超类中的某个(新增)字段, 然后销毁子类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"M"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Feale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"F"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_male&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_is_male&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_is_male&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;"F"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章7 在对象之间搬移特性</title><link href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html" rel="alternate"></link><published>2016-12-03T11:05:00+08:00</published><updated>2016-12-03T11:05:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-02.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-7-zai-dui-xiang-zhi-jian-ban-yi-te-xing"&gt;章7: 在对象之间搬移特性&lt;/h2&gt;
&lt;h4 id="71-move-method-ban-yi-han-shu"&gt;7.1 Move Method 搬移函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序中, 有个函数与其所驻之外的另一个类进行更多交流: 调用后者, 或者被后者调用. 在该函数最常引用的类中建立一个有着类似行为的新函数. 将就函数变成一个单纯的委托函数, 或是将就函数完全移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-7-zai-dui-xiang-zhi-jian-ban-yi-te-xing"&gt;章7: 在对象之间搬移特性&lt;/h2&gt;
&lt;h4 id="71-move-method-ban-yi-han-shu"&gt;7.1 Move Method 搬移函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序中, 有个函数与其所驻之外的另一个类进行更多交流: 调用后者, 或者被后者调用. 在该函数最常引用的类中建立一个有着类似行为的新函数. 将就函数变成一个单纯的委托函数, 或是将就函数完全移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="72-move-field-ban-yi-zi-duan"&gt;7.2 Move Field 搬移字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个字段被其所驻类之外的另一个类更多地用到. 在目标类新建一个字段, 修改原字段的所有用户, 令他们改用新字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="73-extract-class-ti-lian-lei"&gt;7.3 Extract Class 提炼类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个类做了应该由两个类做的事情. 建立以一个新的类, 将相关字段和函数从旧类版移到新的类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Persion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;office_area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;office_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_phone_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="74-inline-class-jiang-lei-nei-ju-hua"&gt;7.4 Inline Class 将类内聚化&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个类没有做太多事情. 将这个类的所有特性移动到另一个类中, 然后移除原类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="75-hide-delegate-yin-cang-wei-tuo-guan-xi"&gt;7.5 Hide Delegate 隐藏"委托关系"&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;客户通过一个委托来调用另一个对象. 在服务类上建立客户所需要的所有函数, 用以隐藏委托关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_department&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_department&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="76-remove-middle-man-yi-chu-zhong-jian-ren"&gt;7.6 Remove Middle Man 移除中间人&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个类做了过多的简单委托动作. 让客户直接调用受托类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当上一步实例中&lt;code&gt;Employee&lt;/code&gt;承载了大量的委托行为. 可以反向处理, 移除中间人. (当受托类功能越来越多, 完全变成了一个"中间人")&lt;/p&gt;
&lt;h4 id="77-introduce-foreign-method-yin-ru-wai-jia-han-shu"&gt;7.7 Introduce Foreign Method 引入外加函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要为提供服务的类增加一个函数, 但你无法修改这个类. 在客户类中建立一个函数, 并以第一参数形式传入一个服务类实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_year&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_month&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_year&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_month&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;previous_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="78-introduce-local-extension-yin-ru-ben-di-kuo-zhan"&gt;7.8 Introduce Local Extension 引入本地扩展&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要为服务类提供一些额外函数, 但你无法修改这个类. 建立一个新类, 使它包含这些额外函数. 让这个扩展品成为原类的子类或者包装类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# add extra methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>读书笔记-重构: 章6 重新组织函数</title><link href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html" rel="alternate"></link><published>2016-12-03T11:00:00+08:00</published><updated>2016-12-03T11:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-01.html</id><summary type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-6-zhong-xin-zu-zhi-han-shu"&gt;章6: 重新组织函数&lt;/h2&gt;
&lt;h4 id="61-extract-method-ti-lian-han-shu"&gt;6.1 Extract Method 提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-inline-method-nei-lian-han-shu"&gt;6 …&lt;/h4&gt;</summary><content type="html">&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-6-zhong-xin-zu-zhi-han-shu"&gt;章6: 重新组织函数&lt;/h2&gt;
&lt;h4 id="61-extract-method-ti-lian-han-shu"&gt;6.1 Extract Method 提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-inline-method-nei-lian-han-shu"&gt;6.2 Inline Method 内联函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个函数的本体与名称同样清楚易懂. 在函数调用点插入函数本体, 然后移除该函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;more_than_five_late_deliveries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;more_than_five_late_deliveries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="63-inline-temp-nei-lian-lin-shi-bian-liang"&gt;6.3 Inline Temp 内联临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个临时变量, 只被一个简单表达式赋值一次, 而它妨碍了其他重构手法. 将所有对该变量的引用动作, 替换为对它复制的哪个表达式自身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="64-replace-temp-with-query-yi-cha-xun-qu-dai-lin-shi-bian-liang"&gt;6.4 Replace Temp with Query 以查询取代临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序以一个临时变量保存着某一表达式的运算结果. 将表达式提炼到一个独立函数中. 将这个临时变量的所有引用点替换为对新函数的调用. 伺候新函数就可以被其他函数使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意: 开始时可以不用担心带来性能问题. 只有存在复用, 且去临时变量.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item_price&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.95&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;itme_price&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="65-introduce-explaining-variable-yin-ru-jie-shi-xing-bian-liang"&gt;6.5  Introduce Explaining Variable 引入解释性变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的表达式, 将该复杂表达式或其中一部分的结果放入一个临时变量, 以此变量名称来解释表达式的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"MAC"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"IE"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;was_resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_macos&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_ie_browser&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_initialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;was_resized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="66-split-temporary-variable-fen-jie-lin-shi-bian-liang"&gt;6.6 Split Temporary Variable 分解临时变量&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序有某个临时变量被赋值过一次, 它既不是循环变量, 也不被利用与收集计算结果. 针对每次赋值, 创造一个独立, 对应的临时变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;

&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;perimeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;perimeter&lt;/span&gt;

&lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="67-remove-assignments-to-parameters-yi-chu-dui-can-shu-de-fu-zhi"&gt;6.7  Remove Assignments to Parameters 移除对参数的赋值&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;代码对一个参数进行赋值. 以一个临时变量取代该参数的位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="68-replace-method-with-method-object-yi-han-shu-dui-xiang-qu-dai-han-shu"&gt;6.8 Replace Method with Method Object 以函数对象取代函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个大型函数, 其中对局部变量的使用使你无法采用Extract method. 将这个函数放进一个单独对象中, 如此一来局部变量就成了对象内的字段, 然后你可以在同一个对象中将这个大型函数分解成多个小型函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;i_value_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i_value_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
        &lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="c1"&gt;# and so on.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i_value_1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gamma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year_to_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year_to_date&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year_to_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

        &lt;span class="n"&gt;important_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="c1"&gt;# and so on.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;important_thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year_to_date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_value_2&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="69-substitute-algorithm-ti-huan-suan-fa"&gt;6.9 Substitute Algorithm 替换算法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你想要把某个算法那替换成另一个更清晰的算法. 将函数本体替换成另一个算法. 用更清晰的替换原先的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Don"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"D"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"J"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Kent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"K"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"Don"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"D"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"J"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"Kent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"k"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>Python 代码规范小结</title><link href="http://www.wklken.me/posts/2016/11/03/python-code-style.html" rel="alternate"></link><published>2016-11-03T00:00:00+08:00</published><updated>2016-11-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-11-03:/posts/2016/11/03/python-code-style.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;code review中一些小结, 还没来得及加例子, 简要记录, 供参考&lt;/p&gt;
&lt;h2 id="law"&gt;law&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一: 一切都与复杂度有关
二: 代码应当易于理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对人:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"好程序员”应当竭尽全力, 把程序写得让其他程序员(以及以后的自己)容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对代码:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;代码被阅读的次数远多于编写和修改的次数&lt;/li&gt;
&lt;li&gt;E = mc2 (Error = more codes)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;对项目:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公式: 可行性=(当前价值+未来价值)/(实现成本+维护成本). 即相比降低实现成本, 降低维护成本更加重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ji-chu-feng-ge"&gt;基础: 风格&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;团队成员遵守统一的风格, 保持风格的一致性, 减少理解难度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;遵循基础的编码风格:&lt;/p&gt;
&lt;p&gt;请仔细阅读, 使用对应编辑器插件工具协助检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遵循  &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; 风格
利用pep8工具(编辑器相关插件)来解决这个问题, 在review之前处理. 以避免在review过程中出现此类问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遵循 &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Google …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;code review中一些小结, 还没来得及加例子, 简要记录, 供参考&lt;/p&gt;
&lt;h2 id="law"&gt;law&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一: 一切都与复杂度有关
二: 代码应当易于理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对人:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"好程序员”应当竭尽全力, 把程序写得让其他程序员(以及以后的自己)容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对代码:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;代码被阅读的次数远多于编写和修改的次数&lt;/li&gt;
&lt;li&gt;E = mc2 (Error = more codes)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;对项目:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公式: 可行性=(当前价值+未来价值)/(实现成本+维护成本). 即相比降低实现成本, 降低维护成本更加重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ji-chu-feng-ge"&gt;基础: 风格&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;团队成员遵守统一的风格, 保持风格的一致性, 减少理解难度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;遵循基础的编码风格:&lt;/p&gt;
&lt;p&gt;请仔细阅读, 使用对应编辑器插件工具协助检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遵循  &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; 风格
利用pep8工具(编辑器相关插件)来解决这个问题, 在review之前处理. 以避免在review过程中出现此类问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遵循 &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Google Code Style&lt;/a&gt; / &lt;a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/"&gt;中文版&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要吝啬空行, 把相关的代码行分组, 形成代码块. 声明按块组织起来, 并且把代码分成”段落”(按步骤/顺序/逻辑结构分), 排版合理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;每行只写一个语句, 每行只声明一个变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="zhu-shi"&gt;注释&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注释应该有很高的&lt;code&gt;价值&lt;/code&gt;(传递信息/空间占用)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;代码本身应该尽力做到自说明&lt;/li&gt;
&lt;li&gt;注释, 记录了在写代码过程中的思考, 保持紧凑, 简单准确的描述&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要使用尾注释. 容易被整行拷贝/不容易被编辑修改/逐渐腐烂&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = 1  # bad comment

# good comment
x = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不需要的代码, 维护到版本库后(写明&lt;code&gt;commit info&lt;/code&gt;), 然后删除. 不要注释起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;不要给不好的命名加注释, 应该去修改命名&lt;/li&gt;
&lt;li&gt;不要给那些从代码本身就能&lt;code&gt;快速&lt;/code&gt;推断出来的事实写注释.(不要为了注释而注释)&lt;/li&gt;
&lt;li&gt;对于复杂的计算逻辑, 要给出注释, 可以通过列举例子, 简单的输入输出来描述&lt;/li&gt;
&lt;li&gt;对于大段的逻辑或模块, 需要给总结性注释&lt;/li&gt;
&lt;li&gt;注释代码时, 应注重-为何做, 而不是-怎么做&lt;/li&gt;
&lt;li&gt;每行注释前用一个空行分开. 注释缩进要和相应代码一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ming-ming"&gt;命名&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;把信息装入名字中.(自说明)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;尽量短, 但是要包含足够的信息(刨掉其中毫无意义的词)&lt;/li&gt;
&lt;li&gt;命名一定要有意义, 尽量少使用单个字符作为命名, 除非短表达式(列表解析/lambda等)以及小的作用域范围&lt;/li&gt;
&lt;li&gt;常量大写, 变量小写, 类名驼峰, 函数名小写加下划线, 不要混用下划线和驼峰.&lt;/li&gt;
&lt;li&gt;不要使用关键字命名, 例如&lt;code&gt;type&lt;/code&gt; 和 &lt;code&gt;dir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免使用容易混淆的命名, 防歧义&lt;/li&gt;
&lt;li&gt;慎用首字母缩略词和缩写, 除非团队成员都理解(不要妄图用注释来解决这个问题, 即, 不要注释不好的命名)&lt;/li&gt;
&lt;li&gt;不要使用大小写来区分不同对象&lt;/li&gt;
&lt;li&gt;同一个变量, 在多个地方, 前后端/数据库/不同函数/请求等, 尽量保持命名一致性&lt;/li&gt;
&lt;li&gt;不要害怕过长的命名, 保证易于理解和阅读(现代编辑器可以搞定自动补全和批量变更的问题)&lt;/li&gt;
&lt;li&gt;使用具体的名字, 而不是泛化的名字, 例如&lt;code&gt;params/args&lt;/code&gt;等, 没有隐含任何信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;类型, 除非名字本身有&lt;code&gt;True/False&lt;/code&gt;的含义, 否则建议统一使用&lt;code&gt;is_&lt;/code&gt;前缀&lt;/li&gt;
&lt;li&gt;不要使用双重否定的命名: &lt;code&gt;is_not_pass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for a in b&lt;/code&gt;, 注意 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的单复数区分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chang-liang"&gt;常量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常量大写&lt;/li&gt;
&lt;li&gt;作用于同一个模块/逻辑的多个常量, 建议使用统一的前缀&lt;/li&gt;
&lt;li&gt;将常量统一组织到某个文件/某几个文件, 并写明注释.&lt;/li&gt;
&lt;li&gt;函数/循环中的正则, 请预先&lt;code&gt;compile&lt;/code&gt;, 放入变量中.&lt;/li&gt;
&lt;li&gt;善用&lt;code&gt;Enum&lt;/code&gt;, 对可读性提升很大&lt;/li&gt;
&lt;li&gt;同一个枚举变量中, 其包含类型应当一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bian-liang"&gt;变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;减少变量: 变量越多, 越难全部追踪其动向. a.减少没有价值的中间变量 b.减少中间结果(可以通过&lt;code&gt;提前返回&lt;/code&gt;来消除) c.减少控制流变量&lt;/li&gt;
&lt;li&gt;缩小变量作用域: 避免全局变量(命名空间污染). 需要做到让你的变量对尽量少的代码行可见.&lt;/li&gt;
&lt;li&gt;变量定义尽量靠近其使用的地方, 或者, 在使用时定义.&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;import *&lt;/code&gt;, 会出现各种&lt;code&gt;突如其来&lt;/code&gt;的变量名, 可能导致名字空间污染, 造成诡异问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="shu-ju-jie-gou"&gt;数据结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt;, 不要使用&lt;code&gt;for key in d.keys()&lt;/code&gt;, 直接使用&lt;code&gt;for key in d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="biao-da-shi"&gt;表达式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;原则: 保持简短, 易懂.(拆分超长表达式)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;抽取反复出现的长表达式到变量或者函数调用&lt;/li&gt;
&lt;li&gt;使用解释变量, 将超长表达式中的自表达式抽取城一个解释变量.(抽取, 然后使用变量, 而不是每次都重复表达式)&lt;/li&gt;
&lt;li&gt;总结变量: 一个表达式不需要解释, 但是装入一个新的变量中仍然有用. 短名字替代一大块代码. 例如: &lt;code&gt;numbers[0]['obj'].name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用摩根定理: &lt;code&gt;not a and not b&lt;/code&gt; to &lt;code&gt;not (a or b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除公共子表达式：如果发现某个表达式老是在你面前出现，就把它赋值给一个变量&lt;/li&gt;
&lt;li&gt;中文, 请统一使用&lt;code&gt;u"中文"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;表达式中避免使用&lt;code&gt;魔数&lt;/code&gt;, 使用常量/枚举替代之&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kong-zhi-liu-fen-zhi"&gt;控制流: 分支&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if/else&lt;/code&gt;顺序: a. 先处理正逻辑而不是负逻辑. b. 先处理掉简单的情况, 还能保证if/else在同一个屏幕内都可见(否则到了&lt;code&gt;else&lt;/code&gt;需要回头查) c.先处理有趣或可疑的逻辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return early&lt;/code&gt;, 从函数中提前返回. 使用&lt;code&gt;guard clause&lt;/code&gt;来实现. 某些情况返回后, 将不必要思考某个分支出口, 剩余注意力集中在为数不多的情况. 另一个好处是, 能有效减少代码缩进.&lt;/li&gt;
&lt;li&gt;减少嵌套: 嵌套很深的代码很难理解, 每个嵌套层次会在读者’思维栈’上又增加了一个条件. 使用&lt;code&gt;return early&lt;/code&gt;来减少嵌套. 而循环中的减少嵌套方式, 可以使用&lt;code&gt;if condition: continue/break&lt;/code&gt;来进行&lt;code&gt;提早返回&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;减少嵌套: 当你对代码进行改动的时候, 从全新的角度审视它, 把它作为一个整体来看待.只关心局部, 不敢动旧有代码, 很容易一层层逻辑嵌套往里加导致深层嵌套&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;is&lt;/code&gt;来判定是否是&lt;code&gt;None&lt;/code&gt;, 而不是&lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件语句中参数顺序: 左侧变量, 右侧字面值/常量&lt;/li&gt;
&lt;li&gt;默认情况都使用&lt;code&gt;if...else&lt;/code&gt;, 三目运算只有在最简单的情况下才使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if condition: return&lt;/code&gt; 则不需要&lt;code&gt;else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意&lt;code&gt;if/else&lt;/code&gt;的多层嵌套, 在某些情况下, 判断条件中恒真/恒假的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kong-zhi-liu-xun-huan"&gt;控制流: 循环&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;善用&lt;code&gt;enumerate&lt;/code&gt;而不是维护&lt;code&gt;index&lt;/code&gt;变量( &lt;code&gt;enumerate&lt;/code&gt; 还可以从1开始计数)&lt;/li&gt;
&lt;li&gt;除非必要(逻辑确实如此且带&lt;code&gt;break&lt;/code&gt;), 否则不要使用&lt;code&gt;for...else&lt;/code&gt;.(增加理解成本)&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;for _ in l: _.x&lt;/code&gt;, 可读性太差&lt;/li&gt;
&lt;li&gt;减少循环内的&lt;code&gt;if...else...&lt;/code&gt;嵌套层次, 可以使用&lt;code&gt;if condition: continue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kong-zhi-liu-yi-chang-chu-li"&gt;控制流: 异常处理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;异常日志同注释, 应该有很高的&lt;code&gt;价值&lt;/code&gt;(传递信息/空间占用)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不要把所有代码放到&lt;code&gt;try except&lt;/code&gt;中, 只捕获会出异常的代码片段. 注意粒度, 不要放入不必要的代码&lt;/li&gt;
&lt;li&gt;不要吞掉异常, 处理或抛出, 同时要打日志(使用&lt;code&gt;logging&lt;/code&gt;而不是&lt;code&gt;print&lt;/code&gt;打日志)&lt;/li&gt;
&lt;li&gt;谨慎使用&lt;code&gt;except Exception&lt;/code&gt;捕获所有异常.&lt;/li&gt;
&lt;li&gt;不要在&lt;code&gt;finally&lt;/code&gt;语句中使用return进行返回, 有坑.&lt;/li&gt;
&lt;li&gt;异常的错误信息要&lt;code&gt;有用&lt;/code&gt;, 即足够明确, 对问题排查有帮助.&lt;/li&gt;
&lt;li&gt;不要使用异常控制程序的流程. 滥用异常, 异常不应该处理正常逻辑&lt;/li&gt;
&lt;li&gt;不要滥用异常, 底层被调用函数早已&lt;code&gt;try...except&lt;/code&gt;处理了, 调用方不需要再次处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="han-shu"&gt;函数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;函数不要太大, 嵌套不要太深&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;参数命名的一致性: 多个参数, 选择一个有意义的顺序, 并始终一致地使用它(可读性更好, 更容易发现问题)&lt;/li&gt;
&lt;li&gt;不要使用可变对象作为函数默认参数的值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一次只做一件事&lt;/strong&gt;, 注意函数大小, 注意抽象/拆分&lt;/li&gt;
&lt;li&gt;抽取不相关的子问题到独立的函数中, 例如纯工具代码, 通用代码, 项目专属代码&lt;/li&gt;
&lt;li&gt;抽取反复出现重复的代码到独立函数中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt; 值不要使用&lt;code&gt;0/1&lt;/code&gt;来代表&lt;code&gt;True/False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同一个函数可能存在多个&lt;code&gt;return&lt;/code&gt;, 返回值要保持一致(个数/类型)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return early&lt;/code&gt;, 减少阅读代码时的逻辑堆积, 减少贯穿函数始终用于最终判断return的变量数量. 超过3个就变得有些难以维护了, 阅读过程中确定其值有困难&lt;/li&gt;
&lt;li&gt;如果函数调用链中, 参数或者return的值反复出现pack/unpack, 可以考虑用&lt;code&gt;dict&lt;/code&gt;封装来进行传递.&lt;/li&gt;
&lt;li&gt;如果发现每次调用一个函数后, 还需要对返回值进行二次处理, 则是函数封装得不够导致的. 需重构函数, 将处理加进去. (防止某次调用忘了二次处理导致的bug)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lei"&gt;类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不要使用type进行类型检查, 用&lt;code&gt;isinstance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用新式类, 驼峰命名&lt;/li&gt;
&lt;li&gt;假设类的某个属性, 每次取出来都需要进行处理(格式化, 转换等, 例如日期格式), 使用&lt;code&gt;property&lt;/code&gt;封装这层处理, 同时处理异常情况.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mo-kuai"&gt;模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;顺序: 标准库/第三方库/本项目, 之间使用空行隔开&lt;/li&gt;
&lt;li&gt;多行&lt;code&gt;import&lt;/code&gt;, 请使用&lt;code&gt;from a import (b, c, d)&lt;/code&gt;而不是&lt;code&gt;\&lt;/code&gt;来进行换行&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;from A import *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当相对独立的多个逻辑代码混杂放在一起, 或者发现constant文件超大包含了大量不同逻辑的产量, 可以考虑模块切分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chou-xiang"&gt;抽象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一定不要机械地复制粘贴代码(会出现大量的重复代码), 应该从全局考虑是否可以抽象&lt;/li&gt;
&lt;li&gt;多个函数之间, 如果仅有一两行代码不同, 则可以进行抽象提取&lt;/li&gt;
&lt;li&gt;当一段相似的代码出现两次以上, 需要考虑封装(注意粒度)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="she-ji"&gt;设计&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计三大误区: 1.编写不必要的代码 2.代码难以修改 3.过分追求通用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;思考足够充分, 减少过度设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;熟悉标准库, 减少土制轮子的概率, 可以少写代码&lt;/li&gt;
&lt;li&gt;熟悉框架/优秀第三方库提供的接口及特性, 原因同上&lt;/li&gt;
&lt;li&gt;项目发布前, 移除所有&lt;code&gt;print&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;文件/函数是否写明作者信息? 不, 版本记录中有作者信息. 容易形成&lt;code&gt;领地&lt;/code&gt;, 他人不敢修改/不敢大改, 容易造成代码腐烂. 占用空间且没啥用.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="can-kao-shu-mu"&gt;参考书目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编写可读代码的艺术&lt;/li&gt;
&lt;li&gt;简约之美—软件设计之道&lt;/li&gt;
&lt;li&gt;编写高质量代码—改善Python程序的91个建议&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category></entry><entry><title>[分享]关于vim</title><link href="http://www.wklken.me/posts/2016/07/24/about-vim.html" rel="alternate"></link><published>2016-07-24T00:00:00+08:00</published><updated>2016-07-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-07-24:/posts/2016/07/24/about-vim.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;很早之前的小组分享, 整理成pdf&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/about-vim.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/about-vim.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;很早之前的小组分享, 整理成pdf&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/about-vim.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/about-vim.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</content><category term="share"></category></entry><entry><title>ElasticSearch集群部署文档</title><link href="http://www.wklken.me/posts/2016/06/29/deploy-es.html" rel="alternate"></link><published>2016-06-29T00:00:00+08:00</published><updated>2016-06-29T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-06-29:/posts/2016/06/29/deploy-es.html</id><summary type="html">&lt;p&gt;官方es搭建步骤写的很简略, 但是实际搭建过程中, 会涉及一系列环境配置. 以下的流程, 是在搭建过程中梳理出来的详细步骤(实践过3遍以上)&lt;/p&gt;
&lt;p&gt;其实, 这些流程在具体应用的时候, 都可以变成自动化脚本, 或者直接用docker好了, 以便扩容足够快(目前我们用的打包成集成安装包, 实现脚本自动部署)&lt;/p&gt;
&lt;p&gt;只是简单集群的基本设置, 不涉及调优的参数配置, 不涉及&lt;code&gt;client/master/data&lt;/code&gt;节点区分等等. 可以参照搭建的主体流程.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ban-ben-ji-lian-jie"&gt;版本及连接&lt;/h2&gt;
&lt;p&gt;elasticseearch版本: 2.3.3&lt;/p&gt;
&lt;p&gt;相关链接:
- &lt;a href="https://www.elastic.co/products/elasticsearch"&gt;官网&lt;/a&gt;
- &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="xi-tong-yao-qiu"&gt;系统要求&lt;/h2&gt;
&lt;p&gt;如果仅作测试用, 不需要两天机器, 可以将两个节点部署在同一台机器上, 对磁盘/cpu要求不高, 内存大于2g基本足够了&lt;/p&gt;
&lt;p&gt;如果是正式环境, 需要根据日志量进行评估, 例如, 每天日志量占硬盘约约10G, 且保留30天日志, 则磁盘会占用约300g, es设定的阈值是磁盘空间占满85%则日志开始告警. 所以, 需要至少 &lt;code&gt;300/0.85=354g …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;官方es搭建步骤写的很简略, 但是实际搭建过程中, 会涉及一系列环境配置. 以下的流程, 是在搭建过程中梳理出来的详细步骤(实践过3遍以上)&lt;/p&gt;
&lt;p&gt;其实, 这些流程在具体应用的时候, 都可以变成自动化脚本, 或者直接用docker好了, 以便扩容足够快(目前我们用的打包成集成安装包, 实现脚本自动部署)&lt;/p&gt;
&lt;p&gt;只是简单集群的基本设置, 不涉及调优的参数配置, 不涉及&lt;code&gt;client/master/data&lt;/code&gt;节点区分等等. 可以参照搭建的主体流程.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ban-ben-ji-lian-jie"&gt;版本及连接&lt;/h2&gt;
&lt;p&gt;elasticseearch版本: 2.3.3&lt;/p&gt;
&lt;p&gt;相关链接:
- &lt;a href="https://www.elastic.co/products/elasticsearch"&gt;官网&lt;/a&gt;
- &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="xi-tong-yao-qiu"&gt;系统要求&lt;/h2&gt;
&lt;p&gt;如果仅作测试用, 不需要两天机器, 可以将两个节点部署在同一台机器上, 对磁盘/cpu要求不高, 内存大于2g基本足够了&lt;/p&gt;
&lt;p&gt;如果是正式环境, 需要根据日志量进行评估, 例如, 每天日志量占硬盘约约10G, 且保留30天日志, 则磁盘会占用约300g, es设定的阈值是磁盘空间占满85%则日志开始告警. 所以, 需要至少 &lt;code&gt;300/0.85=354g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;准备两台机器, 在同一个局域网内(可ping通), 分别在每台机器上部署相应es节点, 搭建一套日志集群.&lt;/p&gt;
&lt;p&gt;两台机器, 最少的资源了, 但是没法做到高可用, 所以, 还需要再加一台机器, 防止脑裂, 具体见最后(两台主力机器+一台稳定的机器就行)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群节点: 最少两台机器&lt;/li&gt;
&lt;li&gt;内存: 16G及以上&lt;/li&gt;
&lt;li&gt;cpu: 4核及以上&lt;/li&gt;
&lt;li&gt;硬盘: 800G及以上, 建议1T, 集群容量约10亿级(取决于对应日志大小)&lt;/li&gt;
&lt;li&gt;操作系统: centos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里假设, 两台机器ip分别为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;第一台机器: 10.0.0.1
第二台机器: 10.0.0.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;机器系统为&lt;code&gt;centos6.5&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="bu-shu"&gt;部署&lt;/h2&gt;
&lt;h4 id="1-que-ren-jdkban-ben-ji-an-zhuang"&gt;1. 确认JDK版本及安装&lt;/h4&gt;
&lt;p&gt;es依赖java的版本最小为1.7&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;如果系统中未安装&lt;code&gt;JDK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;则命令返回&lt;code&gt;bash: java: command not found&lt;/code&gt;, 需要安装&lt;code&gt;JDK&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果系统中安装了JDK, 需确认版本是否大于&lt;code&gt;java 1.7&lt;/code&gt;, 否则需要升级
  &lt;code&gt;java version "1.7.0_51"
  Java(TM) SE Runtime Environment (build 1.7.0_51-b13)
  Java HotSpot(TM) Server VM (build 24.51-b03, mixed mode)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装及升级&lt;code&gt;java&lt;/code&gt;(注意根据系统不同运行对应安装命令)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Redhat/Centos/Fedora&lt;/span&gt;
sudo yum install java-1.7.0-openjdk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者到官网, 下载最新的jdk的rpm包, 然后安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jdk-8u91-linux-x64.rpm
rpm -Uvh jdk-8u91-linux-x64.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次确认安装成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-xia-zai-es"&gt;2. 下载es&lt;/h4&gt;
&lt;p&gt;版本: 2.3.3&lt;/p&gt;
&lt;p&gt;下载地址:
- &lt;a href="https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.3/elasticsearch-2.3.3.tar.gz"&gt;elasticsearch-2.3.3.tar.gz (tar.gz格式)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令行中的下载命令:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L -O https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.3/elasticsearch-2.3.3.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xzf elasticsearch-2.3.3.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-yong-hu-mu-lu-quan-xian-she-zhi"&gt;3. 用户/目录/权限设置&lt;/h4&gt;
&lt;p&gt;新建用户, 假设为&lt;code&gt;es&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo useradd es
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建目录, 假设&lt;code&gt;/data/&lt;/code&gt;目录挂载的硬盘最大(&lt;code&gt;500G&lt;/code&gt;以上)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /data/LogTool
mkdir -p /data/LogData
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将解压后的目录移动至新建的目录&lt;code&gt;/data/LogTool&lt;/code&gt;下, 并改名为&lt;code&gt;elasticsearch&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv elasticsearch-2.3.3 /data/LogTool/elasticsearch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将目录所有者修改为&lt;code&gt;test&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown -R es:es /data/LogTool
chown -R es:es /data/LogData
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5-qie-huan-yong-hu"&gt;5. 切换用户&lt;/h4&gt;
&lt;p&gt;切换到&lt;code&gt;es&lt;/code&gt;用户, 并进入&lt;code&gt;elasticsearch&lt;/code&gt;目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su es
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/LogTool/elasticsearch/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以用户&lt;code&gt;es&lt;/code&gt;的身份进行后续操作&lt;/p&gt;
&lt;h4 id="6-xiu-gai-pei-zhi-wen-jian"&gt;6. 修改配置文件&lt;/h4&gt;
&lt;p&gt;以用户&lt;code&gt;es&lt;/code&gt;的身份进行操作&lt;/p&gt;
&lt;p&gt;文件路径: &lt;code&gt;config/elasticsearch.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改该文件中配置项: (注意, 原始文件中都是被&lt;code&gt;#&lt;/code&gt;号注释掉了, 需要去掉对应注释并修改配置值)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群名: &lt;code&gt;cluster.name&lt;/code&gt;, 注意: 两台机器配置一致&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cluster.name: inner_es_cluster
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;节点名: &lt;code&gt;node.name&lt;/code&gt;, 注意: 两台机器配置不同, 一台为01, 另一台为02&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 第一台机器
node.name: inner_es_node_01

# 第二台机器
node.name: inner_es_node_02
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;数据路径: &lt;code&gt;path.data&lt;/code&gt;, 为新建立的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path.data: /data/LogData/
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;日志路径: &lt;code&gt;path.logs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path.logs: /data/LogData/logs
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;LockMemory:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bootstrap.mlockall: true
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;本机ip: &lt;code&gt;network.host&lt;/code&gt;, 注意两台机器配置不同, 分贝配置为对应机器的内网ip&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 第一台机器
network.host: 10.0.0.1

# 第二台机器
network.host: 10.0.0.2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Discovery配置: 注意这里是两台机器内网ip+9300端口, 注意这里&lt;code&gt;minimum_master_nodes=2&lt;/code&gt;, 见最后一点防脑裂说明&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;discovery.zen.ping.unicast.hosts: ["10.0.0.1:9300", "10.0.0.2:9300"]
discovery.zen.minimum_master_nodes: 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;gatewary配置:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gateway.recover_after_nodes: 2
gateway.recover_after_time: 5m
gateway.expected_nodes: 1
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;新增其他配置到文件末尾, 根据需求加, 这里用到了&lt;code&gt;script&lt;/code&gt;, 同时增大了&lt;code&gt;recovery&lt;/code&gt;的配置(要大些保证recovery速度, 但是又不能太大, 会将带宽占满)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;script.engine.groovy.inline.search: on
script.engine.groovy.inline.aggs: on
indices.recovery.max_bytes_per_sec: 100mb
indices.recovery.concurrent_streams: 10
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="7-she-zhi-eszhan-yong-nei-cun"&gt;7. 设置es占用内存&lt;/h4&gt;
&lt;p&gt;修改文件&lt;code&gt;bin/elasticsearch.in.sh&lt;/code&gt;, 将文件如下变量变更为&lt;code&gt;4g&lt;/code&gt;(根据自身机器配置, 配置的内存最大不超过机器物理内存的75%. 两个变量值相等, 以获取最大的性能). 当然, 实际使用中&lt;code&gt;4g&lt;/code&gt;可能远远不够, 这个值仅是个示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ES_MIN_MEM=4g
ES_MAX_MEM=4g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改centos配置: &lt;code&gt;/etc/security/limits.conf&lt;/code&gt;, 以便启用memlock, 提升性能&lt;/p&gt;
&lt;p&gt;加入, 注意, 示例中用户为&lt;code&gt;es&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;es soft memlock unlimited
es hard memlock unlimited
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;确认&lt;code&gt;max descriptiors&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看系统数量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果结果是&lt;code&gt;unlimited&lt;/code&gt;, 则无需任何处理, 直接进入下一步&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;ulimit&lt;/span&gt; -n
unlimited
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;如果结果是一个整数, 且小于&lt;code&gt;204800&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;ulimit&lt;/span&gt; -n
&lt;span class="m"&gt;4096&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 需要编辑&lt;code&gt;/etc/security/limits.conf&lt;/code&gt;, 加入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;es soft nofile 204800
es hard nofile 204800
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一种方法, 修改&lt;code&gt;bin/elasticsearch&lt;/code&gt;, 在文件的前半部分加入下面这行代码, 保证在启动前执行即可.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ulimit -n 204800
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="8-qi-dong-ce-shi"&gt;8. 启动测试&lt;/h4&gt;
&lt;p&gt;以用户&lt;code&gt;es&lt;/code&gt;的身份进行操作&lt;/p&gt;
&lt;p&gt;在命令行中执行启动命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /data/elasticsearch/
./bin/elasticsearch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到程序启动日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2016-06-30 17:20:26,677][WARN ][bootstrap                ] unable to install syscall filter: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in
[2016-06-30 17:20:27,390][INFO ][node                     ] [inner_es_node_01] version[2.3.3], pid[6415], build[218bdf1/2016-05-17T15:40:04Z]
[2016-06-30 17:20:27,390][INFO ][node                     ] [inner_es_node_01] initializing ...
[2016-06-30 17:20:27,948][INFO ][plugins                  ] [inner_es_node_01] modules [lang-groovy, reindex, lang-expression], plugins [], sites []
[2016-06-30 17:20:27,974][INFO ][env                      ] [inner_es_node_01] using [1] data paths, mounts [[/data (/dev/xvdb1)]], net usable_space [67.4gb], net total_space [98.4gb], spins? [no], types [ext3]
[2016-06-30 17:20:27,974][INFO ][env                      ] [inner_es_node_01] heap size [990.7mb], compressed ordinary object pointers [true]
[2016-06-30 17:20:29,926][INFO ][node                     ] [inner_es_node_01] initialized
[2016-06-30 17:20:29,926][INFO ][node                     ] [inner_es_node_01] starting ...
[2016-06-30 17:20:30,083][INFO ][transport                ] [inner_es_node_01] publish_address {10.0.0.1:9300}, bound_addresses {10.0.0.1:9300}
[2016-06-30 17:20:30,088][INFO ][discovery                ] [inner_es_node_01] inner_es_cluster/odmTjZRHRVaa8Zn4vTPcxA
[2016-06-30 17:21:00,091][WARN ][discovery                ] [inner_es_node_01] waited for 30s and no initial state was set by the discovery
[2016-06-30 17:21:00,099][INFO ][http                     ] [inner_es_node_01] publish_address {10.0.0.1:9200}, bound_addresses {10.0.0.1:9200}
[2016-06-30 17:21:00,099][INFO ][node                     ] [inner_es_node_01] started
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等待约一分钟后, 看到如下日志代表启动成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2016-06-30 17:21:00,099][INFO ][node                     ] [inner_es_node_01] started
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;确认集群是否启动成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://10.0.0.1:9200/

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt; : &lt;span class="s2"&gt;"inner_es_node_01"&lt;/span&gt;,
  &lt;span class="s2"&gt;"cluster_name"&lt;/span&gt; : &lt;span class="s2"&gt;"inner_es_cluster"&lt;/span&gt;,
  &lt;span class="s2"&gt;"version"&lt;/span&gt; : &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"number"&lt;/span&gt; : &lt;span class="s2"&gt;"2.3.3"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build_hash"&lt;/span&gt; : &lt;span class="s2"&gt;"218bdf10790eef486ff2c41a3df5cfa32dadcfde"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build_timestamp"&lt;/span&gt; : &lt;span class="s2"&gt;"2016-05-17T15:40:04Z"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build_snapshot"&lt;/span&gt; : false,
    &lt;span class="s2"&gt;"lucene_version"&lt;/span&gt; : &lt;span class="s2"&gt;"5.5.0"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"tagline"&lt;/span&gt; : &lt;span class="s2"&gt;"You Know, for Search"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动第二个节点时日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2016-06-30 17:32:42,494][WARN ][bootstrap                ] unable to install syscall filter: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in
[2016-06-30 17:32:43,295][INFO ][node                     ] [inner_es_node_02] version[2.3.3], pid[10240], build[218bdf1/2016-05-17T15:40:04Z]
[2016-06-30 17:32:43,295][INFO ][node                     ] [inner_es_node_02] initializing ...
[2016-06-30 17:32:43,879][INFO ][plugins                  ] [inner_es_node_02] modules [lang-groovy, reindex, lang-expression], plugins [], sites []
[2016-06-30 17:32:43,905][INFO ][env                      ] [inner_es_node_02] using [1] data paths, mounts [[/data (/dev/xvdb1)]], net usable_space [67.4gb], net total_space [98.4gb], spins? [no], types [ext3]
[2016-06-30 17:32:43,905][INFO ][env                      ] [inner_es_node_02] heap size [990.7mb], compressed ordinary object pointers [true]
[2016-06-30 17:32:45,876][INFO ][node                     ] [inner_es_node_02] initialized
[2016-06-30 17:32:45,876][INFO ][node                     ] [inner_es_node_02] starting ...
[2016-06-30 17:32:45,978][INFO ][transport                ] [inner_es_node_02] publish_address {10.0.0.2:9300}, bound_addresses {10.0.0.2:9300}
[2016-06-30 17:32:45,983][INFO ][discovery                ] [inner_es_node_02] inner_es_cluster/VBsHeFjXQXau59hkjTuhTA
[2016-06-30 17:32:49,067][INFO ][cluster.service          ] [inner_es_node_02] detected_master {inner_es_node_01}{1BktktzhQ_y6BN-lNIKhHg}{10.0.0.1}{10.0.0.1:9300}, added {{inner_es_node_01}{1BktktzhQ_y6BN-lNIKhHg}{10.0.0.1}{10.0.0.1:9300},}, reason: zen-disco-receive(from master [{inner_es_node_01}{1BktktzhQ_y6BN-lNIKhHg}{10.0.0.1}{10.0.0.1:9300}])
[2016-06-30 17:32:49,077][INFO ][http                     ] [inner_es_node_02] publish_address {10.0.0.2:9200}, bound_addresses {10.213.136.23:9201}
[2016-06-30 17:32:49,077][INFO ][node                     ] [inner_es_node_02] started
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 日志中&lt;code&gt;cluster.service&lt;/code&gt;部分, 表示发现了第一台机器的节点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2016-06-30 17:32:49,067][INFO ][cluster.service          ] [inner_es_node_02] detected_master {inner_es_node_01}{1BktktzhQ_y6BN-lNIKhHg}{10.0.0.1}{10.0.0.1:9300}, added {{inner_es_node_01}{1BktktzhQ_y6BN-lNIKhHg}{10.0.0.1}{10.0.0.1:9300},}, reason: zen-disco-receive(from master [{inner_es_node_01}{1BktktzhQ_y6BN-lNIKhHg}{10.0.0.1}{10.0.0.1:9300}])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动第二个节点后, 同样确认是否启动成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://10.0.0.1:9200/

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt; : &lt;span class="s2"&gt;"inner_es_node_02"&lt;/span&gt;,
  &lt;span class="s2"&gt;"cluster_name"&lt;/span&gt; : &lt;span class="s2"&gt;"inner_es_cluster"&lt;/span&gt;,
  &lt;span class="s2"&gt;"version"&lt;/span&gt; : &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"number"&lt;/span&gt; : &lt;span class="s2"&gt;"2.3.3"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build_hash"&lt;/span&gt; : &lt;span class="s2"&gt;"218bdf10790eef486ff2c41a3df5cfa32dadcfde"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build_timestamp"&lt;/span&gt; : &lt;span class="s2"&gt;"2016-05-17T15:40:04Z"&lt;/span&gt;,
    &lt;span class="s2"&gt;"build_snapshot"&lt;/span&gt; : false,
    &lt;span class="s2"&gt;"lucene_version"&lt;/span&gt; : &lt;span class="s2"&gt;"5.5.0"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"tagline"&lt;/span&gt; : &lt;span class="s2"&gt;"You Know, for Search"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="9-zheng-shi-qi-dong"&gt;9. 正式启动&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ctrl+c&lt;/code&gt; 关掉原先的进程&lt;/p&gt;
&lt;p&gt;使用命令, 以daemon形式启动, 进程pid写入&lt;code&gt;es.pid&lt;/code&gt;, 可以用于重启等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/elasticsearch -d -p es.pid
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看对应进程是否启动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep elasticsearch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;curl&lt;/code&gt;请求服务确定是否正常&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://10.0.0.1:9200/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者, 更好的方式, 使用&lt;code&gt;supervisord&lt;/code&gt;管理进程, 以下为&lt;code&gt;supervisord.conf&lt;/code&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:es]&lt;/span&gt;
&lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data/LogTool/elasticsearch&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data/LogTool/elasticsearch/bin/elasticsearch&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data/LogTool/elasticsearch/log/supervisord_es_out.log&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data/LogTool/elasticsearch/log/supervisord_es_err.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="10-nao-lie"&gt;10. 脑裂&lt;/h4&gt;
&lt;p&gt;单机测试开发的时候, 其实一个节点就够了. 上线, 使用两个节点, 目的是利用es本身的特性做到高可用.&lt;/p&gt;
&lt;p&gt;但是两个节点是远远不够的. 启动后, 集群会选举一个&lt;code&gt;master&lt;/code&gt;, 一切ok. 但是如果存在网络问题或者某个节点无响应(负载过高), 就会认为对方dead了, 然后两个节点自动选举为&lt;code&gt;master&lt;/code&gt;, 在后续建索引的时候造成数据不一致.&lt;/p&gt;
&lt;p&gt;两个节点防脑裂的配置, &lt;code&gt;minimum_master_nodes&lt;/code&gt;决定了选主需要的最少节点数, &lt;code&gt;N/2+1&lt;/code&gt;, 两个节点即&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;discovery.zen.minimum_master_nodes: 2 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是, 此时一个节点挂了, 则整个集群挂了(无法选举主节点了)&lt;/p&gt;
&lt;p&gt;所以, 要再加一个节点, 这个节点只要保证稳定即可, 对cpu和磁盘要求不高. 这个&lt;code&gt;es&lt;/code&gt;节点的配置同其他节点的区别&lt;code&gt;node.data: false&lt;/code&gt;, 不存储索引数据.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# split brain prevent
node.data: false
&lt;/pre&gt;&lt;/div&gt;</content><category term="system"></category></entry><entry><title>Logstash+ElasticSearch处理mysql慢查询日志</title><link href="http://www.wklken.me/posts/2016/05/24/elk-mysql-slolog.html" rel="alternate"></link><published>2016-05-24T00:00:00+08:00</published><updated>2016-05-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-05-24:/posts/2016/05/24/elk-mysql-slolog.html</id><summary type="html">&lt;p&gt;遇到一个需求, 需要查询某些业务的慢查询日志. 结果DBA平台那边提供的慢查询日志不能解决实际的业务场景(上报的字段补全), 无奈, 自己挽起袖子上&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href="https://www.phase2technology.com/blog/adding-mysql-slow-query-logs-to-logstash/"&gt;这篇文章&lt;/a&gt;, 不过自己根据需求做了较多的变更&lt;/p&gt;
&lt;p&gt;开始吧&lt;/p&gt;
&lt;h2 id="1-zhao-dao-ri-zhi-de-wei-zhi"&gt;1. 找到日志的位置&lt;/h2&gt;
&lt;p&gt;先确认是否开启了, 然后找到日志文件的位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; show variables like '%slow%';
+---------------------+-------------------------------------+
| Variable_name       | Value                               |
+---------------------+-------------------------------------+
| log_slow_queries    | ON                                  |
| slow_launch_time    | 2                                   |
| slow_query_log      | ON                                  |
| slow_query_log_file | /data/mysqllog/20000/slow-query.log |
+---------------------+-------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="2-man-cha-xun-ri-zhi"&gt;2. 慢查询日志&lt;/h2&gt;
&lt;p&gt;格式基本是如下, 当然, 格式如果有差异, 需要根据具体格式进行小的修改&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Time: 160524  5:12:29
# User@Host: user_a[xxxx] @  [10.166.140 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;遇到一个需求, 需要查询某些业务的慢查询日志. 结果DBA平台那边提供的慢查询日志不能解决实际的业务场景(上报的字段补全), 无奈, 自己挽起袖子上&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href="https://www.phase2technology.com/blog/adding-mysql-slow-query-logs-to-logstash/"&gt;这篇文章&lt;/a&gt;, 不过自己根据需求做了较多的变更&lt;/p&gt;
&lt;p&gt;开始吧&lt;/p&gt;
&lt;h2 id="1-zhao-dao-ri-zhi-de-wei-zhi"&gt;1. 找到日志的位置&lt;/h2&gt;
&lt;p&gt;先确认是否开启了, 然后找到日志文件的位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; show variables like '%slow%';
+---------------------+-------------------------------------+
| Variable_name       | Value                               |
+---------------------+-------------------------------------+
| log_slow_queries    | ON                                  |
| slow_launch_time    | 2                                   |
| slow_query_log      | ON                                  |
| slow_query_log_file | /data/mysqllog/20000/slow-query.log |
+---------------------+-------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="2-man-cha-xun-ri-zhi"&gt;2. 慢查询日志&lt;/h2&gt;
&lt;p&gt;格式基本是如下, 当然, 格式如果有差异, 需要根据具体格式进行小的修改&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Time: 160524  5:12:29
# User@Host: user_a[xxxx] @  [10.166.140.109]
# Query_time: 1.711086  Lock_time: 0.000040 Rows_sent: 385489  Rows_examined: 385489
use dbname;
SET timestamp=1464037949;
SELECT 1 from dbname;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="3-shi-yong-logstash-cai-ji"&gt;3. 使用 logstash 采集&lt;/h2&gt;
&lt;p&gt;采集, 无非是用&lt;code&gt;multiline&lt;/code&gt;进行多行解析&lt;/p&gt;
&lt;p&gt;但是, 需要处理的几个问题&lt;/p&gt;
&lt;p&gt;第一个是, 去除掉没用的信息&lt;/p&gt;
&lt;p&gt;第二个, 慢查询sql, 是会反复出现的, 所以, 执行次数成了一个很重要的指标. 我们要做的, 就是&lt;code&gt;降噪&lt;/code&gt;(将参数去掉, 涉及带引号的内容+数字), 将参数类信息过滤掉, 留下核心的sql, 然后计算出一个hash, 这样就可以在查询, 根据这个字段进行聚合. 这里用到了 &lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-add_field"&gt;mutate&lt;/a&gt; 以及 &lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-checksum.html"&gt;checksum&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  # calculate unique hash
  mutate {
    add_field =&amp;gt; {"sql_for_hash" =&amp;gt; "%{sql}"}
  }
  mutate {
    gsub =&amp;gt; [
        "sql_for_hash", "'.+?'", "",
        "sql_for_hash", "-?\d*\.{0,1}\d+", ""
    ]
  }
  checksum {
    algorithm =&amp;gt; "md5"
    keys =&amp;gt; ["sql_for_hash"]
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后算出来的md5, 放入了&lt;code&gt;logstash_checksum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第三个, 某些sql会非常大, 例如某些不规范的sql可能到几百M或是上G....会直接导致采集进程OOM, 所以, 处理时, 设定超过100k丢弃掉&lt;/p&gt;
&lt;p&gt;第四个, 默认多行处理, 一条sql可能停留在采集端没有上报, 需要等到下一条sql进来, 这样是有问题的, 如果一直没有后续, 最后一条将不会进入引擎. 所以, 在配置中设定了超过5s自动上报&lt;/p&gt;
&lt;p&gt;完整的logstash配置文件(具体使用可能需要根据自身日志格式做些小调整)
注意, 里面的pattern &lt;code&gt;ALLWORD [\s\S]*&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;file&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;path&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/data/mysqllog/20000/slow-query.log"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="err"&gt;sincedb_path&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;"/data/LogNew/logstash/sincedb/mysql.sincedb"&lt;/span&gt;
    &lt;span class="err"&gt;type&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;"mysql-slow-log"&lt;/span&gt;
    &lt;span class="err"&gt;add_field&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"PRODUCT"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="err"&gt;codec&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;multiline&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;pattern&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;"^#&lt;/span&gt; &lt;span class="err"&gt;User@&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="s2"&gt;      negate =&amp;gt; true&lt;/span&gt;
&lt;span class="s2"&gt;      what =&amp;gt; previous&lt;/span&gt;
&lt;span class="s2"&gt;      max_bytes =&amp;gt; "&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="n"&gt;kib&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="s2"&gt;      auto_flush_interval =&amp;gt; 5&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;filter {&lt;/span&gt;
&lt;span class="s2"&gt;  if ("&lt;/span&gt;&lt;span class="n"&gt;multiline_codec_max_bytes_reached&lt;/span&gt;&lt;span class="s2"&gt;" in &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;tags&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;) {&lt;/span&gt;
&lt;span class="s2"&gt;      drop {}&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;  grok {&lt;/span&gt;
&lt;span class="s2"&gt;    # User@Host: logstash&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;logstash&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt; @ localhost &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;    # User@Host: logstash&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;logstash&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt; @  &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;    match =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"^# User@Host: %{ALLWORD:user}\[%{ALLWAORD}\] @ %{ALLWORD:dbhost}? \[%{IP:ip}\]"&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;  grok {&lt;/span&gt;
&lt;span class="s2"&gt;    # Query_time: 102.413328  Lock_time: 0.000167 Rows_sent: 0  Rows_examined: 1970&lt;/span&gt;
&lt;span class="s2"&gt;    match =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"^# Query_time: %{NUMBER:duration:float}%{SPACE}Lock_time: %{NUMBER:lock_wait:float}%{SPACE}Rows_sent: %{NUMBER:results:int}%{SPACE}Rows_examined:%{SPACE}%{NUMBER:scanned:int}%{ALLWORD:sql}"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;

&lt;span class="s2"&gt;  # Capture the time the query happened&lt;/span&gt;
&lt;span class="s2"&gt;  grok {&lt;/span&gt;
&lt;span class="s2"&gt;    match =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"^SET timestamp=%{NUMBER:timestamp};"&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;  # if codec multiline parse failure&lt;/span&gt;
&lt;span class="s2"&gt;  if ("&lt;/span&gt;&lt;span class="n"&gt;_grokparsefailure&lt;/span&gt;&lt;span class="s2"&gt;" in &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;tags&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;) {&lt;/span&gt;
&lt;span class="s2"&gt;      drop {}&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;  date {&lt;/span&gt;
&lt;span class="s2"&gt;    match =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"UNIX"&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;

&lt;span class="s2"&gt;  mutate {&lt;/span&gt;
&lt;span class="s2"&gt;    gsub =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;SET timestamp=\d+?;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;use [a-zA-Z0-9\-\_]+?;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;# Time: \d+\s+\d+:\d+:\d+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;/usr/local/mysql/bin/mysqld.+$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Tcp port:.+$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"sql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Time .+$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;



&lt;span class="s2"&gt;  # calculate unique hash&lt;/span&gt;
&lt;span class="s2"&gt;  mutate {&lt;/span&gt;
&lt;span class="s2"&gt;    add_field =&amp;gt; {"&lt;/span&gt;&lt;span class="n"&gt;sql_for_hash&lt;/span&gt;&lt;span class="s2"&gt;" =&amp;gt; "&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"}&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;  mutate {&lt;/span&gt;
&lt;span class="s2"&gt;    gsub =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"sql_for_hash"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"'.+?'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"sql_for_hash"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-?\d*\.{0,1}\d+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;  checksum {&lt;/span&gt;
&lt;span class="s2"&gt;    algorithm =&amp;gt; "&lt;/span&gt;&lt;span class="nt"&gt;md5&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="s2"&gt;    keys =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"sql_for_hash"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;

&lt;span class="s2"&gt;  # Drop the captured timestamp field since it has been moved to the time of the event&lt;/span&gt;
&lt;span class="s2"&gt;  mutate {&lt;/span&gt;
&lt;span class="s2"&gt;    # TODO: remove the message field&lt;/span&gt;
&lt;span class="s2"&gt;    remove_field =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"sql_for_hash"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;  }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;output {&lt;/span&gt;
&lt;span class="s2"&gt;    #stdout{&lt;/span&gt;
&lt;span class="s2"&gt;    #    codec =&amp;gt; rubydebug&lt;/span&gt;
&lt;span class="s2"&gt;    #}&lt;/span&gt;
&lt;span class="s2"&gt;    #if ("&lt;/span&gt;&lt;span class="nt"&gt;_grokparsefailure&lt;/span&gt;&lt;span class="s2"&gt;" not in &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;tags&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;) {&lt;/span&gt;
&lt;span class="s2"&gt;    #    stdout{&lt;/span&gt;
&lt;span class="s2"&gt;    #        codec =&amp;gt; rubydebug&lt;/span&gt;
&lt;span class="s2"&gt;    #    }&lt;/span&gt;
&lt;span class="s2"&gt;    #}&lt;/span&gt;
&lt;span class="s2"&gt;    if ("&lt;/span&gt;&lt;span class="nt"&gt;_grokparsefailure&lt;/span&gt;&lt;span class="s2"&gt;" not in &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;tags&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;) {&lt;/span&gt;
&lt;span class="s2"&gt;        elasticsearch {&lt;/span&gt;
&lt;span class="s2"&gt;          hosts =&amp;gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"192.168.1.1:9200"&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;          index =&amp;gt; "&lt;/span&gt;&lt;span class="nt"&gt;logstash-slowlog&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;采集进去的内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
           "@timestamp" =&amp;gt; "2016-05-23T21:12:59.000Z",
             "@version" =&amp;gt; "1",
                 "tags" =&amp;gt; [
        [0] "multiline"
    ],
                 "path" =&amp;gt; "/Users/ken/tx/elk/logstash/data/slow_sql.log",
                 "host" =&amp;gt; "Luna-mac-2.local",
                 "type" =&amp;gt; "mysql-slow",
                  "env" =&amp;gt; "PRODUCT",
                 "user" =&amp;gt; "dba_bak_all_sel",
                   "ip" =&amp;gt; "10.166.140.109",
             "duration" =&amp;gt; 28.812601,
            "lock_wait" =&amp;gt; 0.000132,
              "results" =&amp;gt; 749414,
              "scanned" =&amp;gt; 749414,
                  "sql" =&amp;gt; "SELECT /*!40001 SQL_NO_CACHE */ * FROM `xxxxx`;",
    "logstash_checksum" =&amp;gt; "3e3ccb89ee792de882a57e2bef6c5371"
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="4-xie-cha-xun"&gt;4. 写查询&lt;/h2&gt;
&lt;p&gt;查询, 我们需要按&lt;code&gt;logstash_checksum&lt;/code&gt;进行聚合, 然后按照次数由多到少降序展示, 同时, 每个&lt;code&gt;logstash_checksum&lt;/code&gt;需要有一条具体的sql进行展示&lt;/p&gt;
&lt;p&gt;通过 es 的 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html"&gt;Top hits Aggregation&lt;/a&gt; 可以完美地解决这个查询需求&lt;/p&gt;
&lt;p&gt;查询的query&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;body = {
    "from": 0,
    "size": 0,
    "query": {
        "filtered": {
            "query": {
                "match": {
                    "user": "test"
                }
            },
            "filter": {
                "range": {
                    "@timestamp": {
                        "gte": "now-1d",
                        "lte": "now"
                    }
                }
            }
        }
    },
    "aggs": {
        "top_errors": {
            "terms": {
                "field": "logstash_checksum",
                "size": 20
            },
            "aggs": {
                "top_error_hits": {
                    "top_hits": {
                        "sort": [
                            {
                                "@timestamp":{
                                    "order": "desc"
                                }
                            }
                        ],
                        "_source": {
                            "include": [
                               "user" , "sql", "logstash_checksum", "@timestamp", "duration", "lock_wait", "results", "scanned"
                            ]
                        },
                        "size" : 1
                    }
                }
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟这个写法相关的几个参考链接: &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation"&gt;Terms Aggregation&lt;/a&gt; /  &lt;a href="http://stackoverflow.com/questions/25986538/elasticsearch-filter-document-group-by-field"&gt;Elasticsearch filter document group by field&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="5-xuan-ran-ye-mian"&gt;5. 渲染页面&lt;/h2&gt;
&lt;p&gt;python的后台, 使用&lt;code&gt;sqlparse&lt;/code&gt;包, 将sql进行格式化(换行/缩进/大小写), 再往前端传. &lt;a href="https://pypi.python.org/pypi/sqlparse"&gt;sqlparse&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sql = 'select * from foo where id in (select id from bar);'
&amp;gt;&amp;gt;&amp;gt; print sqlparse.format(sql, reindent=True, keyword_case='upper')
SELECT *
FROM foo
WHERE id IN
  (SELECT id
   FROM bar);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在页面上, 使用js进行语法高亮  &lt;a href="https://github.com/google/code-prettify"&gt;code-prettify&lt;/a&gt;&lt;/p&gt;</content><category term="system"></category></entry><entry><title>[分享]关于代码调试DE那些事</title><link href="http://www.wklken.me/posts/2016/05/12/how-to-debug.html" rel="alternate"></link><published>2016-05-12T00:00:00+08:00</published><updated>2016-05-12T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-05-12:/posts/2016/05/12/how-to-debug.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;之前写过一篇博文, 做分享, 重新梳理了下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/how-to-debug.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/how-to-debug.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;之前写过一篇博文, 做分享, 重新梳理了下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/how-to-debug.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/how-to-debug.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</content><category term="share"></category></entry><entry><title>[分享]关于代码调试DE那些事</title><link href="http://www.wklken.me/posts/2016/05/12/how-to-debug.html" rel="alternate"></link><published>2016-05-12T00:00:00+08:00</published><updated>2016-05-12T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-05-12:/posts/2016/05/12/how-to-debug.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;之前写过一篇博文, 做分享, 重新梳理了下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/how-to-debug.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/how-to-debug.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;之前写过一篇博文, 做分享, 重新梳理了下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/how-to-debug.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/how-to-debug.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</content><category term="share"></category></entry><entry><title>ELK维护的一些点(二)</title><link href="http://www.wklken.me/posts/2016/05/07/elk-about-2.html" rel="alternate"></link><published>2016-05-07T00:00:00+08:00</published><updated>2016-05-07T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-05-07:/posts/2016/05/07/elk-about-2.html</id><summary type="html">&lt;p&gt;很杂, 涉及到最近处理的一些点&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="gen-ju-stringzhuan-fu-dian-shu-de-mou-ge-zi-duan-pai-xu"&gt;根据string转浮点数的某个字段排序&lt;/h3&gt;
&lt;p&gt;一个字段, &lt;code&gt;resp_time&lt;/code&gt;, mapping中是string, 有需求是, 按照响应时间降序排序, 此时需要构造qsl(在search中使用), 使用该字段转换为浮点数, 降序排列&lt;/p&gt;
&lt;p&gt;第一步, 修改es配置, 增加groovy支持&lt;/p&gt;
&lt;p&gt;elasticsearch.yml中加入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;script.engine.groovy.inline.search: on
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 执行 &lt;a href="http://www.wklken.me/posts/2016/02/16/elk-about-upgrade.html#rolling-restart"&gt;rolling restart&lt;/a&gt;, 逐一重启集群每个节点&lt;/p&gt;
&lt;p&gt;第二步, 构造qsl,  &lt;code&gt;sort&lt;/code&gt;中,  增加&lt;code&gt;_script&lt;/code&gt; 使用groovy脚本, 将对应字段从string转成数字, 再进行排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;'sort': [{'_script': {'lang': 'groovy',
                       'order': 'desc',
                       'script': 'Float.parseFloat(doc["resp_time"].value)',
                       'type' …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;很杂, 涉及到最近处理的一些点&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="gen-ju-stringzhuan-fu-dian-shu-de-mou-ge-zi-duan-pai-xu"&gt;根据string转浮点数的某个字段排序&lt;/h3&gt;
&lt;p&gt;一个字段, &lt;code&gt;resp_time&lt;/code&gt;, mapping中是string, 有需求是, 按照响应时间降序排序, 此时需要构造qsl(在search中使用), 使用该字段转换为浮点数, 降序排列&lt;/p&gt;
&lt;p&gt;第一步, 修改es配置, 增加groovy支持&lt;/p&gt;
&lt;p&gt;elasticsearch.yml中加入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;script.engine.groovy.inline.search: on
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 执行 &lt;a href="http://www.wklken.me/posts/2016/02/16/elk-about-upgrade.html#rolling-restart"&gt;rolling restart&lt;/a&gt;, 逐一重启集群每个节点&lt;/p&gt;
&lt;p&gt;第二步, 构造qsl,  &lt;code&gt;sort&lt;/code&gt;中,  增加&lt;code&gt;_script&lt;/code&gt; 使用groovy脚本, 将对应字段从string转成数字, 再进行排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;'sort': [{'_script': {'lang': 'groovy',
                       'order': 'desc',
                       'script': 'Float.parseFloat(doc["resp_time"].value)',
                       'type': 'number'}},
          {'@timestamp': 'desc'}
          ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附 &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html"&gt;scripting文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fielddata-format-disableddao-zhi-de-pai-xu-shi-xiao"&gt;&lt;code&gt;fielddata-format-disabled&lt;/code&gt;导致的排序失效&lt;/h3&gt;
&lt;p&gt;有个集群, 升级后, 发现&lt;code&gt;resp_time&lt;/code&gt;字段的mapping是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"resp_time" : {
"type" : "string",
"norms" : {
    "enabled" : false
},
"fielddata" : {
    "format" : "disabled"
},
"fields" : {
    "raw" : {
    "type" : "string",
    "index" : "not_analyzed",
    "ignore_above" : 256
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里的, 是因为升级es 2.0之后, 默认值变更带来的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"fielddata" : {
  "format" : "disabled"
},
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/fielddata.html"&gt;fielddata文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此时, 排序的qsl将会报错, 无法按照对应要求排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Field data loading is forbidden on resp_time
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方案, 挺简单的, 使用&lt;code&gt;foo.raw&lt;/code&gt;即可&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;'sort': [{'_script': {'lang': 'groovy',
    'order': 'desc',
    'script': 'Float.parseFloat(doc["resp_time.raw"].value)',
    'type': 'number'}},
{'@timestamp': 'desc'}
]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-ju-he"&gt;使用聚合&lt;/h3&gt;
&lt;p&gt;把string类型的&lt;code&gt;resp_time&lt;/code&gt;放到&lt;code&gt;aggs&lt;/code&gt;中做聚合的时候.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"aggs": {
     "resp_time_stats": {"stats": {"script": 'Float.parseFloat(doc["resp_time.raw"].value)'}}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 会报错&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{u'error': {u'failed_shards': [{u'index': u'logstash-2016.04.10',
                                u'node': u'AvemqKN-RGKy68zJXUapBg',
                                u'reason': {u'reason': u'scripts of type [inline], operation [aggs] and lang [groovy] are disabled',
                                            u'type': u'script_exception'},
                                u'shard': 0}],
            u'grouped': True,
            u'phase': u'query',
            u'reason': u'all shards failed',
            u'root_cause': [{u'reason': u'scripts of type [inline], operation [aggs] and lang [groovy] are disabled',
                             u'type': u'script_exception'}],
            u'type': u'search_phase_execution_exception'},
 u'status': 500}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理, es加配置, 逐一重启&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;script.engine.groovy.inline.aggs: on
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关 &lt;a href="https://discuss.elastic.co/t/scripts-of-type-inline-operation-aggs-and-lang-groovy-are-disabled/2493"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="logstash-grok-default-patterns"&gt;logstash grok default patterns&lt;/h3&gt;
&lt;p&gt;默认的一些pattern, 见 &lt;a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns"&gt;grok-patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grok检查在线实时编辑, https://grokdebug.herokuapp.com/&lt;/p&gt;
&lt;h3 id="logstash-codec-multiline-xian-zhi-xing-shu-he-ri-zhi-da-xiao"&gt;logstash codec multiline 限制行数和日志大小&lt;/h3&gt;
&lt;p&gt;配置, 具体见 &lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-codecs-multiline.html"&gt;multiline文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input {
        codec =&amp;gt; multiline {
            patterns_dir =&amp;gt; "./patterns"
            pattern =&amp;gt; ""
            what =&amp;gt; "previous"
            negate  =&amp;gt; true
            max_lines =&amp;gt; 100
            max_bytes =&amp;gt; "50kib"
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单位 &lt;a href="https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html#bytes"&gt;bytes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实践中, 使用&lt;code&gt;max_bytes&lt;/code&gt;, 当&lt;code&gt;what=previous + negate=true&lt;/code&gt;的情况下, 即不匹配模式的, 归属前一部分, 这种情况下, 性能ok, 反之&lt;code&gt;what=next + negate=true&lt;/code&gt;的情况下, 不匹配成功归属于后半部分, 此时产生的cpu消耗非常之大, 可以将一台机器跑满.&lt;/p&gt;
&lt;p&gt;另外, 假设配置&lt;code&gt;max_bytes=1M&lt;/code&gt;, 此时用户打了50M, 会给这个event打上tag &lt;code&gt;multiline_codec_max_bytes_reache&lt;/code&gt;, 但是, 这50M 最终还是会经logstash灌入到es里面. 即, 超了, 但是并不自动截掉&lt;/p&gt;
&lt;p&gt;这时候, 我们可以, 使用&lt;code&gt;mutate-replace&lt;/code&gt;直接替换掉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # if multiline_codec_max_lines_reached
    if ("multiline_codec_max_bytes_reached" in [tags]) {
        mutate {
            replace =&amp;gt; {
                "message" =&amp;gt; "Log System Warnning: multiline_codec_max_lines_reached, Your log has exceeded 50kB(51200 chars), it was blocked by log system. Please check your code to make your log info shorter and useful"
                "msg" =&amp;gt; "Log System Warnning: multiline_codec_max_lines_reached, Your log has exceeded 50kB(51200 chars), it was blocked by log system. Please check your code to make your log info shorter and useful"
            }
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-supervisordguan-li-logstashjin-cheng"&gt;使用supervisord管理logstash进程&lt;/h3&gt;
&lt;p&gt;之前提到, 升级集群后, 使用supervisord统一管理logstash进程, &lt;a href="http://www.wklken.me/posts/2016/02/16/elk-about-upgrade.html#supervisord"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cha-kan-dang-qian-ji-qi-logstashjin-cheng-top"&gt;查看当前机器logstash进程top&lt;/h3&gt;
&lt;p&gt;有时, 需要上机器看看对应采集端所有logstash进程是否存在问题, 常常用到&lt;code&gt;top&lt;/code&gt;命令, 所以写了个简单的脚本, 配合supervisord的脚本使用&lt;/p&gt;
&lt;p&gt;ltop.sh&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
./logstashd.sh status
top -p &lt;span class="k"&gt;$(&lt;/span&gt;./logstashd.sh status &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{print $4}'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -F&lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="s1"&gt;'{print $1}'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s/,$//g'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jin-cheng-zhan-yong-cpujian-ce-jiao-ben"&gt;进程占用cpu检测脚本&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;BASEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$BASEDIR&lt;/span&gt;
&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; &amp;gt;&amp;gt; /tmp/log/monitor.log &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"=============================================="&lt;/span&gt;
date
&lt;span class="k"&gt;function&lt;/span&gt; check&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;PNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;
    &lt;span class="nv"&gt;CPU_USE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ps -p &lt;span class="nv"&gt;$PID&lt;/span&gt; -o %cpu &lt;span class="p"&gt;|&lt;/span&gt; sed -n &lt;span class="s1"&gt;'2p'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;INT_CPU_USE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%.0f\n"&lt;/span&gt; &lt;span class="nv"&gt;$CPU_USE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PNAME&lt;/span&gt;&lt;span class="s2"&gt;" - "&lt;/span&gt;&lt;span class="nv"&gt;$CPU_USE&lt;/span&gt;&lt;span class="s2"&gt;" - "&lt;/span&gt;&lt;span class="nv"&gt;$INT_CPU_USE&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$INT_CPU_USE&lt;/span&gt; -gt &lt;span class="m"&gt;85&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
       &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PNAME&lt;/span&gt;&lt;span class="s2"&gt; cpu usage greater than 85%,do restart"&lt;/span&gt;
       ./logstashd.sh restart &lt;span class="nv"&gt;$PNAME&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; -f check
./logstashd.sh status &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{print "-", $1, $4}'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -F&lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="s1"&gt;'{print $1}'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs -n3 bash -c &lt;span class="s1"&gt;'check $@'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu-ju-pan-man-liao-dao-zhi-ji-qun-zhuang-tai-yellow"&gt;数据盘满了导致集群状态yellow&lt;/h3&gt;
&lt;p&gt;机器节点本身有1T 硬盘, 由两块盘组成, 配置es的时候, 数据分别写到了两个盘上, 然后有一天集群状态告警了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"status" : "yellow",
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看es的日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2016-03-21 12:43:45,934][INFO ][cluster.routing.allocation.decider] [node_01] low disk watermark [85%] exceeded
on [AvemqKN-RGKy68zJXUapBg][node_01][/data/LogNewData/xxx/nodes/0] free: 75.5gb[14.1%], replicas will not be assigned to this node
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理: 腾磁盘空间出来, es会自动检测恢复&lt;/p&gt;
&lt;p&gt;PS: 磁盘大小要预估好&lt;/p&gt;
&lt;h3 id="cha-kan-rediszhong-dui-lie-de-dui-ji"&gt;查看redis中队列的堆积&lt;/h3&gt;
&lt;p&gt;历史遗留问题, 有些节点采集发送到redis的key, 在indexer阶段并没有被消费, 导致越堆越多....&lt;/p&gt;
&lt;p&gt;这时候, 可以通过redis查下哪些队列堆积了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/redis-cli -h 127.0.0.1 -p 6379 -a blueking_log --bigkeys
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要redis版本支持&lt;code&gt;bigkeys&lt;/code&gt; =&amp;gt; This is a "new" feature beginning with 2.8&lt;/p&gt;
&lt;h3 id="jie-xi-shi-bai-diu-qi-ji-hei-ming-dan-shi-xian"&gt;解析失败丢弃及黑名单实现&lt;/h3&gt;
&lt;p&gt;grok解析失败, 丢弃&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if ("_grokparsefailure" in [tags]) {
    drop {}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有时候, 需要禁止采集某些文件, 但由于&lt;code&gt;file&lt;/code&gt;类型的&lt;code&gt;exclude&lt;/code&gt;只能用文件名, 而没有更强大的规则, 所以只能采集进来再丢弃, 此时, 可以根据路径grok解析出关键字, 然后判断丢弃&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if ([keyworod] in ["data", "not_exists"])
{
    drop {}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-dong-xian-zhi-shi-yong-de-workershu"&gt;启动限制使用的worker数&lt;/h3&gt;
&lt;p&gt;默认情况, 有可能把所有cpu跑满, 这时候, 可以专门加下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-w, --pipeline-workers COUNT  Sets the number of pipeline workers to run. (default: 24)

logstash agent -f conf/xxx.conf -w 2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ge-jian-dan-jiao-ben"&gt;几个简单脚本&lt;/h3&gt;
&lt;p&gt;health.sh&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
curl &lt;span class="s1"&gt;'http://127.0.0.1:9200/_cluster/health?pretty=true'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;indices.sh&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
curl &lt;span class="s1"&gt;'http://127.0.0.1:9200/_cat/indices?v'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -k &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="system"></category></entry><entry><title>[分享]Python源码剖析-数据结构</title><link href="http://www.wklken.me/posts/2016/03/01/python-source-datastructure.html" rel="alternate"></link><published>2016-03-01T00:00:00+08:00</published><updated>2016-03-01T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-03-01:/posts/2016/03/01/python-source-datastructure.html</id><summary type="html">&lt;p&gt;&lt;object data="/extra/share/python-source-datastructure.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/python-source-datastructure.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;object data="/extra/share/python-source-datastructure.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/python-source-datastructure.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>一些Centos Python生产环境的部署命令</title><link href="http://www.wklken.me/posts/2016/02/18/python-env-in-centos.html" rel="alternate"></link><published>2016-02-18T00:00:00+08:00</published><updated>2016-02-18T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-18:/posts/2016/02/18/python-env-in-centos.html</id><summary type="html">&lt;p&gt;Just notes&lt;/p&gt;
&lt;p&gt;拿到一台干净的centos之后, 初始化Python环境, 一些命令和问题记录而已&lt;/p&gt;
&lt;p&gt;可以搞成脚本自动初始化, 当然, 用docker更好&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-chu-huan-jing"&gt;基础环境&lt;/h2&gt;
&lt;h4 id="1-chuang-jian-yong-hu"&gt;1. 创建用户&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser newuser
sudo passwd newuser

&lt;span class="c1"&gt;# 设置授权不需要输入密码&lt;/span&gt;
sudo /usr/sbin/visudo
newuser       &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-epelfedora-extra-packages-for-enterprise-linux-repository"&gt;2. EPEL(Fedora Extra Packages for Enterprise Linux repository )&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat"&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo rpm …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Just notes&lt;/p&gt;
&lt;p&gt;拿到一台干净的centos之后, 初始化Python环境, 一些命令和问题记录而已&lt;/p&gt;
&lt;p&gt;可以搞成脚本自动初始化, 当然, 用docker更好&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-chu-huan-jing"&gt;基础环境&lt;/h2&gt;
&lt;h4 id="1-chuang-jian-yong-hu"&gt;1. 创建用户&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser newuser
sudo passwd newuser

&lt;span class="c1"&gt;# 设置授权不需要输入密码&lt;/span&gt;
sudo /usr/sbin/visudo
newuser       &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-epelfedora-extra-packages-for-enterprise-linux-repository"&gt;2. EPEL(Fedora Extra Packages for Enterprise Linux repository )&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat"&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo rpm -Uvh epel-release-6*.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-jia-iusyuan"&gt;3. 加ius源&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-13.ius.centos6.noarch.rpm"&gt;包地址&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-13.ius.centos6.noarch.rpm
sudo rpm -Uvh ius-release-1.0-13.ius.centos6.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4-an-zhuang-python27-python3-pip"&gt;4. 安装python2.7 / python3 / pip&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install python27
sudo yum install python27-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py &lt;span class="p"&gt;|&lt;/span&gt; sudo /usr/bin/python2.7 -

&lt;span class="c1"&gt;# pip&lt;/span&gt;
curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py &lt;span class="p"&gt;|&lt;/span&gt; sudo /usr/bin/python2.7 -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;extra: install python3&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install python34u python34u-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5-virtualenv"&gt;5. virtualenv&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="6-gen-ssh-key"&gt;6. gen ssh key&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa

add ~/.ssh/id_rsa.pub to git or github
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yi-xie-fu-wu_1"&gt;一些服务&lt;/h2&gt;
&lt;h4 id="1-install-git"&gt;1. install git&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install git
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-mysql"&gt;2. mysql&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install mysql
sudo yum install mysql-devel* -y
sudo yum install mysql-server
sudo /sbin/service mysqld start
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-redis"&gt;3. redis&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4-rabbitmq"&gt;4. rabbitmq&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install rabbitmq-server
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen-ti_1"&gt;问题&lt;/h2&gt;
&lt;h4 id="errno-14-peer-cert-cannot-be-verified-or-peer-cert-invalid"&gt;[Errno 14] Peer cert cannot be verified or peer cert invalid&lt;/h4&gt;
&lt;p&gt;add "sslverify=false" in /etc/yum.conf&lt;/p&gt;
&lt;h4 id="pip-error-importerror-cannot-import-name-httpshandler"&gt;pip error: ImportError: cannot import name HTTPSHandler&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install openssl openssl-devel -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/20688034/importerror-cannot-import-name-httpshandler-using-pip"&gt;see in sof&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="mysql-python"&gt;MySQL-python&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _mysql.c:2642: error: initializer element is not constant
    _mysql.c:2642: error: &lt;span class="o"&gt;(&lt;/span&gt;near initialization &lt;span class="k"&gt;for&lt;/span&gt; ‘_mysql_ResultObject_memberlist&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.offset’&lt;span class="o"&gt;)&lt;/span&gt;
    _mysql.c: In &lt;span class="k"&gt;function&lt;/span&gt; ‘_mysql_ConnectionObject_getattr’:
    _mysql.c:2666: error: ‘_mysql_ConnectionObject’ has no member named ‘open’
    error: &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;'gcc'&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;1&lt;/span&gt;

    ----------------------------------------
Command &lt;span class="s2"&gt;"/data/home/alarm/env/bin/python -c "&lt;/span&gt;import setuptools, tokenize&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/pip-build-HgXAQT/MySQL-python/setup.py'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;exec&lt;span class="o"&gt;(&lt;/span&gt;compile&lt;span class="o"&gt;(&lt;/span&gt;getattr&lt;span class="o"&gt;(&lt;/span&gt;tokenize, &lt;span class="s1"&gt;'open'&lt;/span&gt;, open&lt;span class="o"&gt;)(&lt;/span&gt;__file__&lt;span class="o"&gt;)&lt;/span&gt;.read&lt;span class="o"&gt;()&lt;/span&gt;.replace&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\r\n'&lt;/span&gt;, &lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, __file__, &lt;span class="s1"&gt;'exec'&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;" install --record /tmp/pip-kx2cSu-record/install-record.txt --single-version-externally-managed --compile"&lt;/span&gt; failed with error code &lt;span class="m"&gt;1&lt;/span&gt; in /tmp/pip-build-HgXAQT/MySQL-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理:  &lt;code&gt;yum install mysql-devel&lt;/code&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>摘录&gt;</title><link href="http://www.wklken.me/posts/2016/02/17/master-en-in-six-months.html" rel="alternate"></link><published>2016-02-17T00:00:00+08:00</published><updated>2016-02-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-17:/posts/2016/02/17/master-en-in-six-months.html</id><summary type="html">&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="guan-dian"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="guan-dian"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到！&lt;/p&gt;
&lt;p&gt;长期误解的错误的观点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有语言天赋的人才能学会外语&lt;/li&gt;
&lt;li&gt;到国外待一段时间就能学会外语&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="zhang-wo-yi-chong-wai-yu-de-biao-zhun"&gt;掌握一种外语的标准&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;（1）你已经掌握了有关语言的最高频单词和词组，你能听懂，也能自己独立使用。在外语里边，掌握1000个最高频词，完全满足日常生活沟通所需的85%，3000个高频词可以覆盖日常沟通、工作及商务交流的98%以上。&lt;/li&gt;
&lt;li&gt;（2）你完全可以很自然地使用你已经会的词组和单词，来创造你想说的任何句子，沟通你想表达的意思。当然，有时候你会找不到最确切和最巧妙的说法，但是你完全有能力找到能用的词来表达你想说的东西。&lt;/li&gt;
&lt;li&gt;（3）听到陌生单词的时候，你会轻松地邀请别人解释给你听。而在这个过程当中，你完全有能力用外语来了解和接受这个新的概念。同时，你也有能力吸收这个概念带给你的生词。&lt;/li&gt;
&lt;li&gt;（4）你的发音已经接近母语者。可能有的地方不是100%一样，但是这些绝对不会对你的沟通造成阻碍。&lt;/li&gt;
&lt;li&gt;（5）你说外语的节奏、速度、轻重、停顿等，已经完全符合外语母语者的习惯，而且你在说的时候，总是感到很自然。你也会很恰当地用礼节和最普遍的感叹方式来进行日常“共鸣”，从而达到友好沟通的目的。&lt;/li&gt;
&lt;li&gt;（6）你已经完全掌握了新的肢体语言的表达方式，包括一些面部表情、不同手势等。&lt;/li&gt;
&lt;li&gt;（7）你已经建立了语感，在肚子里能知道哪些说法算是大家都认同的，也会感觉到哪些说法有一点儿偏离大家习惯的规矩。&lt;/li&gt;
&lt;li&gt;（8）同时，为了学得更快，你也要懂得累了就休息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="xue-hui-wai-yu-de-wu-xiang-he-xin-yuan-ze"&gt;学会外语的五项核心原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从和你有密切关联的外语内容学起: 只要信息跟你个人没有重要关联，你就自然会觉得没有重要意义，因此不会给注意力。不给注意力的自然结果是记不得、学得慢甚至学不会。反之，任何对你本人有重要意义的信息，都会引起你的注意，并且当你可以给它足够注意力时，你就会自然而然学得特别快 =&amp;gt; 结论: 为了把外语学好，你要找到这门外语跟你的重要关联。在学习时，你一定要选择跟自己的兴趣、动力有重要关联的外语内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和学习技术挺类似, 技术深入以及眼界扩展, 从自己工作内容相关的东西开始才能事半功倍, 才能有效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把外语当成沟通工具: 1. 把外语当成工具，会让你通过“用”来学外语，而不是先学后用. 把外语当成沟通工具的第一个必然结果是，只要你会一点，就会马上去用，从而体验这个工具发挥的效力。2. 把外语当成工具，会让你从功能出发，把形式放在后面学通过用外语来学外语的关键，是把自己的注意力先放在单词和词组的功能。这样，你会先用功能最明显的几个单词和词组来沟通，不让形式成为卡住自己学习的节点。3. 把外语当成工具，会让你自然接受多种说法，因此不拘泥于一个“标准答案” 4. 把外语当成工具，可以获取“反馈”带来的巨大帮助，因此效果好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做技术的这种机会还是比较多的. 从实践中学习, 在实践中验证理论.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;理解了含义，自然能“获取”外语: 1. 可理解输入就是首先理解含义，然后下意识自动“获取”外语的过程。为了把你的外语学习速度加快，你需要在学习的过程中，给自己创造可理解输入的条件。2. 相信自己的潜意识学外语的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生理训练为主: 要学好外语，更重要的是要进行合适的生理训练，也就是说，外语学习的一个非常重要的部分，是训练大脑神经和外语肌肉。与练健美体操一样，练好外语的过程是一个肌肉训练的过程。1. 一定要用足够时间锻炼耳朵里的外语听觉神经！ 2. 发音训练绝对是肌肉训练的一个过程，因此要用体育训练的思路，指导自己找对路，这包括经常练，同时在练习的过程中注意动作的准确度。3. 创造外语条件反射！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;掌握好心理状态: 用深度放松的状态来学习, 保持良好学习状态的另外一个重要因素，就是管理自己的渴望。必须开心忍受听不懂的阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="xue-hui-wai-yu-de-qi-ge-guan-jian-xing-wei"&gt;学会外语的七个关键行为&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多听——快速长好“外语DNA”: “泡脑子”表面的意思很简单，就是说要把自己的大脑“泡”在外语的声音里。除此之外，也有一些自我管理的方式和态度方面的问题需要注意，这样才能把“泡脑子”的作用发挥到极致。&lt;/li&gt;
&lt;li&gt;先认识含义，后明白词: 作为学外语的成年人，也必须运用这个基本原理。不管怎么样，要把注意力先放在明白含义上，在这个基础上，你的大脑就很容易吸收你正在学的语言。换句话说，为了学会外语，要先懂意思，不是为了懂意思要先学会外语！ 肢体语言/整体环境和场景/通过已知”获取”未知/&lt;/li&gt;
&lt;li&gt;大胆组合，大量去用&lt;/li&gt;
&lt;li&gt;从核心高频内容开始学起: 为了把英语学得透彻，并且达到完全像母语者一样，根本不需要学那么多，更不需要同时什么都学，只需要把注意力放在外语的核心，掌握外语的高频词即可。所谓高频词就是沟通中出现频率高的外语单词，高频词是外语沟通的核心。所以，学到8000个单词以后，你的英文水平已经和普通的英语母语者一样好！外语学习内容贵精不贵多，学习的过程一定要遵守质量第一，数量第二的原则的&lt;/li&gt;
&lt;li&gt;找一个好的外语家长&lt;/li&gt;
&lt;li&gt;掌握发音的绝招: 除了听声音并调整自己面部肌肉之外，练发音的时候，还有一个“绝招”能用，就是“看脸说话”，意思是模仿外语母语者的面部和口型来练发音。&lt;/li&gt;
&lt;li&gt;一个盒子两条路（Same Box-Different Path）: 我相信你很清楚，为了真正会外语，迟早必须懂得用外语思考。也就是说，自己的大脑能够直接将头脑中的意义联结到外语的声音。根本不需要经过中文翻译. 只有把外语的声音和内心的画面含义联结到一起，才是下意识高效率的学习，也就是用外语沟通的时候，自己沟通的感觉和效果与说母语一样。其实所谓“外语思维”就是这个意思——听到外语，在头脑中看到画面，同时注意到自己的感觉，说话时也是直接从画面和感觉联结到外语. “同一个盒子，两条路”的主要含义，来自于我们对人类大脑处理信息的科学认识。人对世界的认识和记忆，最主要来源不是文字或语言，更基层的，是神经层面的5种感觉，包括：视觉、听觉、触觉、嗅觉和味觉。 方法: 故意创造和运用画面/用比喻找到含义的本质/找到沟通的对象, 用外语交流/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过已知获取未知, 有点类似&lt;code&gt;如何高效学习&lt;/code&gt;中提到的观点, 建立高速公路, 建立关联, 比喻.&lt;/p&gt;
&lt;p&gt;还有, kindle中生词模式就是类似这样的....&lt;/p&gt;
&lt;p&gt;外语家长, 其实类似mentor的角色, 虽然多年以来....还有, 实际的code review&lt;/p&gt;
&lt;h4 id="ju-ti-de-xue-xi-ji-hua"&gt;具体的学习计划&lt;/h4&gt;
&lt;p&gt;自己看书吧, 有挺多借鉴的地方&lt;/p&gt;
&lt;p&gt;不过, 对于我这个散漫闲人, 严格按部就班有些困难, 所以, 只能培养所谓的&lt;code&gt;习惯&lt;/code&gt;, 侵占覆盖掉碎片时间, 同时把相关的方法论给&lt;code&gt;践行&lt;/code&gt;了, 至于效果, 额, 过段时间看看......&lt;/p&gt;
&lt;h4 id="yi-xie-shu-zhong-ti-dao-de-xi-guan"&gt;一些书中提到的习惯&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;习惯一：开始用自己的右脑，调整到每天进入英语频道。&lt;/li&gt;
&lt;li&gt;习惯二：想到任何关于英语问题的时候，自动想起如何用英语发问。&lt;/li&gt;
&lt;li&gt;习惯三：把自己的耳朵和嘴巴连接起来，变成一个“发音准确度反馈循环”。&lt;/li&gt;
&lt;li&gt;习惯四：把英语声音直接连接到脑海中的画面和感觉。&lt;/li&gt;
&lt;li&gt;习惯五：把玩词变成每天的习惯和乐趣。拼凑词，创造含义。&lt;/li&gt;
&lt;li&gt;习惯六：完全建立自言自语的习惯&lt;/li&gt;
&lt;li&gt;习惯七：每天用英语开口说话，进行真实沟通。&lt;/li&gt;
&lt;li&gt;习惯八：随时开口练习发音。&lt;/li&gt;
&lt;/ul&gt;</content><category term="books"></category></entry><entry><title>ELK 维护的一些点</title><link href="http://www.wklken.me/posts/2016/02/16/elk-about-upgrade.html" rel="alternate"></link><published>2016-02-16T00:00:00+08:00</published><updated>2016-02-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-16:/posts/2016/02/16/elk-about-upgrade.html</id><summary type="html">&lt;p&gt;去年入职新公司之后, 负责维护平台的elk&lt;/p&gt;
&lt;p&gt;这套东西是2013年搭建的, 年久失修, 所以做了个方案, 开始了批量升级&lt;/p&gt;
&lt;p&gt;将logstash从1.3升级到2.1, 将elasticsearch从1.4.1升级到2.0&lt;/p&gt;
&lt;p&gt;期间踩了很多坑, 搞了一个多月, 总算搞完&lt;/p&gt;
&lt;p&gt;从纯手工落后隔三差五有人找查问题的自行车, 改成自动化最新版本新架构运维便捷上了两个月无人反馈的, 额, 小汽车:) - 集成安装包/shell脚本/fabric实现部署/升级/增删/加黑名单等等功能&lt;/p&gt;
&lt;p&gt;每天日志量大概10G上下, 几十个采集端, 两个redis, 两个indexer, 两台es机器扛起&lt;/p&gt;
&lt;p&gt;以下, 不那么严谨地, 记录一些遇到的问题&lt;/p&gt;
&lt;h4 id="1-logstashsheng-ji-ce-lue"&gt;1. logstash升级策略&lt;/h4&gt;
&lt;p&gt;logstash1.3到2.x, 变化点还是很多的&lt;/p&gt;
&lt;p&gt;所以, 首先第一步要去阅读官方文档, 将所有change log过一遍, 对一些关键性的东西进行了解, 比如, 干掉了哪些语法(旧的功能需要如何实现), 哪些语法有变更, 新增了哪些特性等 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;去年入职新公司之后, 负责维护平台的elk&lt;/p&gt;
&lt;p&gt;这套东西是2013年搭建的, 年久失修, 所以做了个方案, 开始了批量升级&lt;/p&gt;
&lt;p&gt;将logstash从1.3升级到2.1, 将elasticsearch从1.4.1升级到2.0&lt;/p&gt;
&lt;p&gt;期间踩了很多坑, 搞了一个多月, 总算搞完&lt;/p&gt;
&lt;p&gt;从纯手工落后隔三差五有人找查问题的自行车, 改成自动化最新版本新架构运维便捷上了两个月无人反馈的, 额, 小汽车:) - 集成安装包/shell脚本/fabric实现部署/升级/增删/加黑名单等等功能&lt;/p&gt;
&lt;p&gt;每天日志量大概10G上下, 几十个采集端, 两个redis, 两个indexer, 两台es机器扛起&lt;/p&gt;
&lt;p&gt;以下, 不那么严谨地, 记录一些遇到的问题&lt;/p&gt;
&lt;h4 id="1-logstashsheng-ji-ce-lue"&gt;1. logstash升级策略&lt;/h4&gt;
&lt;p&gt;logstash1.3到2.x, 变化点还是很多的&lt;/p&gt;
&lt;p&gt;所以, 首先第一步要去阅读官方文档, 将所有change log过一遍, 对一些关键性的东西进行了解, 比如, 干掉了哪些语法(旧的功能需要如何实现), 哪些语法有变更, 新增了哪些特性等.&lt;/p&gt;
&lt;p&gt;然后, 将线上不同类型agent的配置文件拉下来, 先, 归类, 然后, 开始改-测-改-测-直到测试通过&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/logstash agent -t -f test.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直到, 语法验证通过&lt;/p&gt;
&lt;p&gt;现在要做的是, 验证数据正确性&lt;/p&gt;
&lt;p&gt;从线上拉取对应日志, 启动, 查看输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output {
    stdout{
        debug =&amp;gt; true
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要验证的是, 1. 过滤, 该过滤的过滤了 2. 转换, 该转换的转换了 3.新增, 新增字段&lt;/p&gt;
&lt;p&gt;注意, 测试时, 使用逻辑分支覆盖到所有配置文件中的分支即可.&lt;/p&gt;
&lt;p&gt;然后, 可以挑一台机器, 停老的服务, 部署新的服务进行测试&lt;/p&gt;
&lt;p&gt;建议, 部署agent的时候, 如果读的是文件, 建议配置&lt;code&gt;sincedb_path&lt;/code&gt; 这样假设下次升级, 就可以从老的服务最后读取的位置开始了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input {
    file {
        path =&amp;gt; ["/data/logs/*.log"]
        sincedb_path =&amp;gt; "/data/LogNew/logstash/sincedb/celery.sincedb"
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-elasticsearchsheng-ji-de-ce-lue"&gt;2. elasticsearch升级的策略&lt;/h4&gt;
&lt;p&gt;elasticsearch从1.4到2.0, 部署上变化不大, 变化最大的是存储doc的schema变了......&lt;/p&gt;
&lt;p&gt;使用原来的语法查询, 发现查不到, 因为字段名以及嵌套层级完全不一样了, 这里, 要修改查询端, 兼容新老版本的格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{'from': 0,
 'query': {'filtered': {'filter': {'bool': {'must': [{'bool': {'should': [{'term': {'type': 'app'}},
                                                                          {'term': {'@type': 'app'}}]}},
                                                     {'bool': {'should': [{'term': {'log_level': u'error'}},
                                                                          {'term': {'@fields.log_level': u'error'}}]}},
                                                     {'range': {'@timestamp': {'gt': 'now-5h'}}},
                                                     {'bool': {'should': [{'term': {'log_type': u'celery'}},
                                                                          {'term': {'@fields.log_type': u'celery'}}]}}]}}}},
 'size': 100,
 'sort': [{'@timestamp': 'desc'}]}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一个是, 取到数据进行解析的时候, 发现解析逻辑跪了, 没办法, 返回的json也完全变了, 这里, 要修改解析逻辑, 兼容新老版本格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for hit in log_hits:
    try:
        source = hit.get('_source')
        if '@fields' in source:
            log = source.get('@fields', {})
        else:
            log = source
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了让用户感觉不到集群升级, 首先要做的就是上面两个变更&lt;/p&gt;
&lt;p&gt;然后, 搭建新的集群, 最好找新的机器搭建(我在新的机器搭完才发现妈蛋硬盘才100G, 坑死, 无奈在老集群上搭新的集群, 硬盘1t)&lt;/p&gt;
&lt;p&gt;ready, 所有节点起好维护好, 然后, 改indexer, 将同一份日志灌到两个集群&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output {
    elasticsearch {
        hosts =&amp;gt; ["10.1.1.1:9100", "10.1.1.2:9100"]
    }
    elasticsearch {
        hosts =&amp;gt; ["10.1.1.1:9110", "10.1.1.2:9110"]
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单测试下, 没问题就放着甭管了, 等数据攒齐了....&lt;/p&gt;
&lt;p&gt;数据够了, 就, 停indexer, 停老集群, 停新集群, 改新集群端口, 起来....同时去掉indexer只输出到新的集群, 起来......测试, 切换完毕, 收工吧.&lt;/p&gt;
&lt;h4 id="you-hua-dian-ji-cheng-an-zhuang-bao-he-supervisord"&gt;优化点: 集成安装包和supervisord&lt;/h4&gt;
&lt;p&gt;额, logstash和es, 如果要配置节点, 其实还是挺蛋疼的&lt;/p&gt;
&lt;p&gt;要做的, 就是, logstash+不同类型配置文件+运维脚本, 达成一个包&lt;/p&gt;
&lt;p&gt;然后, 如果要部署一台机器, 扔上去一键执行安装, 测试, 启动即可&lt;/p&gt;
&lt;p&gt;例如, 运维脚本 &lt;code&gt;logstashd.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;BASEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$BASEDIR&lt;/span&gt;
&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; help_msg&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"===================== usage ====================="&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh  - enter command line"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh status - show all configured process"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh start &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - start program"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh stop &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - stop program"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh restart &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - restart program"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh reread &amp;amp;&amp;amp; ./logstashd.sh update - update config and just update the modified programs"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"./logstashd.sh reload - reload config files and restart all programs(stopeed not included)"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"================================================="&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-h"&lt;/span&gt; -o &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"--help"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    help_msg
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;SUPERVISORCTL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/data/LogNew/python27/bin/supervisorctl'&lt;/span&gt;

&lt;span class="nv"&gt;CONFIG_FILE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/conf/supervisord.conf"&lt;/span&gt;

&lt;span class="nv"&gt;$SUPERVISORCTL&lt;/span&gt; -c &lt;span class="nv"&gt;$CONFIG_FILE_PATH&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./logstashd.sh
===================== usage =====================
./logstashd.sh  - enter command line
./logstashd.sh status - show all configured process
./logstashd.sh start  - start program
./logstashd.sh stop  - stop program
./logstashd.sh restart  - restart program
./logstashd.sh reread &amp;amp;&amp;amp; ./logstashd.sh update - update config and just update the modified programs
./logstashd.sh reload - reload config files and restart all programs(stopeed not included)
=================================================

111_indexer                      RUNNING   pid 27058, uptime 1:25:10
indexer                          RUNNING   pid 24731, uptime 1:31:29
supervisor&amp;gt; restart indexer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里, 我引入了&lt;a href="http://www.stackless.com/binaries/"&gt;stackless python&lt;/a&gt; (独立), 然后装pip/supervisord, 使用supervisord对logstash/es进程进行管理&lt;/p&gt;
&lt;p&gt;使用supervisord管理进程, 有个注意点&lt;/p&gt;
&lt;p&gt;默认supervisord相关的文件在&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/tmp/supervisor*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而线上, 存在tmp被删/清理了情况, 导致要进行进程启停操作才发现,妈蛋找不到&lt;/p&gt;
&lt;p&gt;处理方式 =&amp;gt; 放到集成安装包的run目录下&lt;/p&gt;
&lt;h4 id="zhu-yi-dian-logstashcun-zai-liang-ge-outputshi-bi-xu-yao-bao-zheng-er-zhe-de-ke-yong-xing"&gt;注意点: logstash存在两个output时, 必须要保证二者的可用性&lt;/h4&gt;
&lt;p&gt;logstash indexer, 分别转发数据到两个不同的output&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;output {
    elasticsearch {
        hosts =&amp;gt; ["10.1.1.1:8080", "10.1.1.2:8080"]
    }
    redis {
        host =&amp;gt; "10.1.1.3"
        port =&amp;gt; 6379
        password =&amp;gt; "7oEsjqUNoTdgE4"
        data_type =&amp;gt; "list"
        key =&amp;gt; "log_queue"
        db =&amp;gt; 0
        batch =&amp;gt; true
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 若是redis挂了, 则日志也不会刷到es中, 所以, 需要同时保证所有output的可用性&lt;/p&gt;
&lt;p&gt;对于redis, 可以进行进程监控, 发现挂了的话, 告警并同时重启(可以crontab一分钟检查一次)&lt;/p&gt;
&lt;h4 id="you-hua-dian-elkzeng-jia-agent_ipzi-duan"&gt;优化点: ELK增加agent_ip字段&lt;/h4&gt;
&lt;p&gt;需求: 在实际使用中, 有时候需要反向根据查询结果, 获知日志的来源机器&lt;/p&gt;
&lt;p&gt;处理:&lt;/p&gt;
&lt;p&gt;1.先获取ip&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;GetLanIp&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="err"&gt;get&lt;/span&gt; &lt;span class="err"&gt;associated&lt;/span&gt; &lt;span class="err"&gt;LAN&lt;/span&gt; &lt;span class="err"&gt;ip&lt;/span&gt; &lt;span class="err"&gt;address&lt;/span&gt;
     &lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GetLanIp&lt;/span&gt;
     &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ifconfig&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="s1"&gt;         /eth/{&lt;/span&gt;
&lt;span class="s1"&gt;             getline;&lt;/span&gt;
&lt;span class="s1"&gt;             if (/inet addr:(172|10|192)\./) {&lt;/span&gt;
&lt;span class="s1"&gt;                 gsub(".*addr:|  *Bcast.*","");&lt;/span&gt;
&lt;span class="s1"&gt;                 print $0;&lt;/span&gt;
&lt;span class="s1"&gt;                 exit;&lt;/span&gt;
&lt;span class="s1"&gt;             }&lt;/span&gt;
&lt;span class="s1"&gt;         }'&lt;/span&gt;
     &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.放入环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ETH1_IP=10.1.1.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.修改logstash配置&lt;/p&gt;
&lt;p&gt;注意, 这里是logstash2.x的语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    environment {
        add_metadata_from_env =&amp;gt; ["agent_ip", "ETH1_IP"]
        add_field =&amp;gt; {"agent_ip" =&amp;gt;  "%{[@metadata][agent_ip]}" }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="wen-ti-elkde-utcwen-ti"&gt;问题: elk的utc问题&lt;/h4&gt;
&lt;p&gt;elasticsearch内部使用的是utc, 存储为long (milliseconds since the epoch)  e.g. timestamp=1420070400000&lt;/p&gt;
&lt;p&gt;可以看下 &lt;a href="https://github.com/chenryn/logstash-best-practice-cn/blob/master/filter/date.md"&gt;es 时间处理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;logstash 接受了这种设定, 往es传数据的时候, 根据UTC, 每天00:00新建一个index&lt;/p&gt;
&lt;p&gt;kibana也接受这种设定, 在查询和展示时根据用户的时区进行处理&lt;/p&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;p&gt;这导致了, 对于东八区, 2015-11-6日, 8点之前, 只有&lt;code&gt;logstash-2015.11.05&lt;/code&gt;这个index, 到8点的时候, 创建新的index &lt;code&gt;logstash-2015.11.06&lt;/code&gt;, 即, 对于我们这个时区的人来说, 一天的数据存在了两个index里面&lt;/p&gt;
&lt;p&gt;同类问题 &lt;a href="https://github.com/elastic/elasticsearch/issues/7375"&gt;Elasticsearch doesn't care about timezone and creates indexes with UTC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修正方案1: 修改logstash的数据时间&lt;/p&gt;
&lt;p&gt;logstash团队对于支持localtime的问题, 不予修复 &lt;a href="https://logstash.jira.com/browse/LOGSTASH-973"&gt;讨论&lt;/a&gt;, 但是可以自行去修改logstash的代码&lt;/p&gt;
&lt;p&gt;当然, 可以修改每个logstash indexer的时间, 但是会带来问题 &lt;a href="https://github.com/chenryn/logstash-best-practice-cn/blob/master/filter/date.md#时区问题的解释"&gt;问题&lt;/a&gt;: 1. logstash都要修改&lt;code&gt;getLocalTime&lt;/code&gt; 2.相对时间搜索 3. kibana等相关插件/组件要修正&lt;/p&gt;
&lt;p&gt;运维/升级和后续使用上会有很多地雷&lt;/p&gt;
&lt;p&gt;修正方案2: 不修正&lt;/p&gt;
&lt;p&gt;接受这种设定, 学习kibana, 类似自行确定要搜索的index
对于&lt;code&gt;00:00-08:00&lt;/code&gt;的, 程序处理使用昨天的&lt;code&gt;indexer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以, 更好的方式是, 不修正......原来不变的才是最好的&lt;/p&gt;
&lt;h4 id="rolling-restart"&gt;rolling restart&lt;/h4&gt;
&lt;p&gt;当存在配置变更时, 需要重启es集群, 不可能全部重启的, 这样会导致服务不可用....&lt;/p&gt;
&lt;p&gt;所以, 要一个个重启&lt;/p&gt;
&lt;p&gt;先执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPUT 'http://localhost:9200/_cluster/settings' -d '
{
    "transient" : {
        "cluster.routing.allocation.enable" : "none"
    }
}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, shutdown, 改配置, start&lt;/p&gt;
&lt;p&gt;then : 一定要记得执行, 否则不会执行recovery.....会一直等着&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPUT 'http://localhost:9200/_cluster/settings' -d '
{
    "transient" : {
        "cluster.routing.allocation.enable" : "all"
    }
}'
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="logstashwen-ben-jie-xi-pei-zhi-grokyu-fa"&gt;logstash文本解析配置grok语法&lt;/h4&gt;
&lt;p&gt;一个线上的工具, https://grokdebug.herokuapp.com/&lt;/p&gt;
&lt;p&gt;挺好用的, 但是有时候变更频繁相应有些缓慢&lt;/p&gt;
&lt;p&gt;暂时没有找到命令行工具&lt;/p&gt;
&lt;h4 id="keng-grokyu-fa"&gt;坑: GROK语法&lt;/h4&gt;
&lt;p&gt;上线后发现, 尼玛, 部分应用日志没有被采集&lt;/p&gt;
&lt;p&gt;定位发现, 原来在&lt;code&gt;grok&lt;/code&gt;的解析中使用了&lt;code&gt;WORD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;WORD&lt;/code&gt;: 不支持连字符和下划线&lt;/p&gt;
&lt;p&gt;跪了, 需要自定义&lt;code&gt;LOGFILENAME [a-z\-A-Z0-9_\.]+&lt;/code&gt;放到pattern中&lt;/p&gt;
&lt;p&gt;然后, 搜索的时候, 尼玛, 也搜不到....语法要做处理, 使用&lt;code&gt;raw&lt;/code&gt;, es建索引的时候自动拆掉了导致搜索不到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{'term': {'app_name.raw': 'nms-t'}}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zuo-yi-xie-exclude"&gt;做一些exclude&lt;/h4&gt;
&lt;p&gt;有时候需要做一些exclude, 去除比必要采集和监控的日志(进入采集逻辑纯粹是浪费cpu和内存)&lt;/p&gt;
&lt;p&gt;例如, 目录树, 不要监控celery.log&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logs
├── a
│   ├── a.log
│   ├── b.log
│   └── celery.log
└── b
    ├── c.log
        └── d.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除部分文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file {
    path =&amp;gt; ["/data/logs/*/*.log"]
    exclude =&amp;gt; ["celery.log", ]
    sincedb_path =&amp;gt; "/data/LogNew/logstash/sincedb/django.sincedb"
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html#plugins-inputs-file-exclude"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="yi-xie-xiang-guan-yong-dao-de-ming-ling"&gt;一些相关用到的命令&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看plugin版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;https://www.elastic.co/guide/en/logstash/current/working-with-plugins.html&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/plugin list --verbose
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;create empty index&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPUT 'http://localhost:9100/logstash-2015.12.15/'
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;查看健康度&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl 'http://localhost:9100/_cluster/health?pretty=true'
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;查看indices&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

curl &lt;span class="s1"&gt;'http://localhost:9100/_cat/indices?v'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -k &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shan-chu-30tian-qian-crontabjiao-ben"&gt;删除30天前crontab脚本&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y%m%d&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$now&lt;/span&gt;
&lt;span class="nv"&gt;days_30_before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date -d &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="s2"&gt; 31 days ago"&lt;/span&gt; +%Y.%m.%d&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$days_30_before&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"http://10.1.1.1:9100/logstash-&lt;/span&gt;&lt;span class="nv"&gt;$days_30_before&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
curl -XDELETE &lt;span class="s2"&gt;"http://10.1.1.1:9100/logstash-&lt;/span&gt;&lt;span class="nv"&gt;$days_30_before&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="shang-wei-chu-li"&gt;尚未处理&lt;/h4&gt;
&lt;p&gt;logstash2.1 muline codec, 配置多个数据来源, 存在串的情况, 生产中大数据量有, 小规模没有复现....&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好了, 先这些, 还有一些窝在某些目录下, 后续整理好了发&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2016-02-16&lt;/p&gt;</content><category term="system"></category></entry><entry><title>也许是一个新的开始</title><link href="http://www.wklken.me/posts/2016/02/16/maybe-a-new-start.html" rel="alternate"></link><published>2016-02-16T00:00:00+08:00</published><updated>2016-02-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-16:/posts/2016/02/16/maybe-a-new-start.html</id><summary type="html">&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</summary><content type="html">&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>一些vim的个性化配置</title><link href="http://www.wklken.me/posts/2016/02/03/some-vim-configs.html" rel="alternate"></link><published>2016-02-03T00:00:00+08:00</published><updated>2016-02-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-03:/posts/2016/02/03/some-vim-configs.html</id><summary type="html">&lt;p&gt;在咖啡馆kill time, 时间不多但实在无聊, 随便写写&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;入坑vim, 四年有余了&lt;/p&gt;
&lt;p&gt;自从2012年将自己的配置发布到github后, 持续性的维护着, 逐步解决一些使用中的痛点, 反直觉的东西, 慢慢形成了现有的配置.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下, 就列下, 在k-vim中, 做了哪些配置, 下面这些在 &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc"&gt;vimrc&lt;/a&gt; 中都可以找到&lt;/p&gt;
&lt;p&gt;首先, 一上来就把&lt;code&gt;leader&lt;/code&gt;键改掉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 修改leader键
let mapleader = ','
let g:mapleader = ','
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移动时, 保留到底部的空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义代码折叠toggle&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 代码折叠自定义快捷键 &amp;lt;leader&amp;gt;zz
let g:FoldMethod = 0
map &amp;lt;leader&amp;gt;zz :call ToggleFold()&amp;lt;cr …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;在咖啡馆kill time, 时间不多但实在无聊, 随便写写&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;入坑vim, 四年有余了&lt;/p&gt;
&lt;p&gt;自从2012年将自己的配置发布到github后, 持续性的维护着, 逐步解决一些使用中的痛点, 反直觉的东西, 慢慢形成了现有的配置.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下, 就列下, 在k-vim中, 做了哪些配置, 下面这些在 &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc"&gt;vimrc&lt;/a&gt; 中都可以找到&lt;/p&gt;
&lt;p&gt;首先, 一上来就把&lt;code&gt;leader&lt;/code&gt;键改掉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 修改leader键
let mapleader = ','
let g:mapleader = ','
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移动时, 保留到底部的空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义代码折叠toggle&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 代码折叠自定义快捷键 &amp;lt;leader&amp;gt;zz
let g:FoldMethod = 0
map &amp;lt;leader&amp;gt;zz :call ToggleFold()&amp;lt;cr&amp;gt;
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ctrl-n&lt;/code&gt;进行相对行号/绝对行号切换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 相对行号: 行号变成相对，可以用 nj/nk 进行跳转
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&amp;amp;relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
nnoremap &amp;lt;C-n&amp;gt; :call NumberToggle()&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;quickfix的使用, 回车跳转到报错点, &lt;code&gt;s&lt;/code&gt;或&lt;code&gt;v&lt;/code&gt;分屏打开&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" In the quickfix window, &amp;lt;CR&amp;gt; is used to jump to the error under the
" cursor, so undefine the mapping there.
autocmd BufReadPost quickfix nnoremap &amp;lt;buffer&amp;gt; &amp;lt;CR&amp;gt; &amp;lt;CR&amp;gt;
" quickfix window  s/v to open in split window,  ,gd/,jd =&amp;gt; quickfix window =&amp;gt; open it
autocmd BufReadPost quickfix nnoremap &amp;lt;buffer&amp;gt; v &amp;lt;C-w&amp;gt;&amp;lt;Enter&amp;gt;&amp;lt;C-w&amp;gt;L
autocmd BufReadPost quickfix nnoremap &amp;lt;buffer&amp;gt; s &amp;lt;C-w&amp;gt;&amp;lt;Enter&amp;gt;&amp;lt;C-w&amp;gt;K
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开vim, 自动定位到上次最后变更位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") &amp;gt; 1 &amp;amp;&amp;amp; line("'\"") &amp;lt;= line("$") | exe "normal! g'\"" | endif
endif
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;干掉方向键, 强迫自己使用&lt;code&gt;hjkl&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 关闭方向键, 强迫自己用 hjkl
map &amp;lt;Left&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Right&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Up&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Down&amp;gt; &amp;lt;Nop&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;swap&lt;/code&gt;换行展示时, 使用&lt;code&gt;hjkl&lt;/code&gt;体验更好&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;F键区的映射&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" F2 行号开关，用于鼠标复制代码用
" 为方便复制，用&amp;lt;F2&amp;gt;开启/关闭行号显示:
function! HideNumber()
  if(&amp;amp;relativenumber == &amp;amp;number)
    set relativenumber! number!
  elseif(&amp;amp;number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap &amp;lt;F2&amp;gt; :call HideNumber()&amp;lt;CR&amp;gt;

" F3 显示可打印字符开关
nnoremap &amp;lt;F3&amp;gt; :set list! list?&amp;lt;CR&amp;gt;
" F4 换行开关
nnoremap &amp;lt;F4&amp;gt; :set wrap! wrap?&amp;lt;CR&amp;gt;

set pastetoggle=&amp;lt;F5&amp;gt;            "    when in insert mode, press &amp;lt;F5&amp;gt; to go to
                                "    paste mode, where you can paste mass data
                                "    that won't be autoindented

" disbale paste mode when leaving insert mode
au InsertLeave * set nopaste

" F6 语法开关，关闭语法可以加快大文件的展示
nnoremap &amp;lt;F6&amp;gt; :exec exists('syntax_on') ? 'syn off' : 'syn on'&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分屏窗口切换时, 直接使用&lt;code&gt;ctrl-h/j/k/l&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 分屏窗口移动, Smart way to move between windows
map &amp;lt;C-j&amp;gt; &amp;lt;C-W&amp;gt;j
map &amp;lt;C-k&amp;gt; &amp;lt;C-W&amp;gt;k
map &amp;lt;C-h&amp;gt; &amp;lt;C-W&amp;gt;h
map &amp;lt;C-l&amp;gt; &amp;lt;C-W&amp;gt;l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多窗口编辑时, 临时放大某个窗口, 编辑完再切回原来的布局&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') &amp;amp;&amp;amp; t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap &amp;lt;silent&amp;gt; &amp;lt;Leader&amp;gt;z :ZoomToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分号映射为冒号, 省得要进入命令模式需要按&lt;code&gt;shift&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt;和&lt;code&gt;L&lt;/code&gt;跳转到行首行末, 实在不想按&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;, 太远&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Go to home and end using capitalized directions
noremap H ^
noremap L $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令行模式快捷键, &lt;code&gt;ctrl-a/e&lt;/code&gt;跳转到行首行尾&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap &amp;lt;C-j&amp;gt; &amp;lt;t_kd&amp;gt;
cnoremap &amp;lt;C-k&amp;gt; &amp;lt;t_ku&amp;gt;
cnoremap &amp;lt;C-a&amp;gt; &amp;lt;Home&amp;gt;
cnoremap &amp;lt;C-e&amp;gt; &amp;lt;End&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;空格进入搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 搜索相关
" Map &amp;lt;Space&amp;gt; to / (search) and Ctrl-&amp;lt;Space&amp;gt; to ? (backwards search)
map &amp;lt;space&amp;gt; /
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜索时, 进入下一个上一个始终放在屏幕中间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Keep search pattern at the center of the screen.
nnoremap &amp;lt;silent&amp;gt; n nzz
nnoremap &amp;lt;silent&amp;gt; N Nzz
nnoremap &amp;lt;silent&amp;gt; * *zz
nnoremap &amp;lt;silent&amp;gt; # #zz
nnoremap &amp;lt;silent&amp;gt; g* g*zz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;leader-/&lt;/code&gt; 关闭掉上次搜索的高亮&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 去掉搜索高亮
noremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;/ :nohls&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;交换&lt;code&gt;#&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;更近&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" switch # *
nnoremap # *
nnoremap * #
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python 写入注释&lt;code&gt;#&lt;/code&gt;号时, 不每次都跳到行首&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" for # indent, python文件中输入新行时#号注释不切回行首
autocmd BufNewFile,BufRead *.py inoremap # X&amp;lt;c-h&amp;gt;#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;buffer切换相关, 使用不多&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;" 切换前后buffer&lt;/span&gt;
&lt;span class="n"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bprevious&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nl"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bnext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;" 使用方向键切换buffer&lt;/span&gt;
&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tab操作....看个人喜好, 不过自从用了crtlspace之后, 逐渐很少用了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" tab 操作
" http://vim.wikia.com/wiki/Alternative_tab_navigation
" http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim

" tab切换
map &amp;lt;leader&amp;gt;th :tabfirst&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tl :tablast&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;tj :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tk :tabprev&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tn :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tp :tabprev&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;te :tabedit&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;td :tabclose&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tm :tabm&amp;lt;cr&amp;gt;

" normal模式下切换到确切的tab
noremap &amp;lt;leader&amp;gt;1 1gt
noremap &amp;lt;leader&amp;gt;2 2gt
noremap &amp;lt;leader&amp;gt;3 3gt
noremap &amp;lt;leader&amp;gt;4 4gt
noremap &amp;lt;leader&amp;gt;5 5gt
noremap &amp;lt;leader&amp;gt;6 6gt
noremap &amp;lt;leader&amp;gt;7 7gt
noremap &amp;lt;leader&amp;gt;8 8gt
noremap &amp;lt;leader&amp;gt;9 9gt
noremap &amp;lt;leader&amp;gt;0 :tablast&amp;lt;cr&amp;gt;

" Toggles between the active and last active tab "
" The first tab is always 1 "
let g:last_active_tab = 1
" nnoremap &amp;lt;leader&amp;gt;gt :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
" nnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
" vnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;tt :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
autocmd TabLeave * let g:last_active_tab = tabpagenr()

" 新建tab  Ctrl+t
nnoremap &amp;lt;C-t&amp;gt;     :tabnew&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-t&amp;gt;     &amp;lt;Esc&amp;gt;:tabnew&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选中后, 调整缩进, 可能需要多次调整, 默认调整一次后退出了选中, 需要再次选.&lt;/p&gt;
&lt;p&gt;这个变更, 保证调整缩进后, 还是选中状态&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 调整缩进后自动选中，方便再次操作
vnoremap &amp;lt; &amp;lt;gv
vnoremap &amp;gt; &amp;gt;gv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制动作的变更, &lt;code&gt;Y&lt;/code&gt;, 复制到行末&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" y$ -&amp;gt; Y Make Y behave like other capitals
map Y y$

" 复制选中区到系统剪切板中
vnoremap &amp;lt;leader&amp;gt;y "+y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选中全部/选中段落&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" select all
map &amp;lt;Leader&amp;gt;sa ggVG"

" select block
nnoremap &amp;lt;leader&amp;gt;v V`}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存, 没权限的时候&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" w!! to sudo &amp;amp; write a file
cmap w!! w !sudo tee &amp;gt;/dev/null %
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;kj&lt;/code&gt;, 替换&lt;code&gt;ESC&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" kj 替换 Esc
inoremap kj &amp;lt;Esc&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调整&lt;code&gt;Ctrl-e/y&lt;/code&gt;滚动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 滚动Speed up scrolling of the viewport slightly
nnoremap &amp;lt;C-e&amp;gt; 2&amp;lt;C-e&amp;gt;
nnoremap &amp;lt;C-y&amp;gt; 2&amp;lt;C-y&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷保存和退出&lt;code&gt;leader-q/w&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Quickly close the current window
nnoremap &amp;lt;leader&amp;gt;q :q&amp;lt;CR&amp;gt;

" Quickly save the current file
nnoremap &amp;lt;leader&amp;gt;w :w&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;交换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 交换 ' `, 使得可以快速使用'跳到marked位置
nnoremap ' `
nnoremap ` '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变更&lt;code&gt;U&lt;/code&gt;, 撤销重做的时候更快&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" remap U to &amp;lt;C-r&amp;gt; for easier redo
nnoremap U &amp;lt;C-r&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存文件时, 自动移除多余空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;" 保存python文件时删除多余空格&lt;/span&gt;
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;StripTrailingWhitespaces&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;%s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="c1"&gt;//e&lt;/span&gt;
    &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;endfun&lt;/span&gt;
&lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;FileType&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;twig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;BufWritePre&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;StripTrailingWhitespaces&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shell和python文件新建时, 自动插入行头&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &amp;amp;filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &amp;amp;filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义一些高亮的关键字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 设置可以高亮的关键字
if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version &amp;gt; 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
  endif
endif
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他一些设置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI

" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
" 好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=

" 鼠标暂不启用, 键盘党....
set mouse-=a

" 回车即选中当前项, 慎用
inoremap &amp;lt;expr&amp;gt; &amp;lt;CR&amp;gt;       pumvisible() ? "\&amp;lt;C-y&amp;gt;" : "\&amp;lt;CR&amp;gt;"
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>读书笔记-调试九法</title><link href="http://www.wklken.me/posts/2015/11/29/debugging-9-rules.html" rel="alternate"></link><published>2015-11-29T00:00:00+08:00</published><updated>2015-11-29T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-11-29:/posts/2015/11/29/debugging-9-rules.html</id><summary type="html">&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1-li-jie-xi-tong"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是“墨菲定律”的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1-li-jie-xi-tong"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是“墨菲定律”的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处。当你找到bug时，必须在不破坏其他地方的前提下修复它们。理解系统行为是不破坏系统的第一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有个段子, 修了一个, 结果改出了3个bug...只有对系统足够了解, 才能修复而不破坏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们在调试的时候，通常都不会彻底地阅读系统手册。他们采取跳读的方式，查看他们认为重要的一些章节，但问题的线索可能就隐藏在被略过的那些章节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时是这样的, 但是可能时间有限, 这个没法子, 只能在闲时, 多多阅读, 例如, 隔段时间回去浏览一遍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道什么是正常的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是正常的, 什么是异常的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;知道工作流程, 当你尝试寻找bug时，必须知道要查找的路线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不多说, 捞数据, 追数据, 基本功&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解你的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要修车, 有趁手的工具才能更高效地解决问题&lt;/p&gt;
&lt;h4 id="2-zhi-zao-shi-bai"&gt;2. 制造失败&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;关键是在发生失败的时候要看到它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志, 现场, 栈等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“当你发现一个故障时该怎么办？” “试着让它再次发生。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察你做了什么，然后再做一次，并且记下你做的每个步骤。然后，按照你自己所写的步骤去做，确定这样做确实导致了错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;复现的步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要引发失败, 而不是模拟失败......如果你猜测失败机理，模拟往往不会成功。原因通常有两个，要么你的猜测是错误的；要么测试改变了条件，模拟的系统可以正确工作，或者更糟，发生新的错误，因而分散了你对正在查找的问题的注意力......注意，不要用一个看似完全相同（而实际上不同）的环境来代替并希望看到相同的错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关注问题本身, 不要错误的转移到了猜测的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细观察失败&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔细观察失败! 仔细观察! 仔细....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是已修复bug，还是仅仅由于运气好，它不再发生了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你必须确认这一点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要丢掉调试工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调试工具, 不要当成一次性的工具用完即仍, 可能是错误的&lt;/p&gt;
&lt;h4 id="3-bu-yao-xiang-er-yao-kan"&gt;3. 不要想, 而要看&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;亲眼看到底层的失败是非常重要的。如果你猜测失败是如何发生的，那常常会修复一些根本不是bug的问题。这样的修复不仅不会解决问题，而且还会浪费时间和金钱，甚至会破坏其他地方。请记住，不要这样做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;观察是很难的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确很难&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须仔细观察，找到足够多的问题细节，才能调试它......如果你不能留意实际情况发生的全过程，那么你极有可能曲解很多问题。你猜测某个地方出了问题，于是修复它，但实际上错误发生在另一个地方......一定要亲眼看到实际错误是如何发生的。观察往往比猜测能够更快地找到问题。因为猜测虽然看起来是捷径，但这条捷径并不会带你找到问题的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;观察而不是猜测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在停下来思考问题之前，对细节的观察应该到什么程度才合适呢？简单的答案是：“一直观察，直到把问题的原因锁定在几种可能性之内。”&lt;/p&gt;
&lt;p&gt;海森堡测不准原理: 换言之，测试工具影响了被测系统......。任何插装都可能对系统造成影响，只是程度不同而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插装, 类似于工具的调试模式, 会影响系统, 所以要注意&lt;/p&gt;
&lt;h4 id="4-fen-er-zhi-zhi"&gt;4. 分而治之&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;缩小搜索范围......在查找问题时，“分而治之”实际上是第一条需要使用的原则。事实上，在查找问题时它也是唯一需要应用的规则。所有其他规则都只是帮助你遵循这条规则。分而治之是调试的核心，很多人都知道它，但很多人都没有遵守它，这也正是我写本章的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二分法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确定范围...你必须知道搜索范围，而且必须知道在一端一切正常，而在另一端出现了问题.....从有问题的支路开始查找问题......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果同时出现了多个问题，当你确实查明了其中的一个问题时，应该立即修复它，然后再查找其他问题......有时修复了一个问题，另一个问题也解决了，两个问题实际上是同一个bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是有这种情况&lt;/p&gt;
&lt;h4 id="5-yi-ci-zhi-gai-yi-ge-di-fang"&gt;5. 一次只改一个地方&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;使用步枪，而不要用散弹枪......一次只改一个地方......此外，如果你真的看到了错误，应该只修复这个地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这点很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你在两个测试之间更改了很多代码，或者为两个测试设置了不同的环境，那么这两个测试将很难对比。它们之间有很多差别并不是由bug引起的，而你必须不断地解释这些差别。你必须把它们之间的差别减少到只与bug有关。排除其他的干扰因素&lt;/p&gt;
&lt;p&gt;自从上一次能够正常工作以来你更改了什么......有时，正常的系统和错误的系统之间的区别是由于一项更改造成的。做了更改之后，正常的系统开始出现故障。一种非常有效的办法是找出第一个导致系统出错的版本，尽管这可能需要连续测试原来的版本，直到找到没有故障的版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分问题都是出现在最近一次修改&lt;/p&gt;
&lt;h4 id="6-bao-chi-shen-ji-gen-zong"&gt;6. 保持审计跟踪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有时看起来最不起眼的事情实际上却是导致发生bug的关键......因此，你必须记录下每一件事情，不起眼的事情可能会很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节, 步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记下你的每步操作、顺序和结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;魔鬼隐藏在细节中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在细节方面，永远都不要相信你的记忆，而要把它写下来。如果你相信你的记忆，将会制造很多麻烦。你会忘掉一些你认为不重要的细节，当然，这些细节将会被证明是非常重要的。你会忘掉一些在你看来不重要的细节，而这些细节对于后来解决另一个不同问题的人可能很重要。除了口头表述以外，你无法将信息传递给别人，而这会浪费所有人的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="7-jian-cha-cha-tou"&gt;7. 检查插头&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;怀疑自己的假设......当我们看到一个问题时，通常在某个特定位置看到了问题，但导致这个问题的原因却在上游或者是一个基础性的问题。系统不具备正确操作的条件，于是出现了非常奇怪的行为。当你看到完全来自另一个世界的问题时，应该停下来，看看你是不是还在地球上&lt;/p&gt;
&lt;p&gt;从头开始检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="8-huo-de-quan-xin-guan-dian"&gt;8. 获得全新观点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;寻求帮助: 向别人寻求帮助至少有3个原因（还不算把整个问题甩给别人）：获得全新观点、专业知识和经验。而且，人们通常很愿意帮忙，因为这给了他们一个证明自己很聪明的机会&lt;/p&gt;
&lt;p&gt;事实上，有时向别人解释问题也会使你有全新的认识，之后你自己就解决了问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小黄鸭调试法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报告症状, 而不是理论: 让他提出自己的观点。他们的观点可能与你的观点相符，也可能全然不同，而这正是你想要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="9ru-guo-ni-bu-xiu-fu-bug-ta-jiang-yi-ran-cun-zai"&gt;9.如果你不修复bug, 它将依然存在&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;检查问题确实已被修复&lt;/p&gt;
&lt;p&gt;bug 从来不会自己消失&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="books"></category></entry><entry><title>这段时间的一些想法</title><link href="http://www.wklken.me/posts/2015/11/08/summary-13-some-points.html" rel="alternate"></link><published>2015-11-08T00:00:00+08:00</published><updated>2015-11-08T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-11-08:/posts/2015/11/08/summary-13-some-points.html</id><summary type="html">&lt;p&gt;发现自己有一段时间没更新 blog 了, 写一写吧, 至于技术方面的东西, 后面慢慢发吧:)&lt;/p&gt;
&lt;p&gt;这一年经历了很多事情, 休息了一百天, 然后找工作, 入职.&lt;/p&gt;
&lt;p&gt;入职期间还有些波折, offer那边说发了我这边却一直没收到, 还有确认入职事宜后没有发入职通知, 不过波波折折, 也算入职了, 三周, 到了深圳的加班圣地, 开启新的副本.&lt;/p&gt;
&lt;p&gt;工作四年多了, 这是第四家公司了, 这四年发生了很多事情, 阿里上市了, 快播消失了, 甜品也歇业了, 刚到企鹅,  新生, 归零心态, 逐渐适应中, 算是一个新的开始, 重新审视自己, 审视工作, 审视学习, 审视生活,  以刚入行时的状态, 重新开始这趟征程.&lt;/p&gt;
&lt;p&gt;总之, 这许多年, 是一些经历, 做了很多事情, 结识了很多人. 逐步形成了自己现在的样子.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;尽量写得不像鸡汤, 很多东西还是要自己慢慢去感受体悟, 诸君共勉.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple" src="/imgs/life/simple.png"/&gt;&lt;/p&gt;
&lt;h3 id="wo-zhi-shi-yi-ge-pu-tong-ren"&gt;我只是一个普通人&lt;/h3&gt;
&lt;p&gt;刚毕业那会, 初生牛犊, 总想着去做一些牛逼的事情, 学一些给力的东西, 变得强大 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;发现自己有一段时间没更新 blog 了, 写一写吧, 至于技术方面的东西, 后面慢慢发吧:)&lt;/p&gt;
&lt;p&gt;这一年经历了很多事情, 休息了一百天, 然后找工作, 入职.&lt;/p&gt;
&lt;p&gt;入职期间还有些波折, offer那边说发了我这边却一直没收到, 还有确认入职事宜后没有发入职通知, 不过波波折折, 也算入职了, 三周, 到了深圳的加班圣地, 开启新的副本.&lt;/p&gt;
&lt;p&gt;工作四年多了, 这是第四家公司了, 这四年发生了很多事情, 阿里上市了, 快播消失了, 甜品也歇业了, 刚到企鹅,  新生, 归零心态, 逐渐适应中, 算是一个新的开始, 重新审视自己, 审视工作, 审视学习, 审视生活,  以刚入行时的状态, 重新开始这趟征程.&lt;/p&gt;
&lt;p&gt;总之, 这许多年, 是一些经历, 做了很多事情, 结识了很多人. 逐步形成了自己现在的样子.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;尽量写得不像鸡汤, 很多东西还是要自己慢慢去感受体悟, 诸君共勉.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple" src="/imgs/life/simple.png"/&gt;&lt;/p&gt;
&lt;h3 id="wo-zhi-shi-yi-ge-pu-tong-ren"&gt;我只是一个普通人&lt;/h3&gt;
&lt;p&gt;刚毕业那会, 初生牛犊, 总想着去做一些牛逼的事情, 学一些给力的东西, 变得强大, 变成自己想象中的&lt;code&gt;牛人&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而, 后来这些年, 逐渐对自己, 对生活, 以及对这整个世界, 有了新的认识.&lt;/p&gt;
&lt;p&gt;当然, 也碰到了很多人, 碰到了很多事. 期间感受过智商被碾压,  感受过业务成就技术的喜悦, 也感受过业务夭折的无奈.&lt;/p&gt;
&lt;p&gt;最终, 有了自己的定位.&lt;/p&gt;
&lt;p&gt;我只是个普通人, 智商不高不低, 资质一般, 没有所谓的天赋异禀.&lt;/p&gt;
&lt;p&gt;当然, 有天才的存在, 而对于普通人来说, 只能, 靠着自己的努力一点点慢慢地成长, 变得强大.&lt;/p&gt;
&lt;p&gt;勤能补拙? 答案是否定的, 普通人的天赋和精力有限, 想明白自己感兴趣的, 想做的是什么, 然后投入进去, 坚持下来, 也就是了. 把有限精力浪费在无限的地方上是非常愚蠢的.&lt;/p&gt;
&lt;p&gt;普通人做普通事, 很多时候, 选择更重要, 运气也很重要:) 所以, 思考, 投入, 坚持, 每天朝着目标前进, 这就够了, 你会发现, 你比以前的自己更加强大.&lt;/p&gt;
&lt;h3 id="zhan-xian-tai-chang-you-hao-you-pi-dan-da-duo-shu-shi-hou-xu-yao-guan-zhu-gen-zi-ji-gong-zuo-xiang-guan-de-dong-xi"&gt;战线太长有好有坏, 但大多数时候, 需要关注跟自己工作相关的东西&lt;/h3&gt;
&lt;p&gt;工作四年多, 中间有两年, 走了弯路吧感觉.&lt;/p&gt;
&lt;p&gt;耗费了大量的时间, 每天晚上及周末, 去接触, 所谓的&lt;code&gt;学习&lt;/code&gt;各种技术, 而绝大多数, 在自己工作中并没有用到.&lt;/p&gt;
&lt;p&gt;战线太长, 好处就是, 可能视野广了许多, 对很多事情有了新的看法, 也逐渐能归纳得到一些共性.&lt;/p&gt;
&lt;p&gt;缺点嘛, 很明显, 太耗费时间, 而且中间绝大多数成了沉没成本. 学了忘忘了学, 重复太多.&lt;/p&gt;
&lt;p&gt;其实最佳的策略应该是, 从日常工作入手, 工作中接触的各种事情, 遇到的各种问题, 涉及的各种技术栈, 以点带面, 深挖和发散, 这就会占用掉大部分时间和经历了, 而事实也证明, 目前自己受益最大的,  反而是这些东西.&lt;/p&gt;
&lt;p&gt;至于其他, 自己感兴趣, 去学, 去用.&lt;/p&gt;
&lt;p&gt;不要为了学而学, 学以致用.&lt;/p&gt;
&lt;h3 id="shou-ji-zi-liao-mei-shi-yao-yong-shan-yong-sou-suo-ling-wai-ji-de-cai-guo-de-keng-yi-ji-shen-wa-he-kuo-zhan"&gt;收集资料没什么用, 善用搜索, 另外, 记得踩过的坑, 以及, 深挖和扩展&lt;/h3&gt;
&lt;p&gt;刚毕业那会, 硬盘上收集了很多java的资料. 后来, 右键删了&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;p&gt;刷了几年微博, 收藏了很多东西, 估计有几千条, 然而, 再也没去看过.&lt;/p&gt;
&lt;p&gt;买了很多书, 最终却发现, 只看了一半多点.&lt;/p&gt;
&lt;p&gt;现在网络那么发达, 资源过载的年代, 其实资源永远触手可及, 并不需要花时间去下载/分类/储存.&lt;/p&gt;
&lt;p&gt;而很多人, 往往会将&lt;code&gt;整理&lt;/code&gt;作为主业, 而不是学习和吸收. 花了大量时间&lt;code&gt;整理&lt;/code&gt;得到一套看似庞大的东西.&lt;/p&gt;
&lt;p&gt;其实我在想, 看大家很多&lt;code&gt;mark&lt;/code&gt;, 不知道有多少人会再去看过.&lt;/p&gt;
&lt;p&gt;知识管理, 分级, 自己积累沉淀得到的东西, 一级, 工作涉及的东西, 二级, 相关领域自己感兴趣的东西, 三级, 杂七杂八八卦等等, 四级.&lt;/p&gt;
&lt;p&gt;完全可以用wiki/evernote/pocket等工具, 自行分级&lt;/p&gt;
&lt;p&gt;重要的是, 搜索, 用到的时候, 可以在最短的时间内汇集, 掌握和使用.&lt;/p&gt;
&lt;p&gt;分级+搜索&lt;/p&gt;
&lt;h3 id="hen-yi-han-kan-hen-duo-ji-zhu-shu-huo-xu-mei-shi-yao-yong"&gt;很遗憾, 看很多技术书或许没什么用&lt;/h3&gt;
&lt;p&gt;这些年, 看了很多书, 刚开始都是买技术的, 后来给自己定了个规矩, 买一本技术要对应买一本非技术.&lt;/p&gt;
&lt;p&gt;后来的后来, 开始用kindle, 然后发现看技术书还是duokan来得舒服, 毕竟用pad看大一些:)&lt;/p&gt;
&lt;p&gt;市面上绝大多数, 90%, 可以算是入门书籍, 剩下7%, 算是进阶, 然后, 3%才是经典.&lt;/p&gt;
&lt;p&gt;然而 ,很多时候, 作为初学者, 看&lt;code&gt;经典&lt;/code&gt;一般是自虐的过程, 大多数需要从一本好的&lt;code&gt;入门&lt;/code&gt;书开始.&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;入门&lt;/code&gt;, 需要自己挑选, 数量庞大, 有点类似&lt;code&gt;快销品&lt;/code&gt;, 读完入门了, 再也不会看第二遍.&lt;/p&gt;
&lt;p&gt;所以后来我的原则变成了, 经典书, 买纸质, 反复读, 而其他的, 通过文档+电子书的形式, 快速学习入门.&lt;/p&gt;
&lt;p&gt;看书, 得到一些东西, 想法, 观点等等, 记录, 便够了.&lt;/p&gt;
&lt;p&gt;虽然很多书没什么用 ,但是, 你总得找到, 并读完那些&lt;code&gt;有用的&lt;/code&gt;书&lt;/p&gt;
&lt;p&gt;数量的多少, 并没有什么用. 例如所谓的成功学的书籍, 一目十行一本书刷完花不了多久&lt;/p&gt;
&lt;p&gt;但是一本书, 只要能学到一点, 那便是好的.&lt;/p&gt;
&lt;p&gt;有人不买书, 说是买了大部分也没读, 我的观点是, 你不买, 一年到头一本书也没读, 但是你买书, 假设买了十本, 只读了两本, 那也比没读好吧.&lt;/p&gt;
&lt;p&gt;另外, 买书要谨慎筛选, 花时间去甄别, 然后, 读书要快, 趁着热情还在秒掉, 最后, 要做笔记, 哪怕只是摘录(后续重读你会感谢自己的摘录和笔记的)&lt;/p&gt;
&lt;h3 id="xue-hui-ru-he-fen-xi-wen-ti-jie-jue-wen-ti"&gt;学会如何分析问题, 解决问题&lt;/h3&gt;
&lt;p&gt;工作这些年, 其实发现, 很多东西是通的.&lt;/p&gt;
&lt;p&gt;例如, 学一门语言, 深入下去, 再深入下去, 切另一门的时候, 发现其实有很多共性, 比什么都是皮毛好多了.&lt;/p&gt;
&lt;p&gt;所以, 没必要纠结自己什么东西还不会.&lt;/p&gt;
&lt;p&gt;而这些年, 最大的感受是, 写代码, 无非是分析问题, 解决问题.&lt;/p&gt;
&lt;p&gt;而我们要做的, 就是学会这些, 从书本, 从他人, 从自己的经验中去学习, 掌握&lt;/p&gt;
&lt;h3 id="xue-hui-cong-yi-dian-yi-di-kai-shi-you-hua-zi-ji-de-sheng-huo"&gt;学会从一点一滴开始,  优化自己的生活&lt;/h3&gt;
&lt;p&gt;不管是工作, 生活&lt;/p&gt;
&lt;p&gt;例如, 学习 GTD, 学习番茄时间工作法, 学习某个工具的使用&lt;/p&gt;
&lt;p&gt;学会怎么快速搜索, 从很多同类 app 中挑选适合自己的&lt;/p&gt;
&lt;p&gt;定制自己的环境, 符合自己操作习惯的东西&lt;/p&gt;
&lt;p&gt;每次, 发现重复或者比较繁琐蛋疼的事情发生了, 记录下来, 如果可以花点时间一劳永逸, 那花这些时间是值得的. 至于解决方案, 会google就能解决绝大多数的问题.&lt;/p&gt;
&lt;h3 id="ji-jian-de-sheng-huo"&gt;极简的生活&lt;/h3&gt;
&lt;p&gt;每个人有自己的选择, 不过我还是倾向于活得简单些.&lt;/p&gt;
&lt;p&gt;天生喜欢逻辑, 不喜欢复杂的不可量化的东西. 所以所谓的&lt;code&gt;情商&lt;/code&gt;方面 , 低了一些.&lt;/p&gt;
&lt;p&gt;生活是自己的, 过成自己想要过的样子便好. 不活在别人的看法里, 不活在别人的嘴里.&lt;/p&gt;
&lt;p&gt;自己快乐, 才是真的快乐不是么?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;极简&lt;/code&gt;主义, 虽然还做不到&lt;code&gt;不以物喜不以己悲&lt;/code&gt;的境界, 但是, 简简单单的生活, 带来的是简简单单的快乐.&lt;/p&gt;
&lt;h3 id="xie-ri-ji-ba"&gt;写日记吧&lt;/h3&gt;
&lt;p&gt;度过了很闲很闲的三个月&lt;/p&gt;
&lt;p&gt;也度过了很忙很忙的三周&lt;/p&gt;
&lt;p&gt;发现, 人的记忆, 并不是很靠谱, 曾几何时我能记得过去一周或者一个月, 每天都怎么过的, 而现在, 却发现, 有时候都想不起来昨天怎么过的&lt;/p&gt;
&lt;p&gt;或许老了吧, 但是主要问题还是, 这个世界熟悉之后, 我们的生活成了"日常", 每天过得模式化了, 太过相似, 以至于很难记录.&lt;/p&gt;
&lt;p&gt;所以, 写日记吧, 电子或者纸笔, 即使是流水账也好, 否则过往的时光, 很容易被压缩成一小段重复的记忆.&lt;/p&gt;
&lt;p&gt;其实, 每天都是新的一天, 善于发现各种细节, 行走得慢些, 多看看, 多想想.&lt;/p&gt;
&lt;p&gt;日记里,写写流水, 吐吐槽, 反思反思, 定期翻一翻.&lt;/p&gt;
&lt;p&gt;现在, 即使回来再累, 也要睡前花点时间写写:), 已坚持快两个月了&lt;/p&gt;
&lt;h3 id="ding-qi-zong-jie"&gt;定期总结&lt;/h3&gt;
&lt;p&gt;这个还是很重要的, 可以暴露很多问题, 例如自己是不是跑偏了......&lt;/p&gt;
&lt;p&gt;按自己的习惯, 写写总结, 算是一种回顾, 也是对未来的一些计划.&lt;/p&gt;
&lt;h3 id="huo-zai-dang-xia"&gt;活在当下&lt;/h3&gt;
&lt;p&gt;不为过去而懊悔, 不为未来而担忧&lt;/p&gt;
&lt;p&gt;昨天已经过去, 时间已经流逝, 懊悔昨天没有什么作用, 想一想, 写写总结, 记录下哪些后面可以避免或者搞定, 然后去睡觉&lt;/p&gt;
&lt;p&gt;未来的事情, 来了再说, 在这之前, 准备好就行, 再多的焦虑也是无用, 担忧得睡不着对明天一点作用都没有&lt;/p&gt;
&lt;p&gt;快乐也是一天, 不快乐也是一天, 那就快快乐乐的呗&lt;/p&gt;
&lt;p&gt;每天过得充实, 每天学到一些东西, 感受到一些东西, 有所进步, 就够了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不乱于心, 不困于情, 不念过去, 不畏将来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果发现自己得了&lt;code&gt;晚睡症&lt;/code&gt;, 那就要反思下了, 自己为什么不能让这一天结束而非要拖到第二天呢?&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2015-11-08 于深圳&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>Python 源码阅读 - 垃圾回收机制</title><link href="http://www.wklken.me/posts/2015/09/29/python-source-gc.html" rel="alternate"></link><published>2015-09-29T00:00:00+08:00</published><updated>2015-09-29T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-09-29:/posts/2015/09/29/python-source-gc.html</id><summary type="html">&lt;h2 id="gai-shu"&gt;概述&lt;/h2&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了&lt;code&gt;标记-清除&lt;/code&gt;以及&lt;code&gt;分代收集&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h2 id="yin-yong-ji-shu"&gt;引用计数&lt;/h2&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h3 id="ji-shu-cun-chu"&gt;计数存储&lt;/h3&gt;
&lt;p&gt;回顾  &lt;a href="http://www.wklken.me/posts/2014/08/05/python-source-object.html"&gt;Python 的对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyVarObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="gai-shu"&gt;概述&lt;/h2&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了&lt;code&gt;标记-清除&lt;/code&gt;以及&lt;code&gt;分代收集&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h2 id="yin-yong-ji-shu"&gt;引用计数&lt;/h2&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h3 id="ji-shu-cun-chu"&gt;计数存储&lt;/h3&gt;
&lt;p&gt;回顾  &lt;a href="http://www.wklken.me/posts/2014/08/05/python-source-object.html"&gt;Python 的对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyVarObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-shu-zeng-jia"&gt;计数增加&lt;/h3&gt;
&lt;p&gt;增加对象引用计数, refcnt incr&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define Py_INCREF(op) (                         \&lt;/span&gt;
&lt;span class="cp"&gt;    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \&lt;/span&gt;
&lt;span class="cp"&gt;    ((PyObject*)(op))-&amp;gt;ob_refcnt++)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-shu-jian-shao"&gt;计数减少&lt;/h3&gt;
&lt;p&gt;减少对象引用计数, refcnt desc&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define _Py_DEC_REFTOTAL        _Py_RefTotal--&lt;/span&gt;
&lt;span class="cp"&gt;#define _Py_REF_DEBUG_COMMA     ,&lt;/span&gt;

&lt;span class="cp"&gt;#define Py_DECREF(op)                                   \&lt;/span&gt;
&lt;span class="cp"&gt;    do {                                                \&lt;/span&gt;
&lt;span class="cp"&gt;        if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA       \&lt;/span&gt;
&lt;span class="cp"&gt;        --((PyObject*)(op))-&amp;gt;ob_refcnt != 0)            \&lt;/span&gt;
&lt;span class="cp"&gt;            _Py_CHECK_REFCNT(op)                        \&lt;/span&gt;
&lt;span class="cp"&gt;        else                                            \&lt;/span&gt;
&lt;span class="cp"&gt;        _Py_Dealloc((PyObject *)(op));                  \&lt;/span&gt;
&lt;span class="cp"&gt;    } while (0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即, 发现refcnt变成0的时候, 会调用&lt;code&gt;_Py_Dealloc&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;_Py_Dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#define _Py_REF_DEBUG_COMMA     ,&lt;/span&gt;

&lt;span class="cp"&gt;#define _Py_Dealloc(op) (                               \&lt;/span&gt;
&lt;span class="cp"&gt;    _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA          \&lt;/span&gt;
&lt;span class="cp"&gt;    (*Py_TYPE(op)-&amp;gt;tp_dealloc)((PyObject *)(op)))&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* !Py_TRACE_REFS */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会调用各自类型的&lt;code&gt;tp_dealloc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如dict&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyTypeObject&lt;/span&gt; &lt;span class="n"&gt;PyDict_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyVarObject_HEAD_INIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyType_Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;"dict"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyDictObject&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destructor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dict_dealloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="cm"&gt;/* tp_dealloc */&lt;/span&gt;
    &lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;dict_dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="n"&gt;PyDictObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;.....&lt;/span&gt;
    &lt;span class="c1"&gt;// 如果满足条件, 放入到缓冲池freelist中&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;PyDict_MAXFREELIST&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyDict_Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// 否则, 调用tp_free&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nf"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_free&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Py_TRASHCAN_SAFE_END&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python基本类型的&lt;code&gt;tp_dealloc&lt;/code&gt;, 通常都会与各自的缓冲池机制相关, 释放会优先放入缓冲池中(对应的分配会优先从缓冲池取). 这个内存分配与回收同缓冲池机制相关&lt;/p&gt;
&lt;p&gt;当无法放入缓冲池时, 会调用各自类型的&lt;code&gt;tp_free&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;int, 比较特殊&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// int, 通用整数对象缓冲池机制&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freefunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;int_free&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                         &lt;span class="cm"&gt;/* tp_free */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;string&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// string&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_Del&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                               &lt;span class="cm"&gt;/* tp_free */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dict/tuple/list&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;PyObject_GC_Del&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                            &lt;span class="cm"&gt;/* tp_free */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 我们再回头看, 自定义对象的&lt;code&gt;tp_free&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyTypeObject&lt;/span&gt; &lt;span class="n"&gt;PyType_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyVarObject_HEAD_INIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyType_Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                     &lt;span class="cm"&gt;/* tp_name */&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_GC_Del&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                            &lt;span class="cm"&gt;/* tp_free */&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即, 最终, 当计数变为0, 触发内存回收动作. 涉及函数&lt;code&gt;PyObject_Del&lt;/code&gt;和&lt;code&gt;PyObject_GC_Del&lt;/code&gt;, 并且, 自定义类以及容器类型(dict/list/tuple/set等)使用的都是后者&lt;code&gt;PyObject_GC_Del&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="nei-cun-hui-shou-pyobject_del-pyobject_gc_del"&gt;内存回收 PyObject_Del / PyObject_GC_Del&lt;/h3&gt;
&lt;p&gt;如果引用计数=0:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 放入缓冲池
2. 真正销毁, PyObject_Del/PyObject_GC_Del内存操作
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个操作都是进行内存级别的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyObject_Del&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PyObject_Del(op) releases the memory allocated for an object.  It does not
  run a destructor -- it only frees the memory.  PyObject_Free is identical.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这块删除, &lt;code&gt;PyObject_Free&lt;/code&gt; 涉及到了Python底层内存的分配和管理机制, 具体见前面的博文&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyObject_GC_Del&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;PyObject_GC_Del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AS_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Returns true if a given object is tracked&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IS_TRACKED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;// 从跟踪链表中移除&lt;/span&gt;
        &lt;span class="n"&gt;gc_list_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_FREE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IS_TRACKED&lt;/code&gt; 涉及到标记-清除的机制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;generations&lt;/code&gt; 涉及到了分代回收&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PyObject_FREE&lt;/code&gt;, 则和Python底层内存池机制相关&lt;/p&gt;
&lt;h2 id="biao-ji-qing-chu_1"&gt;标记-清除&lt;/h2&gt;
&lt;h3 id="wen-ti-shi-yao-dui-xiang-ke-neng-chan-sheng-xun-huan-yin-yong"&gt;问题: 什么对象可能产生循环引用?&lt;/h3&gt;
&lt;p&gt;只需要关注关注可能产生循环引用的对象&lt;/p&gt;
&lt;p&gt;PyIntObject/PyStringObject等不可能&lt;/p&gt;
&lt;p&gt;Python中的循环引用总是发生在container对象之间, 所谓containser对象即是内部可持有对其他对象的引用: list/dict/class/instance等等&lt;/p&gt;
&lt;p&gt;垃圾收集带来的开销依赖于container对象的数量, 必需跟踪所创建的每一个container对象, 并将这些对象组织到一个集合中.&lt;/p&gt;
&lt;h3 id="ke-shou-ji-dui-xiang-lian-biao"&gt;可收集对象链表&lt;/h3&gt;
&lt;p&gt;可收集对象链表: 将需要被收集和跟踪的container, 放到可收集的链表中&lt;/p&gt;
&lt;p&gt;任何一个python对象都分为两部分: PyObject_HEAD + 对象本身数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* PyObject_HEAD defines the initial segment of every PyObject. */&lt;/span&gt;
&lt;span class="cp"&gt;#define PyObject_HEAD                   \&lt;/span&gt;
&lt;span class="cp"&gt;    _PyObject_HEAD_EXTRA                \&lt;/span&gt;
&lt;span class="cp"&gt;    Py_ssize_t ob_refcnt;               \&lt;/span&gt;
&lt;span class="cp"&gt;    struct _typeobject *ob_type;&lt;/span&gt;

&lt;span class="c1"&gt;//----------------------------------------------------&lt;/span&gt;

  &lt;span class="cp"&gt;#define _PyObject_HEAD_EXTRA            \&lt;/span&gt;
&lt;span class="cp"&gt;      struct _object *_ob_next;           \&lt;/span&gt;
&lt;span class="cp"&gt;      struct _object *_ob_prev;&lt;/span&gt;

&lt;span class="c1"&gt;// 双向链表结构, 垃圾回收&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可收集对象链表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="cm"&gt;/* GC information is stored BEFORE the object structure. */&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;_gc_head&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 建立链表需要的前后指针&lt;/span&gt;
        &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;_gc_head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;_gc_head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// 在初始化时会被初始化为 GC_UNTRACED&lt;/span&gt;
        &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;gc_refs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* force worst-case alignment */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyGC_Head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建container的过程: &lt;code&gt;container对象 = pyGC_Head | PyObject_HEAD | Container Object&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;_PyObject_GC_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTypeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_PyObject_GC_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_PyObject_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_INIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_PyObject_GC_Malloc&lt;/span&gt;

&lt;span class="cp"&gt;#define _PyGC_REFS_UNTRACKED                    (-2)&lt;/span&gt;
&lt;span class="cp"&gt;#define GC_UNTRACKED                    _PyGC_REFS_UNTRACKED&lt;/span&gt;

&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;_PyObject_GC_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;basicsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basicsize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PY_SSIZE_T_MAX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// 为 对象本身+PyGC_Head申请内存, 注意分配的size&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;PyObject_MALLOC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;basicsize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// 初始化 GC_UNTRACED&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GC_UNTRACKED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* number of allocated GC objects */&lt;/span&gt;

    &lt;span class="c1"&gt;// 如果大于阈值, 执行分代回收&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyErr_Occurred&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;collect_generations&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pyobject_head-and-pygc_head"&gt;PyObject_HEAD and PyGC_HEAD&lt;/h3&gt;
&lt;p&gt;注意, &lt;code&gt;FROM_GC&lt;/code&gt;和&lt;code&gt;AS_GC&lt;/code&gt;用于 &lt;code&gt;PyObject_HEAD &amp;lt;=&amp;gt; PyGC_HEAD&lt;/code&gt;地址相互转换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// =&amp;gt; Modules/gcmodule.c&lt;/span&gt;

&lt;span class="cm"&gt;/* Get an object's GC head */&lt;/span&gt;
&lt;span class="cp"&gt;#define AS_GC(o) ((PyGC_Head *)(o)-1)&lt;/span&gt;

&lt;span class="cm"&gt;/* Get the object given the GC head */&lt;/span&gt;
&lt;span class="cp"&gt;#define FROM_GC(g) ((PyObject *)(((PyGC_Head *)g)+1))&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; objimpl.h&lt;/span&gt;

&lt;span class="cp"&gt;#define _Py_AS_GC(o) ((PyGC_Head *)(o)-1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-ti-shi-yao-shi-hou-jiang-containerfang-dao-zhe-ge-dui-xiang-lian-biao-zhong"&gt;问题: 什么时候将container放到这个对象链表中&lt;/h3&gt;
&lt;p&gt;e.g list&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// =&amp;gt; listobject.c&lt;/span&gt;

&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyList_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyListObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_GC_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyListObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyList_Type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;_PyObject_GC_TRACK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt;  _PyObject_GC_TRACK&lt;/span&gt;

&lt;span class="c1"&gt;// objimpl.h&lt;/span&gt;
&lt;span class="c1"&gt;// 加入到可收集对象链表中&lt;/span&gt;

&lt;span class="cp"&gt;#define _PyObject_GC_TRACK(o) do { \&lt;/span&gt;
&lt;span class="cp"&gt;    PyGC_Head *g = _Py_AS_GC(o); \&lt;/span&gt;
&lt;span class="cp"&gt;    if (g-&amp;gt;gc.gc_refs != _PyGC_REFS_UNTRACKED) \&lt;/span&gt;
&lt;span class="cp"&gt;        Py_FatalError("GC object already tracked"); \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_refs = _PyGC_REFS_REACHABLE; \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_next = _PyGC_generation0; \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_prev = _PyGC_generation0-&amp;gt;gc.gc_prev; \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = g; \&lt;/span&gt;
&lt;span class="cp"&gt;    _PyGC_generation0-&amp;gt;gc.gc_prev = g; \&lt;/span&gt;
&lt;span class="cp"&gt;    } while (0);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-ti-shi-yao-shi-hou-jiang-containercong-zhe-ge-dui-xiang-lian-biao-zhong-zhai-chu"&gt;问题: 什么时候将container从这个对象链表中摘除&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Objects/listobject.c&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;list_dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyListObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_GC_UnTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;.....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; PyObject_GC_UnTrack =&amp;gt; _PyObject_GC_UNTRACK&lt;/span&gt;

&lt;span class="c1"&gt;// 对象销毁的时候&lt;/span&gt;
&lt;span class="cp"&gt;#define _PyObject_GC_UNTRACK(o) do { \&lt;/span&gt;
&lt;span class="cp"&gt;    PyGC_Head *g = _Py_AS_GC(o); \&lt;/span&gt;
&lt;span class="cp"&gt;    assert(g-&amp;gt;gc.gc_refs != _PyGC_REFS_UNTRACKED); \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_refs = _PyGC_REFS_UNTRACKED; \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_prev-&amp;gt;gc.gc_next = g-&amp;gt;gc.gc_next; \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_next-&amp;gt;gc.gc_prev = g-&amp;gt;gc.gc_prev; \&lt;/span&gt;
&lt;span class="cp"&gt;    g-&amp;gt;gc.gc_next = NULL; \&lt;/span&gt;
&lt;span class="cp"&gt;    } while (0);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-ti-ru-he-jin-xing-biao-ji-qing-chu"&gt;问题: 如何进行标记-清除&lt;/h3&gt;
&lt;p&gt;现在, 我们得到了一个链表&lt;/p&gt;
&lt;p&gt;Python将自己的垃圾收集限制在这个链表上, 循环引用一定发生在这个链表的一群独享之间.&lt;/p&gt;
&lt;h4 id="0-gai-lan"&gt;0. 概览&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;_PyObject_GC_Malloc&lt;/code&gt; 分配内存时, 发现超过阈值, 此时, 会触发gc, &lt;code&gt;collect_generations&lt;/code&gt;
然后调用&lt;code&gt;collect&lt;/code&gt;, &lt;code&gt;collect&lt;/code&gt;包含标记-清除逻辑&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;

  &lt;span class="cm"&gt;/* This is the main function.  Read this to understand how the&lt;/span&gt;
&lt;span class="cm"&gt;   * collection process works. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;
  &lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 第1步: 将所有比 当前代 年轻的代中的对象 都放到 当前代 的对象链表中&lt;/span&gt;
    &lt;span class="cm"&gt;/* merge younger generations with one we are currently collecting */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;gc_list_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;// 第2步&lt;/span&gt;
    &lt;span class="n"&gt;update_refs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 第3步&lt;/span&gt;
    &lt;span class="n"&gt;subtract_refs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 第4步&lt;/span&gt;
    &lt;span class="n"&gt;gc_list_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;move_unreachable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 第5步&lt;/span&gt;
      &lt;span class="cm"&gt;/* Move reachable objects to next generation. */&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NUM_GENERATIONS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;long_lived_pending&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;gc_list_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="n"&gt;gc_list_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="cm"&gt;/* We only untrack dicts in full collections, to avoid quadratic&lt;/span&gt;
&lt;span class="cm"&gt;             dict build-up. See issue #14775. */&lt;/span&gt;
          &lt;span class="n"&gt;untrack_dicts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;long_lived_pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;long_lived_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc_list_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 第6步&lt;/span&gt;
      &lt;span class="n"&gt;delete_garbage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1-di-yi-bu-gc_list_merge"&gt;1. 第一步:  gc_list_merge&lt;/h4&gt;
&lt;p&gt;将所有比 当前代 年轻的代中的对象 都放到 当前代 的对象链表中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// =&amp;gt; gc_list_merge&lt;/span&gt;

&lt;span class="c1"&gt;// 执行拷贝而已&lt;/span&gt;
&lt;span class="cm"&gt;/* append list `from` onto list `to`; `from` becomes an empty list */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;gc_list_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;gc_list_is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 清空&lt;/span&gt;
    &lt;span class="n"&gt;gc_list_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;gc_list_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即, 此刻, 所有待进行处理的对象都集中在同一个链表中&lt;/p&gt;
&lt;p&gt;处理,&lt;/p&gt;
&lt;p&gt;其逻辑是, 要去除循环引用, 得到有效引用计数&lt;/p&gt;
&lt;p&gt;有效引用计数: 将循环引用的计数去除, 最终得到的 =&amp;gt; 将环从引用中摘除, 各自引用计数数值-1&lt;/p&gt;
&lt;p&gt;实际操作, 并不要直接修改对象的 ob_refcnt, 而是修改其副本, &lt;code&gt;PyGC_Head&lt;/code&gt;中的&lt;code&gt;gc.gc_ref&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="2-di-er-bu-update_refs"&gt;2. 第二步: update_refs&lt;/h4&gt;
&lt;p&gt;遍历对象链表, 将每个对象的gc.gc_ref值设置为ob_refcnt&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// =&amp;gt; gcmodule.c&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;update_refs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GC_REACHABLE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_REFCNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="cm"&gt;/* Python's cyclic gc should never see an incoming refcount&lt;/span&gt;
&lt;span class="cm"&gt;         * of 0:  if something decref'ed to 0, it should have been&lt;/span&gt;
&lt;span class="cm"&gt;         * deallocated immediately at that time.&lt;/span&gt;
&lt;span class="cm"&gt;         * Possible cause (if the assert triggers):  a tp_dealloc&lt;/span&gt;
&lt;span class="cm"&gt;         * routine left a gc-aware object tracked during its teardown&lt;/span&gt;
&lt;span class="cm"&gt;         * phase, and did something-- or allowed something to happen --&lt;/span&gt;
&lt;span class="cm"&gt;         * that called back into Python.  gc can trigger then, and may&lt;/span&gt;
&lt;span class="cm"&gt;         * see the still-tracked dying object.  Before this assert&lt;/span&gt;
&lt;span class="cm"&gt;         * was added, such mistakes went on to allow gc to try to&lt;/span&gt;
&lt;span class="cm"&gt;         * delete the object again.  In a debug build, that caused&lt;/span&gt;
&lt;span class="cm"&gt;         * a mysterious segfault, when _Py_ForgetReference tried&lt;/span&gt;
&lt;span class="cm"&gt;         * to remove the object from the doubly-linked list of all&lt;/span&gt;
&lt;span class="cm"&gt;         * objects a second time.  In a release build, an actual&lt;/span&gt;
&lt;span class="cm"&gt;         * double deallocation occurred, which leads to corruption&lt;/span&gt;
&lt;span class="cm"&gt;         * of the allocator's internal bookkeeping pointers.  That's&lt;/span&gt;
&lt;span class="cm"&gt;         * so serious that maybe this should be a release-build&lt;/span&gt;
&lt;span class="cm"&gt;         * check instead of an assert?&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-di-san-bu-ji-suan-you-xiao-yin-yong-ji-shu"&gt;3. 第三步: 计算有效引用计数&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/* A traversal callback for subtract_refs. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
  &lt;span class="nf"&gt;visit_decref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// 判断op指向的对象是否是被垃圾收集监控的, 对象的type对象中有Py_TPFLAGS_HAVE_GC符号&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject_IS_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AS_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="cm"&gt;/* We're only interested in gc_refs for objects in the&lt;/span&gt;
&lt;span class="cm"&gt;           * generation being collected, which can be recognized&lt;/span&gt;
&lt;span class="cm"&gt;           * because only they have positive gc_refs.&lt;/span&gt;
&lt;span class="cm"&gt;           */&lt;/span&gt;
          &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* else refcount was too small */&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// -1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="cm"&gt;/* Subtract internal references from gc_refs.  After this, gc_refs is &amp;gt;= 0&lt;/span&gt;
&lt;span class="cm"&gt;   * for all objects in containers, and is GC_REACHABLE for all tracked gc&lt;/span&gt;
&lt;span class="cm"&gt;   * objects not in containers.  The ones with gc_refs &amp;gt; 0 are directly&lt;/span&gt;
&lt;span class="cm"&gt;   * reachable from outside containers, and so can't be collected.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="nf"&gt;subtract_refs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;traverseproc&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// 遍历链表&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// 与特定的类型相关, 得到类型对应的traverse函数&lt;/span&gt;
          &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_traverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;// 调用&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visitproc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;visit_decref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 回调形式传入&lt;/span&gt;
                         &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以看看dictobject的traverse函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
  &lt;span class="nf"&gt;dict_traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;visitproc&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// 遍历所有键和值&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyDict_Next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;Py_VISIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;Py_VISIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑大概是: 遍历容器对象里面的所有对象, 通过&lt;code&gt;visit_decref&lt;/code&gt;将这些对象的引用计数都-1,&lt;/p&gt;
&lt;p&gt;最终, 遍历完链表之后, 整个可收集对象链表中所有container对象之间的循环引用都被去掉了&lt;/p&gt;
&lt;h4 id="4-di-si-bu-la-ji-biao-ji"&gt;4. 第四步: 垃圾标记&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;move_unreachable&lt;/code&gt;, 将可收集对象链表中, 根据有效引用计数 不等于0(root对象) 和 等于0(非root对象, 垃圾, 可回收), 一分为二&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cm"&gt;/* Move the unreachable objects from young to unreachable.  After this,&lt;/span&gt;
&lt;span class="cm"&gt;   * all objects in young have gc_refs = GC_REACHABLE, and all objects in&lt;/span&gt;
&lt;span class="cm"&gt;   * unreachable have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All tracked&lt;/span&gt;
&lt;span class="cm"&gt;   * gc objects not in young or unreachable still have gc_refs = GC_REACHABLE.&lt;/span&gt;
&lt;span class="cm"&gt;   * All objects in young after this are directly or indirectly reachable&lt;/span&gt;
&lt;span class="cm"&gt;   * from outside the original young; and all objects in unreachable are&lt;/span&gt;
&lt;span class="cm"&gt;   * not.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="nf"&gt;move_unreachable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="cm"&gt;/* Invariants:  all objects "to the left" of us in young have gc_refs&lt;/span&gt;
&lt;span class="cm"&gt;       * = GC_REACHABLE, and are indeed reachable (directly or indirectly)&lt;/span&gt;
&lt;span class="cm"&gt;       * from outside the young list as it was at entry.  All other objects&lt;/span&gt;
&lt;span class="cm"&gt;       * from the original young "to the left" of us are in unreachable now,&lt;/span&gt;
&lt;span class="cm"&gt;       * and have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All objects to the&lt;/span&gt;
&lt;span class="cm"&gt;       * left of us in 'young' now have been scanned, and no objects here&lt;/span&gt;
&lt;span class="cm"&gt;       * or to the right have been scanned yet.&lt;/span&gt;
&lt;span class="cm"&gt;       */&lt;/span&gt;

      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="c1"&gt;// 对于root object,&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="cm"&gt;/* gc is definitely reachable from outside the&lt;/span&gt;
&lt;span class="cm"&gt;               * original 'young'.  Mark it as such, and traverse&lt;/span&gt;
&lt;span class="cm"&gt;               * its pointers to find any other objects that may&lt;/span&gt;
&lt;span class="cm"&gt;               * be directly reachable from it.  Note that the&lt;/span&gt;
&lt;span class="cm"&gt;               * call to tp_traverse may append objects to young,&lt;/span&gt;
&lt;span class="cm"&gt;               * so we have to wait until it returns to determine&lt;/span&gt;
&lt;span class="cm"&gt;               * the next object to visit.&lt;/span&gt;
&lt;span class="cm"&gt;               */&lt;/span&gt;
              &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;traverseproc&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_traverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="c1"&gt;// 设置其gc-&amp;gt;gc.gc_refs = GC_REACHABLE&lt;/span&gt;
              &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GC_REACHABLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

              &lt;span class="c1"&gt;// 注意这里逻辑, visit_reachable, 意图是?&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visitproc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;visit_reachable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTuple_CheckExact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;_PyTuple_MaybeUntrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="c1"&gt;// 有效引用计数=0, 非root对象, 移动到unreachable链表中&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="cm"&gt;/* This *may* be unreachable.  To make progress,&lt;/span&gt;
&lt;span class="cm"&gt;               * assume it is.  gc isn't directly reachable from&lt;/span&gt;
&lt;span class="cm"&gt;               * any object we've already traversed, but may be&lt;/span&gt;
&lt;span class="cm"&gt;               * reachable from an object we haven't gotten to yet.&lt;/span&gt;
&lt;span class="cm"&gt;               * visit_reachable will eventually move gc back into&lt;/span&gt;
&lt;span class="cm"&gt;               * young if that's so, and we'll see it again.&lt;/span&gt;
&lt;span class="cm"&gt;               */&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;gc_list_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GC_TENTATIVELY_UNREACHABLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5-di-wu-bu-jiang-cun-huo-dui-xiang-fang-ru-xia-yi-dai"&gt;5. 第五步: 将存活对象放入下一代&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="cm"&gt;/* Move reachable objects to next generation. */&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NUM_GENERATIONS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;long_lived_pending&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;gc_list_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="n"&gt;gc_list_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="cm"&gt;/* We only untrack dicts in full collections, to avoid quadratic&lt;/span&gt;
&lt;span class="cm"&gt;             dict build-up. See issue #14775. */&lt;/span&gt;
          &lt;span class="n"&gt;untrack_dicts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;long_lived_pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;long_lived_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc_list_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;young&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="6-di-liu-bu-zhi-xing-hui-shou"&gt;6. 第六步: 执行回收&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gcmoudle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;

  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
  &lt;span class="n"&gt;gc_list_is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="cm"&gt;/* Break reference cycles by clearing the containers involved.  This is&lt;/span&gt;
&lt;span class="cm"&gt;   * tricky business as the lists can be changing and we don't know which&lt;/span&gt;
&lt;span class="cm"&gt;   * objects may be freed.  It is possible I screwed something up here.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="n"&gt;delete_garbage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;collectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;inquiry&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// 遍历&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;gc_list_is_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collectable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collectable&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;// 得到对象&lt;/span&gt;
          &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IS_TENTATIVELY_UNREACHABLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;DEBUG_SAVEALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;PyList_Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;garbage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// 清引用&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_clear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="c1"&gt;// 这个操作会调整container对象中每个引用所有对象的引用计数, 从而完成打破循环的最终目标&lt;/span&gt;
                  &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="c1"&gt;// 重新送回到reachable链表.&lt;/span&gt;
          &lt;span class="c1"&gt;// 原因: 在进行clear动作, 如果成功, 会把自己从垃圾收集机制维护的链表中摘除, 由于某些原因, 对象可能在clear的时候, 没有成功完成必要动作, 还不能被销毁, 所以放回去&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collectable&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="cm"&gt;/* object is still alive, move it, it may die later */&lt;/span&gt;
              &lt;span class="n"&gt;gc_list_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc_refs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GC_REACHABLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;来看下&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="n"&gt;list_clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyListObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* Because XDECREF can recursively invoke operations on&lt;/span&gt;
&lt;span class="cm"&gt;           this list, we make it empty first. */&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Py_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;allocated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 减引用&lt;/span&gt;
            &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;PyMem_FREE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/* Never fails; the return value can be ignored.&lt;/span&gt;
&lt;span class="cm"&gt;       Note that there is no guarantee that the list is actually empty&lt;/span&gt;
&lt;span class="cm"&gt;       at this point, because XDECREF may have populated it again! */&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// e.g. 处理list3, 调用其list_clear, 减少list4的引用计数, list4.ob_refcnt=0, 引发对象销毁, 调用list4的list_dealloc&lt;/span&gt;


&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;list_dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyListObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_GC_UnTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//  从可收集对象链表中去除, 会影响到list4所引用所有对象的引用计数, =&amp;gt; list3.refcnt=0, list3的销毁动作也被触发&lt;/span&gt;

    &lt;span class="n"&gt;Py_TRASHCAN_SAFE_BEGIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* Do it backwards, for Christian Tismer.&lt;/span&gt;
&lt;span class="cm"&gt;           There's a simple test case where somehow this reduces&lt;/span&gt;
&lt;span class="cm"&gt;           thrashing when a *very* large list is created and&lt;/span&gt;
&lt;span class="cm"&gt;           immediately deleted. */&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;PyMem_FREE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;PyList_MAXFREELIST&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;PyList_CheckExact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nf"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tp_free&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Py_TRASHCAN_SAFE_END&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="7-gcluo-ji"&gt;7. gc逻辑&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分配内存
-&amp;gt; 发现超过阈值了
-&amp;gt; 触发垃圾回收
-&amp;gt; 将所有可收集对象链表放到一起
-&amp;gt; 遍历, 计算有效引用计数
-&amp;gt; 分成 有效引用计数=0 和 有效引用计数 &amp;gt; 0 两个集合
-&amp;gt; 大于0的, 放入到更老一代
-&amp;gt; =0的, 执行回收
-&amp;gt; 回收遍历容器内的各个元素, 减掉对应元素引用计数(破掉循环引用)
-&amp;gt; 执行-1的逻辑, 若发现对象引用计数=0, 触发内存回收
-&amp;gt; python底层内存管理机制回收内存
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fen-dai-hui-shou_2"&gt;分代回收&lt;/h2&gt;
&lt;p&gt;分代收集: 以空间换时间&lt;/p&gt;
&lt;p&gt;思想: 将系统中的所有内存块根据其存货的时间划分为不同的集合, 每个集合就成为一个"代", 垃圾收集的频率随着"代"的存活时间的增大而减小(活得越长的对象, 就越不可能是垃圾, 就应该减少去收集的频率)&lt;/p&gt;
&lt;p&gt;Python中, 引入了分代收集, 总共三个"代". Python 中, 一个代就是一个链表, 所有属于同一"代"的内存块都链接在同一个链表中&lt;/p&gt;
&lt;h3 id="biao-tou-shu-ju-jie-gou"&gt;表头数据结构&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;


  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;gc_generation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* collection threshold */&lt;/span&gt;  &lt;span class="c1"&gt;// 阈值&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* count of allocations or collections of younger&lt;/span&gt;
&lt;span class="cm"&gt;                    generations */&lt;/span&gt;    &lt;span class="c1"&gt;// 实时个数&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="san-ge-dai-de-ding-yi"&gt;三个代的定义&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cp"&gt;#define NUM_GENERATIONS 3&lt;/span&gt;
  &lt;span class="cp"&gt;#define GEN_HEAD(n) (&amp;amp;generations[n].head)&lt;/span&gt;

  &lt;span class="c1"&gt;//  三代都放到这个数组中&lt;/span&gt;
  &lt;span class="cm"&gt;/* linked lists of container objects */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;gc_generation&lt;/span&gt; &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NUM_GENERATIONS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/* PyGC_Head,                               threshold,      count */&lt;/span&gt;
      &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;           &lt;span class="mi"&gt;700&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="c1"&gt;//700个container, 超过立即触发垃圾回收机制&lt;/span&gt;
      &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;           &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="c1"&gt;// 10个&lt;/span&gt;
      &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;           &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="c1"&gt;// 10个&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;PyGC_Head&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_PyGC_generation0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chao-guo-yu-zhi-hong-fa-la-ji-hui-shou"&gt;超过阈值, 触发垃圾回收&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="nf"&gt;_PyObject_GC_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;basicsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// 执行分配&lt;/span&gt;
      &lt;span class="p"&gt;....&lt;/span&gt;
      &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* number of allocated GC objects */&lt;/span&gt;  &lt;span class="c1"&gt;//增加一个&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c1"&gt;// 发现大于预支了&lt;/span&gt;
          &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyErr_Occurred&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;collect_generations&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;//  执行收集&lt;/span&gt;
              &lt;span class="n"&gt;collecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FROM_GC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;collect_generations&lt;/span&gt;

  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;
  &lt;span class="n"&gt;collect_generations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="cm"&gt;/* Find the oldest generation (highest numbered) where the count&lt;/span&gt;
&lt;span class="cm"&gt;       * exceeds the threshold.  Objects in the that generation and&lt;/span&gt;
&lt;span class="cm"&gt;       * generations younger than it will be collected. */&lt;/span&gt;

      &lt;span class="c1"&gt;// 从最老的一代, 开始回收&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NUM_GENERATIONS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 遍历所有generation&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// 如果超过了阈值&lt;/span&gt;
              &lt;span class="cm"&gt;/* Avoid quadratic performance degradation in number&lt;/span&gt;
&lt;span class="cm"&gt;                 of tracked objects. See comments at the beginning&lt;/span&gt;
&lt;span class="cm"&gt;                 of this file, and issue #4074.&lt;/span&gt;
&lt;span class="cm"&gt;              */&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NUM_GENERATIONS&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;long_lived_pending&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;long_lived_total&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 执行收集&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// notice: break了&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="python-zhong-de-gcmo-kuai_1"&gt;Python 中的gc模块&lt;/h2&gt;
&lt;p&gt;gc模块, 提供了观察和手动使用gc的接口&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG_STATS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG_LEAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;code&gt;__del__&lt;/code&gt;给gc带来的影响&lt;/p&gt;</content><category term="python"></category></entry><entry><title>我为什么要写博客</title><link href="http://www.wklken.me/posts/2015/09/26/why-i-keep-blogging.html" rel="alternate"></link><published>2015-09-26T00:00:00+08:00</published><updated>2015-09-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-09-26:/posts/2015/09/26/why-i-keep-blogging.html</id><summary type="html">&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光.&lt;/p&gt;
&lt;p&gt;很快, 工作四年多了, 时间是把杀猪刀, 改变了很多东西.&lt;/p&gt;
&lt;p&gt;工作四年, 经历了三家公司, 不幸的是后面两家夭折了, 庆幸的是, 做了很多事情, 认识了很多朋友.&lt;/p&gt;
&lt;p&gt;做的事情多, 杂, 也接触了很多东西, 感觉遗憾的是没能完完整整地经历一个公司的发展, 或者一套系统的进化过程.&lt;/p&gt;
&lt;p&gt;四年, 改变了很多, 唯独没变的, 是偶尔会更新下博客, 输出一些东西, 吐吐槽神马的.&lt;/p&gt;
&lt;p&gt;写博客的目的, 对我来说, 不外乎如是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活得越久, 越发现记忆的不靠谱.&lt;/p&gt;
&lt;p&gt;很难会到过去某一刻, 某个时期的所思所想, 当时的心境, 当时的境遇.&lt;/p&gt;
&lt;p&gt;所以, 记录, 写一写小结, 阶段性看看, 过去&lt;code&gt;无知&lt;/code&gt;/&lt;code&gt;青葱&lt;/code&gt;的自己, 也是必须的.&lt;/p&gt;
&lt;p&gt;当然, 更有效的做法是, 每天坚持写写日记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一些坑, 自己踩过就好......&lt;/p&gt;
&lt;p&gt;而有一些观点, 可以发出来一起看看, 或多或少得到一些感受&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我主要的知识管理工具是gollum, 以及evernote作为辅助, 在工作以及学习的过程中, 会碰到某个问题的方方面面, 各种细节, 散而且乱, 分布在不同地方, 而发个博客出来, 主要是可以花一两个小时, 对某块进行汇总, 然后重新梳理, 得到一个较为完整的内容, 顺手从笔记中清掉.&lt;/p&gt;
&lt;p&gt;总之, 类似于一个精粹的过程.&lt;/p&gt;
&lt;p&gt;还有, 例如在读python源码的时候, 读源码, 做笔记, 写注释, 同时还要参考书籍和文档, 往往当时读懂了, 觉得很清晰, 但是过阵子再回去看下, 面对一堆杂乱无从下手, 而出博文的过程, 会顺着思路走, 绘制一些结构图流程图, 再回头看的时候, 往往几分钟就能全盘了然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gollum和evernote的搜索其实做的都还不错, 但是有时候搜一个点, 得到不止一篇的结果, 往往要点好多次才能找到, 而发博文后, 顺手笔记中清掉, 此时在脑中已经有个印象, 某个点我详细写过什么东西, 那么剩下的只是一键打开博客, 找到那篇文章即可.&lt;/p&gt;
&lt;p&gt;另一个好处是, gollum和evernote是本地的, 在别人电脑上处理问题的时候, 博客反正到哪都能访问到&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;写博的过程, 更多的是自己记录, 思考, 成长的过程, 坚持下来, 感觉还是收获颇多.&lt;/p&gt;
&lt;p&gt;明确目的, 不要把这个写博客的日常变成功利, 其实这次找工作的过程发现, 写博客或许加分了, 但是就是过简历那个环节而已, 太过功利会没必要, 花费大量时间并不值得. 更多的是, 做事情, 把事情做好, 然后得到一些积累和感悟, 而不是反之. &lt;/p&gt;
&lt;p&gt;PS:  其实github开源也是一样, 做自己感兴趣的事情, 而不是去为了开源而开源&lt;/p&gt;
&lt;p&gt;后续, 会主要关注两方面, 一块是偏底层的东西, 构建基础的知识体系, 另一块是做业务/项目过程中的总结.&lt;/p&gt;
&lt;p&gt;编码不易, 且行且珍惜, 共勉&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-09-26 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>APUE笔记-第一章 UNIX基础知识</title><link href="http://www.wklken.me/posts/2015/09/23/apue-note-chapter-1.html" rel="alternate"></link><published>2015-09-23T00:00:00+08:00</published><updated>2015-09-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-09-23:/posts/2015/09/23/apue-note-chapter-1.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;最近在找工作, 额, 从七月份一直休息到九月初, 开始找, 结果发现快到十月了, 节点不是很好, 要过两个节, 所以估计入职什么的要到节后了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这几个月也在思考一些东西, 顺手也解决掉了&lt;code&gt;Python源码剖析&lt;/code&gt;, 目前在逐步梳理笔记&lt;/p&gt;
&lt;p&gt;发现自己首次做笔记还是太杂太乱, 堆在wiki里面一大坨的感觉, 还是要梳理画图, 思路更清晰些, 静候吧, 还是十篇左右的样子&lt;/p&gt;
&lt;p&gt;读APUE, 做法比较&lt;code&gt;残忍&lt;/code&gt;, 把书切开, 拆成一章一章地装订, 方便携带和阅读, 最后发现画满了一堆东西&lt;/p&gt;
&lt;p&gt;发现还是不方便自己查阅, 所以还是决定重读, 转成笔记, 放到博客上方便搜索/查阅&lt;/p&gt;
&lt;p&gt;对了, 代码之前只是下了看到的时候run下, 这次重读写写注释, 放到github了, &lt;a href="https://github.com/wklken/apue.3e"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此感谢作者W.Richard Stevens :) 这本书五星好评, 建议如果搞linux相关后端, 可以读下&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-zhang-unixji-chu-zhi-shi"&gt;第一章 UNIX基础知识&lt;/h1&gt;
&lt;h2 id="unixti-xi-jie-gou-nei-he-yu-xi-tong-diao-yong"&gt;Unix体系结构: 内核与系统调用&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/apue/1-1.jpg"/&gt;￼&lt;/p&gt;
&lt;p&gt;内核(kernel): 严格意义上, 将操作系统定义为一种软件 …&lt;/p&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;最近在找工作, 额, 从七月份一直休息到九月初, 开始找, 结果发现快到十月了, 节点不是很好, 要过两个节, 所以估计入职什么的要到节后了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这几个月也在思考一些东西, 顺手也解决掉了&lt;code&gt;Python源码剖析&lt;/code&gt;, 目前在逐步梳理笔记&lt;/p&gt;
&lt;p&gt;发现自己首次做笔记还是太杂太乱, 堆在wiki里面一大坨的感觉, 还是要梳理画图, 思路更清晰些, 静候吧, 还是十篇左右的样子&lt;/p&gt;
&lt;p&gt;读APUE, 做法比较&lt;code&gt;残忍&lt;/code&gt;, 把书切开, 拆成一章一章地装订, 方便携带和阅读, 最后发现画满了一堆东西&lt;/p&gt;
&lt;p&gt;发现还是不方便自己查阅, 所以还是决定重读, 转成笔记, 放到博客上方便搜索/查阅&lt;/p&gt;
&lt;p&gt;对了, 代码之前只是下了看到的时候run下, 这次重读写写注释, 放到github了, &lt;a href="https://github.com/wklken/apue.3e"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此感谢作者W.Richard Stevens :) 这本书五星好评, 建议如果搞linux相关后端, 可以读下&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-zhang-unixji-chu-zhi-shi"&gt;第一章 UNIX基础知识&lt;/h1&gt;
&lt;h2 id="unixti-xi-jie-gou-nei-he-yu-xi-tong-diao-yong"&gt;Unix体系结构: 内核与系统调用&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/apue/1-1.jpg"/&gt;￼&lt;/p&gt;
&lt;p&gt;内核(kernel): 严格意义上, 将操作系统定义为一种软件, 它控制计算机硬件资源, 提供程序运行环境(相对较小, 位于环境的中心)&lt;/p&gt;
&lt;p&gt;系统调用(system call): 内核的接口&lt;/p&gt;
&lt;p&gt;关系: 公用函数库构建在系统调用接口之上, 应用软件既可以使用公用函数库, 也可以使用系统调用&lt;/p&gt;
&lt;h2 id="deng-lu"&gt;登陆&lt;/h2&gt;
&lt;p&gt;口令文件&lt;code&gt;/etc/passwd&lt;/code&gt;, 七个字段,冒号分隔&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;登录名:加密口令:数值用户 ID: 数值组 ID: 注释字段:起始目录:shell
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加密口令已经转移到另一个文件&lt;/p&gt;
&lt;p&gt;shell: 一个命令行解释器, 它读取用户输入, 然后执行命令&lt;/p&gt;
&lt;p&gt;Linux 默认shell是Bourne-again shell&lt;/p&gt;
&lt;h2 id="wen-jian-he-mu-lu"&gt;文件和目录&lt;/h2&gt;
&lt;p&gt;文件系统: 目录和文件组成的一种层次接口, 目录的起点称为根(root), 其名字是&lt;code&gt;\\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;目录(directory)是一个包含许多目录项的文件&lt;/p&gt;
&lt;p&gt;文件名(filename): 不能出现斜线&lt;code&gt;/&lt;/code&gt;和空操作符&lt;code&gt;null&lt;/code&gt;(好的习惯只使用印刷字符的一个子集作为文件名字符)&lt;/p&gt;
&lt;p&gt;创建目录时, 会自动创建两个文件名, 当前目录&lt;code&gt;.&lt;/code&gt; 以及父目录&lt;code&gt;..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;路径名(pathname): 一个或多个以斜线分割的文件名序列. 以斜线开头的是绝对路径(absolute pathname), 否则是相对路径(relative pathname)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/ls1.c"&gt;ls.c源代码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;dirent.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// 可编译执行&lt;/span&gt;
&lt;span class="c1"&gt;// apue.h, 包含某些标准头文件, 定义了很多常量及库函数&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;DIR&lt;/span&gt;                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// 结构体&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt;    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 需要至少一个参数&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// apue.h自定义函数&lt;/span&gt;
        &lt;span class="n"&gt;err_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: ls directory_name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 赋值后判断, opendir返回指向 DIR 结构体的指针&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// apue.h自定义函数err_sys&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"can't open %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// 赋值后判断, 读每一项, 返回指向readdir结构的指针或null(没有目录项可读时)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 取出每个目录的名字&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;closedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 终止程序, 0正常结束, 1-255出错&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工作目录(working directory), 每个进程都有一个, 优势成为当前工作目录, 进程可以通过chdir函数更改其工作目录.&lt;/p&gt;
&lt;h2 id="shu-ru-he-shu-chu"&gt;输入和输出&lt;/h2&gt;
&lt;p&gt;文件描述符(file descriptor), 一个小的负整数, 内核使用它标识一个特定进程正在访问的文件. 当内核打开或创建一个新文件时, 返回一个文件描述符, 在读写的时候使用&lt;/p&gt;
&lt;p&gt;每当运行一个新程序时, 所有的shell都为其打开三个文件描述符: 标准输入(standard input), 标准输出(standard output)以及标准错误(standard error)&lt;/p&gt;
&lt;p&gt;不用缓冲的I/O
函数open/read/write/lseek/close&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/mycat.c"&gt;mycat.c源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* 缓冲区大小, 常量 */&lt;/span&gt;
&lt;span class="cp"&gt;#define    BUFFSIZE    4096&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;     &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;    &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUFFSIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="cm"&gt;/* STDIN_FILENO/STDOUT_FILENO -&amp;gt; apue.h -&amp;gt; unisted.h, 标准输入文件描述符0/标准输出文件描述符1 */&lt;/span&gt;

    &lt;span class="cm"&gt;/* 从标准输入读, read返回读得的字节数, 读到末端返回0, 发生错误返回-1 */&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUFFSIZE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="cm"&gt;/* 写到标准输入 */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"write error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* 发生错误 */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"read error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;标准I/O函数: 提供了一种对不用缓冲 I/O 函数的带缓冲接口, 可以无需担心如何选取最佳的缓冲区大小&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/getcputc.c"&gt;getputc.c源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="cm"&gt;/* stdin/stdout -&amp;gt; apue.h -&amp;gt; stdio.h 标准输入文件/标准输出文件 */&lt;/span&gt;
&lt;span class="cm"&gt;/* EOF为stdio.h中定义的常量 */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* 从标准输入中读入一个字符 */&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="cm"&gt;/* 输出到标准输出 */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"output error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ferror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"input error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cheng-xu-he-jin-cheng"&gt;程序和进程&lt;/h2&gt;
&lt;p&gt;程序(program): 存放在磁盘上, 处于某个目录中的一个可执行文件.(使用6个exec函数中的一个有内核将程序读入存储器, 并使其执行)&lt;/p&gt;
&lt;p&gt;进程(process): 程序的执行实例&lt;/p&gt;
&lt;p&gt;进程ID(process ID), 每个进程都有一个唯一的数字标识符, 总是一非负整数&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/hello.c"&gt;hello.c 源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* getpid得到进程pid */&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world from process ID %ld&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进程控制: 三个主要函数, fork/exec(六种变体)/waitpid&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/shell1.c"&gt;shell1.c 源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="cm"&gt;/* fork创建一个新进程, 它被调用一次(由父进程调用), 返回两次(在父进程中返回子进程的进程ID, 在子进程中返回0) */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;    &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;    &lt;span class="cm"&gt;/* from apue.h */&lt;/span&gt;
    &lt;span class="kt"&gt;pid_t&lt;/span&gt;    &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;        &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%% "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="cm"&gt;/* print prompt (printf requires %% to print %) */&lt;/span&gt;

    &lt;span class="cm"&gt;/* 读入一行, 每一行命令会产生一个子进程用于执行 */&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* 去掉换行符 */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* replace newline with null */&lt;/span&gt;

        &lt;span class="cm"&gt;/* 执行读入的命令 */&lt;/span&gt;
        &lt;span class="cm"&gt;/* fork创建一个子进程, 返回&amp;lt;0则表示fork发生了错误 */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cm"&gt;/* 对于子进程, fork返回的pid=0(父进程fork返回的pid&amp;gt;0) */&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="cm"&gt;/* child */&lt;/span&gt;

            &lt;span class="cm"&gt;/* 调用execlp以执行从标准输入读入的命令 */&lt;/span&gt;
            &lt;span class="cm"&gt;/* fork+exec组合, 是某些操作系统所称的产生(spawn)一个新的进程 */&lt;/span&gt;
            &lt;span class="n"&gt;execlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;err_ret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't execute: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="cm"&gt;/* 退出 */&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* 父进程, 等待子进程终止 */&lt;/span&gt;
        &lt;span class="cm"&gt;/* pid为子进程id, status为子进程终止状态(用于判断其实如何终止的) */&lt;/span&gt;
        &lt;span class="cm"&gt;/* parent */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"waitpid error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%% "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常, 一个进程只有一个控制线程(thread), 同一时刻只执行一组机器指令.(对于某些问题, 如果不同部分各使用一个控制线程, 那么整个问题解决相对容易, 多个控制线程也能充分利用多处理器系统的并行性)&lt;/p&gt;
&lt;p&gt;在一个进程内的所有线程共享同一地址空间/文件描述符/栈以及与进程相关的属性(所以各线程在访问共享数据时需要采取同步措施以避免不一致性)&lt;/p&gt;
&lt;p&gt;线程也用 ID 标识, 但只在其所属进程内起作用&lt;/p&gt;
&lt;h2 id="chu-cuo-chu-li"&gt;出错处理&lt;/h2&gt;
&lt;p&gt;UNIX 函数出错的时候, 常常返回一个负值, 而整型变量errno通常被设置为含有附加信息的一个值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errno.h&lt;/code&gt;中, 定义了符号errno以及可以赋予它的各种常量.(errno(3)手册中)&lt;/p&gt;
&lt;p&gt;对于errno两条规则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 如果没有出错, 其值则不会被一个例程清楚, 因此, 仅当函数的返回值指明出错时, 才检验其值
2. 任一函数都不会将errno值设置为0, 在errnoh中定义的所有常量都不为0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/testerror.c"&gt;testerror.c 源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;


&lt;span class="cm"&gt;/* strerror, 将errnum映射为一个出错信息字符串, 并且返回此字符串的指针 */&lt;/span&gt;
&lt;span class="cm"&gt;/* perror, 基于errno的当前值, 在标准出错上产生一条出错信息, 然后返回 */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* 常量 EACCES / ENOENT */&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"EACCES: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EACCES&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENOENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出错恢复: errno.h中定义的各种出错分为致命性和非致命性两类.&lt;/p&gt;
&lt;p&gt;致命性出错: 无法执行恢复动作, 最多只能在屏幕上打印一条出错信息, 或写入日志, 然后终止&lt;/p&gt;
&lt;p&gt;非致命性出错: 可以较为妥善地处理&lt;/p&gt;
&lt;h2 id="yong-hu-biao-shi"&gt;用户标识&lt;/h2&gt;
&lt;p&gt;用户ID(user ID), 数值, 系统中标识各个不同的用户, 每个用户唯一(用户不能更改其用户 ID)&lt;/p&gt;
&lt;p&gt;用户 ID 为0的用户为根( root) 或超级用户(superuser)&lt;/p&gt;
&lt;p&gt;组ID(group ID), 一个数值, 指定用户登陆名时同时指定的. 允许同组各个成员之间共享资源&lt;/p&gt;
&lt;p&gt;组文件将组名映射为数字 ID, &lt;code&gt;/etc/group&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;口令文件包含: 登录名 = 用户 ID 的映射&lt;/p&gt;
&lt;p&gt;组文件包含: 组名 = 组ID 的映射&lt;/p&gt;
&lt;p&gt;打印用户ID和组ID&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/uidgid.c"&gt;uidgid.c 源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* getuid / getgid */&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uid = %d, gid = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;getgid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附加组ID&lt;/p&gt;
&lt;p&gt;允许一个用户属于多个组, 最多16个.&lt;/p&gt;
&lt;h2 id="xin-hao"&gt;信号&lt;/h2&gt;
&lt;p&gt;信号(signal): 通知进程已发生某种情况的一种技术.&lt;/p&gt;
&lt;p&gt;e.g. 一个进程执行除法操作, 其除数为0, 则将名为SIGFPE的信号发给该进程&lt;/p&gt;
&lt;p&gt;进程如何处理信号?&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 忽略该信号
2. 按系统默认方式处理.
3. 提供一个函数, 信号发生时则调用该函数(捕捉信号)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;信号捕捉&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/apue.3e/blob/master/intro/shell2.c"&gt;shell2.c 源码&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"apue.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* 声明信号处理函数 */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;    &lt;span class="nf"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="cm"&gt;/* our signal-catching function */&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;    &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;    &lt;span class="cm"&gt;/* from apue.h */&lt;/span&gt;
    &lt;span class="kt"&gt;pid_t&lt;/span&gt;    &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;        &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


    &lt;span class="cm"&gt;/* signal函数, 指定SIGINT 到处理函数 sig_int */&lt;/span&gt;
    &lt;span class="cm"&gt;/* 机制, 类似于直接注册到了进程, 观察是否异常发生后捕获处理 */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;SIG_ERR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signal error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%% "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="cm"&gt;/* print prompt (printf requires %% to print %) */&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* replace newline with null */&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="cm"&gt;/* child */&lt;/span&gt;
            &lt;span class="n"&gt;execlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;err_ret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't execute: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* parent */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;err_sys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"waitpid error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%% "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="cm"&gt;/* 处理函数, 打印 */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;sig_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;signo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"interrupt&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%% "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-jian-zhi"&gt;时间值&lt;/h2&gt;
&lt;p&gt;UNIX系统两种不同的时间值&lt;/p&gt;
&lt;p&gt;日历时间, time_t, 从1970年1月1日00:00:00以来的国际标准时间UTC锁经过的秒数&lt;/p&gt;
&lt;p&gt;进程时间, clock_t, CPU时间, 度量进程使用的中央处理器资源, 以始终滴答计算&lt;/p&gt;
&lt;p&gt;Unix系统使用三个进程时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 时钟时间, 总时间, real
2. 用户cpu时间, 执行用户指令耗时, user
3. 系统cpu时间, 执行内核程序耗时, sys
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="xi-tong-diao-yong-he-ku-han-shu"&gt;系统调用和库函数&lt;/h2&gt;
&lt;p&gt;所有操作系统都提供多种服务的入口点(系统调用), 程序由此想内核请求服务&lt;/p&gt;
&lt;p&gt;UNIX所使用的技术是为每个系统调用在标准 C 库中设置一个具有同样名字的函数. 用户进程用标准 C 调用序列来调用这些函数, 然后函数又用系统所要求的技术调用相应的内核服务&lt;/p&gt;
&lt;p&gt;系统调用通常提供一种最小接口，而库函数通常提供比较复杂的功能。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/apue/1-2.jpg"/&gt;￼&lt;/p&gt;
&lt;p&gt;系统调用: 最小接口, 单一职责, 不可替换&lt;/p&gt;
&lt;p&gt;C库函数: 复杂功能, 可替换, 可自行定义&lt;/p&gt;</content><category term="apue"></category></entry><entry><title>Python源码阅读-闭包的实现</title><link href="http://www.wklken.me/posts/2015/09/04/python-source-closure.html" rel="alternate"></link><published>2015-09-04T00:00:00+08:00</published><updated>2015-09-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-09-04:/posts/2015/09/04/python-source-closure.html</id><summary type="html">&lt;h3 id="bi-bao"&gt;闭包&lt;/h3&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;

&lt;span class="n"&gt;add_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要回答, 什么是闭包, CPython底层是如何实现的?&lt;/p&gt;
&lt;h3 id="pycodeobject"&gt;PyCodeObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_argcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* #arguments, except *args */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_nlocals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* #local variables */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_stacksize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* #entries needed for evaluation stack */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_flags …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="bi-bao"&gt;闭包&lt;/h3&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;

&lt;span class="n"&gt;add_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要回答, 什么是闭包, CPython底层是如何实现的?&lt;/p&gt;
&lt;h3 id="pycodeobject"&gt;PyCodeObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_argcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* #arguments, except *args */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_nlocals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* #local variables */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_stacksize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* #entries needed for evaluation stack */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* CO_..., see below */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* instruction opcodes */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_consts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* list (constants used) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_names&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* list of strings (names used) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* tuple of strings (local variable names) */&lt;/span&gt;

    &lt;span class="c1"&gt;// 保存使用了的外层作用域中的变量名集合 (编译时就知道的! 被嵌套的时候有用)&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_freevars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* tuple of strings (free variable names) */&lt;/span&gt;
    &lt;span class="c1"&gt;// 保存嵌套作用域中使用的变量名集合, (编译时就知道的! 包含嵌套函数时有用)&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* tuple of strings (cell variable names) */&lt;/span&gt;


    &lt;span class="cm"&gt;/* The rest doesn't count for hash/cmp */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_filename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* string (where it was loaded from) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* string (name, for reference) */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_firstlineno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* first source line number */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_lnotab&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* string (encoding addr&amp;lt;-&amp;gt;lineno mapping) See&lt;/span&gt;
&lt;span class="cm"&gt;                   Objects/lnotab_notes.txt for details. */&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_zombieframe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* for optimization only (see frameobject.c) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co_weakreflist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* to support weakrefs to code objects */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyCodeObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们关注两个, &lt;code&gt;co_freevars&lt;/code&gt; 和 &lt;code&gt;co_cellvars&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;co_freevars, 保存使用了的外层作用域中的变量名集合 (编译时就知道的! 被嵌套的时候有用)

co_cellvars, 保存嵌套作用域中使用的变量名集合, (编译时就知道的! 包含嵌套函数时有用)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于我们上面的那个示例, &lt;code&gt;add&lt;/code&gt;是外层函数, &lt;code&gt;do_add&lt;/code&gt;是嵌套函数, 我们可以通过&lt;code&gt;func_code&lt;/code&gt;打印看看&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="c1"&gt;# 外层函数&lt;/span&gt;
    &lt;span class="c1"&gt;# 外层函数, 没有使用了外层作用域变量, 被嵌套函数使用了'x'&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_freevars&lt;/span&gt;    &lt;span class="c1"&gt;# ()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;    &lt;span class="c1"&gt;# ('x',)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 嵌套函数&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# 内层函数, 使用了外层作用域便令'x', 没有嵌套函数故嵌套作用域变量名集合空&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_freevars&lt;/span&gt; &lt;span class="c1"&gt;# ('x',)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt; &lt;span class="c1"&gt;# ()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时图示&lt;/p&gt;
&lt;p&gt;&lt;img alt="closure" src="/imgs/python-source/python-closure.png"/&gt;&lt;/p&gt;
&lt;p&gt;这时候, 只是记录了使用到的变量名, 标记下是否使用了外层的/被内层使用的变量&lt;/p&gt;
&lt;p&gt;具体的值是在运行时确定的, 例如&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时&lt;code&gt;x=5&lt;/code&gt;, 这个是在&lt;code&gt;add&lt;/code&gt;的名字空间里面的, 那么, &lt;code&gt;x=5&lt;/code&gt;是怎么传递到嵌套函数内? 嵌套函数又是如何知晓&lt;code&gt;x&lt;/code&gt;的值?&lt;/p&gt;
&lt;p&gt;记住这两个问题, 然后我们首先来看一个新的数据结构&lt;/p&gt;
&lt;h3 id="pycellobject"&gt;PyCellObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ob_ref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* Content of the cell or NULL when empty */&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;指向一个&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyCellObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="nf"&gt;PyCell_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;PyCellObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCellObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;PyObject_GC_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCellObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyCell_Type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//建立关系&lt;/span&gt;
      &lt;span class="n"&gt;Py_XINCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;_PyObject_GC_TRACK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是个很简单的基本对象, 有一个&lt;code&gt;ob_ref&lt;/code&gt;指向另一个&lt;code&gt;PyObject&lt;/code&gt;, 仅此而已&lt;/p&gt;
&lt;p&gt;图示&lt;/p&gt;
&lt;p&gt;&lt;img alt="closure" src="/imgs/python-source/python-closure2.png"/&gt;&lt;/p&gt;
&lt;p&gt;作用呢?&lt;/p&gt;
&lt;h3 id="zhi-de-que-ren-yu-chuan-di-guo-cheng"&gt;值的确认与传递过程&lt;/h3&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 开始调用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oparg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pp_stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;PyEval_EvalCodeEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pp_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pp_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;PyFunction_GET_CLOSURE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;PyEval_EvalCodeEx&lt;/span&gt;

&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;此时其&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="err"&gt;非空&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;将会执行的逻辑代码&lt;/span&gt;


      &lt;span class="cm"&gt;/* Allocate and initialize storage for cell vars, and copy free&lt;/span&gt;
&lt;span class="cm"&gt;         vars into frame.  This isn't too efficient right now. */&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cellname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="n"&gt;nargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_flags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;CO_VARARGS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_flags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;CO_VARKEYWORDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="cm"&gt;/* Initialize each cell var, taking into account&lt;/span&gt;
&lt;span class="cm"&gt;             cell vars that are initialized from arguments.&lt;/span&gt;

&lt;span class="cm"&gt;             Should arrange for the compiler to put cellvars&lt;/span&gt;
&lt;span class="cm"&gt;             that are arguments at the beginning of the cellvars&lt;/span&gt;
&lt;span class="cm"&gt;             list so that we can march over it more efficiently?&lt;/span&gt;
&lt;span class="cm"&gt;          */&lt;/span&gt;

          &lt;span class="c1"&gt;// for 循环遍历 co_cellvars = ('x', ), i = 0&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

              &lt;span class="c1"&gt;// cellname = 'x'&lt;/span&gt;
              &lt;span class="n"&gt;cellname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyString_AS_STRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="n"&gt;PyTuple_GET_ITEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
              &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

              &lt;span class="c1"&gt;// 遍历函数的参数变量, narg=1, j=0&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                  &lt;span class="c1"&gt;// 访问当前名字空间&lt;/span&gt;
                  &lt;span class="n"&gt;argname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyString_AS_STRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                      &lt;span class="n"&gt;PyTuple_GET_ITEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

                  &lt;span class="c1"&gt;// 匹配上了&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                      &lt;span class="c1"&gt;// new 一个 PyCellObject, ob_ref指向变量的PyObject&lt;/span&gt;
                      &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyCell_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GETLOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                      &lt;span class="c1"&gt;// #define GETLOCAL(i)     (fastlocals[i])&lt;/span&gt;
                      &lt;span class="c1"&gt;// fastlocals = f-&amp;gt;f_localsplus;&lt;/span&gt;
                      &lt;span class="c1"&gt;// 即 f-&amp;gt;f_localsplus[co-&amp;gt;co_nlocals + i] = c, 相当于放到下一层freevars变量&lt;/span&gt;
                      &lt;span class="n"&gt;GETLOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_nlocals&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                      &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;

              &lt;span class="c1"&gt;// 没有匹配, 给个指向NULL的PyCellObject, 先New一个对象占位&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyCell_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;SETLOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_nlocals&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//注意内存地址&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑即, 如果发现当前函数&lt;code&gt;co_cellvars&lt;/code&gt;非空, 即表示存在被内层函数调用的变量, 那么遍历这个&lt;code&gt;co_cellvars&lt;/code&gt;集合, 拿到集合中每个变量名在当前名字空间中的值, 然后放到当前函数的&lt;code&gt;f-&amp;gt;f_localsplus&lt;/code&gt;中.&lt;/p&gt;
&lt;p&gt;这里, 我们可以知道&lt;code&gt;x=5&lt;/code&gt;被放进去了&lt;/p&gt;
&lt;p&gt;为什么放到&lt;code&gt;f-&amp;gt;f_localsplus&lt;/code&gt;中呢?&lt;/p&gt;
&lt;h3 id="kan-kan-pyframeobject"&gt;看看PyFrameObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_frame&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_VAR_HEAD&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_frame&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_back&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* previous frame, or NULL */&lt;/span&gt;
    &lt;span class="n"&gt;PyCodeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* code segment */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_builtins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* builtin symbol table (PyDictObject) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* global symbol table (PyDictObject) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* local symbol table (any mapping) */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;f_valuestack&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* points after the last local */&lt;/span&gt;
    &lt;span class="cm"&gt;/* Next free slot in f_valuestack.  Frame creation sets to f_valuestack.&lt;/span&gt;
&lt;span class="cm"&gt;       Frame evaluation usually NULLs it, but a frame that yields sets it&lt;/span&gt;
&lt;span class="cm"&gt;       to the current stack top. */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;f_stacktop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_trace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;/* Trace function */&lt;/span&gt;

    &lt;span class="cm"&gt;/* If an exception is raised in this frame, the next three are used to&lt;/span&gt;
&lt;span class="cm"&gt;     * record the exception info (if any) originally in the thread state.  See&lt;/span&gt;
&lt;span class="cm"&gt;     * comments before set_exc_info() -- it's not obvious.&lt;/span&gt;
&lt;span class="cm"&gt;     * Invariant:  if _type is NULL, then so are _value and _traceback.&lt;/span&gt;
&lt;span class="cm"&gt;     * Desired invariant:  all three are NULL, or all three are non-NULL.  That&lt;/span&gt;
&lt;span class="cm"&gt;     * one isn't currently true, but "should be".&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_exc_traceback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;PyThreadState&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_tstate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;f_lasti&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* Last instruction if called */&lt;/span&gt;
    &lt;span class="cm"&gt;/* Call PyFrame_GetLineNumber() instead of reading this field&lt;/span&gt;
&lt;span class="cm"&gt;       directly.  As of 2.3 f_lineno is only valid when tracing is&lt;/span&gt;
&lt;span class="cm"&gt;       active (i.e. when f_trace is set).  At other times we use&lt;/span&gt;
&lt;span class="cm"&gt;       PyCode_Addr2Line to calculate the line from the current&lt;/span&gt;
&lt;span class="cm"&gt;       bytecode index. */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;f_lineno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* Current line number */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;f_iblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* index in f_blockstack */&lt;/span&gt;
    &lt;span class="n"&gt;PyTryBlock&lt;/span&gt; &lt;span class="n"&gt;f_blockstack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CO_MAXBLOCKS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="cm"&gt;/* for try and loop blocks */&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f_localsplus&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="cm"&gt;/* locals+stack, dynamically sized */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyFrameObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;code&gt;f_localsplus&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f_localsplus为一个PyObject的指针数组，大小为1。

c语言中, 当申请一个大小超过sizeof(PyFrameObject)的结构体对象时，超过的部分就自动分配给f_localsplus
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建过程&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;call_function&lt;/code&gt;的时候, &lt;code&gt;new&lt;/code&gt;了一个PyFrameObject&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyFrame_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tstate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;PyFrameObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;PyFrame_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyThreadState&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tstate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyCodeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncells&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nfrees&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ncells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;nfrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_freevars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;extras&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_stacksize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_nlocals&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ncells&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="n"&gt;nfrees&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_GC_NewVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyFrameObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyFrame_Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extras&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f_localsplus =&amp;gt; 局部变量 + cell对象 + free对象 + 运行时栈
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因: 因为函数中的局部变量总是固定不变的, 在编译时就能确定局部变量使用的内存空间的位置, 也能确定访问局部变量的字节码应该如何访问内存, 有了这些信息, Python就能借助静态的方法实现局部变量, 而不是动态查找PyDictObject, 提高执行效率&lt;/p&gt;
&lt;p&gt;&lt;img alt="closure" src="/imgs/python-source/python-closure3.png"/&gt;&lt;/p&gt;
&lt;h3 id="shi-li-han-shu-de-f_localsplus"&gt;示例函数的f_localsplus&lt;/h3&gt;
&lt;p&gt;看一下上面赋值用的宏定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;fastlocals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_localsplus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="cp"&gt;#define GETLOCAL(i)     (fastlocals[i])&lt;/span&gt;
  &lt;span class="cp"&gt;#define SETLOCAL(i, value)      do { PyObject *tmp = GETLOCAL(i); \&lt;/span&gt;
&lt;span class="cp"&gt;                                       GETLOCAL(i) = value; \&lt;/span&gt;
&lt;span class="cp"&gt;                                       Py_XDECREF(tmp); } while (0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终得到&lt;/p&gt;
&lt;p&gt;&lt;img alt="closure" src="/imgs/python-source/python-closure4.png"/&gt;&lt;/p&gt;
&lt;p&gt;接下去呢? &lt;code&gt;CALL_FUNCTION&lt;/code&gt;最后怎么处理将cell传入嵌套函数?&lt;/p&gt;
&lt;h3 id="chuan-di"&gt;传递&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CALL_FUNCTION&lt;/code&gt; 完成&lt;code&gt;new&lt;/code&gt;一个&lt;code&gt;PyFrameObject&lt;/code&gt;之后,&lt;/p&gt;
&lt;p&gt;最终执行这个frame&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;retval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyEval_EvalFrameEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PyEval_EvalFrameEx&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="nf"&gt;PyEval_EvalFrameEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyFrameObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;throwflag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;fastlocals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_localsplus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;freevars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_localsplus&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_nlocals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;此时涉及&lt;/span&gt;&lt;span class="n"&gt;op_code&lt;/span&gt;&lt;span class="err"&gt;的执行了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看一下dis的结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;

  &lt;span class="mi"&gt;5&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;BUILD_TUPLE&lt;/span&gt;              &lt;span class="mi"&gt;1&lt;/span&gt;
              &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10c9cec30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="s2"&gt;"a.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;MAKE_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;STORE_FAST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="mi"&gt;7&lt;/span&gt;          &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;LOAD_FAST&lt;/span&gt;                &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先&lt;code&gt;LOAD_CLOSURE 0&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;LOAD_CLOSURE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;freevars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oparg&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
              &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;PUSH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;入栈&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;此时得到一个&lt;/span&gt;&lt;span class="n"&gt;PyCellObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;指向&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;'x'&lt;/span&gt;

&lt;span class="n"&gt;LOAD_CLOSURE&lt;/span&gt; &lt;span class="err"&gt;在编译时会根据嵌套函数中&lt;/span&gt; &lt;span class="n"&gt;co_freevars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;决定了取得参数位置和个数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, &lt;code&gt;BUILD_TUPLE&lt;/code&gt;, 将cell对象打包成tuple, 得到&lt;code&gt;('x', )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后, 开始, 载入嵌套函数&lt;code&gt;do_add&lt;/code&gt;, 入栈&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;MAKE_CLOSURE&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;MAKE_CLOSURE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POP&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cm"&gt;/* code object */&lt;/span&gt;  &lt;span class="c1"&gt;// do_add函数&lt;/span&gt;
              &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyFunction_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//绑定global名字空间&lt;/span&gt;
              &lt;span class="c1"&gt;// 到这里, 得到一个PyFunctionObject&lt;/span&gt;

              &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POP&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   &lt;span class="c1"&gt;// 得到tuple, ('x', )&lt;/span&gt;

                  &lt;span class="c1"&gt;// 注意这里&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyFunction_SetClosure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="cm"&gt;/* Can't happen unless bytecode is corrupt. */&lt;/span&gt;
                      &lt;span class="n"&gt;why&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WHY_EXCEPTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;......&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来关注一下 &lt;code&gt;PyFunction_SetClosure&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;PyFunction_SetClosure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;PyFunctionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;func_closure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PyFunctionObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;func_closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 注意这里&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即&lt;code&gt;do_add&lt;/code&gt;的 &lt;code&gt;PyFunctionObject&lt;/code&gt;的&lt;code&gt;func_closure&lt;/code&gt;指向一个tuple&lt;/p&gt;
&lt;p&gt;注意: 这时候, 外层变量已经固定下来了!!!!!!&lt;/p&gt;
&lt;h3 id="ran-hou-zai-qian-tao-han-shu-bei-diao-yong-de-shi-hou"&gt;然后, 在嵌套函数被调用的时候&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oparg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pp_stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyEval_EvalCodeEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pp_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pp_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;PyFunction_GET_CLOSURE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看下&lt;code&gt;PyFunction_GET_CLOSURE&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cp"&gt;#define PyFunction_GET_CLOSURE(func) \&lt;/span&gt;
&lt;span class="cp"&gt;      (((PyFunctionObject *)func) -&amp;gt; func_closure)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 进入 &lt;code&gt;PyEval_EvalCodeEx&lt;/code&gt;, 注意这里的&lt;code&gt;closure&lt;/code&gt;参数即上一步取出来的&lt;code&gt;func_closure&lt;/code&gt;, 即外层函数传进来的tuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="nf"&gt;PyEval_EvalCodeEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCodeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argcount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;kwcount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defcount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;......&lt;/span&gt;
      &lt;span class="c1"&gt;//  嵌套函数do_add, 使用到了外层函数的变量, 所以co-&amp;gt;co_freevars非空, 这里得到 ('x', )&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_freevars&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_freevars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// 顺序是一致的&lt;/span&gt;
              &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_ITEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="c1"&gt;// 放到freevars里面, 编译时已经确定了顺序&lt;/span&gt;
              &lt;span class="c1"&gt;// 在上一步多LOAD_CLOSURE =&amp;gt; tuple 已经保证了顺序&lt;/span&gt;
              &lt;span class="n"&gt;freevars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;co_cellvars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zui-hou-zai-lai-kan-yi-ge-bi-bao-de-dis"&gt;最后, 再来看一个闭包的dis&lt;/h3&gt;
&lt;p&gt;注意&lt;code&gt;BUILD_TUPLE&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dis结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;BUILD_TUPLE&lt;/span&gt;              &lt;span class="mi"&gt;1&lt;/span&gt;
              &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10560dc30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"a.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;MAKE_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;STORE_FAST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="mi"&gt;21&lt;/span&gt;          &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;LOAD_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;BUILD_TUPLE&lt;/span&gt;              &lt;span class="mi"&gt;1&lt;/span&gt;
             &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;do_add2&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10560d8b0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"a.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;MAKE_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="n"&gt;STORE_FAST&lt;/span&gt;               &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_add2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="mi"&gt;24&lt;/span&gt;          &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;LOAD_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="n"&gt;LOAD_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="n"&gt;BUILD_TUPLE&lt;/span&gt;              &lt;span class="mi"&gt;2&lt;/span&gt;
             &lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;do_add3&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10560e3b0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"a.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="n"&gt;MAKE_CLOSURE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="n"&gt;STORE_FAST&lt;/span&gt;               &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_add3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="mi"&gt;32&lt;/span&gt;          &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;LOAD_FAST&lt;/span&gt;                &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python源码阅读-内存管理机制(二)</title><link href="http://www.wklken.me/posts/2015/08/29/python-source-memory-2.html" rel="alternate"></link><published>2015-08-29T20:54:00+08:00</published><updated>2015-08-29T20:54:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-2.html</id><summary type="html">&lt;h2 id="python-de-nei-cun-fen-pei-ce-lue"&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3 id="arena"&gt;arena&lt;/h3&gt;
&lt;p&gt;arena: 多个pool聚合的结果&lt;/p&gt;
&lt;h4 id="arena-size"&gt;arena size&lt;/h4&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;code&gt;obmalloc.c&lt;/code&gt;中代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     &lt;/span&gt;&lt;span class="cm"&gt;/* 256KB */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="arena-jie-gou"&gt;arena 结构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Record keeping for arenas. */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* The address of the arena, as returned by malloc.  Note that 0&lt;/span&gt;
&lt;span class="cm"&gt;     * will never …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="python-de-nei-cun-fen-pei-ce-lue"&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3 id="arena"&gt;arena&lt;/h3&gt;
&lt;p&gt;arena: 多个pool聚合的结果&lt;/p&gt;
&lt;h4 id="arena-size"&gt;arena size&lt;/h4&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;code&gt;obmalloc.c&lt;/code&gt;中代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     &lt;/span&gt;&lt;span class="cm"&gt;/* 256KB */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="arena-jie-gou"&gt;arena 结构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Record keeping for arenas. */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* The address of the arena, as returned by malloc.  Note that 0&lt;/span&gt;
&lt;span class="cm"&gt;     * will never be returned by a successful malloc, and is used&lt;/span&gt;
&lt;span class="cm"&gt;     * here to mark an arena_object that doesn't correspond to an&lt;/span&gt;
&lt;span class="cm"&gt;     * allocated arena.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;uptr&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Pool-aligned pointer to the next pool to be carved off. */&lt;/span&gt;
    &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pool_address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* The number of available pools in the arena:  free pools + never-&lt;/span&gt;
&lt;span class="cm"&gt;     * allocated pools.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;nfreepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* The total number of pools in the arena, whether or not available. */&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;ntotalpools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Singly-linked list of available pools. */&lt;/span&gt;
    &lt;span class="c1"&gt;// 单链表, 可用pool集合&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;freepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Whenever this arena_object is not associated with an allocated&lt;/span&gt;
&lt;span class="cm"&gt;     * arena, the nextarena member is used to link all unassociated&lt;/span&gt;
&lt;span class="cm"&gt;     * arena_objects in the singly-linked `unused_arena_objects` list.&lt;/span&gt;
&lt;span class="cm"&gt;     * The prevarena member is unused in this case.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * When this arena_object is associated with an allocated arena&lt;/span&gt;
&lt;span class="cm"&gt;     * with at least one available pool, both members are used in the&lt;/span&gt;
&lt;span class="cm"&gt;     * doubly-linked `usable_arenas` list, which is maintained in&lt;/span&gt;
&lt;span class="cm"&gt;     * increasing order of `nfreepools` values.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * Else this arena_object is associated with an allocated arena&lt;/span&gt;
&lt;span class="cm"&gt;     * all of whose pools are in use.  `nextarena` and `prevarena`&lt;/span&gt;
&lt;span class="cm"&gt;     * are both meaningless in this case.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="c1"&gt;// arena链表&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;nextarena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;prevarena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;arena_object的作用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 与其他arena连接, 组成双向链表
2. 维护arena中可用的pool, 单链表
3. 其他信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pool_header&lt;/code&gt; 与 &lt;code&gt;arena_object&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pool_header和管理的blocks内存是一块连续的内存 =&amp;gt; pool_header被申请时, 其管理的block集合的内存一并被申请
arena_object和其管理的内存是分离的 =&amp;gt; arena_object被申请时, 其管理的pool集合的内存没有被申请, 而是在某一时刻建立的联系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-arena.png"/&gt;&lt;/p&gt;
&lt;h4 id="arenade-liang-chong-zhuang-tai"&gt;arena的两种状态&lt;/h4&gt;
&lt;p&gt;arena存在两种状态: 未使用(没有建立联系)/可用(建立了联系)&lt;/p&gt;
&lt;p&gt;全局由两个链表维护着&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* The head of the singly-linked, NULL-terminated list of available&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="c1"&gt;// 单链表&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* The head of the doubly-linked, NULL-terminated at each end, list of&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects associated with arenas that have pools available.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="c1"&gt;// 双向链表&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="arenade-chu-shi-hua"&gt;arena的初始化&lt;/h4&gt;
&lt;p&gt;首先, 来看下初始化相关的一些参数定义&lt;/p&gt;
&lt;p&gt;代码&lt;code&gt;obmalloc.c&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Array of objects used to track chunks of memory (arenas). */&lt;/span&gt;
&lt;span class="c1"&gt;// arena_object 数组&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Number of slots currently allocated in the `arenas` vector. */&lt;/span&gt;
&lt;span class="c1"&gt;// 当前arenas中管理的arena_object的个数, 初始化时=0&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* How many arena_objects do we initially allocate?&lt;/span&gt;
&lt;span class="cm"&gt; * 16 = can allocate 16 arenas = 16 * ARENA_SIZE = 4MB before growing the&lt;/span&gt;
&lt;span class="cm"&gt; * `arenas` vector.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="c1"&gt;// 初始化时申请的arena_object个数&lt;/span&gt;
&lt;span class="cp"&gt;#define INITIAL_ARENA_OBJECTS 16&lt;/span&gt;

&lt;span class="cm"&gt;/* Number of arenas allocated that haven't been free()'d. */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;narenas_currently_allocated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="cm"&gt;/* The head of the singly-linked, NULL-terminated list of available&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="c1"&gt;// 未使用状态arena的单链表&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* The head of the doubly-linked, NULL-terminated at each end, list of&lt;/span&gt;
&lt;span class="cm"&gt; * arena_objects associated with arenas that have pools available.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="c1"&gt;// 可用状态arena的双向链表&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 看下&lt;code&gt;obmalloc.c&lt;/code&gt;中&lt;code&gt;arena&lt;/code&gt;初始化的代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Allocate a new arena.  If we run out of memory, return NULL.  Else&lt;/span&gt;
&lt;span class="cm"&gt; * allocate a new arena, and return the address of an arena_object&lt;/span&gt;
&lt;span class="cm"&gt; * describing the new arena.  It's expected that the caller will set&lt;/span&gt;
&lt;span class="cm"&gt; * `usable_arenas` to the return value.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;new_arena&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;excess&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* number of bytes above pool alignment */&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 判断是否需要扩充"未使用"的arena_object列表&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;numarenas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/* Double the number of arena objects on each allocation.&lt;/span&gt;
&lt;span class="cm"&gt;         * Note that it's possible for `numarenas` to overflow.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="c1"&gt;// 确定需要申请的个数, 首次初始化, 16, 之后每次翻倍&lt;/span&gt;
        &lt;span class="n"&gt;numarenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INITIAL_ARENA_OBJECTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numarenas&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="cm"&gt;/* overflow */&lt;/span&gt;  &lt;span class="c1"&gt;//溢出了&lt;/span&gt;

        &lt;span class="p"&gt;....&lt;/span&gt;

        &lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numarenas&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// 申请内存&lt;/span&gt;
        &lt;span class="n"&gt;arenaobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arenaobj&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;arenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/* We might need to fix pointers that were copied.  However,&lt;/span&gt;
&lt;span class="cm"&gt;         * new_arena only gets called when all the pages in the&lt;/span&gt;
&lt;span class="cm"&gt;         * previous arenas are full.  Thus, there are *no* pointers&lt;/span&gt;
&lt;span class="cm"&gt;         * into the old array. Thus, we don't have to worry about&lt;/span&gt;
&lt;span class="cm"&gt;         * invalid pointers.  Just to be sure, some asserts:&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 初始化&lt;/span&gt;
        &lt;span class="cm"&gt;/* Put the new arenas on the unused_arena_objects list. */&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numarenas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;/* mark as unassociated */&lt;/span&gt;
            &lt;span class="c1"&gt;// 新申请的一律为0, 标识着这个arena处于"未使用"&lt;/span&gt;
            &lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;numarenas&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
                                   &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 将其放入unused_arena_objects链表中&lt;/span&gt;
        &lt;span class="c1"&gt;// unused_arena_objects 为新分配内存空间的开头&lt;/span&gt;
        &lt;span class="cm"&gt;/* Update globals. */&lt;/span&gt;
        &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxarenas&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// 更新数量&lt;/span&gt;
        &lt;span class="n"&gt;maxarenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numarenas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* Take the next available arena object off the head of the list. */&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 从unused_arena_objects中, 获取一个未使用的object&lt;/span&gt;
    &lt;span class="n"&gt;arenaobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 更新链表&lt;/span&gt;

    &lt;span class="c1"&gt;// 开始处理这个 arenaobject&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 申请内存, 256KB, 内存地址赋值给arena的address. 这块内存可用&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef ARENAS_USE_MMAP&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ARENA_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;MAP_PRIVATE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;MAP_ANONYMOUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAP_FAILED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARENA_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* The allocation failed: return NULL after putting the&lt;/span&gt;
&lt;span class="cm"&gt;         * arenaobj back.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;narenas_currently_allocated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 设置pool集合相关信息&lt;/span&gt;
    &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freepools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 设置为NULL, 只有在释放一个pool的时候才有用&lt;/span&gt;
    &lt;span class="cm"&gt;/* pool_address &amp;lt;- first pool-aligned address in the arena&lt;/span&gt;
&lt;span class="cm"&gt;       nfreepools &amp;lt;- number of whole pools that fit after alignment */&lt;/span&gt;
    &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pool_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ARENA_SIZE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POOL_SIZE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ARENA_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 将pool的起始地址调整为系统页的边界&lt;/span&gt;
    &lt;span class="c1"&gt;// 申请到 256KB, 放弃了一些内存, 而将可使用的内存边界pool_address调整到了与系统页对齐&lt;/span&gt;
    &lt;span class="n"&gt;excess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE_MASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;excess&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pool_address&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;excess&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ntotalpools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arenaobj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图示: 初始化arenas数组, 初始化后的所有arena都在&lt;code&gt;unused_arena_objects&lt;/code&gt;单链表里面&lt;/p&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-arena2.png"/&gt;&lt;/p&gt;
&lt;p&gt;图示: 从arenas取一个arena进行初始化&lt;/p&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-arena3.png"/&gt;&lt;/p&gt;
&lt;h4 id="mei-you-ke-yong-de-arena"&gt;没有可用的arena?&lt;/h4&gt;
&lt;p&gt;此时&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;// 判断成立&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unused_arena_objects&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;....&lt;/span&gt;
        &lt;span class="c1"&gt;// 确定需要申请的个数, 首次初始化, 16, 之后每次翻倍&lt;/span&gt;
        &lt;span class="n"&gt;numarenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;maxarenas&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INITIAL_ARENA_OBJECTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 假设第一次分配了16个, 发现没有arena之后, 第二次处理结果: &lt;code&gt;numarenas = 32&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, 数组扩大了一倍&lt;/p&gt;
&lt;h4 id="arenafen-pei"&gt;arena分配&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;了一个全新的 arena之后,&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="nf"&gt;PyObject_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 刚开始没有可用的arena&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// new一个, 作为双向链表的表头&lt;/span&gt;
              &lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_arena&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                  &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;

              &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                  &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevarena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

           &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="p"&gt;.......&lt;/span&gt;

          &lt;span class="c1"&gt;// 从arena中获取一个pool&lt;/span&gt;
          &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poolp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pool_address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                 &lt;span class="n"&gt;ARENA_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arenaindex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arenaindex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;szidx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DUMMY_SIZE_IDX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="c1"&gt;// 更新 pool_address 向下一个节点&lt;/span&gt;
          &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pool_address&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="c1"&gt;// 可用节点数量-1&lt;/span&gt;
          &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图示: 从全新的arena中获取一个pool&lt;/p&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-arena4.png"/&gt;&lt;/p&gt;
&lt;p&gt;假设arena是旧的, 怎么分配的pool&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;是何方神圣?&lt;/p&gt;
&lt;p&gt;当arena中一整块pool被释放的时候&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="nf"&gt;PyObject_Free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;


              &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ao&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;nf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* ao-&amp;gt;nfreepools */&lt;/span&gt;

              &lt;span class="cm"&gt;/* Link the pool to freepools.  This is a singly-linked&lt;/span&gt;
&lt;span class="cm"&gt;               * list, and pool-&amp;gt;prevpool isn't used there.&lt;/span&gt;
&lt;span class="cm"&gt;              */&lt;/span&gt;
              &lt;span class="n"&gt;ao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;arenas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arenaindex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ao&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;ao&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freepools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;nf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ao&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说, 在pool整块被释放的时候, 会将pool加入到&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;作为单链表的表头, 然后, 在从非全新arena中分配pool时, 优先从&lt;code&gt;arena-&amp;gt;freepools&lt;/code&gt;里面取, 如果取不到, 再从arena内存块里面获取&lt;/p&gt;
&lt;p&gt;图示&lt;/p&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-arena5.png"/&gt;&lt;/p&gt;
&lt;h4 id="yi-ge-arenaman-liao-zhi-hou-ni"&gt;一个arena满了之后呢&lt;/h4&gt;
&lt;p&gt;很自然, 从下一个arena中获取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="nf"&gt;PyObject_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;


          &lt;span class="c1"&gt;// 当发现用完了最后一个pool!!!!!!!!!!!&lt;/span&gt;
          &lt;span class="c1"&gt;// nfreepools = 0&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nfreepools&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                     &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevarena&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;
                     &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="cm"&gt;/* Unlink the arena:  it is completely allocated. */&lt;/span&gt;

              &lt;span class="c1"&gt;// 找到下一个节点!&lt;/span&gt;
              &lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextarena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="c1"&gt;// 右下一个&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevarena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 更新下一个节点的prevarens&lt;/span&gt;
                  &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usable_arenas&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="c1"&gt;// 没有下一个, 此时 usable_arenas = NULL, 下次进行内存分配的时候, 就会从arenas数组中取一个&lt;/span&gt;

          &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 这里有个逻辑, 就是每分配一个pool, 就检查是不是用到了最后一个, 如果是, 需要变更&lt;code&gt;usable_arenas&lt;/code&gt;到下一个可用的节点, 如果没有可用的, 那么下次进行内存分配的时候, 会判定从arenas数组中取一个&lt;/p&gt;
&lt;h4 id="arenahui-shou"&gt;arena回收&lt;/h4&gt;
&lt;p&gt;内存分配和回收最小单位是block, 当一个block被回收的时候, 可能触发pool被回收, pool被回收, 将会触发arena的回收机制&lt;/p&gt;
&lt;p&gt;四种情况&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. arena中所有pool都是闲置的(empty), 将arena内存释放, 返回给操作系统
2. 如果arena中之前所有的pool都是占用的(used), 现在释放了一个pool(empty), 需要将 arena加入到usable_arenas, 会加入链表表头
3. 如果arena中empty的pool个数n, 则从useable_arenas开始寻找可以插入的位置. 将arena插入. (useable_arenas是一个有序链表, 按empty pool的个数, 保证empty pool数量越多, 被使用的几率越小, 最终被整体释放的机会越大)
4. 其他情况, 不对arena 进行处理
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体可以看&lt;code&gt;PyObject_Free&lt;/code&gt;的代码&lt;/p&gt;
&lt;h3 id="nei-cun-fen-pei-bu-zou_1"&gt;内存分配步骤&lt;/h3&gt;
&lt;p&gt;好的, 到这里, 我们已经知道了block和pool的关系(包括pool怎么管理block的), 以及arena和pool的关系(怎么从arena中拉到可用的pool)&lt;/p&gt;
&lt;p&gt;那么, 在分析&lt;code&gt;PyObject_Malloc(size_t nbytes)&lt;/code&gt;如何进行内存分配的时候, 我们就刨除掉这些管理代码&lt;/p&gt;
&lt;p&gt;关注: 如何寻找得到一块可用的nbytes的block内存&lt;/p&gt;
&lt;p&gt;其实代码那么多, 寻址得到对应的block也就这么几行代码, 其他代码都是pool没有, 找arena, 申请arena, arena没有, 找arenas, 最终的到一块pool, 初始化, 返回第一个block&lt;/p&gt;
&lt;p&gt;如果有的情况, 用现成的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="err"&gt;可用&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="err"&gt;没满&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;取一个&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="err"&gt;返回&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="err"&gt;满了&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;从下一个&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="err"&gt;取一个&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="err"&gt;返回&lt;/span&gt;
&lt;span class="err"&gt;否则&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;获取&lt;/span&gt;&lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;从里面初始化一个&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;拿到第一个&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面这个判断逻辑来看, 内存分配其实主要操作的是pool, 跟arena并不是基本的操作单元(只是用来管理pool的)&lt;/p&gt;
&lt;p&gt;结论: 进行内存分配和销毁, 所有操作都是在pool上进行的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;usedpools&lt;/code&gt; 是什么鬼? 其实是可用pool缓冲池, 后面说&lt;/p&gt;
&lt;h3 id="nei-cun-chi"&gt;内存池&lt;/h3&gt;
&lt;h4 id="arena-nei-cun-chi-de-da-xiao"&gt;arena 内存池的大小&lt;/h4&gt;
&lt;p&gt;取决于用户, Python提供的编译符号, 用于决定是否控制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;obmalloc.c&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef WITH_MEMORY_LIMITS&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef SMALL_MEMORY_LIMIT&lt;/span&gt;
&lt;span class="cp"&gt;#define SMALL_MEMORY_LIMIT      (64 * 1024 * 1024)      &lt;/span&gt;&lt;span class="cm"&gt;/* 64 MB -- more? */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef WITH_MEMORY_LIMITS&lt;/span&gt;
&lt;span class="cp"&gt;#define MAX_ARENAS              (SMALL_MEMORY_LIMIT / ARENA_SIZE)&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体使用中, python并不直接与arenas和arena打交道, 当Python申请内存时, 最基本的操作单元并不是arena, 而是pool&lt;/p&gt;
&lt;p&gt;问题: pool中所有block的size一样, 但是在arena中, 每个pool的size都可能不一样, 那么最终这些pool是怎么维护的? 怎么根据大小找到需要的block所在的pool? =&amp;gt; &lt;code&gt;usedpools&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="poolzai-nei-cun-chi-zhong-de-san-chong-zhuang-tai"&gt;pool在内存池中的三种状态&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. used状态: pool中至少有一个block已经被使用, 并且至少有一个block未被使用. 这种状态的pool受控于Python内部维护的usedpool数组

2. full状态: pool中所有的block都已经被使用, 这种状态的pool在arena中, 但不在arena的freepools链表中
处于full的pool各自独立, 不会被链表维护起来

3. empty状态: pool中所有block都未被使用, 处于这个状态的pool的集合通过其pool_header中的nextpool构成一个链表, 链表的表头是arena_object中的freepools
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="usedpools"&gt;usedpools&lt;/h4&gt;
&lt;p&gt;usedpools数组: 维护着所有处于used状态的pool, 当申请内存的时候, 会通过usedpools寻找到一块可用的(处于used状态的)pool, 从中分配一个block&lt;/p&gt;
&lt;p&gt;结构:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cp"&gt;#define SMALL_REQUEST_THRESHOLD 512&lt;/span&gt;
  &lt;span class="c1"&gt;// 512/8 = 64&lt;/span&gt;
  &lt;span class="cp"&gt;#define NB_SMALL_SIZE_CLASSES   (SMALL_REQUEST_THRESHOLD / ALIGNMENT)&lt;/span&gt;

  &lt;span class="cp"&gt;#define PTA(x)  ((poolp )((uchar *)&amp;amp;(usedpools[2*(x)]) - 2*sizeof(block *)))&lt;/span&gt;
  &lt;span class="cp"&gt;#define PT(x)   PTA(x), PTA(x)&lt;/span&gt;

  &lt;span class="c1"&gt;// 2 * ((64 + 7) / 8) * 8 = 128, 大小为128的数组&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;poolp&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;NB_SMALL_SIZE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 8&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 16&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 24&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 32&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 40&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 48&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 56&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cp"&gt;#if NB_SMALL_SIZE_CLASSES &amp;gt; 64&lt;/span&gt;
  &lt;span class="cp"&gt;#error "NB_SMALL_SIZE_CLASSES should be less than 64"&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 64 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 56 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 48 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 40 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 32 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 24 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt; 16 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* NB_SMALL_SIZE_CLASSES &amp;gt;  8 */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="err"&gt;即&lt;/span&gt;

  &lt;span class="c1"&gt;// 得到usedpools数组&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;poolp&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="p"&gt;....&lt;/span&gt;
   &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解开看(&lt;code&gt;obmalloc.c&lt;/code&gt;)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* Pool for small blocks. */&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* number of allocated blocks    */&lt;/span&gt;
      &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="cm"&gt;/* pool's free list head         */&lt;/span&gt;
      &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* next pool of this size class  */&lt;/span&gt;
      &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* previous pool       ""        */&lt;/span&gt;
      &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;arenaindex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="cm"&gt;/* index into arenas of base adr */&lt;/span&gt;
      &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;szidx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                         &lt;span class="cm"&gt;/* block size class index        */&lt;/span&gt;
      &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;nextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="cm"&gt;/* bytes to virgin block         */&lt;/span&gt;
      &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;maxnextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="cm"&gt;/* largest valid nextoffset      */&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;poolp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;poolp&lt;/span&gt; &lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PTA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;poolp&lt;/span&gt; &lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;



  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了看懂这步的trick, 心好累&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;直接上图&lt;/p&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-usedpool.png"/&gt;&lt;/p&gt;
&lt;h4 id="newyi-ge-poolshi-wei-hu"&gt;new一个pool时维护&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt;获得的情况, 其实就是将刚刚从arena中获取的pool加入到 usedpools 对应的双向链表中, 然后初始化, 然后返回block&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         &lt;span class="nl"&gt;init_pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="cm"&gt;/* Frontlink to used pools. */&lt;/span&gt;

              &lt;span class="c1"&gt;// 1. 获取得到usedpools链表头&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="cm"&gt;/* == prev */&lt;/span&gt;

              &lt;span class="c1"&gt;// 2. 将新的pool加入到双向链表&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

              &lt;span class="c1"&gt;// 3. 后面的是具体pool和block的了&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;szidx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="cm"&gt;/* Luckily, this pool last contained blocks&lt;/span&gt;
&lt;span class="cm"&gt;                   * of the same size class, so its header&lt;/span&gt;
&lt;span class="cm"&gt;                   * and free list are already initialized.&lt;/span&gt;
&lt;span class="cm"&gt;                   */&lt;/span&gt;
                  &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;               * Initialize the pool header, set up the free list to&lt;/span&gt;
&lt;span class="cm"&gt;               * contain just the second block, and return the first&lt;/span&gt;
&lt;span class="cm"&gt;               * block.&lt;/span&gt;
&lt;span class="cm"&gt;               */&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;szidx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INDEX2SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;POOL_OVERHEAD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POOL_OVERHEAD&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;maxnextoffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// here&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="cong-xian-you-poolzhong-huo-qu-block"&gt;从现有pool中获取block&lt;/h4&gt;
&lt;p&gt;从现有的pool, 其实就是 usedpools得到双向链表头部, 判断是不是空链表, 不是的话代表有可用的pool, 直接从里面获取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SMALL_REQUEST_THRESHOLD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;LOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;           * Most frequent paths first&lt;/span&gt;
&lt;span class="cm"&gt;           */&lt;/span&gt;
          &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ALIGNMENT_SHIFT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

          &lt;span class="c1"&gt;// 注意这里的判断, pool != pool-&amp;gt; nextpool 表示得到的链表不是空的&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;               * There is a used pool for this size class.&lt;/span&gt;
&lt;span class="cm"&gt;               * Pick up the head block of its free list.&lt;/span&gt;
&lt;span class="cm"&gt;               */&lt;/span&gt;
              &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;               * Reached the end of the free list, try to extend it.&lt;/span&gt;
&lt;span class="cm"&gt;               */&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;maxnextoffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="cm"&gt;/* There is room for another block. */&lt;/span&gt;
                  &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;INDEX2SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="cm"&gt;/* Pool is full, unlink from used pools. */&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// here&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="quan-ju-jie-gou"&gt;全局结构&lt;/h4&gt;
&lt;p&gt;&lt;img alt="arena" src="/imgs/python-source/python-memory-usedpool2.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;先这样吧, Python中整个内存池基本结构和机制大概如此, 是不是发现有好多数组/链表等等, 在分配/回收上处理下做成各种池.....&lt;/p&gt;
&lt;p&gt;后面还有内存相关的就是垃圾收集了, 后面再说了吧&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-08-29&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python源码阅读-内存管理机制(一)</title><link href="http://www.wklken.me/posts/2015/08/29/python-source-memory-1.html" rel="alternate"></link><published>2015-08-29T00:00:00+08:00</published><updated>2015-08-29T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-1.html</id><summary type="html">&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;基本阅读完了, 只是没时间梳理, 趁着这今天时间比较空&lt;/p&gt;
&lt;p&gt;逐步梳理, 发上来......也算是小结下, 要开始准备简历找工作了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这篇略长, 带很多图, 所以一分为二&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-nei-cun-guan-li-jia-gou"&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3 id="ji-ben-fen-ceng"&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python's object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python's raw memory allocator (PyMem_ API …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;基本阅读完了, 只是没时间梳理, 趁着这今天时间比较空&lt;/p&gt;
&lt;p&gt;逐步梳理, 发上来......也算是小结下, 要开始准备简历找工作了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这篇略长, 带很多图, 所以一分为二&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-nei-cun-guan-li-jia-gou"&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3 id="ji-ben-fen-ceng"&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python's object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python's raw memory allocator (PyMem_ API)          ]   |
+1 | &amp;lt;----- Python memory (under PyMem manager's control) ------&amp;gt; |   |
    __________________________________________________________________
   [    Underlying general-purpose allocator (ex: C library malloc)   ]
 0 | &amp;lt;------ Virtual memory allocated for the python process -------&amp;gt; |

   =========================================================================
    _______________________________________________________________________
   [                OS-specific Virtual Memory Manager (VMM)               ]
-1 | &amp;lt;--- Kernel dynamic storage allocation &amp;amp; management (page-based) ---&amp;gt; |
    __________________________________   __________________________________
   [                                  ] [                                  ]
-2 | &amp;lt;-- Physical memory: ROM/RAM --&amp;gt; | | &amp;lt;-- Secondary storage (swap) --&amp;gt; |
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;layer 3: Object-specific memory(int/dict/list/string....)
         Python 实现并维护
         更高抽象层次的内存管理策略, 主要是各类特定对象的缓冲池机制. 具体见前面几篇涉及的内存分配机制

layer 2: Python's object allocator
         Python 实现并维护
         实现了创建/销毁Python对象的接口(PyObject_New/Del), 涉及对象参数/引用计数等

layer 1: Python's raw memory allocator (PyMem_ API)
         Python 实现并维护, 包装了第0层的内存管理接口, 提供统一的raw memory管理接口
         封装的原因: 不同操作系统 C 行为不一定一致, 保证可移植性, 相同语义相同行为

layer 0: Underlying general-purpose allocator (ex: C library malloc)
         操作系统提供的内存管理接口, 由操作系统实现并管理, Python不能干涉这一层的行为
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三层&lt;code&gt;layer 3&lt;/code&gt;前面已经介绍过了, 几乎每种常用的数据类型都伴有一套缓冲池机制.&lt;/p&gt;
&lt;p&gt;在这里, 我们关注的是&lt;code&gt;layer 2/1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简要介绍下&lt;code&gt;layer 1&lt;/code&gt;, 然后重点关注&lt;code&gt;layer 2&lt;/code&gt;, 这才是重点&lt;/p&gt;
&lt;h3 id="layer-1-pymem_-api"&gt;layer 1: PyMem_ API&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PyMem_ API&lt;/code&gt;是对操作系统内存管理接口进行的封装&lt;/p&gt;
&lt;p&gt;查看&lt;code&gt;pymem.h&lt;/code&gt;可以看到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Raw memory interface&lt;/span&gt;
&lt;span class="c1"&gt;// 这里存在三个宏定义, 宏可以避免一次函数调用的开销, 提高运行效率&lt;/span&gt;
&lt;span class="c1"&gt;// 不允许非配空间大小为0的内存空间&lt;/span&gt;
&lt;span class="cp"&gt;#define PyMem_MALLOC(n)     ((size_t)(n) &amp;gt; (size_t)PY_SSIZE_T_MAX ? NULL \&lt;/span&gt;
&lt;span class="cp"&gt;                : malloc((n) ? (n) : 1))&lt;/span&gt;


&lt;span class="cp"&gt;#define PyMem_REALLOC(p, n) ((size_t)(n) &amp;gt; (size_t)PY_SSIZE_T_MAX  ? NULL \&lt;/span&gt;
&lt;span class="cp"&gt;                : realloc((p), (n) ? (n) : 1))&lt;/span&gt;
&lt;span class="cp"&gt;#define PyMem_FREE      free&lt;/span&gt;

&lt;span class="c1"&gt;// 这里做了三个函数的声明, 平台独立的 malloc/realloc/free&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyMem_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyMem_Realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyMem_Free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ============================================================&lt;/span&gt;

&lt;span class="c1"&gt;// Type-oriented memory interface&lt;/span&gt;
&lt;span class="c1"&gt;// 这里还有三个类型相关的内存接口, 批量分配/重分配 n 个 类型为 type内存&lt;/span&gt;
&lt;span class="cp"&gt;#define PyMem_New(type, n) \&lt;/span&gt;
&lt;span class="cp"&gt;  ( ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :  \&lt;/span&gt;
&lt;span class="cp"&gt;    ( (type *) PyMem_Malloc((n) * sizeof(type)) ) )&lt;/span&gt;
&lt;span class="cp"&gt;#define PyMem_NEW(type, n) \&lt;/span&gt;
&lt;span class="cp"&gt;  ( ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :  \&lt;/span&gt;
&lt;span class="cp"&gt;    ( (type *) PyMem_MALLOC((n) * sizeof(type)) ) )&lt;/span&gt;

&lt;span class="cp"&gt;#define PyMem_Resize(p, type, n) \&lt;/span&gt;
&lt;span class="cp"&gt;  ( (p) = ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    \&lt;/span&gt;
&lt;span class="cp"&gt;    (type *) PyMem_Realloc((p), (n) * sizeof(type)) )&lt;/span&gt;
&lt;span class="cp"&gt;#define PyMem_RESIZE(p, type, n) \&lt;/span&gt;
&lt;span class="cp"&gt;  ( (p) = ((size_t)(n) &amp;gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    \&lt;/span&gt;
&lt;span class="cp"&gt;    (type *) PyMem_REALLOC((p), (n) * sizeof(type)) )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后&lt;code&gt;object.c&lt;/code&gt;中, 我们关注&lt;code&gt;实现&lt;/code&gt;, 三个&lt;code&gt;实现&lt;/code&gt;的函数调用了对应的宏&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 使用 C 写Python扩展模块时使用函数而不是对应的宏&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyMem_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyMem_MALLOC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyMem_Realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyMem_REALLOC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;PyMem_Free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyMem_FREE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些接口都相对简单&lt;/p&gt;
&lt;p&gt;好了, 结束, 开始关注&lt;code&gt;layer 2: Python's object allocator&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="python-de-nei-cun-fen-pei-ce-lue_1"&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;p&gt;先来看&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;中的一段注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * "Memory management is where the rubber meets the road -- if we do the wrong&lt;/span&gt;
&lt;span class="cm"&gt; * thing at any level, the results will not be good. And if we don't make the&lt;/span&gt;
&lt;span class="cm"&gt; * levels work well together, we are in serious trouble." (1)&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * (1) Paul R. Wilson, Mark S. Johnstone, Michael Neely, and David Boles,&lt;/span&gt;
&lt;span class="cm"&gt; *    "Dynamic Storage Allocation: A Survey and Critical Review",&lt;/span&gt;
&lt;span class="cm"&gt; *    in Proc. 1995 Int'l. Workshop on Memory Management, September 1995.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python引入了内存池机制, 用于管理对小块内存的申请和释放&lt;/p&gt;
&lt;p&gt;逻辑&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 如果要分配的内存空间大于 SMALL_REQUEST_THRESHOLD bytes(512 bytes), 将直接使用layer 1的内存分配接口进行分配
2. 否则, 使用不同的block来满足分配需求
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个小块内存池可以视为一个层次结构&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 内存池(概念上的, 标识Python对于整个小块内存分配和释放的内存管理机制)
2. arena
3. pool
4. block
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="block"&gt;block&lt;/h3&gt;
&lt;p&gt;Python内存的最小单位, 所有block长度都是8字节对齐的&lt;/p&gt;
&lt;p&gt;注意这里block只是一个概念, 在源代码中并没有实体存在.&lt;/p&gt;
&lt;p&gt;不同类型block, 对应不同内存大小, 这个内存大小的值被称为&lt;code&gt;size class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;不同长度的block&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;     &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;allocated&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;      &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;----------------------------------------------------------------&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;                     &lt;span class="mi"&gt;8&lt;/span&gt;                       &lt;span class="mi"&gt;0&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;        &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;                   &lt;span class="mi"&gt;16&lt;/span&gt;                       &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;                   &lt;span class="mi"&gt;24&lt;/span&gt;                       &lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;                   &lt;span class="mi"&gt;32&lt;/span&gt;                       &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;                   &lt;span class="mi"&gt;40&lt;/span&gt;                       &lt;span class="mi"&gt;4&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;                   &lt;span class="mi"&gt;48&lt;/span&gt;                       &lt;span class="mi"&gt;5&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;                   &lt;span class="mi"&gt;56&lt;/span&gt;                       &lt;span class="mi"&gt;6&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;                   &lt;span class="mi"&gt;64&lt;/span&gt;                       &lt;span class="mi"&gt;7&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;                   &lt;span class="mi"&gt;72&lt;/span&gt;                       &lt;span class="mi"&gt;8&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;        &lt;span class="p"&gt;...&lt;/span&gt;                   &lt;span class="p"&gt;...&lt;/span&gt;                     &lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;      &lt;span class="mi"&gt;497&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;504&lt;/span&gt;                 &lt;span class="mi"&gt;504&lt;/span&gt;                      &lt;span class="mi"&gt;62&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;      &lt;span class="mi"&gt;505&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;                 &lt;span class="mi"&gt;512&lt;/span&gt;                      &lt;span class="mi"&gt;63&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SMALL_REQUEST_THRESHOLD&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="nl"&gt;up&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;routed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;      &lt;span class="n"&gt;allocator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="err"&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;申请一块大小28字节的内存, 实际从内存中划到32字节的一个block (从size class index为3的pool里面划出)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="blocks" src="/imgs/python-source/python-memory-blocks.png"/&gt;&lt;/p&gt;
&lt;p&gt;注意: 这里有个&lt;code&gt;Size class idx&lt;/code&gt;, 这个主要为了后面pool中用到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;size class&lt;/code&gt;和&lt;code&gt;size class index&lt;/code&gt;之间的转换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define ALIGNMENT               8               &lt;/span&gt;&lt;span class="cm"&gt;/* must be 2^N */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ALIGNMENT_SHIFT         3&lt;/span&gt;
&lt;span class="cp"&gt;#define ALIGNMENT_MASK          (ALIGNMENT - 1)&lt;/span&gt;

&lt;span class="c1"&gt;// size class index =&amp;gt; size class&lt;/span&gt;
&lt;span class="cp"&gt;#define INDEX2SIZE(I) (((uint)(I) + 1) &amp;lt;&amp;lt; ALIGNMENT_SHIFT)&lt;/span&gt;

&lt;span class="cm"&gt;/* 即&lt;/span&gt;
&lt;span class="cm"&gt;    (0+1) * 8 = 8&lt;/span&gt;
&lt;span class="cm"&gt;    (1+1) * 8 = 16&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="c1"&gt;// size class =&amp;gt; size class index&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ALIGNMENT_SHIFT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* 即&lt;/span&gt;
&lt;span class="cm"&gt;    (8 - 1) / 8 = 0&lt;/span&gt;
&lt;span class="cm"&gt;    (16 - 8) / 8 = 1&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pool"&gt;pool&lt;/h3&gt;
&lt;p&gt;pool管理block, 一个pool管理着一堆有固定大小的内存块&lt;/p&gt;
&lt;p&gt;本质: pool管理着一大块内存, 它有一定的策略, 将这块大的内存划分为多个大小一致的小块内存.&lt;/p&gt;
&lt;h4 id="pool-size"&gt;pool size&lt;/h4&gt;
&lt;p&gt;在Python中, 一个pool的大小通常为一个系统内存页. 4kB&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;obmalloc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="cp"&gt;#define SYSTEM_PAGE_SIZE        (4 * 1024)&lt;/span&gt;
&lt;span class="cp"&gt;#define SYSTEM_PAGE_SIZE_MASK   (SYSTEM_PAGE_SIZE - 1)&lt;/span&gt;

&lt;span class="cp"&gt;#define POOL_SIZE               SYSTEM_PAGE_SIZE        &lt;/span&gt;&lt;span class="cm"&gt;/* must be 2^N */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define POOL_SIZE_MASK          SYSTEM_PAGE_SIZE_MASK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="poolzu-cheng"&gt;pool组成&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;pool的4kB内存 = pool_header + block集合(N多大小一样的block)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pool_header&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Pool for small blocks. */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;/* number of allocated blocks    */&lt;/span&gt;
    &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="cm"&gt;/* pool's free list head         */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* next pool of this size class  */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pool_header&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* previous pool       ""        */&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;arenaindex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="cm"&gt;/* index into arenas of base adr */&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;szidx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                         &lt;span class="cm"&gt;/* block size class index        */&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;nextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="cm"&gt;/* bytes to virgin block         */&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;maxnextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="cm"&gt;/* largest valid nextoffset      */&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pool_header的作用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 与其他pool链接, 组成双向链表
2. 维护pool中可用的block, 单链表
3. 保存 szidx , 这个和该pool中block的大小有关系, (block size=8, szidx=0), (block size=16, szidx=1)...用于内存分配时匹配到拥有对应大小block的pool
4. arenaindex, 后面说
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构图:
&lt;img alt="pools" src="/imgs/python-source/python-memory-pools.png"/&gt;&lt;/p&gt;
&lt;h4 id="poolchu-shi-hua"&gt;pool初始化&lt;/h4&gt;
&lt;p&gt;从内存中初始化一个全新的空的&lt;code&gt;pool&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyObject_Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

          &lt;span class="nl"&gt;init_pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// 1. 连接到 used_pools 双向链表, 作为表头&lt;/span&gt;
            &lt;span class="c1"&gt;// 注意, 这里 usedpools[0] 保存着 block size = 8 的所有used_pools的表头&lt;/span&gt;
            &lt;span class="cm"&gt;/* Frontlink to used pools. */&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usedpools&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="cm"&gt;/* == prev */&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// 如果已经初始化过了...这里看初始化, 跳过&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;szidx&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* Luckily, this pool last contained blocks&lt;/span&gt;
&lt;span class="cm"&gt;                 * of the same size class, so its header&lt;/span&gt;
&lt;span class="cm"&gt;                 * and free list are already initialized.&lt;/span&gt;
&lt;span class="cm"&gt;                 */&lt;/span&gt;
                &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;


            &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;             * Initialize the pool header, set up the free list to&lt;/span&gt;
&lt;span class="cm"&gt;             * contain just the second block, and return the first&lt;/span&gt;
&lt;span class="cm"&gt;             * block.&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;
            &lt;span class="c1"&gt;// 开始初始化pool_header&lt;/span&gt;
            &lt;span class="c1"&gt;// 这里 size = (uint)(nbytes - 1) &amp;gt;&amp;gt; ALIGNMENT_SHIFT;  其实是Size class idx, 即szidx&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;szidx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// 计算获得每个block的size&lt;/span&gt;
            &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INDEX2SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// 注意 #define POOL_OVERHEAD           ROUNDUP(sizeof(struct pool_header))&lt;/span&gt;
            &lt;span class="c1"&gt;// bp =&amp;gt; 初始化为pool + pool_header size,  跳过pool_header的内存&lt;/span&gt;
            &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;POOL_OVERHEAD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// 计算偏移量, 这里的偏移量是绝对值&lt;/span&gt;
            &lt;span class="c1"&gt;// #define POOL_SIZE               SYSTEM_PAGE_SIZE        /* must be 2^N */&lt;/span&gt;
            &lt;span class="c1"&gt;// POOL_SIZE = 4kb, POOL_OVERHEAD = pool_header size&lt;/span&gt;
            &lt;span class="c1"&gt;// 下一个偏移位置: pool_header size + 2 * size&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POOL_OVERHEAD&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// 4kb - size&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;maxnextoffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POOL_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// freeblock指向 bp + size = pool_header size + size&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// 赋值NULL&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化后的图&lt;/p&gt;
&lt;p&gt;&lt;img alt="pool2" src="/imgs/python-source/python-memory-pools2.png"/&gt;&lt;/p&gt;
&lt;h4 id="pooljin-xing-blockfen-pei-0-zong-ti-dai-ma"&gt;pool进行block分配 - 0 总体代码&lt;/h4&gt;
&lt;p&gt;总体分配的代码如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;             * There is a used pool for this size class.&lt;/span&gt;
&lt;span class="cm"&gt;             * Pick up the head block of its free list.&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;
            &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 指针指向空闲block起始位置&lt;/span&gt;
            &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// 代码-1&lt;/span&gt;
            &lt;span class="c1"&gt;// 调整 pool-&amp;gt;freeblock (假设A节点)指向链表下一个, 即bp首字节指向的下一个节点(假设B节点) , 如果此时!= NULL&lt;/span&gt;
            &lt;span class="c1"&gt;// 表示 A节点可用, 直接返回&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// 代码-2&lt;/span&gt;
            &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;             * Reached the end of the free list, try to extend it.&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;
            &lt;span class="c1"&gt;// 有足够的空间, 分配一个, pool-&amp;gt;freeblock 指向后移&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;maxnextoffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* There is room for another block. */&lt;/span&gt;
                &lt;span class="c1"&gt;// 变更位置信息&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                  &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;INDEX2SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 注意, 指向NULL&lt;/span&gt;
                &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="c1"&gt;// 返回bp&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// 代码-3&lt;/span&gt;
            &lt;span class="cm"&gt;/* Pool is full, unlink from used pools. */&lt;/span&gt;  &lt;span class="c1"&gt;// 满了, 需要从下一个pool获取&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="pooljin-xing-blockfen-pei-1-gang-kai-shi"&gt;pool进行block分配 - 1 刚开始&lt;/h4&gt;
&lt;p&gt;内存块尚未分配完, 且此时不存在回收的block, 全新进来的时候, 分配第一块block&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以进入的逻辑是&lt;code&gt;代码-2&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 指针指向空闲block起始位置&lt;/span&gt;

            &lt;span class="p"&gt;.....&lt;/span&gt;


            &lt;span class="c1"&gt;// 代码-2&lt;/span&gt;
            &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;             * Reached the end of the free list, try to extend it.&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;
            &lt;span class="c1"&gt;// 有足够的空间, 分配一个, pool-&amp;gt;freeblock 指向后移&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;maxnextoffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* There is room for another block. */&lt;/span&gt;
                &lt;span class="c1"&gt;// 变更位置信息&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                  &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextoffset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;INDEX2SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 注意, 指向NULL&lt;/span&gt;
                &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="c1"&gt;// 返回bp&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果图示&lt;/p&gt;
&lt;p&gt;&lt;img alt="pool2" src="/imgs/python-source/python-memory-pools3.png"/&gt;&lt;/p&gt;
&lt;h4 id="pooljin-xing-blockfen-pei-2-hui-shou-liao-mou-ji-ge-block"&gt;pool进行block分配 - 2 回收了某几个block&lt;/h4&gt;
&lt;p&gt;回收涉及的代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="nf"&gt;PyObject_Free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;poolp&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lastfree&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;poolp&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;POOL_ADDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_ADDRESS_IN_RANGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* We allocated this address. */&lt;/span&gt;
        &lt;span class="n"&gt;LOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="cm"&gt;/* Link p to the start of the pool's freeblock list.  Since&lt;/span&gt;
&lt;span class="cm"&gt;         * the pool had at least the p block outstanding, the pool&lt;/span&gt;
&lt;span class="cm"&gt;         * wasn't empty (so it's already in a usedpools[] list, or&lt;/span&gt;
&lt;span class="cm"&gt;         * was full and is in no list -- it's not in the freeblocks&lt;/span&gt;
&lt;span class="cm"&gt;         * list in any case).&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="cm"&gt;/* else it was empty */&lt;/span&gt;
        &lt;span class="c1"&gt;// p被释放, p的第一个字节值被设置为当前freeblock的值&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lastfree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// freeblock被更新为指向p的首地址&lt;/span&gt;
        &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// 相当于往list中头插入了一个节点&lt;/span&gt;

     &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没释放一个block, 该block就会变成 &lt;code&gt;pool-&amp;gt;freeblock&lt;/code&gt; 的头节点, 而单链表一个节点如何指向下一个节点呢? 通过赋值, 节点内存空间保存着下个节点的地址, 最后一个节点指向&lt;code&gt;NULL&lt;/code&gt;(知道上面&lt;code&gt;代码-1&lt;/code&gt;的判断条件了吧&amp;gt;_&amp;lt;#)&lt;/p&gt;
&lt;p&gt;假设已经连续分配了5块, 第1块和第4块被释放&lt;/p&gt;
&lt;p&gt;此时内存图示&lt;/p&gt;
&lt;p&gt;&lt;img alt="pool2" src="/imgs/python-source/python-memory-pools4.png"/&gt;&lt;/p&gt;
&lt;p&gt;此时再一个block分配调用进来, 执行分配, 进入的逻辑是&lt;code&gt;代码-1&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 指针指向空闲block起始位置&lt;/span&gt;
            &lt;span class="c1"&gt;// 代码-1&lt;/span&gt;
            &lt;span class="c1"&gt;// 调整 pool-&amp;gt;freeblock (假设A节点)指向链表下一个, 即bp首字节指向的下一个节点(假设B节点) , 如果此时!= NULL&lt;/span&gt;
            &lt;span class="c1"&gt;// 表示 A节点可用, 直接返回&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="pool2" src="/imgs/python-source/python-memory-pools5.png"/&gt;&lt;/p&gt;
&lt;h4 id="pooljin-xing-blockfen-pei-3-poolyong-wan-liao"&gt;pool进行block分配 - 3 pool用完了&lt;/h4&gt;
&lt;p&gt;pool中内存空间都用完了, 进入&lt;code&gt;代码-3&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;bp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freeblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 指针指向空闲block起始位置&lt;/span&gt;


            &lt;span class="c1"&gt;// 代码-3&lt;/span&gt;
            &lt;span class="cm"&gt;/* Pool is full, unlink from used pools. */&lt;/span&gt;  &lt;span class="c1"&gt;// 满了, 需要从下一个pool获取&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prevpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nextpool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;UNLOCK&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取下一个pool(链表上每个pool的block size都是一致的)&lt;/p&gt;
&lt;p&gt;好了, pool到此位置, 下篇进入arena&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-数据结构小结</title><link href="http://www.wklken.me/posts/2015/08/28/python-base-datastructures.html" rel="alternate"></link><published>2015-08-28T23:59:59+08:00</published><updated>2015-08-28T23:59:59+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-28:/posts/2015/08/28/python-base-datastructures.html</id><summary type="html">&lt;p&gt;只是一篇笔记, 梳理了下&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;h3 id="xu-lie"&gt;序列&lt;/h3&gt;
&lt;h4 id="string"&gt;string&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/10/python-base-string.html"&gt;Python-基础-字符串小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/08/python-source-string.html"&gt;Python源码阅读-String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="list"&gt;list&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2012/12/30/python-base-list.html"&gt;Python-基础-列表及列表解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-list.html"&gt;Python源码阅读-list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tuple"&gt;tuple&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/09/python-base-tuple.html"&gt;Python-基础-元组小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-tuple.html"&gt;Python源码阅读-tuple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="namedtuple"&gt;namedtuple&lt;/h4&gt;
&lt;p&gt;在collections中, 从名字可以看出是命名的tuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;][,&lt;/span&gt; &lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好处, 文档中提到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Named&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;dictionaries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;lightweight&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;no …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;只是一篇笔记, 梳理了下&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;h3 id="xu-lie"&gt;序列&lt;/h3&gt;
&lt;h4 id="string"&gt;string&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/10/python-base-string.html"&gt;Python-基础-字符串小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/08/python-source-string.html"&gt;Python源码阅读-String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="list"&gt;list&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2012/12/30/python-base-list.html"&gt;Python-基础-列表及列表解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-list.html"&gt;Python源码阅读-list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tuple"&gt;tuple&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/09/python-base-tuple.html"&gt;Python-基础-元组小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-tuple.html"&gt;Python源码阅读-tuple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="namedtuple"&gt;namedtuple&lt;/h4&gt;
&lt;p&gt;在collections中, 从名字可以看出是命名的tuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;][,&lt;/span&gt; &lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好处, 文档中提到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Named&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;dictionaries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;lightweight&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;regular&lt;/span&gt; &lt;span class="n"&gt;tuples&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和一般&lt;code&gt;class+自定义__slots__&lt;/code&gt;的功能类似, 不会给每个实例定义&lt;code&gt;__dict__&lt;/code&gt;, 可以节省内存&lt;/p&gt;
&lt;p&gt;所以, 优点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 可读性更好, 可以当做轻量的类来使用(only attributes)
2. 节省内存
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文档的例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Point'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s1"&gt;'Point(x, y)'&lt;/span&gt;

    &lt;span class="vm"&gt;__slots__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Create new instance of Point(x, y)'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_tuple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Make a new Point object from a sequence or iterable'&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Expected 2 arguments, got &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Return a nicely formatted representation string'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Point(x=&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;, y=&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;)'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Return a new OrderedDict which maps field names to their values'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Return a new Point object replacing specified fields with new values'&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;_self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Got unexpected field names: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getnewargs__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Return self as a plain tuple.  Used by copy and pickle.'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="vm"&gt;__dict__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getstate__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s1"&gt;'Exclude the OrderedDict from pickling'&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Alias for field number 0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Alias for field number 1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="array"&gt;array&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/array.html"&gt;python 2 library: array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数组, 和列表的区别是, 一个数组只能存储一种类型的数据(即数组中所有元素类型一致), 类型是有限的集合&lt;/p&gt;
&lt;p&gt;相对的, 优点是: 节省内存&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typecode&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# 其中, typecode&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;   &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;                            &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;Minimum&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;
&lt;span class="s1"&gt;'c'&lt;/span&gt;         &lt;span class="n"&gt;char&lt;/span&gt;                              &lt;span class="n"&gt;character&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="s1"&gt;'b'&lt;/span&gt;         &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;                       &lt;span class="nb"&gt;int&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="s1"&gt;'B'&lt;/span&gt;         &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;                     &lt;span class="nb"&gt;int&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="s1"&gt;'u'&lt;/span&gt;         &lt;span class="n"&gt;Py_UNICODE&lt;/span&gt;          &lt;span class="n"&gt;Unicode&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'h'&lt;/span&gt;         &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="n"&gt;short&lt;/span&gt;                      &lt;span class="nb"&gt;int&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="s1"&gt;'H'&lt;/span&gt;         &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;short&lt;/span&gt;                    &lt;span class="nb"&gt;int&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="s1"&gt;'i'&lt;/span&gt;         &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;                        &lt;span class="nb"&gt;int&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="s1"&gt;'I'&lt;/span&gt;         &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;                      &lt;span class="nb"&gt;long&lt;/span&gt;        &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="s1"&gt;'l'&lt;/span&gt;         &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="nb"&gt;long&lt;/span&gt;                       &lt;span class="nb"&gt;int&lt;/span&gt;         &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="s1"&gt;'L'&lt;/span&gt;         &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="nb"&gt;long&lt;/span&gt;                     &lt;span class="nb"&gt;long&lt;/span&gt;        &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="s1"&gt;'f'&lt;/span&gt;         &lt;span class="nb"&gt;float&lt;/span&gt;                             &lt;span class="nb"&gt;float&lt;/span&gt;       &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="s1"&gt;'d'&lt;/span&gt;         &lt;span class="n"&gt;double&lt;/span&gt;                            &lt;span class="nb"&gt;float&lt;/span&gt;       &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用实例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;array&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="linked-list"&gt;linked list&lt;/h4&gt;
&lt;p&gt;似乎要在Python中用这个的场景非常之少.....&lt;/p&gt;
&lt;p&gt;也似乎有两种选择&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己写一个&lt;/li&gt;
&lt;li&gt;用其他数据结构替代&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体可以看看这个 &lt;a href="http://stackoverflow.com/questions/280243/python-linked-list"&gt;Python Linked List&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="set_1"&gt;set&lt;/h3&gt;
&lt;h4 id="base-set"&gt;base set&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/10/python-base-set.html"&gt;Python-基础-集合小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="frozenset"&gt;frozenset&lt;/h4&gt;
&lt;p&gt;标准库带, 简而言之: frozenset是set的不可变版本, 类似tuple和list的关系&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/stdtypes.html#frozenset"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;frozenset可以作为字典键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unhashable&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'set'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;
&lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'frozenset'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'add'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7699079583225461316&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dict_1"&gt;dict&lt;/h3&gt;
&lt;h4 id="base-dict"&gt;base dict&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/09/python-base-dict.html"&gt;Python-基础-字典小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/11/python-source-dict.html"&gt;Python源码阅读-dict&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="ordered-dict"&gt;ordered dict&lt;/h4&gt;
&lt;p&gt;dict的子类, 会记住放入字典键值对的顺序, &lt;a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="default-dict"&gt;default dict&lt;/h4&gt;
&lt;p&gt;defaultdict, 同样是dict的子类, 会自动设置value的默认值, &lt;a href="https://docs.python.org/2/library/collections.html#collections.defaultdict"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'list'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'list'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'notexists'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="others-multidict"&gt;others - MultiDict&lt;/h4&gt;
&lt;p&gt;一键多值的dict&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/pyutils/blob/master/dict/MultiDict.py"&gt;bottle里面的MultiDict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/pyutils/blob/master/dict/MultiDict2.py"&gt;werkzeug里面的版本&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MultiDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;MultiDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s1"&gt;'b'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="others-caseinsensitivedict"&gt;others - CaseInsensitiveDict&lt;/h4&gt;
&lt;p&gt;key大小写不明感的dict&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kennethreitz/requests/blob/master/requests/structures.py#L14"&gt;CaseInsensitiveDict&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaseInsensitiveDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Accept'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;
&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'aCCEPT'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;  &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="others-callbackdict"&gt;others - CallbackDict&lt;/h4&gt;
&lt;p&gt;更新时会调用回调函数&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/pyutils/blob/master/dict/CallbackDict.py"&gt;CallbackDict&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="stack_1"&gt;stack&lt;/h3&gt;
&lt;p&gt;Python标准库没有stack实现, 如果要处理, 可以自己写一个, 或者使用现有数据结构替代&lt;/p&gt;
&lt;p&gt;use list as stack&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="queue"&gt;queue&lt;/h3&gt;
&lt;h4 id="base-queue"&gt;base queue&lt;/h4&gt;
&lt;p&gt;use list as queue&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他, python标准库中的&lt;code&gt;Queue&lt;/code&gt;模块, &lt;a href="https://docs.python.org/2/library/queue.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包含&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Queue    FIFO
LifoQueue  LIFO
PriorityQueue  带优先级的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多用于多线程资源共享中(一般情况下很少用), 因为是线程安全的&lt;/p&gt;
&lt;h4 id="deque"&gt;deque&lt;/h4&gt;
&lt;p&gt;双端队列, 线程安全, 且左右两端出入队复杂度O(1), &lt;a href="https://docs.python.org/2/library/collections.html#collections.deque"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dui_1"&gt;堆&lt;/h3&gt;
&lt;p&gt;最小堆实现&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/heapq.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu"&gt;树&lt;/h3&gt;
&lt;p&gt;标准库没有tree的实现&lt;/p&gt;
&lt;p&gt;可以看看这本书的讲解 &lt;a href="http://cbio.ufs.ac.za/live_docs/nbn_tut/trees.html"&gt;Introductory Programming in Python
Advanced Data Structures: Trees&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="base-tree"&gt;base tree&lt;/h4&gt;
&lt;p&gt;自己写一个&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="binary-tree"&gt;binary tree&lt;/h4&gt;
&lt;p&gt;二叉树, 关注下这个包 &lt;a href="https://pypi.python.org/pypi/bintrees"&gt;bintree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包括二叉树/红黑树/AVL树&lt;/p&gt;
&lt;h3 id="tu_1"&gt;图&lt;/h3&gt;
&lt;p&gt;这个暂时没有好的推荐, 一般处理成二维数组, 或者使用类机制实现节点/边&lt;/p&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;h4 id="ji-shu-counter"&gt;计数counter&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/collections.html#collections.Counter"&gt;Counter文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dict子类, 会记录某个key出现的次数, 在做计数/统计的时候非常有用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'abracadabra'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="bisect"&gt;bisect&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/bisect.html"&gt;bisect&lt;/a&gt;, 维持一个有序列表, 可以用于快速检索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bisect&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insort_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insort_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insort_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insort_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bisect_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 返回位置或插入后的位置&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bisect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bisect_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="struct"&gt;struct&lt;/h4&gt;
&lt;p&gt;处理和存储二进制数据的时候用到, &lt;a href="https://docs.python.org/2/library/struct.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hhl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\x00\x01\x00\x02\x00\x00\x00\x03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hhl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\x00\x01\x00\x02\x00\x00\x00\x03&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>"活动"设计的一些trick</title><link href="http://www.wklken.me/posts/2015/08/28/tricks-about-promotion-codes.html" rel="alternate"></link><published>2015-08-28T00:00:00+08:00</published><updated>2015-08-28T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-28:/posts/2015/08/28/tricks-about-promotion-codes.html</id><summary type="html">&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-de"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="huo-dong-kai-fa-jian-yao-liu-cheng"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-de"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="huo-dong-kai-fa-jian-yao-liu-cheng"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代, 测试&lt;/li&gt;
&lt;li&gt;正式上线&lt;/li&gt;
&lt;li&gt;管理侧/统计侧上线&lt;/li&gt;
&lt;li&gt;推广/监控&lt;/li&gt;
&lt;li&gt;活动结束&lt;/li&gt;
&lt;li&gt;奖品派发/数据统计等&lt;/li&gt;
&lt;li&gt;活动下线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quick-and-maybe-dirty"&gt;quick and maybe dirty&lt;/h3&gt;
&lt;p&gt;由于&lt;code&gt;活动&lt;/code&gt;本身的性质, 这类代码逻辑属于&lt;code&gt;短平快&lt;/code&gt;一类的.&lt;/p&gt;
&lt;p&gt;简而言之: 怎么快怎么来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以不要考虑复用&lt;/li&gt;
&lt;li&gt;当然, 有些代码是复用的, 例如CRUD/get some list/check permission/call base service等等&lt;/li&gt;
&lt;li&gt;不要考虑将来/以后, 很多活动上了就下了, 不会有所谓的&lt;code&gt;将来&lt;/code&gt;, 切忌过渡设计, 空耗费许多精力没有必要&lt;/li&gt;
&lt;li&gt;要快&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="zhu-yi-dai-ma-shu-ju-bu-shu-ge-chi"&gt;注意代码/数据/部署隔离&lt;/h3&gt;
&lt;p&gt;前面说过, 很多活动逻辑没有将来&lt;/p&gt;
&lt;p&gt;所以, 活动的代码尽量独立, 保证随写随测, 随上随下, 尽量隔离于主体代码之外, 这样上下线也方便&lt;/p&gt;
&lt;p&gt;当然, 不可能完全独立, 依赖外部尽量使用独立的服务接口, 被外部依赖提供也尽量通过提供接口解决(情况很少)&lt;/p&gt;
&lt;p&gt;数据独立, 包括, 数据库实例/redis or memcached/文件等, 活动需要记录一些数据, 和主体业务独立开来, 尽量不共用, 有条件的话单独提供实例&lt;/p&gt;
&lt;p&gt;部署隔离, 尽量不要和关键服务在同一台机器或者共用带宽, 由于&lt;code&gt;活动&lt;/code&gt;本身的特质, 可能带来突发的流量, 可能导致带宽/IO/缓存占用/机器负载等变高, 会影响到其他服务.(可以给定独立url, 通过反代定到活动服务)&lt;/p&gt;
&lt;h3 id="kai-fa-zhu-yi"&gt;开发注意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做好缓存&lt;/li&gt;
&lt;li&gt;每个接口做好资质/权限控制, 这类逻辑放在api代码的前面(判断条件放到最前面), fail fast, 验证通过后才进入主体逻辑代码&lt;/li&gt;
&lt;li&gt;友好的异常处理/用户提示&lt;/li&gt;
&lt;li&gt;后端需要考虑&lt;code&gt;防刷&lt;/code&gt;, 前端需要处理下&lt;code&gt;重复提交&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;做好事务控制(并发), 特别是涉及数字增减的情况, 例如奖品数&lt;/li&gt;
&lt;li&gt;涉及步骤的活动, 做好流程限制, 第一步-第二步-第三步......, 防止用户跳过某一步直接进入下一步.(可以通过签加密token的方式)&lt;/li&gt;
&lt;li&gt;图片, 尽量放到 CDN (血的教训, 前端一张背景图导致带宽被跑满, 后续用户进不来)&lt;/li&gt;
&lt;li&gt;需要有一套成熟的统计系统, 活动数据直接发送到统计系统, 由统计系统统一出数据&lt;/li&gt;
&lt;li&gt;对于关键性的步骤/数据, 可以记日志&lt;/li&gt;
&lt;li&gt;有必要的话, 做成一期一期的, 有开始结束时间, 自动切换(有些复杂的活动)&lt;/li&gt;
&lt;li&gt;有必要的话, (传说中的开关)提供方便的配置或者入口, 可以一键上下线活动/奖品(valid/invalid/shutdown)&lt;/li&gt;
&lt;li&gt;对于关键性的代码, 做好注释, 例如一些限制逻辑/数量等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xue-hui-da-shi-jian-chai"&gt;学会打时间差&lt;/h3&gt;
&lt;p&gt;很多活动, 可能是热点? 节日? 等等, 时效性比较强的.&lt;/p&gt;
&lt;p&gt;然而, 当活动逻辑很复杂的时候, 又要在规定时间内上线, 这时候可以仔细切分需求,  分不同时间上线.&lt;/p&gt;
&lt;p&gt;例如, 一个玩游戏/抽奖/兑奖的活动, 可能分为两部分, 用户侧和管理侧, 用户侧逻辑&lt;code&gt;玩游戏/兑奖/查看是否获奖&lt;/code&gt;, 管理侧&lt;code&gt;查看获奖情况/颁奖/新增用户统计/渠道统计/流量统计&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;那么, 可以先保证用户侧完成, 同时加入向统计系统发送统计数据的接口, 然后上线, 保证用户侧主体流程. 上线后开始开发管理侧, 管理侧可以按照运营优先级处理, 例如要查看实时统计信息的话, 先做统计, 保证推广效果, 获奖及颁奖可以稍稍押后, 作为第三阶段上线(如果活动兑奖都是在一个周期结束的话)&lt;/p&gt;
&lt;p&gt;例如, 要发奖数据, 如果没有管理后台, 直接库里导一份出来就是了. 其实这时候应该思考, 要不要花力气做管理后台, 大不了活动结束手工操作一下, 十分钟.&lt;/p&gt;
&lt;h3 id="xia-xian"&gt;下线&lt;/h3&gt;
&lt;p&gt;额, 活动做完, 要下线了.&lt;/p&gt;
&lt;p&gt;如果程序是带日期限制的, 到点了自动结束, 提示用户活动结束, 活动流程无法走下去.&lt;/p&gt;
&lt;p&gt;如果需要人肉, 直接将外网入口去掉即可.&lt;/p&gt;
&lt;p&gt;然后, 可以考虑后续了&lt;/p&gt;
&lt;p&gt;首先, 要确认, 该记录的统计数据记录了, 该分析的分析了, 该发奖的也发奖了......&lt;/p&gt;
&lt;p&gt;首先, 备份代码到活动代码仓库(供后续参考/复用, 防止雷同逻辑/代码要重写), 然后从代码库删除.&lt;/p&gt;
&lt;p&gt;线上, 备份数据到备份服务器, 包括数据库数据/日志/文件等等, 如果缓存中有需要dump的, dump出来. 然后下线数据库, 清空缓存, 日志等&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;活动, 很大程度上是一堆&lt;code&gt;临时&lt;/code&gt;而&lt;code&gt;无用&lt;/code&gt;并且&lt;code&gt;没有技术含量&lt;/code&gt;, 而且非常&lt;code&gt;短命&lt;/code&gt;的代码组成的, 做多了容易烦躁, 最好一个项目组里轮流处理, 当然有人认领更好. &lt;/p&gt;
&lt;p&gt;活动成不成功, 决定因素很多, 但无论如何, 下线前做好review, 防止重复犯错&lt;/p&gt;
&lt;p&gt;就这些&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-08-28&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>一些简单的Python测试题</title><link href="http://www.wklken.me/posts/2015/08/26/python-some-test-questions.html" rel="alternate"></link><published>2015-08-26T00:00:00+08:00</published><updated>2015-08-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-26:/posts/2015/08/26/python-some-test-questions.html</id><summary type="html">&lt;p&gt;一些简单的测试题, 主要来源是网上:)&lt;/p&gt;
&lt;p&gt;某种程度, 可以从代码中看出一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写代码, 打印1-1亿之内的偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个函数, 用正则表达式清除字符串中[]和其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[lol]你好，帮我把这些markup清掉，[smile]。谢谢！"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;请使用python, 对下面的函数进行处理,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数被调用时打印耗时详情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tom&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timecosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.81469726562e-06&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个函数, 将驼峰命名法字符串转成下划线命名字符串(需考虑各类编码中常见的命名)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;GetItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;getItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;doIT …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;一些简单的测试题, 主要来源是网上:)&lt;/p&gt;
&lt;p&gt;某种程度, 可以从代码中看出一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写代码, 打印1-1亿之内的偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个函数, 用正则表达式清除字符串中[]和其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[lol]你好，帮我把这些markup清掉，[smile]。谢谢！"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;请使用python, 对下面的函数进行处理,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数被调用时打印耗时详情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tom&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timecosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.81469726562e-06&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个函数, 将驼峰命名法字符串转成下划线命名字符串(需考虑各类编码中常见的命名)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;GetItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;getItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;doIT&lt;/span&gt;    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;do_IT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;有一个列表：[1, 2, 3, 4...n]，n=20；请编写代码打印如下规律的输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个程序模拟银行排队, 只有一个队伍, 一个用户进入时允许插队(进入队伍任意位置), 但要保证每次导致队伍变更, 队伍中受影响的人都收到通知&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户系统, 存在相互关注的动作, 当进入某个人的个人主页, 需要展示其粉丝数, 关注数, 粉丝列表以及关注列表. 请简要描述解决方案, 包括db建模/数据层/业务层, 以及应对高并发/关注取关等情况的处理逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定一些NxN的矩阵，对于任意的路线，定义其【和】为其线路上所有节点的数字的和，计算从左上角到右下角的路线和最小值。每条路线只能从某一点到其周围（上下左右）的点，不可斜行。
例如，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="err"&gt;的路线和最小值为&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="err"&gt;的路线和最小值为&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序只需输出最小和值即可（一个数字）&lt;/p&gt;</content><category term="python"></category></entry><entry><title>我的tmux配置及说明【k-tmux】</title><link href="http://www.wklken.me/posts/2015/08/06/linux-tmux.html" rel="alternate"></link><published>2015-08-06T00:00:00+08:00</published><updated>2015-08-06T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-06:/posts/2015/08/06/linux-tmux.html</id><summary type="html">&lt;p&gt;配置了一份 &lt;a href="https://github.com/wklken/k-tmux"&gt;k-tmux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下快捷键是对这份配置的说明, 大部分为&lt;code&gt;tmux&lt;/code&gt;通用, 部分为修改自定义&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mac
$ brew install tmux
$ brew install reattach-to-user-namespace

ubuntu
$ sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yao-shuo-ming"&gt;简要说明&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux -&amp;gt; session -&amp;gt; window -&amp;gt; pane&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Tmux可以管理多组会话&lt;/li&gt;
&lt;li&gt;一个会话（Session）可以包含多个窗口，一个窗口（Window）可以包含多个窗格（Pane）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作前缀 &lt;code&gt;PREFIX = Ctrl-a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-session"&gt;1. session&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建, tmux new -s &amp;lt;name-of-my-session&amp;gt; 创建一个新的会话&lt;/span&gt;
$ tmux new -s basic

&lt;span class="c1"&gt;# 在tmux中创建一个会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX- …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;配置了一份 &lt;a href="https://github.com/wklken/k-tmux"&gt;k-tmux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下快捷键是对这份配置的说明, 大部分为&lt;code&gt;tmux&lt;/code&gt;通用, 部分为修改自定义&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mac
$ brew install tmux
$ brew install reattach-to-user-namespace

ubuntu
$ sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yao-shuo-ming"&gt;简要说明&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux -&amp;gt; session -&amp;gt; window -&amp;gt; pane&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Tmux可以管理多组会话&lt;/li&gt;
&lt;li&gt;一个会话（Session）可以包含多个窗口，一个窗口（Window）可以包含多个窗格（Pane）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作前缀 &lt;code&gt;PREFIX = Ctrl-a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-session"&gt;1. session&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建, tmux new -s &amp;lt;name-of-my-session&amp;gt; 创建一个新的会话&lt;/span&gt;
$ tmux new -s basic

&lt;span class="c1"&gt;# 在tmux中创建一个会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-:&lt;span class="o"&gt;]&lt;/span&gt; new -s &amp;lt;name-of-my-session&amp;gt;

&lt;span class="c1"&gt;# 分离会话 detach&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-d&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;detached &lt;span class="o"&gt;(&lt;/span&gt;from session basic&lt;span class="o"&gt;)]&lt;/span&gt;
or
$ tmux detach
or
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-Ctrl-z&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 查看已有会话列表(list-session)&lt;/span&gt;
$ tmux ls
basic: &lt;span class="m"&gt;1&lt;/span&gt; windows &lt;span class="o"&gt;(&lt;/span&gt;created Wed Aug  &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:54:04 &lt;span class="m"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;200x49&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 在tmux中查看会话列表并切换&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-s&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 连接会话(只有一个)&lt;/span&gt;
$ tmux attach
$ tmux attach -t basic
$ tmux a -t basic

&lt;span class="c1"&gt;# 杀掉会话&lt;/span&gt;
$ tmux kill-session -t

&lt;span class="c1"&gt;# 重命名会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-$&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-window"&gt;2. window&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建一个新的窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-c&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 重命名一个窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-,&lt;span class="o"&gt;]&lt;/span&gt; 之后输入名字回车

&lt;span class="c1"&gt;# 切换到下一个窗口, k-tmux另外配置了PREFIX-t/T&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-n&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 切换到对应窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-1/2/3&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 可视化选择切换到的窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-w&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 查找窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-f&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 退出窗口&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; or
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; 会有确认
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-pane"&gt;3. pane&lt;/h3&gt;
&lt;p&gt;分割
原先未修改键位的分割方式是&lt;code&gt;[PREFIX-%]&lt;/code&gt;和&lt;code&gt;[PREFIX-"]&lt;/code&gt;
重新映射为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 垂直/水平分割窗口
[PREFIX-\] / [PREFIX--]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭pane&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 关闭一个面板, 要确认
[PREFIX-x]

或者
exit [面板里执行]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-hjkl] pane之间移动

[Ctrl-hjkl]   pane之间移动
[Ctrl-\]      最近使用两个窗口之间切换
[PREFIX-q]    展示窗口数字并选择跳转
[PREFIX-o]    循环切换
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大小调整&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Ctrl-HJKL] pane大小调整
[PREFIX-z]  trigger暂时把窗口变大
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭及移动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-x] 关闭当前pane, 需确认
[PREFIX-}] 当前pane移到左边
[PREFIX-{] 当前pane移到右边
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-!]     当前pane在新的window中打开
[PREFIX-space] 会自动切换依次使用这些布局(几种窗口布局轮流切换)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-fu-zhi-nian-tie"&gt;4. 复制粘贴&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-[] 进入复制模式

=&amp;gt; 可以进行的操作
space/v    开始选择
Ctrl-v     整块选择
hjkl       方向键移动
w/b        向前向后移动一个单词
fx/Fx      行内移动到下一个字符位置
ctrl-b/f   在缓冲区里面翻页
g/G        到缓冲区最顶/底端
/ ?        向下, 向上查找
n/N        查找后下一个, 上一个
Enter/y    复制
[PREFIX-]] 粘贴
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他增强:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 复制整个pane可见区域
[PREFIX-:] capture-pane

# 查看缓冲区内容
[PREFIX-:] show-buffer

# 列出缓冲区列表
[PREFIX-:] list-buffers

# 从缓冲区列表选择并插入到当期面板
[PREFIX-:] choose-buffer =&amp;gt; 回车
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-qi-ta"&gt;5. 其他&lt;/h3&gt;
&lt;p&gt;获得快捷键列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-?]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入命令模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[PREFIX-:]&lt;/span&gt;

&lt;span class="na"&gt;一些命令模式下的命令&lt;/span&gt;
&lt;span class="c1"&gt;# 新建窗口&lt;/span&gt;
&lt;span class="na"&gt;new-window -n console&lt;/span&gt;

&lt;span class="c1"&gt;# 新建并执行命令&lt;/span&gt;
&lt;span class="na"&gt;new-window -n processes "top"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6-zeng-qiang"&gt;6. 增强&lt;/h3&gt;
&lt;h4 id="1-tmuxinator"&gt;1. Tmuxinator&lt;/h4&gt;
&lt;p&gt;Tmuxinator 是一个 Ruby 的 gem 包，可用于创建 Tmux 的会话。它的工作方式是先在配置文件中定义会话中的细节，然后用 1 条命令创建出这些会话&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install tmuxinator
tmuxinator new &lt;span class="nv"&gt;project_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; ~/.tmuxinator/project_a.yml &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; 配置

启动: tmuxinator start project_a
可以别名: mux start project_a
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-vimcha-jian"&gt;2. vim插件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;christoomey/vim-tmux-navigator&lt;/code&gt;, 安装更便捷的导航跳转&lt;/p&gt;
&lt;h3 id="7-zi-yuan-ji-can-kao_1"&gt;7. 资源及参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-plugins"&gt;tmux plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/index.html"&gt;《tmux: Productive Mouse-Free Development》中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tmux"></category><category term="linux"></category></entry><entry><title>Review and Restart</title><link href="http://www.wklken.me/posts/2015/07/24/summary-12-review-and-restart.html" rel="alternate"></link><published>2015-07-24T00:00:00+08:00</published><updated>2015-07-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-07-24:/posts/2015/07/24/summary-12-review-and-restart.html</id><summary type="html">&lt;p&gt;7月4日,  想着正式工作四年了
7月9日, 公司这边出了点状况, 歇业, 也从公司离职了
7月10日, 衡山溜达了一圈
7月19日, 想着正好加入甜品十一个月了
7月18日, 生日&lt;/p&gt;
&lt;p&gt;去年的七月,  也刚好离职, 正在一路北上的旅途中. 情况似曾相识.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/road.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="review"&gt;Review&lt;/h2&gt;
&lt;p&gt;一些工作上的review&lt;/p&gt;
&lt;h4 id="1-fan-shi-you-jie-guo-and-fail-fastkuai-su-shi-bai"&gt;1.  凡事有结果 and Fail-fast(快速失败)&lt;/h4&gt;
&lt;p&gt;作为工程师, 似乎很容易陷入, 将做项目, 变成完成任务.&lt;/p&gt;
&lt;p&gt;前置是需求, 有产品帮cover, 但是项目的后置, 是结果, 更多的是依赖自己.&lt;/p&gt;
&lt;p&gt;需求分析后, 系统设计之初, 就应该考虑: 日志/统计, 考虑如何去衡量"结果".&lt;/p&gt;
&lt;p&gt;项目上线后, 要跟!!! 分析及反馈数据, 让更多人了解现状, 以便后续决策.&lt;/p&gt;
&lt;p&gt;做事如果没有结果, 会导致可能错误的不断投入精力处理一些不重要的事情, 甚至根本不需要做, 沉没成本&lt;/p&gt;
&lt;p&gt;事情做了, 要有一个结果 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;7月4日,  想着正式工作四年了
7月9日, 公司这边出了点状况, 歇业, 也从公司离职了
7月10日, 衡山溜达了一圈
7月19日, 想着正好加入甜品十一个月了
7月18日, 生日&lt;/p&gt;
&lt;p&gt;去年的七月,  也刚好离职, 正在一路北上的旅途中. 情况似曾相识.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/road.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="review"&gt;Review&lt;/h2&gt;
&lt;p&gt;一些工作上的review&lt;/p&gt;
&lt;h4 id="1-fan-shi-you-jie-guo-and-fail-fastkuai-su-shi-bai"&gt;1.  凡事有结果 and Fail-fast(快速失败)&lt;/h4&gt;
&lt;p&gt;作为工程师, 似乎很容易陷入, 将做项目, 变成完成任务.&lt;/p&gt;
&lt;p&gt;前置是需求, 有产品帮cover, 但是项目的后置, 是结果, 更多的是依赖自己.&lt;/p&gt;
&lt;p&gt;需求分析后, 系统设计之初, 就应该考虑: 日志/统计, 考虑如何去衡量"结果".&lt;/p&gt;
&lt;p&gt;项目上线后, 要跟!!! 分析及反馈数据, 让更多人了解现状, 以便后续决策.&lt;/p&gt;
&lt;p&gt;做事如果没有结果, 会导致可能错误的不断投入精力处理一些不重要的事情, 甚至根本不需要做, 沉没成本&lt;/p&gt;
&lt;p&gt;事情做了, 要有一个结果, 好/不好/不好不坏, 无论如何, 自己都要有所感知. 关乎成就感.&lt;/p&gt;
&lt;p&gt;如果不好, 就快速失败, 砍掉或者修正, 总之, 不要往错误的方向越走越远.&lt;/p&gt;
&lt;p&gt;当然, 这涉及和上下游多沟通交流.&lt;/p&gt;
&lt;p&gt;所以, 建议无论产品或者研发, 做完一个项目, 都要有相应的review, 总结并通报相关人员.&lt;/p&gt;
&lt;h4 id="2-ren"&gt;2. 人&lt;/h4&gt;
&lt;p&gt;人员构成很重要, 要互补,  必要的时候能"千斤顶"&lt;/p&gt;
&lt;p&gt;做事多向前走一步,  不要老是停留在自己的"舒适区"/"自留地", 多走一步, 更高效协作&lt;/p&gt;
&lt;p&gt;找准节奏, 快速度过磨合期&lt;/p&gt;
&lt;p&gt;不要因为一时繁忙, 因为忙不过来而找人, 痛上一痛再做决定&lt;/p&gt;
&lt;p&gt;不要给人找事做!!!!!(一时事太多=&amp;gt; 招人 =&amp;gt; 没事干 =&amp;gt; 找事干......)&lt;/p&gt;
&lt;p&gt;各司其职, 信任伙伴, 不要大跨界或者插手太多, 无谓耗费自己的精力, 你的精力可以在自己擅长的地方发挥更大的作用&lt;/p&gt;
&lt;h4 id="3-scrum-kan-ban-xiang-mu-zhi"&gt;3. Scrum &amp;amp; 看板 &amp;amp; 项目制&lt;/h4&gt;
&lt;p&gt;没有万能药, 可以实施, 试试, 阵痛, 改进, 最终摸索到适合团队的&lt;/p&gt;
&lt;p&gt;一个Sprint只集中精力处理有限的目标. 不要分散了精力.&lt;/p&gt;
&lt;p&gt;Sprint, 是用来实现需求的, 而不是用来砍需求的!!!&lt;/p&gt;
&lt;p&gt;看板, 从整体一个大看板, 到最终根据业务线逐步拆分, 整个过程用起来感觉很有效.&lt;/p&gt;
&lt;p&gt;项目制, 可以先找小的项目试验, 核心成员参与, 先run起来, 成功了再扩大范围. 很多东西不能操之过急.&lt;/p&gt;
&lt;h4 id="4-gong-ju"&gt;4. 工具&lt;/h4&gt;
&lt;p&gt;用好用的工具, 用好工具&lt;/p&gt;
&lt;p&gt;mac/邮件/jira/stash/confluence等等,  整个团队达成一致, 高效协作&lt;/p&gt;
&lt;p&gt;使用工具的整个过程中, 也势必遇到的各种问题, 例如团队规模的扩大, 业务线增多, 跟上游产品的协作, 配合sprint等等, 这都需要在不同阶段进行调整, 对工作流进行优化, 形成一些约定. 以提高协作效率为第一目标&lt;/p&gt;
&lt;p&gt;工具能买就买, 找个工程师花几个人日搭开源的, 以及后续维护, 还不一定好用(这都是隐性的成本), 还不如花钱搞定, 况且如今各类工具成本已经非常低廉了:)&lt;/p&gt;
&lt;h4 id="5-kuai-yi-ji-yi-qie-cong-jian-workjiu-xing"&gt;5. 快 以及 一切从简work就行&lt;/h4&gt;
&lt;p&gt;快速实现, 快速验证.&lt;/p&gt;
&lt;p&gt;不要一开始就妄图设计一个完美的系统: 需求会改/项目会砍&lt;/p&gt;
&lt;p&gt;一开始不要想得太过复杂, 基本流程ok, 上线, 迭代上线完善的功能, 不要一开始就花大力气想直接搞定, 因为这里面很多成本其实是不必要的, 搞不好你花了一周赶完, 上了发现根本毫无用处.&lt;/p&gt;
&lt;p&gt;当人肉顶不住的时候, 再考虑做系统. 理由同上, 费劲搞了系统, 结果要么业务没上来, 没达到"人肉"顶不住的情况, 要么就是业务废弃了/砍掉了. 搞系统耗时耗力不一定有用.&lt;/p&gt;
&lt;h4 id="6-bu-wang-chu-xin"&gt;6. 不忘初心&lt;/h4&gt;
&lt;p&gt;很多时候, 无论是产品, 还是研发, 都会忘了最初出发的目的是什么.&lt;/p&gt;
&lt;p&gt;产品被一大堆细节淹没, 而研发将大目标切碎逐步做的过程中, 很那有整体的概念.&lt;/p&gt;
&lt;p&gt;可以尝试, 可以变换, 但是要明确, 所有人都明确.&lt;/p&gt;
&lt;p&gt;一切, 轻重缓急, 排期, 以目标为导向&lt;/p&gt;
&lt;p&gt;目标导向, 但同一个时刻, 不要有太多的目标, 不要一个目标未完就想在此基础上尝试新的目标.(精力分散/事情没做透)&lt;/p&gt;
&lt;h4 id="7-li-xiang-zhu-yi"&gt;7. 理想主义&lt;/h4&gt;
&lt;p&gt;不要太过理想主义&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这十个月, 经历了很多, 团队由小到大, 项目由1到28, 从0到1, 造了很多轮子, 经历了整个团队协作方式的变更, 经历了磨合的阵痛, 经历了一轮又一轮的sprint, 经历了第一版上线, 到最后第80个安装包, 经历了一次次上线, 一个个活动, 看着后台用户数一点点涨起来, 看着全部api调用一点点涨起来, 然后掉下去&amp;gt;_&amp;lt;#(这似乎是个悲伤的故事......)&lt;/p&gt;
&lt;p&gt;但是, 这十个月, 从第一天到甜品, 感受到"家"的气息, 到最终收拾离开, 关小黑屋, 晨会, 愉快地coding, 聚餐等等, 十月风雨, 过得很充实, 也学到很多东西, 感谢所有糖厂的银, 帮助及包容. &lt;/p&gt;
&lt;h2 id="restart_1"&gt;Restart&lt;/h2&gt;
&lt;p&gt;闲了一周了, 趁这段时间,  打算做做总结, 重写一些代码, 读完CPython源码及APUE, 还有, 就是学车及休息&lt;/p&gt;
&lt;p&gt;整理整理, 想明白一些东西, 再重新启程.&lt;/p&gt;
&lt;p&gt;希望明天会更好吧&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既然选择了远方, 便只顾风雨兼程&lt;/code&gt;, 共勉&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-07-24 于深圳&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>工作四周年小结</title><link href="http://www.wklken.me/posts/2015/07/04/summary-11-work-four-years.html" rel="alternate"></link><published>2015-07-04T00:00:00+08:00</published><updated>2015-07-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-07-04:/posts/2015/07/04/summary-11-work-four-years.html</id><summary type="html">&lt;p&gt;一晃, 四年过去了&lt;/p&gt;
&lt;p&gt;每年的7月4日, 都会想到刚毕业入职第一天&lt;/p&gt;
&lt;p&gt;惯例, 写一些东西, 记录过去的这些日子&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;既然选择了远方, 便只顾风雨兼程 -- 汪国真&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近遇到了一些事情, 颇为突然, 也颇为无奈.&lt;/p&gt;
&lt;p&gt;似乎, 也是去年的这阵子, 遭遇了公司的变故, 最终离职, 到北边溜达了一阵. 回来后, 宅了一阵, 花了两天找了工作, 迄今十月有余.&lt;/p&gt;
&lt;p&gt;很多事情很突然, 也就在旦夕之间&lt;/p&gt;
&lt;p&gt;原来没有感觉, 但是回顾, 发现却也是必然的&lt;/p&gt;
&lt;p&gt;十月风雨, 一切美好, 仿佛一场梦&lt;/p&gt;
&lt;p&gt;思考, 总结,  前进&lt;/p&gt;
&lt;p&gt;生活, 总是要继续的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既然选择了远方, 便只顾风雨兼程&lt;/code&gt;, 这是我给每个新入职小伙伴的纸条,  祝好, 也送给自己, hold on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前进, 前进, 不顾一切地前进 -- 三体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎, 之前一直秉承这个信念在做一些事情&lt;/p&gt;
&lt;p&gt;回头却发现, 似乎错放了重点 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;一晃, 四年过去了&lt;/p&gt;
&lt;p&gt;每年的7月4日, 都会想到刚毕业入职第一天&lt;/p&gt;
&lt;p&gt;惯例, 写一些东西, 记录过去的这些日子&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;既然选择了远方, 便只顾风雨兼程 -- 汪国真&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近遇到了一些事情, 颇为突然, 也颇为无奈.&lt;/p&gt;
&lt;p&gt;似乎, 也是去年的这阵子, 遭遇了公司的变故, 最终离职, 到北边溜达了一阵. 回来后, 宅了一阵, 花了两天找了工作, 迄今十月有余.&lt;/p&gt;
&lt;p&gt;很多事情很突然, 也就在旦夕之间&lt;/p&gt;
&lt;p&gt;原来没有感觉, 但是回顾, 发现却也是必然的&lt;/p&gt;
&lt;p&gt;十月风雨, 一切美好, 仿佛一场梦&lt;/p&gt;
&lt;p&gt;思考, 总结,  前进&lt;/p&gt;
&lt;p&gt;生活, 总是要继续的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既然选择了远方, 便只顾风雨兼程&lt;/code&gt;, 这是我给每个新入职小伙伴的纸条,  祝好, 也送给自己, hold on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前进, 前进, 不顾一切地前进 -- 三体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎, 之前一直秉承这个信念在做一些事情&lt;/p&gt;
&lt;p&gt;回头却发现, 似乎错放了重点&lt;/p&gt;
&lt;p&gt;每个人在每个阶段, 都有不同的需求/追求, 而一直坚持一个信念&lt;/p&gt;
&lt;p&gt;愚蠢!&lt;/p&gt;
&lt;p&gt;我将重点错放了, 有些事情总要去做的, 有些责任总是要要承担的, 有些变迁, 总是要去经历的. 而, 这个信念, 成为了我逃避的理由. 规避了太多不该规避的东西, 最终还剩下什么?&lt;/p&gt;
&lt;p&gt;结果是, 似乎折腾许多, 却也没折腾出什么, 步步前行, 却错失了很多生活中的美好.&lt;/p&gt;
&lt;p&gt;anyway, 需要醒醒, 认真生活了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于造轮子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近期思考的问题, 关于造轮子与创业.&lt;/p&gt;
&lt;p&gt;创业过程, 避免不了去造轮子, 如果顺利, 随着业务发展, 不断完善, 优化, 变革, 最终造一个大轮子:)&lt;/p&gt;
&lt;p&gt;而往往, 事情总不尽人意, 如果业务没发展呢? 假设, 到再次创业, 轮子似乎又得造一遍.&lt;/p&gt;
&lt;p&gt;这个过程, 或许可以造一个更好的轮子, 但是, 独轮车总归还是独轮车, 载不动.&lt;/p&gt;
&lt;p&gt;然后, 如果要造第三遍呢? 呵呵&lt;/p&gt;
&lt;p&gt;业务成就了技术, 这也造成了很多无奈:(&lt;/p&gt;
&lt;p&gt;充电, 毕竟有限, side project, 更多的是玩具, 哎.&lt;/p&gt;
&lt;p&gt;所谓的沉没?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一切已成往事, 谁还记得, 那些岁月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去年的8月, 玩久了, 宅久了, 大体有个方向, 花了些时间看了下公司, 两天面了四个, 然后选了一个, 入职.&lt;/p&gt;
&lt;p&gt;一切很快, 选择的原因呢? 两个因素: 1.做的事情符合价值观, 认同且喜欢 2.人&lt;/p&gt;
&lt;p&gt;角色? 后端开发兼运维打杂, 除了业务系统, 底层服务依赖的开发, 还兼职做运维, 负责环境搭建/部署/自动化等等.&lt;/p&gt;
&lt;p&gt;一路过来, 造了很多轮子, 很多轮子造的第二遍, 重构过几个项目, 做对过一些事情, 做错过一些事情, 对靠谱二字重新定义.&lt;/p&gt;
&lt;p&gt;一路过来, 也对自己有更为多的认识. 性格上的缺陷.&lt;/p&gt;
&lt;p&gt;回顾十月, 感谢很多人, 感谢一起奋斗过的小伙伴.&lt;/p&gt;
&lt;p&gt;很遗憾, 我是个记性很好的人, 例如同一个话题, 谁第几遍重复说起都记得, 哎. 这也造成了, 对很多事情, 难以释怀, 记性太好或许对 INTJ 来说, 是件坏事. &lt;/p&gt;
&lt;p&gt;那些一起战斗的岁月, 或许已成往事, 依然记得.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;四年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四年是什么感觉呢?&lt;/p&gt;
&lt;p&gt;感觉老了, 一眼过去, 一片都是90后&lt;/p&gt;
&lt;p&gt;感觉时间匆匆, 不经意间, 一小时, 一天, 一礼拜, 一月, 一年, 就这么没了, 更多的压力, 紧迫感, 更加珍惜时间.&lt;/p&gt;
&lt;p&gt;感觉自己还是弱弱的, 读很多书, 做很多事, 也对自己有更多的认识, 愈发觉得自己的渺小, 能做一些事情, 但是却也有很多无能为力的时候, 唯有努力&lt;/p&gt;
&lt;p&gt;感觉生活中充满了各种不确定, 无论如何都得努力面对, 努力锻炼, 学习, 努力变得更好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;旦夕, 不确定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一刻还在愉快地coding, 下一刻回头发现已沧海桑田&lt;/p&gt;
&lt;p&gt;生活总是充满变化, 充满了无奈, 这就是生活, 这就是现实.&lt;/p&gt;
&lt;p&gt;虽然, &lt;code&gt;拥抱变化&lt;/code&gt;, 但是&lt;code&gt;落差好大&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then?&lt;/p&gt;
&lt;p&gt;坚持, 努力地去做一些事情吧, 让自己变得更好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创业的一些感受&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还在review, 等想明白了再写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;选择很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然! &lt;/p&gt;
&lt;p&gt;但是没有对与错, 选择了就选择了, 仅此而已&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迷茫, 是能力和理想不匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不久前在知乎上看到的, 深以为然, 也在思考.&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-07-04 于深圳&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>vim插件: surround &amp; repeat[成对符号编辑]</title><link href="http://www.wklken.me/posts/2015/06/13/vim-plugin-surround-repeat.html" rel="alternate"></link><published>2015-06-13T12:16:00+08:00</published><updated>2015-06-13T12:16:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-surround-repeat.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="surround"&gt;surround&lt;/h2&gt;
&lt;p&gt;作用: 快速给词加环绕符号,例如单引号/双引号/括号/成对标签等&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tpope/vim-surround'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;注意(括号, 左括号会加空格, 右括号不会)&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 替换: cs"'
"Hello world!" -&amp;gt; 'Hello world!'

# 替换-标签(t=tag): cst"
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  -&amp;gt; "abc"

cst&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  -&amp;gt; &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

# 删除: ds"
"Hello world!" -&amp;gt; Hello world!

# 添加 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="surround"&gt;surround&lt;/h2&gt;
&lt;p&gt;作用: 快速给词加环绕符号,例如单引号/双引号/括号/成对标签等&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tpope/vim-surround'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;注意(括号, 左括号会加空格, 右括号不会)&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 替换: cs"'
"Hello world!" -&amp;gt; 'Hello world!'

# 替换-标签(t=tag): cst"
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  -&amp;gt; "abc"

cst&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  -&amp;gt; &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

# 删除: ds"
"Hello world!" -&amp;gt; Hello world!

# 添加(ys=you surround): ysiw"
Hello -&amp;gt; "Hello"

# 添加: csw"
Hello -&amp;gt; "Hello"

# 添加-整行: yss"
Hello world -&amp;gt; "Hello world"

# ySS"
Hello world -&amp;gt;
"
    hello world
"

# 添加-两个词: veeS"
hello world -&amp;gt; "hello world"

# 添加-当前到行尾: ys$"

# 左符号/右符号 =&amp;gt; 带不带空格
cs([
(hello) -&amp;gt; [ hello ]

cs(]
(hello) -&amp;gt; [hello]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="surround.gif" src="/imgs/vim/surround.gif"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim-repeat_1"&gt;vim-repeat&lt;/h2&gt;
&lt;p&gt;作用: 重复一个插件的操作, 支持surround.vim, 通过 surround 操作之后的行为, &lt;code&gt;.&lt;/code&gt;号重复&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tpope/vim-repeat"&gt;vim-repeat&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang_1"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" for repeat -&amp;gt; enhance surround.vim, . to repeat command
Bundle 'tpope/vim-repeat'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong_1"&gt;使用&lt;/h3&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="repeat.gif" src="/imgs/vim/repeat.gif"/&gt;&lt;/p&gt;
&lt;h3 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yi"&gt;建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;善用&lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat&lt;/code&gt;同时还支持的插件 &lt;a href="https://github.com/tpope/vim-repeat#repeatvim"&gt;doc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: gundo[时光机]</title><link href="http://www.wklken.me/posts/2015/06/13/vim-plugin-gundo.html" rel="alternate"></link><published>2015-06-13T10:37:00+08:00</published><updated>2015-06-13T10:37:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-gundo.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;有时候编辑一半, 特别是删除了一些东西, 然后想找回, 但是没有存下来(只在脑子里有)
这时候时光机就发挥作用了&lt;/p&gt;
&lt;p&gt;作用: 文件时光机, 可以查看同一个文件之前的历史内容&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/sjl/gundo.vim"&gt;gundo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'sjl/gundo.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;code&gt;&amp;lt;leader&amp;gt;h&lt;/code&gt;作为&lt;code&gt;toggle&lt;/code&gt;, 进入之后&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;j/k   上下选择
p     查看diff
回车  回滚文件到这个时刻的版本
&amp;lt;leader&amp;gt;h  关闭(或者wq关闭gundo打开的窗口)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 你可以跳进预览, 复制一些东西出来, 不必走回滚&lt;/p&gt;
&lt;p&gt;&lt;img alt="gundo.gif" src="/imgs/vim/gundo.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nnoremap &amp;lt;leader&amp;gt;h :GundoToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;只要写过的, 都能找回来&lt;/li&gt;
&lt;li&gt;同类插件 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;有时候编辑一半, 特别是删除了一些东西, 然后想找回, 但是没有存下来(只在脑子里有)
这时候时光机就发挥作用了&lt;/p&gt;
&lt;p&gt;作用: 文件时光机, 可以查看同一个文件之前的历史内容&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/sjl/gundo.vim"&gt;gundo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'sjl/gundo.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;code&gt;&amp;lt;leader&amp;gt;h&lt;/code&gt;作为&lt;code&gt;toggle&lt;/code&gt;, 进入之后&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;j/k   上下选择
p     查看diff
回车  回滚文件到这个时刻的版本
&amp;lt;leader&amp;gt;h  关闭(或者wq关闭gundo打开的窗口)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 你可以跳进预览, 复制一些东西出来, 不必走回滚&lt;/p&gt;
&lt;p&gt;&lt;img alt="gundo.gif" src="/imgs/vim/gundo.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nnoremap &amp;lt;leader&amp;gt;h :GundoToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;只要写过的, 都能找回来&lt;/li&gt;
&lt;li&gt;同类插件 &lt;a href="https://github.com/mbbill/undotree"&gt;undotree&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: expand-region[区域选中]</title><link href="http://www.wklken.me/posts/2015/06/13/vim-plugin-expandregion.html" rel="alternate"></link><published>2015-06-13T10:21:00+08:00</published><updated>2015-06-13T10:21:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-expandregion.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 视图模式下可伸缩选中部分，用于快速选中某些块&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/terryma/vim-expand-region"&gt;expand-region&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-expand-region'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;自定义key&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v 增加选中范围
V 减少选中范围
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="expand-region.gif" src="/imgs/vim/expand-region.gif"/&gt;&lt;/p&gt;
&lt;h3 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-expand-region'
vmap v &amp;lt;Plug&amp;gt;(expand_region_expand)
vmap V &amp;lt;Plug&amp;gt;(expand_region_shrink)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yi"&gt;建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;培养使用&lt;code&gt;v&lt;/code&gt;/&lt;code&gt;V&lt;/code&gt;进行区块选中的习惯, 避免每次多敲键位&lt;/li&gt;
&lt;li&gt;可以进行选中规则的自定义, 具体见 &lt;a href="https://github.com/terryma/vim-expand-region#customize-selected-regions"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 视图模式下可伸缩选中部分，用于快速选中某些块&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/terryma/vim-expand-region"&gt;expand-region&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-expand-region'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;自定义key&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v 增加选中范围
V 减少选中范围
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="expand-region.gif" src="/imgs/vim/expand-region.gif"/&gt;&lt;/p&gt;
&lt;h3 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-expand-region'
vmap v &amp;lt;Plug&amp;gt;(expand_region_expand)
vmap V &amp;lt;Plug&amp;gt;(expand_region_shrink)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yi"&gt;建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;培养使用&lt;code&gt;v&lt;/code&gt;/&lt;code&gt;V&lt;/code&gt;进行区块选中的习惯, 避免每次多敲键位&lt;/li&gt;
&lt;li&gt;可以进行选中规则的自定义, 具体见 &lt;a href="https://github.com/terryma/vim-expand-region#customize-selected-regions"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: quickrun[快速执行]</title><link href="http://www.wklken.me/posts/2015/06/13/vim-plugin-quickrun.html" rel="alternate"></link><published>2015-06-13T10:09:00+08:00</published><updated>2015-06-13T10:09:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-quickrun.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 快速执行当前文件, 例如&lt;em&gt;.py/&lt;/em&gt;.rb/*.sh等等, 用于快速验证一些代码实现&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/thinca/vim-quickrun"&gt;vim-quickrun&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'thinca/vim-quickrun'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;配置使用&lt;code&gt;message&lt;/code&gt;进行结果展示, 即, 展示运行结果后, 按任意键回到vim编辑&lt;/p&gt;
&lt;p&gt;同时, 映射&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt;以及&lt;code&gt;F10&lt;/code&gt;快捷键&lt;/p&gt;
&lt;p&gt;在快速编写验证性代码时非常有用&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="quick-run.gif" src="/imgs/vim/quick-run.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'thinca/vim-quickrun'
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}

let g:quickrun_no_default_key_mappings = 1
nmap &amp;lt;Leader&amp;gt;r &amp;lt;Plug&amp;gt;(quickrun …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 快速执行当前文件, 例如&lt;em&gt;.py/&lt;/em&gt;.rb/*.sh等等, 用于快速验证一些代码实现&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/thinca/vim-quickrun"&gt;vim-quickrun&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'thinca/vim-quickrun'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;配置使用&lt;code&gt;message&lt;/code&gt;进行结果展示, 即, 展示运行结果后, 按任意键回到vim编辑&lt;/p&gt;
&lt;p&gt;同时, 映射&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt;以及&lt;code&gt;F10&lt;/code&gt;快捷键&lt;/p&gt;
&lt;p&gt;在快速编写验证性代码时非常有用&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="quick-run.gif" src="/imgs/vim/quick-run.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'thinca/vim-quickrun'
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}

let g:quickrun_no_default_key_mappings = 1
nmap &amp;lt;Leader&amp;gt;r &amp;lt;Plug&amp;gt;(quickrun)
map &amp;lt;F10&amp;gt; :QuickRun&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;p&gt;无&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>vim插件: trailing-whitespace[行尾空格处理]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-trailing-whitespace.html" rel="alternate"></link><published>2015-06-07T18:16:00+08:00</published><updated>2015-06-07T18:16:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-trailing-whitespace.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;没有什么太多需要讲的, 功能+一个快捷键&lt;/p&gt;
&lt;p&gt;代码洁癖/强迫症必备&lt;/p&gt;
&lt;p&gt;作用: 高亮行末空格(标红), 也可以一键去除文件中所有行行尾空格&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/bronson/vim-trailing-whitespace"&gt;vim-trailing-whitespace&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bronson/vim-trailing-whitespace'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能: 自动标记行尾的空格&lt;/p&gt;
&lt;p&gt;&lt;img alt="trailing-whitespace.png" src="/imgs/vim/trailing-whitespace.png"/&gt;&lt;/p&gt;
&lt;p&gt;主动技能: 绑定&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&lt;/code&gt;为快捷键, 一键去除所有行尾空格
(&lt;code&gt;k-vim&lt;/code&gt;中为&lt;code&gt;,空格&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="trailing-whitespace.gif" src="/imgs/vim/trailing-whitespace.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bronson/vim-trailing-whitespace'
map &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :FixWhitespace&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;没有什么太多需要讲的, 功能+一个快捷键&lt;/p&gt;
&lt;p&gt;代码洁癖/强迫症必备&lt;/p&gt;
&lt;p&gt;作用: 高亮行末空格(标红), 也可以一键去除文件中所有行行尾空格&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/bronson/vim-trailing-whitespace"&gt;vim-trailing-whitespace&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bronson/vim-trailing-whitespace'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能: 自动标记行尾的空格&lt;/p&gt;
&lt;p&gt;&lt;img alt="trailing-whitespace.png" src="/imgs/vim/trailing-whitespace.png"/&gt;&lt;/p&gt;
&lt;p&gt;主动技能: 绑定&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&lt;/code&gt;为快捷键, 一键去除所有行尾空格
(&lt;code&gt;k-vim&lt;/code&gt;中为&lt;code&gt;,空格&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="trailing-whitespace.gif" src="/imgs/vim/trailing-whitespace.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bronson/vim-trailing-whitespace'
map &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :FixWhitespace&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>vim插件: closetag[成对标签补全]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-closetag.html" rel="alternate"></link><published>2015-06-07T18:15:00+08:00</published><updated>2015-06-07T18:15:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-closetag.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;如果日常开发中要编辑xml和html文件, 一个字符一个字符敲是不聪明地, 虽然你可以这么做...&lt;/p&gt;
&lt;p&gt;作用: 编辑xml/html时, 自动补全闭合标签&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/docunext/closetag.vim"&gt;closetag&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'docunext/closetag.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 自动补全&lt;/p&gt;
&lt;p&gt;&lt;img alt="closetag.gif" src="/imgs/vim/closetag.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;被动技能, 越简单越好, 当然如果你要用这个来写前端代码, 是远远不够的, 你可能需要&lt;a href="https://github.com/mattn/emmet-vim"&gt;emmet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;如果日常开发中要编辑xml和html文件, 一个字符一个字符敲是不聪明地, 虽然你可以这么做...&lt;/p&gt;
&lt;p&gt;作用: 编辑xml/html时, 自动补全闭合标签&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/docunext/closetag.vim"&gt;closetag&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'docunext/closetag.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 自动补全&lt;/p&gt;
&lt;p&gt;&lt;img alt="closetag.gif" src="/imgs/vim/closetag.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;被动技能, 越简单越好, 当然如果你要用这个来写前端代码, 是远远不够的, 你可能需要&lt;a href="https://github.com/mattn/emmet-vim"&gt;emmet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: ctrlp[文件搜索]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-ctrlp.html" rel="alternate"></link><published>2015-06-07T18:14:00+08:00</published><updated>2015-06-07T18:14:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-ctrlp.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;使用频率最高的插件之一&lt;/p&gt;
&lt;p&gt;作用: 模糊搜索, 可以搜索文件/buffer/mru/tag等等&lt;/p&gt;
&lt;p&gt;github: 原始&lt;a href="https://github.com/kien/ctrlp.vim"&gt;kien/ctrlp&lt;/a&gt;, 使用的是国人改进版本 &lt;a href="https://github.com/ctrlpvim/ctrlp.vim"&gt;ctrlpvim/ctrlp.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'ctrlpvim/ctrlp.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;-f&lt;/code&gt;模糊搜索最近打开的文件(MRU)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;-p&lt;/code&gt;模糊搜索当前目录及其子目录下的所有文件&lt;/p&gt;
&lt;p&gt;搜索框出来后, 输入关键字, 然后&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl + j/k 进行上下选择

ctrl + x 在当前窗口水平分屏打开文件

ctrl + v 同上, 垂直分屏

ctrl + t 在tab中打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="ctrlp.gif" src="/imgs/vim/ctrlp.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;使用频率最高的插件之一&lt;/p&gt;
&lt;p&gt;作用: 模糊搜索, 可以搜索文件/buffer/mru/tag等等&lt;/p&gt;
&lt;p&gt;github: 原始&lt;a href="https://github.com/kien/ctrlp.vim"&gt;kien/ctrlp&lt;/a&gt;, 使用的是国人改进版本 &lt;a href="https://github.com/ctrlpvim/ctrlp.vim"&gt;ctrlpvim/ctrlp.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'ctrlpvim/ctrlp.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;-f&lt;/code&gt;模糊搜索最近打开的文件(MRU)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;-p&lt;/code&gt;模糊搜索当前目录及其子目录下的所有文件&lt;/p&gt;
&lt;p&gt;搜索框出来后, 输入关键字, 然后&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl + j/k 进行上下选择

ctrl + x 在当前窗口水平分屏打开文件

ctrl + v 同上, 垂直分屏

ctrl + t 在tab中打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="ctrlp.gif" src="/imgs/vim/ctrlp.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '&amp;lt;leader&amp;gt;p'
let g:ctrlp_cmd = 'CtrlP'
map &amp;lt;leader&amp;gt;f :CtrlPMRU&amp;lt;CR&amp;gt;
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;更多操作, 详见 &lt;a href="https://github.com/ctrlpvim/ctrlp.vim#once-ctrlp-is-open"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可以考虑废弃&lt;code&gt;fuzzyfinder&lt;/code&gt; / &lt;code&gt;Command-T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以考虑只用一个快捷键, 配置映射到&lt;code&gt;:CtrlPMixed&lt;/code&gt;, 就可以一键搜索文件/buffer/mru&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h2 id="fu-ctrlpde-cha-jian-ctrlp-funky"&gt;附: ctrlp的插件&lt;code&gt;ctrlp-funky&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;作用: 模糊搜索当前文件中所有函数&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tacahiroy/ctrlp-funky"&gt;ctrlp-funky&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang_1"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tacahiroy/ctrlp-funky'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong_1"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fu&lt;/code&gt; 进入当前文件的函数列表搜索&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fU&lt;/code&gt; 搜索当前光标下单词对应的函数&lt;/p&gt;
&lt;p&gt;&lt;img alt="ctrlp-funky.gif" src="/imgs/vim/ctrlp-funky.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi_1"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tacahiroy/ctrlp-funky'
nnoremap &amp;lt;Leader&amp;gt;fu :CtrlPFunky&amp;lt;Cr&amp;gt;
" narrow the list down with a word under cursor
nnoremap &amp;lt;Leader&amp;gt;fU :execute 'CtrlPFunky ' . expand('&amp;lt;cword&amp;gt;')&amp;lt;Cr&amp;gt;
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>vim插件: airline[状态栏增强]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-airline.html" rel="alternate"></link><published>2015-06-07T18:13:00+08:00</published><updated>2015-06-07T18:13:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-airline.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 状态栏增强展示&lt;/p&gt;
&lt;p&gt;github:&lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前用过powline, 最终切到airline&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bling/vim-airline'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;状态栏增强, 集成支持ctrlp/nerdtree/tagbar等一些列插件&lt;a href="https://github.com/bling/vim-airline#features"&gt;features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;airline.png&lt;/p&gt;
&lt;p&gt;&lt;img alt="airline_1.png" src="/imgs/vim/airline_1.png"/&gt;
&lt;img alt="airline_2.png" src="/imgs/vim/airline_2.png"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bling/vim-airline'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 状态栏增强展示&lt;/p&gt;
&lt;p&gt;github:&lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前用过powline, 最终切到airline&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bling/vim-airline'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;状态栏增强, 集成支持ctrlp/nerdtree/tagbar等一些列插件&lt;a href="https://github.com/bling/vim-airline#features"&gt;features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;airline.png&lt;/p&gt;
&lt;p&gt;&lt;img alt="airline_1.png" src="/imgs/vim/airline_1.png"/&gt;
&lt;img alt="airline_2.png" src="/imgs/vim/airline_2.png"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bling/vim-airline'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>vim插件: theme[主题]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-theme.html" rel="alternate"></link><published>2015-06-07T18:12:00+08:00</published><updated>2015-06-07T18:12:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-theme.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;主题, 在&lt;code&gt;k-vim&lt;/code&gt;中, 默认配置了两个&lt;/p&gt;
&lt;h3 id="1-solarize"&gt;1. solarize&lt;/h3&gt;
&lt;p&gt;github: &lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;solarized&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="solarized.png" src="/imgs/vim/solarized.png"/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'altercation/vim-colors-solarized'
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-molokai"&gt;2. molokai&lt;/h3&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tomasr/molokai"&gt;molokai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="molokai.png" src="/imgs/vim/molokai.png"/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tomasr/molokai'
" monokai原始背景色
let g:molokai_original = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="qi-yong"&gt;启用:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Bundle&lt;/code&gt;之后安装, 仅仅是安装, 要启用哪个主题, 需要在&lt;code&gt;vimrc&lt;/code&gt;中显式指定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set background …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;主题, 在&lt;code&gt;k-vim&lt;/code&gt;中, 默认配置了两个&lt;/p&gt;
&lt;h3 id="1-solarize"&gt;1. solarize&lt;/h3&gt;
&lt;p&gt;github: &lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;solarized&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="solarized.png" src="/imgs/vim/solarized.png"/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'altercation/vim-colors-solarized'
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-molokai"&gt;2. molokai&lt;/h3&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tomasr/molokai"&gt;molokai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="molokai.png" src="/imgs/vim/molokai.png"/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tomasr/molokai'
" monokai原始背景色
let g:molokai_original = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="qi-yong"&gt;启用:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Bundle&lt;/code&gt;之后安装, 仅仅是安装, 要启用哪个主题, 需要在&lt;code&gt;vimrc&lt;/code&gt;中显式指定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set background=dark
set t_Co=256
colorscheme solarized
" colorscheme molokai
" colorscheme desert
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yi"&gt;建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;有包含大部分主题的插件, 但是就个人而言, 够用就行, 所以&lt;code&gt;k-vim&lt;/code&gt;中只保留了两个, 曾经习惯&lt;code&gt;monokai&lt;/code&gt;, 后来转到&lt;code&gt;solarized&lt;/code&gt;, 自己喜欢的才是最好的&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: tagbar[大纲式导航]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-tagbar.html" rel="alternate"></link><published>2015-06-07T18:11:00+08:00</published><updated>2015-06-07T18:11:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-tagbar.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;tagbar&lt;/code&gt;, 可以将正在编辑的文件生成一个大纲, 包含类/方法/变量等, 可以选中快速跳转到目标位置, 编辑大文件特别有用.&lt;/p&gt;
&lt;p&gt;评价: 五星&lt;/p&gt;
&lt;p&gt;作用: 大纲式快速导航&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;p&gt;首先, vim必须是7.0以上&lt;/p&gt;
&lt;p&gt;安装依赖 &lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant ctags&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ubuntu
sudo apt-get install ctags

# centos
sudo yum install ctags

# mac
brew install ctags
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在vim中安装&lt;code&gt;tagbar&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'majutsushi/tagbar'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;k-vim&lt;/code&gt;中配置快捷键为&lt;code&gt;F9&lt;/code&gt;, 编辑文件时按&lt;code&gt;F9&lt;/code&gt;, 进入, 上下移动 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;tagbar&lt;/code&gt;, 可以将正在编辑的文件生成一个大纲, 包含类/方法/变量等, 可以选中快速跳转到目标位置, 编辑大文件特别有用.&lt;/p&gt;
&lt;p&gt;评价: 五星&lt;/p&gt;
&lt;p&gt;作用: 大纲式快速导航&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;p&gt;首先, vim必须是7.0以上&lt;/p&gt;
&lt;p&gt;安装依赖 &lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant ctags&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ubuntu
sudo apt-get install ctags

# centos
sudo yum install ctags

# mac
brew install ctags
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在vim中安装&lt;code&gt;tagbar&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'majutsushi/tagbar'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;k-vim&lt;/code&gt;中配置快捷键为&lt;code&gt;F9&lt;/code&gt;, 编辑文件时按&lt;code&gt;F9&lt;/code&gt;, 进入, 上下移动(&lt;code&gt;jk&lt;/code&gt;)), 选中回车后会跳转&lt;/p&gt;
&lt;p&gt;如果安装了i &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html"&gt;easymotion&lt;/a&gt;, 还可以使用其快速跳转&lt;/p&gt;
&lt;p&gt;&lt;img alt="tagbar.gif" src="/imgs/vim/tagbar.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'majutsushi/tagbar'
nmap &amp;lt;F9&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
" 启动时自动focus
let g:tagbar_autofocus = 1

" for ruby, delete if you do not need
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;只配置一个快捷键, 可以根据需要定制具体语言的&lt;code&gt;tagbar&lt;/code&gt;展示内容. &lt;a href="https://github.com/majutsushi/tagbar/wiki"&gt;文档地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;建议废弃&lt;code&gt;taglist&lt;/code&gt;(年久失修了), &lt;code&gt;ctrlp&lt;/code&gt;+&lt;code&gt;tagbar&lt;/code&gt;实际使用效果更好&lt;/li&gt;
&lt;li&gt;如果在写&lt;code&gt;golang&lt;/code&gt;的时候要用到&lt;code&gt;tagbar&lt;/code&gt;, 需要安装&lt;code&gt;gotags&lt;/code&gt;支持&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: nerdcommenter[快速注释]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-nerdcommenter.html" rel="alternate"></link><published>2015-06-07T18:10:00+08:00</published><updated>2015-06-07T18:10:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-nerdcommenter.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;最经常用的插件之一&lt;/p&gt;
&lt;p&gt;作用: 快速注释/解开注释&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/nerdcommenter'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;使用默认的快捷键, 不需要自己绑定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;leader&amp;gt;cc   加注释
&amp;lt;leader&amp;gt;cu   解开注释

&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;  加上/解开注释, 智能判断
&amp;lt;leader&amp;gt;cy   先复制, 再注解(p可以进行黏贴)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="nerdcommenter.gif" src="/imgs/vim/nerdcommenter.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/nerdcommenter'
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同类插件 &lt;a href="https://github.com/tomtom/tcomment_vim"&gt;tcomment&lt;/a&gt; / &lt;a href="https://github.com/tpope/vim-commentary"&gt;vim-commentary&lt;/a&gt;,  有兴趣的话, 可以对比下后者和nerdcommenter&lt;/li&gt;
&lt;li&gt;常用就三四个快捷键, 更多快捷键自取 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;最经常用的插件之一&lt;/p&gt;
&lt;p&gt;作用: 快速注释/解开注释&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/nerdcommenter'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;使用默认的快捷键, 不需要自己绑定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;leader&amp;gt;cc   加注释
&amp;lt;leader&amp;gt;cu   解开注释

&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;  加上/解开注释, 智能判断
&amp;lt;leader&amp;gt;cy   先复制, 再注解(p可以进行黏贴)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="nerdcommenter.gif" src="/imgs/vim/nerdcommenter.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/nerdcommenter'
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同类插件 &lt;a href="https://github.com/tomtom/tcomment_vim"&gt;tcomment&lt;/a&gt; / &lt;a href="https://github.com/tpope/vim-commentary"&gt;vim-commentary&lt;/a&gt;,  有兴趣的话, 可以对比下后者和nerdcommenter&lt;/li&gt;
&lt;li&gt;常用就三四个快捷键, 更多快捷键自取 &lt;a href="https://github.com/scrooloose/nerdcommenter#usage"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: rainbow_parentheses[括号高亮]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-rainbowparentheses.html" rel="alternate"></link><published>2015-06-07T18:09:00+08:00</published><updated>2015-06-07T18:09:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-rainbowparentheses.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 括号(小括号/中括号/大括号)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/kien/rainbow_parentheses.vim"&gt;rainbow_parentheses.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'kien/rainbow_parentheses.vim' [DONE]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动(虽然支持主动触发), 可以设定括号高亮展示, 包括&lt;code&gt;()[]{}&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow_parentheses.png" src="/imgs/vim/rainbow_parentheses.png"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue' …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 括号(小括号/中括号/大括号)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/kien/rainbow_parentheses.vim"&gt;rainbow_parentheses.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'kien/rainbow_parentheses.vim' [DONE]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动(虽然支持主动触发), 可以设定括号高亮展示, 包括&lt;code&gt;()[]{}&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow_parentheses.png" src="/imgs/vim/rainbow_parentheses.png"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;开启16对括号匹配一般就够了&lt;/li&gt;
&lt;li&gt;可以根据自己需求, 确认&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;是否开启, 具体见github文档&lt;/li&gt;
&lt;li&gt;不建议配置快捷键, 当做被动属性, 省心省事&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: syntastic[语法检查]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-syntastic.html" rel="alternate"></link><published>2015-06-07T18:08:00+08:00</published><updated>2015-06-07T18:08:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-syntastic.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 语法检查, 支持大部分的语言&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/scrooloose/syntastic"&gt;syntastic&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 设置打开时开启, 则打开对应文件的时候, 会自动进行语法检查, 高亮错误位置&lt;/p&gt;
&lt;p&gt;注意, 针对某些具体语言, 指定了checker, 需要对应安装外部依赖, 例如&lt;code&gt;pyflakes&lt;/code&gt;/&lt;code&gt;pep8&lt;/code&gt;/&lt;code&gt;jshint&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;主动技能, &lt;code&gt;k-vim&lt;/code&gt;中配置绑定了&lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;打开错误列表面板&lt;/p&gt;
&lt;p&gt;&lt;img alt="syntastic.png" src="/imgs/vim/syntastic.png"/&gt;&lt;/p&gt;
&lt;p&gt;默认&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:Errors 显示错误面板
:lnext  到下一个错误
:lprevious 到上一个错误
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='&amp;gt;&amp;gt;'
let g:syntastic_warning_symbol='&amp;gt;'
let …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 语法检查, 支持大部分的语言&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/scrooloose/syntastic"&gt;syntastic&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 设置打开时开启, 则打开对应文件的时候, 会自动进行语法检查, 高亮错误位置&lt;/p&gt;
&lt;p&gt;注意, 针对某些具体语言, 指定了checker, 需要对应安装外部依赖, 例如&lt;code&gt;pyflakes&lt;/code&gt;/&lt;code&gt;pep8&lt;/code&gt;/&lt;code&gt;jshint&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;主动技能, &lt;code&gt;k-vim&lt;/code&gt;中配置绑定了&lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;打开错误列表面板&lt;/p&gt;
&lt;p&gt;&lt;img alt="syntastic.png" src="/imgs/vim/syntastic.png"/&gt;&lt;/p&gt;
&lt;p&gt;默认&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:Errors 显示错误面板
:lnext  到下一个错误
:lprevious 到上一个错误
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='&amp;gt;&amp;gt;'
let g:syntastic_warning_symbol='&amp;gt;'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap &amp;lt;Leader&amp;gt;s :call ToggleErrors()&amp;lt;cr&amp;gt;
" nnoremap &amp;lt;Leader&amp;gt;sn :lnext&amp;lt;cr&amp;gt;
" nnoremap &amp;lt;Leader&amp;gt;sp :lprevious&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;支持语言的列表, 见 &lt;a href="https://github.com/scrooloose/syntastic#1-introduction"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: delimitmate[符号自动补全]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-delimitmate.html" rel="alternate"></link><published>2015-06-07T18:07:00+08:00</published><updated>2015-06-07T18:07:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-delimitmate.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 自动补全引号(单引号/双引号/反引号), 括号(&lt;code&gt;()[]{}&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/Raimondi/delimitMate"&gt;delimitMate&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Raimondi/delimitMate'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 在编辑输入的时候触发&lt;/p&gt;
&lt;p&gt;&lt;img alt="delimitmate.gif" src="/imgs/vim/delimitmate.gif"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题: 如何在结束输入后, 自动跳转到符号后面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触发后, 假设你要跳到补全后的符号后面继续编辑, 按&lt;code&gt;Shift-Tab&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 1. 按", 自动补全
"|"

# 2.输入`hello`
"hello|"

# 3. 按 shift-tab, 跳到补全的符号后面, 还是insert-mode
"hello"|
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'

" for python docstring ", 特别有用
au FileType python …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 自动补全引号(单引号/双引号/反引号), 括号(&lt;code&gt;()[]{}&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/Raimondi/delimitMate"&gt;delimitMate&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Raimondi/delimitMate'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 在编辑输入的时候触发&lt;/p&gt;
&lt;p&gt;&lt;img alt="delimitmate.gif" src="/imgs/vim/delimitmate.gif"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题: 如何在结束输入后, 自动跳转到符号后面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触发后, 假设你要跳到补全后的符号后面继续编辑, 按&lt;code&gt;Shift-Tab&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 1. 按", 自动补全
"|"

# 2.输入`hello`
"hello|"

# 3. 按 shift-tab, 跳到补全的符号后面, 还是insert-mode
"hello"|
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'

" for python docstring ", 特别有用
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;有很多款括号等自动补全的插件, 这款在功能和可配上都不错, 需要自定义的可以看文档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同类插件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smartinput https://github.com/kana/vim-smartinput
lexima https://github.com/cohama/lexima.vim  类似多光标替换
auto-pairs https://github.com/jiangmiao/auto-pairs
autoclose  https://github.com/Townk/vim-autoclose
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;粘贴代码的时候自动补全括号这个特性怎么去掉?
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>vim插件: matchit[成对标签跳转]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-matchit.html" rel="alternate"></link><published>2015-06-07T18:06:00+08:00</published><updated>2015-06-07T18:06:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-matchit.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这个插件最后一次更新是2008年, 七年前了......&lt;/p&gt;
&lt;p&gt;vim的&lt;code&gt;%&lt;/code&gt;, 会自动跳转到匹配的&lt;code&gt;()[]{}&amp;lt;&amp;gt;&lt;/code&gt;等符号, 但是在编辑&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;xml&lt;/code&gt;的时候, 可能需要在配对标签直接跳转, 这个插件扩展实现了这个功能.&lt;/p&gt;
&lt;p&gt;作用: &lt;code&gt;%&lt;/code&gt;跳转到匹配的标签&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/vim-scripts/matchit.zip"&gt;matchit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'vim-scripts/matchit.zip'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在需要跳转的位置按&lt;code&gt;%&lt;/code&gt;, 跳转到匹配位置&lt;/p&gt;
&lt;p&gt;例如 xml/html中支持成对标签之间的跳转&lt;/p&gt;
&lt;p&gt;&lt;img alt="matchit.gif" src="/imgs/vim/matchit.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 没错, 只有一行
Bundle 'vim-scripts/matchit.zip'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据自己需求确定要不要这个插件, 虽然小, 但是没用的话就不需要装了&lt;/li&gt;
&lt;/ol&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这个插件最后一次更新是2008年, 七年前了......&lt;/p&gt;
&lt;p&gt;vim的&lt;code&gt;%&lt;/code&gt;, 会自动跳转到匹配的&lt;code&gt;()[]{}&amp;lt;&amp;gt;&lt;/code&gt;等符号, 但是在编辑&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;xml&lt;/code&gt;的时候, 可能需要在配对标签直接跳转, 这个插件扩展实现了这个功能.&lt;/p&gt;
&lt;p&gt;作用: &lt;code&gt;%&lt;/code&gt;跳转到匹配的标签&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/vim-scripts/matchit.zip"&gt;matchit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'vim-scripts/matchit.zip'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在需要跳转的位置按&lt;code&gt;%&lt;/code&gt;, 跳转到匹配位置&lt;/p&gt;
&lt;p&gt;例如 xml/html中支持成对标签之间的跳转&lt;/p&gt;
&lt;p&gt;&lt;img alt="matchit.gif" src="/imgs/vim/matchit.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 没错, 只有一行
Bundle 'vim-scripts/matchit.zip'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据自己需求确定要不要这个插件, 虽然小, 但是没用的话就不需要装了&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: easy-align[快速对齐]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easyalign.html" rel="alternate"></link><published>2015-06-07T18:05:00+08:00</published><updated>2015-06-07T18:05:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-easyalign.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 快速进行对齐/格式化&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/junegunn/vim-easy-align"&gt;vim-easy-align&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'junegunn/vim-easy-align'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键 &lt;code&gt;&amp;lt;leader&amp;gt;a&lt;/code&gt;, 使用&lt;code&gt;V&lt;/code&gt;进入选择, 选取多行, 之后触发&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;,a=        对齐等号表达
,a:        对齐冒号表达式(json/map等)

# 默认左对齐
,a&amp;lt;space&amp;gt;  首个空格对齐
,a2&amp;lt;space&amp;gt; 第二个空格对齐
,a-&amp;lt;space&amp;gt; 倒数第一个空格对齐
,a-2&amp;lt;space&amp;gt; 倒数第二个空格对齐
,a*&amp;lt;space&amp;gt; 所有空格依次对齐

# 右对齐
,a&amp;lt;Enter&amp;gt;*&amp;lt;space&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="easy-align.gif" src="/imgs/vim/easy-align.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'junegunn/vim-easy-align' …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 快速进行对齐/格式化&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/junegunn/vim-easy-align"&gt;vim-easy-align&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'junegunn/vim-easy-align'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键 &lt;code&gt;&amp;lt;leader&amp;gt;a&lt;/code&gt;, 使用&lt;code&gt;V&lt;/code&gt;进入选择, 选取多行, 之后触发&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;,a=        对齐等号表达
,a:        对齐冒号表达式(json/map等)

# 默认左对齐
,a&amp;lt;space&amp;gt;  首个空格对齐
,a2&amp;lt;space&amp;gt; 第二个空格对齐
,a-&amp;lt;space&amp;gt; 倒数第一个空格对齐
,a-2&amp;lt;space&amp;gt; 倒数第二个空格对齐
,a*&amp;lt;space&amp;gt; 所有空格依次对齐

# 右对齐
,a&amp;lt;Enter&amp;gt;*&amp;lt;space&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="easy-align.gif" src="/imgs/vim/easy-align.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'junegunn/vim-easy-align'
vmap &amp;lt;Leader&amp;gt;a &amp;lt;Plug&amp;gt;(EasyAlign)
nmap &amp;lt;Leader&amp;gt;a &amp;lt;Plug&amp;gt;(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同类插件 &lt;a href="https://github.com/godlygeek/tabular"&gt;tabular&lt;/a&gt;
, 个人觉得&lt;code&gt;vim-easy-align&lt;/code&gt;更符合直觉, 更新频繁, 文档, 教程也更全, &lt;a href="https://github.com/junegunn/vim-easy-align/blob/master/EXAMPLES.md"&gt;例子&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: multiple-cursors[多光标操作]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-multiplecursors.html" rel="alternate"></link><published>2015-06-07T18:03:00+08:00</published><updated>2015-06-07T18:03:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-multiplecursors.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 类似sublimetext的多光标选中&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim=multiple-cursors&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-multiple-cursors'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;默认快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl+m 选中一个
ctrl+p 放弃一个, 回到上一个
ctrl+x 跳过当前选中, 选中下一个
esc    退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="multiple-cursors.gif" src="/imgs/vim/multiple-cursors.gif"/&gt;&lt;/p&gt;
&lt;p&gt;选中后, 可以进行增删替换&lt;code&gt;a/c/x&lt;/code&gt;等&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='&amp;lt;C-m&amp;gt;'
let g:multi_cursor_prev_key='&amp;lt;C-p …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 类似sublimetext的多光标选中&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim=multiple-cursors&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-multiple-cursors'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;默认快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl+m 选中一个
ctrl+p 放弃一个, 回到上一个
ctrl+x 跳过当前选中, 选中下一个
esc    退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="multiple-cursors.gif" src="/imgs/vim/multiple-cursors.gif"/&gt;&lt;/p&gt;
&lt;p&gt;选中后, 可以进行增删替换&lt;code&gt;a/c/x&lt;/code&gt;等&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='&amp;lt;C-m&amp;gt;'
let g:multi_cursor_prev_key='&amp;lt;C-p&amp;gt;'
let g:multi_cursor_skip_key='&amp;lt;C-x&amp;gt;'
let g:multi_cursor_quit_key='&amp;lt;Esc&amp;gt;'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;p&gt;无&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>vim插件: vim-signature[快速标记跳转]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-signature.html" rel="alternate"></link><published>2015-06-07T18:02:00+08:00</published><updated>2015-06-07T18:02:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-signature.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 标签展示以及快速跳转(增强vim的书签功能)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/kshenoy/vim-signature"&gt;signature&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle "kshenoy/vim-signature"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;使用默认快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m[a-zA-Z]   打标签
'[a-zA-Z]   跳转到标签位置

'.          最后一次变更的地方
''          跳回来的地方(最近两个位置跳转)

m&amp;lt;space&amp;gt;    去除所有标签
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="signature.gif" src="/imgs/vim/signature.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle "kshenoy/vim-signature"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;p&gt;无&lt;/p&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 标签展示以及快速跳转(增强vim的书签功能)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/kshenoy/vim-signature"&gt;signature&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle "kshenoy/vim-signature"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;使用默认快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m[a-zA-Z]   打标签
'[a-zA-Z]   跳转到标签位置

'.          最后一次变更的地方
''          跳回来的地方(最近两个位置跳转)

m&amp;lt;space&amp;gt;    去除所有标签
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="signature.gif" src="/imgs/vim/signature.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle "kshenoy/vim-signature"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;p&gt;无&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>vim插件: easymotion[快速跳转]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html" rel="alternate"></link><published>2015-06-07T18:01:00+08:00</published><updated>2015-06-07T18:01:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-easymotion.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;说明: &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;全局映射为&lt;code&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;除却&lt;code&gt;hjkl&lt;/code&gt;, &lt;code&gt;gg&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;Ctrl-D/U&lt;/code&gt;, 以及 &lt;code&gt;[f/F]&amp;lt;char&amp;gt;&lt;/code&gt;和&lt;code&gt;[t/T]&amp;lt;char&amp;gt;&lt;/code&gt;这些&lt;code&gt;vim&lt;/code&gt;默认的移动方式&lt;/p&gt;
&lt;p&gt;有没有更高效的移动做法么? 回答是肯定的&lt;/p&gt;
&lt;p&gt;这个插件的唯一目的就是: 快速跳转&lt;/p&gt;
&lt;p&gt;作用: 如何进行更快速的光标移动&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Lokaltog/vim-easymotion'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yong-fa-1-tiao-zhuan-dao-dang-qian-guang-biao-qian-hou-de-wei-zhi-wb"&gt;用法1: 跳转到当前光标前后的位置(w/b)&lt;/h2&gt;
&lt;p&gt;快捷键&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;w&lt;/code&gt;(即&lt;code&gt;,,w&lt;/code&gt;)和&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;b&lt;/code&gt;(即&lt;code&gt;,,b …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;说明: &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;全局映射为&lt;code&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;除却&lt;code&gt;hjkl&lt;/code&gt;, &lt;code&gt;gg&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;Ctrl-D/U&lt;/code&gt;, 以及 &lt;code&gt;[f/F]&amp;lt;char&amp;gt;&lt;/code&gt;和&lt;code&gt;[t/T]&amp;lt;char&amp;gt;&lt;/code&gt;这些&lt;code&gt;vim&lt;/code&gt;默认的移动方式&lt;/p&gt;
&lt;p&gt;有没有更高效的移动做法么? 回答是肯定的&lt;/p&gt;
&lt;p&gt;这个插件的唯一目的就是: 快速跳转&lt;/p&gt;
&lt;p&gt;作用: 如何进行更快速的光标移动&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Lokaltog/vim-easymotion'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yong-fa-1-tiao-zhuan-dao-dang-qian-guang-biao-qian-hou-de-wei-zhi-wb"&gt;用法1: 跳转到当前光标前后的位置(w/b)&lt;/h2&gt;
&lt;p&gt;快捷键&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;w&lt;/code&gt;(即&lt;code&gt;,,w&lt;/code&gt;)和&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;b&lt;/code&gt;(即&lt;code&gt;,,b&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;助记: &lt;code&gt;word&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion_base.gif" src="/imgs/vim/easy_motion_base.gif"/&gt;&lt;/p&gt;
&lt;p&gt;easy_motion_base.gif&lt;/p&gt;
&lt;h2 id="yong-fa-2-sou-suo-tiao-zhuan-s"&gt;用法2: 搜索跳转(s)&lt;/h2&gt;
&lt;p&gt;快捷键&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;(即&lt;code&gt;,,s&lt;/code&gt;), 然后输入要搜索的字母, 这个跳转是双向的&lt;/p&gt;
&lt;p&gt;助记: &lt;code&gt;search&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion_search.gif" src="/imgs/vim/easy_motion_search.gif"/&gt;&lt;/p&gt;
&lt;h2 id="yong-fa-3-xing-ji-tiao-zhuan-jk"&gt;用法3: 行级跳转(jk)&lt;/h2&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;j &amp;lt;Plug&amp;gt;(easymotion-j)
map &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;k &amp;lt;Plug&amp;gt;(easymotion-k)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷键: &lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;j&lt;/code&gt;和&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;k&lt;/code&gt;(即&lt;code&gt;,,j&lt;/code&gt;和&lt;code&gt;,,k&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;助记: &lt;code&gt;hjkl&lt;/code&gt;不解释&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion_lines.gif" src="/imgs/vim/easy_motion_lines.gif"/&gt;&lt;/p&gt;
&lt;h2 id="yong-fa-4-xing-nei-tiao-zhuan-hl"&gt;用法4: 行内跳转(hl)&lt;/h2&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;h &amp;lt;Plug&amp;gt;(easymotion-linebackward)
map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;l &amp;lt;Plug&amp;gt;(easymotion-lineforward)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷键&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;h&lt;/code&gt;和&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;l&lt;/code&gt;(即&lt;code&gt;,,h&lt;/code&gt;和&lt;code&gt;,,l&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;助记: &lt;code&gt;hjkl&lt;/code&gt;不解释&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion_inline.gif" src="/imgs/vim/easy_motion_inline.gif"/&gt;&lt;/p&gt;
&lt;h2 id="yong-fa-5-zhong-fu-shang-yi-ci-dong-zuo"&gt;用法5: 重复上一次动作(.)&lt;/h2&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;. &amp;lt;Plug&amp;gt;(easymotion-repeat)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷键&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;助记: 同&lt;code&gt;repeat&lt;/code&gt;插件....&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion_repeat.gif" src="/imgs/vim/easy_motion_repeat.gif"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;h &amp;lt;Plug&amp;gt;(easymotion-linebackward)
map &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;j &amp;lt;Plug&amp;gt;(easymotion-j)
map &amp;lt;Leader&amp;gt;&amp;lt;Leader&amp;gt;k &amp;lt;Plug&amp;gt;(easymotion-k)
map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;l &amp;lt;Plug&amp;gt;(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map &amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;. &amp;lt;Plug&amp;gt;(easymotion-repeat)
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;还可以&lt;code&gt;&amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;f&lt;/code&gt;和&lt;code&gt;&amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;t&lt;/code&gt;, 不过建议简单化, 一个&lt;code&gt;&amp;lt;Leader&amp;gt;&amp;lt;leader&amp;gt;w/b&lt;/code&gt;走天下.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你不经常使用&lt;code&gt;s&lt;/code&gt;, 可以将&lt;code&gt;s&lt;/code&gt;改键, &lt;code&gt;nmap s &amp;lt;Plug&amp;gt;(easymotion-s)&lt;/code&gt;, 这样你只需要输入&lt;code&gt;s&lt;/code&gt;就可以进行搜索快速跳转(强迫症表示不能忍....)
具体做法见&lt;a href="https://github.com/Lokaltog/vim-easymotion#bidirectional-motions"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;&lt;/code&gt;作为这个插件的快捷键其实挺好的, 貌似没有其他插件会导致冲突, 还可以配置一整套, 强迫症很满意&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以配置2/n个字符的搜索跳转, 更精准, 按需自取(个人觉得太复杂了没必要) &lt;a href="https://github.com/Lokaltog/vim-easymotion#2-character-search-motion"&gt;文档&lt;/a&gt;和&lt;a href="https://github.com/Lokaltog/vim-easymotion#n-character-search-motion"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个插件专心做好跳转就好, 没必要把搜索的活给做了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>vim插件: vundle[管理插件]</title><link href="http://www.wklken.me/posts/2015/06/07/vim-plugin-vundle.html" rel="alternate"></link><published>2015-06-07T18:00:00+08:00</published><updated>2015-06-07T18:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-vundle.html</id><summary type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;第一个需要手动安装的插件, 其他的插件通过这个来进行管理&lt;/p&gt;
&lt;p&gt;作用: 管理其他所有插件(安装/更新/移除)&lt;/p&gt;
&lt;p&gt;github:&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;vundle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vi
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;.vimrc&lt;/code&gt;中加入/修改/删除自己需要的插件配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 在命令行模式下运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:BundleInstall     install 安装配置的插件
:BundleInstall!    update  更新
:BundleClean       remove plugin not in list 删除本地无用插件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="vundle.png" src="/imgs/vim/vundle.png"/&gt;&lt;/p&gt;
&lt;h2 id="qi-ta"&gt;其他 …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;第一个需要手动安装的插件, 其他的插件通过这个来进行管理&lt;/p&gt;
&lt;p&gt;作用: 管理其他所有插件(安装/更新/移除)&lt;/p&gt;
&lt;p&gt;github:&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;vundle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vi
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;.vimrc&lt;/code&gt;中加入/修改/删除自己需要的插件配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 在命令行模式下运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:BundleInstall     install 安装配置的插件
:BundleInstall!    update  更新
:BundleClean       remove plugin not in list 删除本地无用插件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="vundle.png" src="/imgs/vim/vundle.png"/&gt;&lt;/p&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;同类插件 &lt;a href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt;, &lt;a href="https://github.com/Shougo/neobundle.vim"&gt;neobundle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依旧是同类插件, &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, 不过这个支持并行安装插件(目测如果是第一次配置机器会快很多....)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="vim"></category></entry><entry><title>分享一份 Vim 简介PPT</title><link href="http://www.wklken.me/posts/2015/05/10/vim-intro.html" rel="alternate"></link><published>2015-05-10T00:00:00+08:00</published><updated>2015-05-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-05-10:/posts/2015/05/10/vim-intro.html</id><summary type="html">&lt;p&gt;这是近期做团队分享的一份ppt, 原稿用&lt;code&gt;markdown&lt;/code&gt;仓促写的, 感谢&lt;code&gt;markdown&lt;/code&gt;及&lt;a href="https://github.com/onesuper/weakpoint"&gt;weakpoint&lt;/a&gt;, 可以直接将&lt;code&gt;markdown&lt;/code&gt;转成ppt&lt;/p&gt;
&lt;p&gt;这次分享主要不是讲vim, 更多的是关于工具的使用和思考&lt;/p&gt;
&lt;p&gt;其实, 无非是记住一些东西, 忘记一些东西, 定制和寻找适合自己的工具, 善用工具, 成为主人而不是奴隶&lt;/p&gt;
&lt;p&gt;将markdown原稿放出, 很多实操演示, 在文稿中是看不到的......&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim"&gt;vim&lt;/h2&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim_1"&gt;vim&lt;/h2&gt;
&lt;p&gt;曲线:&lt;/p&gt;
&lt;p&gt;&lt;img alt="learn-diff" src="/imgs/vim/learn_diff.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim_2"&gt;vim&lt;/h2&gt;
&lt;p&gt;Vim the Six Billion Dollar editor&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Better, Stronger, Faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为你最后一个使用的编辑器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h2 id="vim_3"&gt;vim&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文本编辑器 , 不是IDE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能做一些事情, 但是一些事情是做不到的, 不要强求, 该用IDE的时候, 用就是了&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="how"&gt;how&lt;/h2&gt;
&lt;p&gt;步骤:(简明 Vim …&lt;/p&gt;</summary><content type="html">&lt;p&gt;这是近期做团队分享的一份ppt, 原稿用&lt;code&gt;markdown&lt;/code&gt;仓促写的, 感谢&lt;code&gt;markdown&lt;/code&gt;及&lt;a href="https://github.com/onesuper/weakpoint"&gt;weakpoint&lt;/a&gt;, 可以直接将&lt;code&gt;markdown&lt;/code&gt;转成ppt&lt;/p&gt;
&lt;p&gt;这次分享主要不是讲vim, 更多的是关于工具的使用和思考&lt;/p&gt;
&lt;p&gt;其实, 无非是记住一些东西, 忘记一些东西, 定制和寻找适合自己的工具, 善用工具, 成为主人而不是奴隶&lt;/p&gt;
&lt;p&gt;将markdown原稿放出, 很多实操演示, 在文稿中是看不到的......&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim"&gt;vim&lt;/h2&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim_1"&gt;vim&lt;/h2&gt;
&lt;p&gt;曲线:&lt;/p&gt;
&lt;p&gt;&lt;img alt="learn-diff" src="/imgs/vim/learn_diff.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim_2"&gt;vim&lt;/h2&gt;
&lt;p&gt;Vim the Six Billion Dollar editor&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Better, Stronger, Faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为你最后一个使用的编辑器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h2 id="vim_3"&gt;vim&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文本编辑器 , 不是IDE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能做一些事情, 但是一些事情是做不到的, 不要强求, 该用IDE的时候, 用就是了&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="how"&gt;how&lt;/h2&gt;
&lt;p&gt;步骤:(简明 Vim 练级攻略)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;存活
感觉良好
觉得更好，更强，更快
使用VIM的超能力
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;诀窍:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不断练习

肌肉记忆, 直觉-行动而不是思考-行动(十倍差距)
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="guo-cheng"&gt;过程:&lt;/h2&gt;
&lt;p&gt;一个vimer必定会经历的过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么都没有, 纯vi&lt;/li&gt;
&lt;li&gt;什么都有&lt;/li&gt;
&lt;li&gt;只留适合自己的, 不适合自己也要配置成适合自己的&lt;/li&gt;
&lt;li&gt;什么都没有(听说)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h2 id="target"&gt;target&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实操: vim能做什么?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哪些是你常用编辑器可以实现的?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;哪些好的功能是你想要却没有的? 能否解决&lt;/li&gt;
&lt;li&gt;你的痛点在哪里?&lt;/li&gt;
&lt;li&gt;工作流&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="mo-shi"&gt;模式&lt;/h2&gt;
&lt;p&gt;&lt;img alt="vim-mode" src="https://github.com/wklken/gallery/blob/master/vim/vim-modes.png?raw=true"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="yi-dong-1"&gt;移动1&lt;/h2&gt;
&lt;p&gt;概览&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://github.com/wklken/gallery/blob/master/vim/vim-movement.png?raw=true"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="yi-dong-2"&gt;移动2&lt;/h2&gt;
&lt;p&gt;忘掉刚才那张图......&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="yi-dong-3"&gt;移动3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hjkl (请杜绝方向键, 移动右手到方向键区浪费时间)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &amp;lt;Left&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Right&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Up&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Down&amp;gt; &amp;lt;Nop&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单词: w / b / e (忘记: W/B/E-以空白为分隔符, 要多按shift键键/不好记/用得少)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行内: 0 / $  (忘记: ^, 够不着啊)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;段落: { / }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="yi-dong-4"&gt;移动4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;页: \&amp;lt;ctrl-u&amp;gt; / \&amp;lt;ctrl-d&amp;gt; (忘记: ctrl-f/ctrl-b, 都在左侧键区左手太累, 经常是要上要下, 而不是往一个方向走)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可视范围: H M L (全部忘记, 没多大用, 要按shift, 混淆记忆)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件内: gg / G / :N (基本够了)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匹配处: % 括号匹配 /  # (忘记: *, 在键盘左侧, 太远不好敲, 可以交换#和*的功能)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更强大的, 看后面的插件部分&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="bian-ji"&gt;编辑&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;N\&amp;lt;action&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;x&lt;/li&gt;
&lt;li&gt;dd&lt;/li&gt;
&lt;li&gt;dw / db / d$ / dG / dgg&lt;/li&gt;
&lt;li&gt;yw / yb / y$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yy / p / P&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="che-xiao-he-zhong-fu"&gt;撤销和重复&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;u&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N\&amp;lt;command&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="xuan-zhong"&gt;选中&lt;/h2&gt;
&lt;p&gt;select&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v:  vw / vb / vta / v$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;block select&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\&lt;ctrl+v\&gt; -&amp;gt; hjkl/\&amp;lt;ctrl+d&amp;gt;&lt;/ctrl+v\&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;行首加 / 行尾加&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="sou-suo"&gt;搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;行内搜索: f / t (可以选择性遗忘t, 同时, 忘记F/T, 甚至可以忘记f, 你不需要)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么? 看后面的easy-motion插件&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ti-huan"&gt;替换&lt;/h2&gt;
&lt;p&gt;记住这两个似乎够了(频率最高)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;:1,10s/a/b/g&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;:%s/a/b/g&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字符替换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rX&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="wen-ben-dui-xiang"&gt;文本对象&lt;/h2&gt;
&lt;p&gt;初学者基本不了解的一个特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\&amp;lt;action&amp;gt;a\&amp;lt;object&amp;gt;  or \&amp;lt;action&amp;gt;i\&amp;lt;object&amp;gt;&lt;/li&gt;
&lt;li&gt;a = all /  i = in&lt;/li&gt;
&lt;li&gt;action: d y v c&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;object:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w(world) / s(sentence) / p{paragraph}
" ' ) ] }
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;装插件, 可以是: l(line) e(entire file)  i(indent)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="fen-ping"&gt;分屏&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;:sp file1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;:vsp file2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ctrl-w-h/j/k/l (改键 ctrl-h/j/k/l)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ctrl-w-H/J/K/L&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-1-yu-fa-jian-cha"&gt;插件1: 语法检查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scrooloose/syntastic"&gt;syntastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-2-zi-dong-bu-quan-yu-dai-ma-pian-duan"&gt;插件2: 自动补全与代码片段&lt;/h2&gt;
&lt;p&gt;两大效率神器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YCM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;毫秒级补全/ python / c系等, 编译安装, 具体自行文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/honza/vim-snippets"&gt;vim-snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;括号补全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Raimondi/delimitMate"&gt;delimimate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xml/html标签补全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/docunext/closetag.vim"&gt;closetag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-3-kuai-su-bian-ma"&gt;插件3: 快速编码&lt;/h2&gt;
&lt;p&gt;快速注释:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快速编辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-repeat"&gt;vim-repeat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;去空格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bronson/vim-trailing-whitespace"&gt;vim-trailing-whitespace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码对齐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junegunn/vim-easy-align"&gt;vim-easy-align&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-4-kuai-su-yun-xing"&gt;插件4: 快速运行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thinca/vim-quickrun"&gt;vim-quickrun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-5-kuai-su-yi-dong"&gt;插件5: 快速移动&lt;/h2&gt;
&lt;p&gt;行/位置/搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;vim-easymotion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mark&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kshenoy/vim-signature"&gt;vim-signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-6-kuai-su-xuan-zhong"&gt;插件6: 快速选中&lt;/h2&gt;
&lt;p&gt;区块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/terryma/vim-expand-region"&gt;vim-expand-region&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="cha-jian-7-wen-jian-dao-hang-sou-suo"&gt;插件7: 文件导航/搜索&lt;/h2&gt;
&lt;p&gt;目录导航&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scrooloose/nerdtree"&gt;nerdtree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标签导航&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搜索文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kien/ctrlp.vim"&gt;ctrlp.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搜索代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dyng/ctrlsf.vim"&gt;ctrlsf.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="guan-yu-cha-jian-1"&gt;关于插件1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不是越多越好&lt;/li&gt;
&lt;li&gt;配了用不上 = 没配 + 浪费资源&lt;/li&gt;
&lt;li&gt;同一功能, 对比几个插件, 选择一个合适的&lt;/li&gt;
&lt;li&gt;快捷键配置一定要容易记&lt;/li&gt;
&lt;li&gt;相信我, 一个插件用的最多的快捷键就两个, 绝大多数情况下不会多于两个, 不用耗费心力在配置&lt;code&gt;更强大的&lt;/code&gt;操作上&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="guan-yu-cha-jian-2"&gt;关于插件2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;更符合自觉的键位/操作&lt;/li&gt;
&lt;li&gt;尽量减少敲击次数&lt;/li&gt;
&lt;li&gt;杜绝一切无效的敲击&lt;/li&gt;
&lt;li&gt;个性化, 定制到每个细节, 力争解决自己所有痛点&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="gao-ji"&gt;高级&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;怎么配置:&lt;/p&gt;
&lt;p&gt;参考下别人的vim配置, 读插件文档, 读插件代码, 必要时改一份&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan"&gt;资源&lt;/h2&gt;
&lt;p&gt;配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/spf13-vim"&gt;spf13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/square/maximum-awesome"&gt;maximum-awsome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/bcbe916f97e1"&gt;vim 入门基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kunli.info/2013/08/13/vim/"&gt;不要复杂化vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com/blog/nightire/1190000000445598"&gt;vim 哲学&lt;/a&gt; 一个系列, 推荐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;others:
- &lt;a href="http://vimawesome.com/"&gt;插件库 vimawsome&lt;/a&gt;
- &lt;a href="http://vimcolors.com/"&gt;主题库 vim colors&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="qa"&gt;QA&lt;/h2&gt;
&lt;p&gt;Thx:)&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>k-vim 更新9.0版本</title><link href="http://www.wklken.me/posts/2015/05/05/k-vim-update-v9.html" rel="alternate"></link><published>2015-05-05T00:00:00+08:00</published><updated>2015-05-05T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-05-05:/posts/2015/05/05/k-vim-update-v9.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;直达链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;趁着近期有点时间, 将积累几个月的改进/痛点/更新等处理了一把, &lt;code&gt;k-vim&lt;/code&gt;正式更新到9.0版本.&lt;/p&gt;
&lt;p&gt;如果喜欢, 欢迎star/fork, 欢迎提pr.&lt;/p&gt;
&lt;p&gt;本次更新:  &lt;a href="https://github.com/wklken/k-vim/blob/master/UPDATE_LOG.md"&gt;完整更新日志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;```markdown 
    1. 新增依赖ag(the_silver_searcher)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;安装 [the_silver_searcher](https://github.com/ggreer/the_silver_searcher#installing)

具体见文档

2. 引入 thinca/vim-quickrun

    2.1 以message的方式展示, 同原先的F10行为, 按回车过掉消息
    2.2    F10 运行 / ,r  运行

2. 引入dyng/ctrlsf.vim, 类似 sublimetext的全局搜索

    2.1 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;直达链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;趁着近期有点时间, 将积累几个月的改进/痛点/更新等处理了一把, &lt;code&gt;k-vim&lt;/code&gt;正式更新到9.0版本.&lt;/p&gt;
&lt;p&gt;如果喜欢, 欢迎star/fork, 欢迎提pr.&lt;/p&gt;
&lt;p&gt;本次更新:  &lt;a href="https://github.com/wklken/k-vim/blob/master/UPDATE_LOG.md"&gt;完整更新日志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;```markdown 
    1. 新增依赖ag(the_silver_searcher)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;安装 [the_silver_searcher](https://github.com/ggreer/the_silver_searcher#installing)

具体见文档

2. 引入 thinca/vim-quickrun

    2.1 以message的方式展示, 同原先的F10行为, 按回车过掉消息
    2.2    F10 运行 / ,r  运行

2. 引入dyng/ctrlsf.vim, 类似 sublimetext的全局搜索

    2.1 依赖于ag的全局搜索
    2.2 将光标挪到单词, 快捷键\  - 进入全局搜索, 移入分屏界面, o/t/T/q操作


3. 代码折叠

    3.1 &amp;lt;leader&amp;gt;zz 折叠/打开所有代码toggle(本次新增配置)
    3.2 za 当前光标所在区域折叠toggle(vim默认的)

4. syntastic语法检查

    4.1 修正语法检查错误高亮, 精确到具体错误单词
    4.2 开启python的pep8, 允许忽略某些warning, vimrc.bundles: line 40
    4.3 &amp;lt;leader&amp;gt;s  打开当前文件所有语法错误列表(新增配置)

5.  easymotion

    5.1 &amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;.  重复上一次easymotion命令, 更高效(新增配置)

6. 修改RainbowParentheses, 防止黑色括号出现

7. 修改vim-expand-region快捷键

    7.1 v 扩增选中范围
    7.2 V 缩小选中范围

8. 新增主题tomorrow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;后面, 针对每个插件的使用, 之前笔记整理了一把, 后续逐步发出.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;另外, 开始在实际项目中更多的使用&lt;code&gt;golang&lt;/code&gt;, 最近在搞ELK日志收集统计系统,  做了一个收集任意端上报数据, 落地成日志文件, 然后经由logstash转存储到es.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/http_json_logger"&gt;http_json_logger&lt;/a&gt;: 一个日志上报收集服务, 可以收集从浏览器/js/android/ios等通过http上报的日志, 落地为文本文件, 用作后续日志统计/分析/数据挖掘等. logger模块是使用&lt;code&gt;beego&lt;/code&gt;的logger模块精简后的, 这是第二个&lt;code&gt;golang&lt;/code&gt;项目, 上一个是下拉提示 &lt;a href="https://github.com/wklken/suggestion"&gt;suggestion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一个更新是, 花了两个小时, 给blog文章页面加了生成目录的功能,  另外搞了下阅读时左侧展示当前所在位置标题.(还无法支持响应式......)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;度过了接近一年多的瓶颈期, 过去一年多可能是近几年迷茫和挣扎的一段时间,    眼睁睁看自己在某个地方卡住, 苦苦挣扎, 一步步往前, 这个过程是痛苦的, 独自成长, 一点点地去达成1万小时的目标&lt;/p&gt;
&lt;p&gt;随着时间流逝, 一切在逐渐明晰, 从测试转开发, 正式两年半了, 不短不长, 近期却有很多感悟. 或许, 该有些突破了吧.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;后续在自建wiki的同时, 提高blog的更新频率.&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-05-05 于深圳&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>关于知识管理工具的思考</title><link href="http://www.wklken.me/posts/2015/05/02/about-knowledge-manage-tools.html" rel="alternate"></link><published>2015-05-02T00:00:00+08:00</published><updated>2015-05-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-05-02:/posts/2015/05/02/about-knowledge-manage-tools.html</id><summary type="html">&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="shou-chao-bi-ji"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="shou-chao-bi-ji"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来, 费时费力, 效率极低, 但是就当时环境而言, 不失为一种好的做法(相对于啥都没记来说), &lt;code&gt;好记性不如烂笔头&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;而且, 上课/参加培训等等, 都通过笔记来记录&lt;/p&gt;
&lt;p&gt;手抄的做法, 太过古老, 如果是非技术书籍, 抑或个人喜欢纸质书籍, 不失为一种好的做法. 但是技术书籍, 手抄太过低效, 不易整理, 更不易搜索, 看似积累了很多, 实际沉淀不多.&lt;/p&gt;
&lt;h1 id="word"&gt;word&lt;/h1&gt;
&lt;p&gt;到毕业做测试一年多, 那时大多数情况下是windows系统, 毕业那会刚刚把系统转到ubuntu, 但是工作环境主要还是windows, 用终端连接主机工作.&lt;/p&gt;
&lt;p&gt;正式参加工作, 虽然还经常买纸质书, 但是正儿八经系统啃书的机会相当少, 大部分是工作中碎片化学习的东西, 所以&lt;code&gt;手抄笔记&lt;/code&gt;完全从生活中消失了&lt;/p&gt;
&lt;p&gt;这时候, 开始有意识记录使用电脑记录, 以及整理汇总一些东西.&lt;/p&gt;
&lt;p&gt;这段时间, 系统性整理了linux &amp;amp; shell笔记/vim笔记等, 测试理论, python入门等等.  工作中还是svn, 对git完全没有概念,  更别说markdown了.&lt;/p&gt;
&lt;p&gt;这时候笔记以word形式归总在目录下, 通过金山快盘同步, 后来迁到dropbox了&lt;/p&gt;
&lt;p&gt;那时候evernote/有道笔记还刚刚火起, 对云端没有太多需求, 没怎么关注&lt;/p&gt;
&lt;p&gt;word记录, 相对手抄效率略高, 也方便整理复习, 搜索功能有限.&lt;/p&gt;
&lt;h1 id="you-dao-bi-ji-yin-xiang-bi-ji"&gt;有道笔记 - 印象笔记&lt;/h1&gt;
&lt;p&gt;学习markdown了, 也开始玩github, 这时候云笔记开始火了, 刚好, 开始玩微博, 对各种人各种关注, 天天刷微博, 这个习惯延续至今.&lt;/p&gt;
&lt;p&gt;其实用得最多的只有一个功能: 网页剪藏&lt;/p&gt;
&lt;p&gt;每个人都会经历这么一个阶段, 碰到各种资源信息, 疯狂收集, 不管有用没用, 先搞下来再说.&lt;/p&gt;
&lt;p&gt;然后, 发现有3000+剪藏, 微博上2000+收藏, 后来觉得有道不足够靠谱, 丢过笔记,  本着&lt;code&gt;折腾&lt;/code&gt;的信念, 开始迁移笔记, 3000+剪藏只能以尽量高效的方式废弃: &lt;code&gt;当前不涉及不会接触短期内也不会关注的不管好不好以后有没有用全部删掉&lt;/code&gt;, 这样, 完成了自己的折腾史.&lt;/p&gt;
&lt;p&gt;除了剪藏, 最大的功能就是云同步了, 公司电脑和家里电脑同步. 那时候还在用android机, 移动端记录的需求倒是不怎么强烈&lt;/p&gt;
&lt;p&gt;这期间, 明白了&lt;code&gt;资源再多, 无用就是无用&lt;/code&gt;, 心态上改变了, 微博停止了点&lt;code&gt;收藏&lt;/code&gt;, 那2000+收藏, 也就废弃了. 另外, 也开始进行&lt;code&gt;关注&lt;/code&gt;的整理, 获取有效而稳定的信息流.&lt;/p&gt;
&lt;p&gt;PS: 云笔记最坑的是同步, 然后你发现丢了.....还有, 同步, 你发现冲突了, 然后在两份文件里面diff......都经历过, 心塞&lt;/p&gt;
&lt;h1 id="yin-xiang-bi-ji-ulysess"&gt;印象笔记 - Ulysess&lt;/h1&gt;
&lt;p&gt;印象笔记, 用了一段时间, 这时候也换了&lt;code&gt;mac&lt;/code&gt;和&lt;code&gt;iphone&lt;/code&gt;, 以及后来&lt;code&gt;ipad&lt;/code&gt;, 开始随时记录.&lt;/p&gt;
&lt;p&gt;但是用了一段时间, 发现一个问题: 不支持markdown&lt;/p&gt;
&lt;p&gt;后来, 又有一个问题: 代码高亮也不支持&lt;/p&gt;
&lt;p&gt;后来的后来, 发现: 这编辑功能也太渣了吧&lt;/p&gt;
&lt;p&gt;这时候, 刚好博客都迁移到自己站点, 全markdown静态.&lt;/p&gt;
&lt;p&gt;想着技术部分的笔记是否有一个更好的编辑/展现方式.&lt;/p&gt;
&lt;p&gt;也正好, 这时候对mac app有着一股狂热, 虽然现在过去了, 但是当时刚刚使用mac, 感受到了好处, 开始折腾&lt;code&gt;各类工具&lt;/code&gt;, 正好碰上了&lt;code&gt;ulysess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候, 感觉技术笔记迁移到上面会更好, 然后逐步迁移.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no zuo no die&lt;/code&gt;,  展现不错, 支持markdown, 支持高亮, 对于外貌党来说, 很赞的&lt;code&gt;编辑器&lt;/code&gt;, 是的, 迁完之后, 才想起来, 这货是个编辑器, 不是&lt;code&gt;笔记&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;由于搜索太弱, 不支持多端等等情况, 年前有发生了一次全部笔记给我double了一份, 老天, 几百篇笔记都变成双份了. 我花了一整天时间手工删除重复笔记. (目测可能是icloud的锅)&lt;/p&gt;
&lt;p&gt;死心了, 接着迁移&lt;/p&gt;
&lt;h1 id="wiznote"&gt;WizNote&lt;/h1&gt;
&lt;p&gt;为知笔记, 口碑不错, 试用了几天&lt;/p&gt;
&lt;p&gt;支持markdown, 目测是云笔记系列为数不多能支持这个的.&lt;/p&gt;
&lt;p&gt;然后, 为了&lt;code&gt;弃用&lt;/code&gt; ulysess, 花了点时间迁移完(ulysess作为编辑器还是很赞的, 还在用).&lt;/p&gt;
&lt;p&gt;用着用着, 发现这markdown, 这剪藏, 似乎没有那么&lt;code&gt;理想&lt;/code&gt;, 体验不佳, 用得越多越感觉到&lt;/p&gt;
&lt;p&gt;这时候, 搬了一回家, 发现搬书, 完全是一个自虐的活. 而且很多大部头看过后都不在打开, 很多书被我脱水了也没有阅读价值了......开始转向电子书, 多看&lt;/p&gt;
&lt;p&gt;这时候, 开始思考.......然后, 迁移&lt;/p&gt;
&lt;h1 id="fen-ji-de-zhi-shi-guan-li"&gt;分级的知识管理&lt;/h1&gt;
&lt;p&gt;后来, 到了现在的情况: 分级, 邮件/evernote/gollum&lt;/p&gt;
&lt;h4 id="1-shou-ji"&gt;1. 收集&lt;/h4&gt;
&lt;p&gt;要求: 方便, 阅读格式ok, 不丢&lt;/p&gt;
&lt;p&gt;选择: Evernote国际版, 有条件上个高级版, 别问我为啥不用印象笔记&lt;/p&gt;
&lt;p&gt;专门建立一个笔记本: Inbox, 对于碰到的感兴趣的东西, 一键剪藏, 或者分享到evernote, 简单直接有效, 这点是所有云笔记中做的最好的&lt;/p&gt;
&lt;p&gt;另外, 支持多看读书笔记同步, 感受到这个世界深深地温暖&lt;/p&gt;
&lt;p&gt;PS: 对于微博的处理, 额, 我现在是这么干的: "分享到-邮件", 给自己发邮件, 然后定期处理:), 很有效.(使用unibox, 同一个发件人的邮件都在一个对话窗口里面, 很好处理 )&lt;/p&gt;
&lt;h4 id="2-zheng-li"&gt;2. 整理&lt;/h4&gt;
&lt;p&gt;要求: 易用, 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, mindnode pro, gollum&lt;/p&gt;
&lt;p&gt;主要是一些点, 标注, 做思维导图&lt;/p&gt;
&lt;p&gt;对于观点/经验等等东西, 可以阅读梳理后, 放置到evernote&lt;/p&gt;
&lt;p&gt;对于技术类/干货类东西, 放evernote&lt;/p&gt;
&lt;h4 id="3-chen-dian"&gt;3. 沉淀&lt;/h4&gt;
&lt;p&gt;要求: 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;沉淀是再次提取思考的过程, 还是evernote&lt;/p&gt;
&lt;p&gt;不过, 对于技术类东西, 其实对云同步要求不需要那么高, 所以选择了自建wiki, 写完markdown往目录一扔, 就可以在本地web server上看到, 搜索等等, 是对技术/代码沉淀的最佳工具&lt;/p&gt;
&lt;h4 id="4-sou-suo"&gt;4. 搜索&lt;/h4&gt;
&lt;p&gt;要求: 精准高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;用一下就知道了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这完全是一部&lt;code&gt;折腾&lt;/code&gt;的血泪史, 只有不断经历, 才能进步, 进化, 最终找到适合自己的方式.&lt;/p&gt;
&lt;p&gt;没有最好的方法, 只有最合适的方法, 对工具同理, 所以在整个过程中, 还是建议, 明确自己的需求, 要解决的问题等, 多关注一些东西, 多尝试.&lt;/p&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;
&lt;p&gt;2015-05-02&lt;/p&gt;
&lt;p&gt;wklken 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>Logstash+ElasticSearch+Kibana处理nginx访问日志</title><link href="http://www.wklken.me/posts/2015/04/26/elk-for-nginx-log.html" rel="alternate"></link><published>2015-04-26T00:00:00+08:00</published><updated>2015-04-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-04-26:/posts/2015/04/26/elk-for-nginx-log.html</id><summary type="html">&lt;p&gt;&lt;code&gt;ELK&lt;/code&gt;似乎是当前最为流行的日志收集-存储-分析的全套解决方案.&lt;/p&gt;
&lt;p&gt;去年年初, 公司里已经在用, 当时自己还&lt;code&gt;山寨&lt;/code&gt;了一个统计系统(postgresql-echarts, 日志无结构化, json形式存储到postgresql, 构建统一前端配置生成, 调用统一查询接口, &lt;a href="http://www.wklken.me/posts/2014/11/16/unit-statistics-system.html"&gt;具体细节&lt;/a&gt;), 已经过了一年有余.&lt;/p&gt;
&lt;p&gt;一年刚好, 发生了很多事, 那套系统不知现在如何了.&lt;/p&gt;
&lt;p&gt;在新的公司, 一切都得从0到1, 近期开始关注日志/数据上报/统计, 以及后续的数据挖掘等.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;搭建, 测试并上线了一套简单的系统, 初期将所有服务器的nginx日志, 以及搜索日志进行处理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="elk" src="/imgs/system/elk.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面主要介绍对nginx日志进行处理的过程, 不是针对&lt;code&gt;elk&lt;/code&gt;的介绍, 所有涉及ip的地方都改成&lt;code&gt;127.0.0.1&lt;/code&gt;了, 根据自己环境进行修改&lt;/p&gt;
&lt;h3 id="1-nginxri-zhi-logstash-shipper-redis"&gt;1. nginx日志 -&amp;gt; logstash shipper -&amp;gt; redis&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;centos&lt;/code&gt;使用&lt;code&gt;yum&lt;/code&gt;安装&lt;code&gt;nginx&lt;/code&gt;后 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;ELK&lt;/code&gt;似乎是当前最为流行的日志收集-存储-分析的全套解决方案.&lt;/p&gt;
&lt;p&gt;去年年初, 公司里已经在用, 当时自己还&lt;code&gt;山寨&lt;/code&gt;了一个统计系统(postgresql-echarts, 日志无结构化, json形式存储到postgresql, 构建统一前端配置生成, 调用统一查询接口, &lt;a href="http://www.wklken.me/posts/2014/11/16/unit-statistics-system.html"&gt;具体细节&lt;/a&gt;), 已经过了一年有余.&lt;/p&gt;
&lt;p&gt;一年刚好, 发生了很多事, 那套系统不知现在如何了.&lt;/p&gt;
&lt;p&gt;在新的公司, 一切都得从0到1, 近期开始关注日志/数据上报/统计, 以及后续的数据挖掘等.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;搭建, 测试并上线了一套简单的系统, 初期将所有服务器的nginx日志, 以及搜索日志进行处理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="elk" src="/imgs/system/elk.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面主要介绍对nginx日志进行处理的过程, 不是针对&lt;code&gt;elk&lt;/code&gt;的介绍, 所有涉及ip的地方都改成&lt;code&gt;127.0.0.1&lt;/code&gt;了, 根据自己环境进行修改&lt;/p&gt;
&lt;h3 id="1-nginxri-zhi-logstash-shipper-redis"&gt;1. nginx日志 -&amp;gt; logstash shipper -&amp;gt; redis&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;centos&lt;/code&gt;使用&lt;code&gt;yum&lt;/code&gt;安装&lt;code&gt;nginx&lt;/code&gt;后, 默认&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;中的日志格式定义为:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;log_format&lt;/span&gt;  &lt;span class="s"&gt;main&lt;/span&gt;  &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="nv"&gt;$remote_addr&lt;/span&gt; &lt;span class="s"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$remote_user&lt;/span&gt; &lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$time_local]&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$request"&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;
                  &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="nv"&gt;$body_bytes_sent&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$http_referer"&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;
                  &lt;span class="s"&gt;'"&lt;/span&gt;&lt;span class="nv"&gt;$http_user_agent"&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$http_x_forwarded_for"'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在具体&lt;code&gt;server&lt;/code&gt;配置中使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;access_log /data/logs/nginx/{PROJECT_NAME}_access.log main;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时, 我们需要做的是, 将&lt;code&gt;access log&lt;/code&gt;通过&lt;code&gt;logstash shipper&lt;/code&gt;读取, 转&lt;code&gt;json&lt;/code&gt;, 发送到&lt;code&gt;redis&lt;/code&gt;, 由后续的&lt;code&gt;logstash indexer&lt;/code&gt;进行处理&lt;/p&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;p&gt;1.在日志所在机器部署&lt;code&gt;logstash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.在&lt;code&gt;logstash&lt;/code&gt;安装目录下的&lt;code&gt;patterns&lt;/code&gt;中加入一个文件&lt;code&gt;nginx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;内容(与上面的&lt;code&gt;log_format&lt;/code&gt;相对应)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NGUSERNAME [a-zA-Z\.\@\-\+_%]+
NGUSER %{NGUSERNAME}
NGINXACCESS %{IPORHOST:clientip} - %{NOTSPACE:remote_user} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NOTSPACE:http_x_forwarded_for}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.增加一个&lt;code&gt;logstash&lt;/code&gt;配置文件: &lt;code&gt;logstash-project-access-log.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意, input的file, filter的grok, output的redis-key&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    input {
    file {
        path =&amp;gt; [ "/data/logs/nginx/xxxx_access.log" ]
        start_position =&amp;gt; "beginning"
    }
    }

    filter {
    mutate { replace =&amp;gt; { "type" =&amp;gt; "nginx_access" } }
    grok {
        match =&amp;gt; { "message" =&amp;gt; "%{NGINXACCESS}" }
    }
    date {
        match =&amp;gt; [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
    }
    geoip {
        source =&amp;gt; "clientip"
    }
    }


    output {
    redis { host =&amp;gt; "127.0.0.1" data_type =&amp;gt; "list" key =&amp;gt; "logstash:xxxx:access_log" }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.使用&lt;code&gt;supervisor&lt;/code&gt;启动&lt;code&gt;shipper&lt;/code&gt;.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [program:logstash_xxxx_shipper]
    command=/var/shell/logstash/bin/logstash -f /var/shell/logstash/configs/nginx-xxxx-shipper.conf
    numprocs=1
    autostart=true
    autorestart=true
    log_stdout=true
    log_stderr=true
    logfile=/data/logs/logstash/logstash_xxxx_access.log
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-redis-logstash-indexer-elasticsearch"&gt;2. redis -&amp;gt; logstash indexer -&amp;gt; elasticsearch&lt;/h3&gt;
&lt;p&gt;注意, input的redis为上一步redis配置, key要对应, output的elasticsearch配置, &lt;code&gt;index&lt;/code&gt;指定了最终es中存储对应的index, 加日期, 方便对日志进行定期删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input {
redis {
    host =&amp;gt; "127.0.0.1"
    port =&amp;gt; "6379"
    key =&amp;gt; "logstash:xxxx:access_log"
    data_type =&amp;gt; "list"
    codec  =&amp;gt; "json"
    type =&amp;gt; "logstash-arthas-access"
    tags =&amp;gt; ["arthas"]
}
}

output {
elasticsearch {
    host =&amp;gt; "127.0.0.1"
    index =&amp;gt; "logstash-arthas-access-%{+YYYY.MM.dd}"
}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-elasticsearch-kibana"&gt;3. elasticsearch -&amp;gt; kibana&lt;/h3&gt;
&lt;p&gt;剩下的其实没什么了, 启动&lt;code&gt;kibana&lt;/code&gt;后, 配置好指向的&lt;code&gt;es&lt;/code&gt;, 就可以在&lt;code&gt;kibana&lt;/code&gt;中查看到实时的日志数据&lt;/p&gt;
&lt;p&gt;demo环境截图&lt;/p&gt;
&lt;p&gt;&lt;img alt="kibana-nginx" src="/imgs/system/kibana-nginx.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kibana&lt;/code&gt;中, 支持各种统计, 着实让人惊艳了一把.&lt;/p&gt;
&lt;p&gt;除了基本的nginx日志, 还需要在各类url入口, 加入平台, 渠道等信息, 这样通过nginx访问日志, 可以统计到更多的信息&lt;/p&gt;
&lt;p&gt;当然, 如果需要一些更为精确/特殊的统计, 需要自行进行数据上报的工作.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="hou-xu_1"&gt;后续&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;更多的类型的日志聚合, 包括各类访问日志, 统计上报日志等, 日志落地成文件, 永久留存, 转入es中, 只留存三个月&lt;/li&gt;
&lt;li&gt;如何对各类数据进行拆分/汇总&lt;/li&gt;
&lt;li&gt;ELK整体部署/运维/扩容等, 包括数据清理&lt;/li&gt;
&lt;li&gt;基于ES日志的业务自定义统计后台(kibana无法满足一些具体业务的统计需求)&lt;/li&gt;
&lt;li&gt;为什么不使用&lt;code&gt;logstash forwarder&lt;/code&gt;, 因为目前日志组成等较为简单, 简单处理 , 后续需要用到时再考虑&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h1 id="qi-ta_1"&gt;其他&lt;/h1&gt;
&lt;h2 id="1-guan-yu-logformathe-dui-ying-grokde-pei-zhi"&gt;1. 关于&lt;code&gt;logformat&lt;/code&gt;和对应&lt;code&gt;grok&lt;/code&gt;的配置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;grok&lt;/code&gt;是&lt;code&gt;logstash&lt;/code&gt;的一个插件,  &lt;a href="http://logstash.net/docs/1.4.2/filters/grok"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grok is currently the best way in logstash to parse crappy unstructured log data into something structured and queryable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以, 我们在处理&lt;code&gt;nginx&lt;/code&gt;日志时, 需要根据具体&lt;code&gt;logformat&lt;/code&gt;定义对应的&lt;code&gt;grok&lt;/code&gt;表达式&lt;/p&gt;
&lt;p&gt;除了上面例子中用的那套,  另一份&lt;/p&gt;
&lt;p&gt;logformat&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  log_format logstash '$http_host '
                      '$remote_addr [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      '$request_time '
                      '$upstream_response_time';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;patterns/nginx&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NGUSERNAME [a-zA-Z\.\@\-\+_%]+
NGUSER %{NGUSERNAME}
NGINXACCESS %{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float} %{NUMBER:upstream_time:float}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想自行定义, 可以使用 &lt;a href="https://grokdebug.herokuapp.com/"&gt;grokdebug&lt;/a&gt;, 将要解析的日志和配置的正则放入, 可以查看最终得到的结构化数据&lt;/p&gt;
&lt;h2 id="2-elasticsearchcha-jian"&gt;2. elasticsearch插件&lt;/h2&gt;
&lt;p&gt;初期只安装了一个 &lt;a href="https://github.com/lmenezes/elasticsearch-kopf"&gt;kopf&lt;/a&gt;, web界面查看&lt;/p&gt;
&lt;h2 id="3-supervisor"&gt;3. supervisor&lt;/h2&gt;
&lt;p&gt;建议使用&lt;code&gt;supervisor&lt;/code&gt;对&lt;code&gt;elk&lt;/code&gt;进行管理,(ps. 不要用yum自带的, 版本太旧好多坑, 浪费1小时......使用pip install安装最新版本即可)&lt;/p&gt;
&lt;p&gt;配置示例&lt;code&gt;elk.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:elasticsearch]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/shell/elk/elasticsearch/bin/elasticsearch&lt;/span&gt;
&lt;span class="na"&gt;numprocs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[program:kibana]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/shell/elk/kibana/bin/kibana&lt;/span&gt;
&lt;span class="na"&gt;numprocs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[program:logstash_arthas]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/shell/elk/logstash/bin/logstash -f /var/shell/elk/logstash/config/xxxx_access.conf&lt;/span&gt;
&lt;span class="na"&gt;numprocs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;log_stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;log_stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/data/logs/elk/logstash/logstash_arthas_access.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="4-logstashkeng"&gt;4. logstash坑&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;start_position =&amp;gt; "beginning"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;logstash, 会记录一份文件读到的位置, 在$HOME/.sincedb_xxxxx 如果要让logstash重新读取文件, 删除之即可, 重启&lt;code&gt;shipper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是你可能发现es中重复记录了, 这是因为, 在&lt;code&gt;output&lt;/code&gt;中, 没有定义存储到es时使用的&lt;code&gt;document_id&lt;/code&gt;, es全部当成新纪录存入, 导致数据重复&lt;/p&gt;</content><category term="system"></category></entry><entry><title>2014, 在变化与坚持中前进</title><link href="http://www.wklken.me/posts/2015/03/18/summary-10-2014.html" rel="alternate"></link><published>2015-03-18T00:00:00+08:00</published><updated>2015-03-18T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-03-18:/posts/2015/03/18/summary-10-2014.html</id><summary type="html">&lt;p&gt;每年都来个总结, 似乎好多年了.&lt;/p&gt;
&lt;p&gt;今年的总结拖了三个月, 为什么呢? 不说了, 什么都是理由罢了.  今天在角落里发现了这个, 想想, 还是发出来吧.&lt;/p&gt;
&lt;p&gt;开始, 依旧很杂.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/coding-life.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="gong-zuo"&gt;工作&lt;/h1&gt;
&lt;p&gt;今年(2014, 快一年了), 发生了一件事, 然后公司没了, 囧.&lt;/p&gt;
&lt;p&gt;总之, 不愉快的过程, 见证了快播的终结.&lt;/p&gt;
&lt;p&gt;这或许就是所谓的变化, 以及生活. 安详平和的环境可能瞬间被撕裂. 你永远不知道明天会是什么样的.&lt;/p&gt;
&lt;p&gt;年后回来的时候, 还在愉快的码代码, 写一个统计系统, 然后事情就发生了, 然后依旧继续在优化统计系统, 写了一个月, 然后就结束了.&lt;/p&gt;
&lt;p&gt;一切太过仓促, 没什么时间思考.&lt;/p&gt;
&lt;p&gt;思及自己似乎一年多一直不能说止步不前,  但似乎长进没有预想中的那样大, 所以决定离开. 这个决定主要是从心, 直觉—"做事情总是追求意义"&lt;/p&gt;
&lt;p&gt;善始善终, 逐一交接完毕, 然后离开.&lt;/p&gt;
&lt;p&gt;没什么后悔的. 只是曾经的战友, 如今已各在一方.&lt;/p&gt;
&lt;p&gt;感谢快播, 一年多日子, 一切, 唯有感恩 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;每年都来个总结, 似乎好多年了.&lt;/p&gt;
&lt;p&gt;今年的总结拖了三个月, 为什么呢? 不说了, 什么都是理由罢了.  今天在角落里发现了这个, 想想, 还是发出来吧.&lt;/p&gt;
&lt;p&gt;开始, 依旧很杂.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/coding-life.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="gong-zuo"&gt;工作&lt;/h1&gt;
&lt;p&gt;今年(2014, 快一年了), 发生了一件事, 然后公司没了, 囧.&lt;/p&gt;
&lt;p&gt;总之, 不愉快的过程, 见证了快播的终结.&lt;/p&gt;
&lt;p&gt;这或许就是所谓的变化, 以及生活. 安详平和的环境可能瞬间被撕裂. 你永远不知道明天会是什么样的.&lt;/p&gt;
&lt;p&gt;年后回来的时候, 还在愉快的码代码, 写一个统计系统, 然后事情就发生了, 然后依旧继续在优化统计系统, 写了一个月, 然后就结束了.&lt;/p&gt;
&lt;p&gt;一切太过仓促, 没什么时间思考.&lt;/p&gt;
&lt;p&gt;思及自己似乎一年多一直不能说止步不前,  但似乎长进没有预想中的那样大, 所以决定离开. 这个决定主要是从心, 直觉—"做事情总是追求意义"&lt;/p&gt;
&lt;p&gt;善始善终, 逐一交接完毕, 然后离开.&lt;/p&gt;
&lt;p&gt;没什么后悔的. 只是曾经的战友, 如今已各在一方.&lt;/p&gt;
&lt;p&gt;感谢快播, 一年多日子, 一切, 唯有感恩.&lt;/p&gt;
&lt;p&gt;离职后, 念及自己上次换工作的gap之一几天, 这次决定休息一下, 北上行走, 后面说, 需要想清楚一些东西.(&lt;a href="http://www.wklken.me/posts/2014/07/22/summary-09-longjourney-and-three-years.html"&gt;千里行纪&amp;amp;工作三周年小结&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;回来后, 疯狂地睡了一整天.&lt;/p&gt;
&lt;p&gt;然后慢悠悠地宅了一个月(物极必反), 上网, 看书, 充充电, 追美剧......过着一个人的世界.&lt;/p&gt;
&lt;p&gt;后来想想, 要找点事干了. 然后开始找工作, 历时一周(准确来说两天), 又是一个决定, 来了现在的公司.(广告时间, &lt;a href="http://www.itianpin.com/"&gt;甜品礼物&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;我总认为, 迄今也一直坚持的一个观点, 活着, 总要做一些事情, 创造一些价值, 当然, 前置的一个观点是, 你需要做自己喜欢的事情.&lt;/p&gt;
&lt;p&gt;目前的工作, 恰好都符合, 我正在做自己喜欢的事情, 也在努力做好, 也认同自己做的工作的价值, 跟随着项目以及公司, 逐步成长.&lt;/p&gt;
&lt;p&gt;我能真真实实感受到那种演化成长的过程.&lt;/p&gt;
&lt;p&gt;现在已经六个月了, 最大的感受是, 和一群靠谱的人, 在做一件有意义的事情. 虽然过程中, 有碰撞, 冲突, 阵痛, 但是经历了, 才一步步解决和成长&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe, We are making history.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记得面试的时候被问到&lt;code&gt;What do you want to build? What do you want to change?&lt;/code&gt;, 到现在依旧反复自问.&lt;/p&gt;
&lt;p&gt;新的环境, 新的伙伴, 开始的新的征程.&lt;/p&gt;
&lt;p&gt;我给新伙伴的纸条里总会反复反复出现一句话(有偷懒的嫌疑)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;既然选择了远方, 便只顾风雨兼程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, 继续前进.&lt;/p&gt;
&lt;p&gt;附, 之前写的一段话:) 对糖厂有兴趣的同学可以找我咨询......&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在甜品工作是一种怎样的体验?

蟹妖&amp;gt;_&amp;lt;

这是一种什么感觉呢? 就是见证一个项目从第一行代码, 逐渐壮大, 完善, 重构, 在自己手中最终进化成一套完美的系统:)。 更重要的是, 代码, 不仅仅是一个个字符, 它有了其存在的意义和价值。 在这里, 可以安安静静一气呵成码一天代码, 也可以找产品 PK 需求, 找小伙伴一起讨论方案, 吐吐槽发发呆跑跑步。 什么是时间管理? 什么是拥抱变化? 什么是团队协作? ......有困难, 有冲突, 有想法, 有方案, 有成长。 既然选择了远方, 便只顾, 风雨兼程。
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="learning-by-doing"&gt;learning by doing&lt;/h1&gt;
&lt;p&gt;2014年, 尝试去学很多东西, 但是最后却发现, 貌似变成了记录/整理很多东西, 烂尾了很多项目....&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;p&gt;很多沉没成本在里面.&lt;/p&gt;
&lt;p&gt;解决方案无他, 做一些东西出来.&lt;/p&gt;
&lt;p&gt;开搞一些东西, 尽请期待吧:)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="chong-tu-yu-cheng-chang"&gt;冲突与成长&lt;/h1&gt;
&lt;p&gt;这是之前在知乎上看到的一个观点: 没有冲突, 谈何成长.&lt;/p&gt;
&lt;p&gt;我个人一个弱点, 就是很容易被说服.&lt;/p&gt;
&lt;p&gt;这属于性格上的缺陷, 不够tough(too nice to everyone and everything), 在生活或者工作上, 总是避免冲突.&lt;/p&gt;
&lt;p&gt;极力避免冲突, 但现实是冲突是无法避免的, 而我这样做是不对的&lt;/p&gt;
&lt;p&gt;这直接导致了一路走来, 似乎成长不多.&lt;/p&gt;
&lt;p&gt;一路顺风顺水顺心, 似乎看起来很好, 其实失去的更多不是么?&lt;/p&gt;
&lt;p&gt;所谓”稳定”与”变化”的对立, 生活总是在变化的, 而变化势必导致冲突, 如何应对, 处理冲突? 这常常考验一个人的各个方面.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can't make everyone happy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎还是明白晚了, 2014年开始的时候, 有一段时间纠结于一些不该纠结的事情,  作为一个不合格的组长, 带了一段时间的队. 不过不经历, 或许也就不会明白, 不是么.&lt;/p&gt;
&lt;p&gt;所以, 结论是: 不要刻意去避免冲突, 把自己一直放在舒适区里, 就很难得到更多成长的机会.(有序, 原则, 底线, 规则)&lt;/p&gt;
&lt;p&gt;不那么友好, 但是, 这才是正确的做事风格&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="bian-hua"&gt;变化&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;拥抱变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 Ali 的文化之一, 一直铭记.&lt;/p&gt;
&lt;p&gt;时间在快速向前, 一切都在变化.&lt;/p&gt;
&lt;p&gt;世界上没有不变的东西, 只有相对不变的东西.&lt;/p&gt;
&lt;p&gt;从偏向来说, 做后端开发会采取相对保守的策略.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;以不变应万变&lt;/code&gt;这是目标之一, 但是现实中往往不尽人意, 需求变更神马的都是家常, 很多时候要为一些问题承担后果.&lt;/p&gt;
&lt;p&gt;如何快速应对, 去拥抱变化, 这是一个问题.&lt;/p&gt;
&lt;p&gt;包括能力上, 以及心境上.&lt;/p&gt;
&lt;p&gt;能力上, 更多的是考验对需求的理解以及编码的功底. 如何在设计初期尽可能多考虑, 编码期模块接口等足够灵活等等&lt;/p&gt;
&lt;p&gt;心境上, 要接受, 不排斥, 要意识到变化总是会存在的, 去想办法解决, 坦然受之.&lt;/p&gt;
&lt;p&gt;但是, &lt;code&gt;变化&lt;/code&gt;也是有底线的, 例如上线前临阵改需求等, 需要坚守自己底线. 这不是一般的坑, 是大坑.&lt;/p&gt;
&lt;p&gt;归到底, 不惧怕变化, 惧怕的是不可控的变化.&lt;/p&gt;
&lt;p&gt;学会试着去拥抱变化.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="sheng-huo-yu-she-jiao-intj-de-wei-cheng"&gt;生活与社交 — INTJ 的围城&lt;/h1&gt;
&lt;p&gt;内倾/直觉/思考/判断, 有兴趣可以去看看十六型人格.&lt;/p&gt;
&lt;p&gt;INTJ, 对码农这门职业, 似乎有属性加成来的:)&lt;/p&gt;
&lt;p&gt;但是, 对于生活社交, 似乎是灾难性的. 想太多, 看太多, 太过依赖直觉, 排斥一切无意义的事情.&lt;/p&gt;
&lt;p&gt;INTJ, 在很多事情上, 注定是悲剧?!!&lt;/p&gt;
&lt;p&gt;2014, 彻底&lt;code&gt;宅&lt;/code&gt;的一年, 疯狂地看书, 刷电影, 刷美剧, 刷代码, 刷微博.......没有目的和方向, 同时战线拉太长导致了很多烂尾的半成品, 还有很多看了半本的书.&lt;/p&gt;
&lt;p&gt;2014的一年, 这方面, 糟透了.&lt;/p&gt;
&lt;p&gt;反思下来, 似乎自己逃避很多, 彻彻底底的逃避.&lt;/p&gt;
&lt;p&gt;生活, 是时候做些改变了.&lt;/p&gt;
&lt;p&gt;需要, 把一些该办的事情办了.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="its-always-about-time"&gt;It’s always about time.&lt;/h1&gt;
&lt;p&gt;我们所在对抗的, 或者顺应的, 是一种叫做命运的东西&lt;/p&gt;
&lt;p&gt;很多问题想不明白, 生活中存在很多悖论.&lt;/p&gt;
&lt;p&gt;例如, 要成为什么样的人? 要去做什么? 要怎么做? 活着的意义? 时间的本质? 生存的本质?&lt;/p&gt;
&lt;p&gt;时间是把杀猪刀, 今天度过了很多关键性节点, 例如, 毕业三周年, 例如来深两周年.&lt;/p&gt;
&lt;p&gt;时间无情地收割一切, 无能为力, 无可奈何.&lt;/p&gt;
&lt;p&gt;有时候, 看到一些景, 例如斑驳的阳光, 夕阳, 落叶, 车流, 人流, 总是想起以前某个时刻的感觉, 却想不清, 到底确切是哪个时刻了. 逝去的总是美好的, 而一切都在逝去.&lt;/p&gt;
&lt;p&gt;我总是试图, 去寻找一切东西的意义, 却总是求而不得 ,所以迷茫&lt;/p&gt;
&lt;p&gt;总感觉明白的太晚, 悟太晚, 太过纠结, 不够洒脱, 性格上还未经磨砺,&lt;/p&gt;
&lt;p&gt;总告诉自己, &lt;code&gt;给生活做减法, 那些抛弃的, 就抛弃吧, 不用顾虑太多, 人生太短, 哪来那么多顾虑&lt;/code&gt;, 却总做不到. 性格很多缺陷.&lt;/p&gt;
&lt;p&gt;一重心障, 破之便是新世界, 呆着? 不可能!&lt;/p&gt;
&lt;p&gt;我还没有能力完全掌控自己的生活, 拒绝去做那些自己不喜欢的事情, 生活尚未能完全掌控.&lt;/p&gt;
&lt;p&gt;我不知道未来会怎么样&lt;/p&gt;
&lt;p&gt;无力, 力争活在当下, 仅此而已.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多时候, 不要去想以后, 等我有空了, 等过年了什么的, 想起来, 就去做, 当天当场就去做, 想起来, 就去实施, 人生, 很容易在这种等等等的过程中消耗掉&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="sheng-huo"&gt;生活&lt;/h1&gt;
&lt;p&gt;码农有生活么?&lt;/p&gt;
&lt;p&gt;废话.&lt;/p&gt;
&lt;p&gt;2014匆匆, 过得并不如何, 自己过得太随意, 也就没有什么回想了.&lt;/p&gt;
&lt;p&gt;好像连续拍了几十天的天空, 然后断了, 连续坚持每周末暴走, 然后也断了, 然后说好的看书, 也没坚持, 然后起了好多side project, 也没坚持, 然后......不提了&lt;/p&gt;
&lt;p&gt;2015争取慢慢,  丰富些, 自由些.&lt;/p&gt;
&lt;p&gt;年底的时候重读了&lt;code&gt;三体&lt;/code&gt;和&lt;code&gt;remote&lt;/code&gt;, 两本不搭边的书, 却给了自己很多想法.&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="2014nian-du-pan-dian"&gt;2014年度盘点&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;年度iOS app: windy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;午睡神器, 抗干扰, 唯一缺点, 可能睡过头......&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度mac app:   things&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重回GTD, 这是继do.im/clear/omini focus/wunderlist等一系列试用后, 剩下的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度mac app2: dayone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很早就入了, 但是2014用得特别多, 我浏览中竟然发现&lt;code&gt;2014-5-2 吃了今年夏天的第一个甜筒&lt;/code&gt; 这种丧心病狂的记录......不过也蛮好的,  一年点滴, 尽在其中.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度买的最值的东西:   gunnar眼镜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;续航能力提升不少, 缺点是, 要提醒自己起来动一动......&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度图书: Remote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重读&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度电影: 星际穿越&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电影院看了三遍.....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度游戏:  纪念碑谷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我火星了?......&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;年度音乐:  Lui Si Chiama&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下了黄山, 在梅雨纷纷赶往南京路上, 电台推过来的, 循环了一路, 然后回来找不到(听不懂加不记歌名的后果), 找个半个月, 终于电台又给我推了一次, 感谢虾米......&lt;/p&gt;
&lt;h2 id="2014nian-du-ji-hua-pan-dian"&gt;2014年度计划盘点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;学习一门新语言. 学习javascript, golang和ruby,js的话上半年工作需要去学的, 写了一个统计后台组件, golang, 写了一个完整的项目, ruby, 仅学习了下范式, 挖坑新项目中.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;, 完成一个版本. 两个大版本, 目前version8.0, star 1100+, 并衍生的一个服务器版本&lt;a href="https://github.com/wklken/vim-for-server"&gt;vim-for-server&lt;/a&gt;. &lt;a href="https://github.com/wklken/suggestion"&gt;suggestion&lt;/a&gt;完成golang版本重构及上线,  &lt;a href="https://github.com/wklken/stackoverflow-py-top-qa"&gt;stackoverflow-py-top-qa&lt;/a&gt;翻译计划一直停滞, 还剩40个问题. 其他还有几个坑慢慢走, 感觉一直不务正业......&lt;/li&gt;
&lt;li&gt;博客, 目标是50篇, 最终完成了40篇, 还好&lt;/li&gt;
&lt;li&gt;读书, 目标是50本, 最终完成70的样子, 超额完成任务&lt;/li&gt;
&lt;li&gt;旅行, 去一个地方. 去了, 走了十三天, 想明白了一些东西&lt;/li&gt;
&lt;li&gt;回趟学校. 回了, 景依旧, 人不在&lt;/li&gt;
&lt;li&gt;做几个满意的项目. 今年连续写了几个项目, 一般般, 没有什么特别满意的东西, 开始挖坑新的独立项目.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ps. 今年在自己blog和相关项目放了buy me a coffee的donation链接, 收到了不少朋友的donation, 非常感谢:)&lt;/p&gt;
&lt;h2 id="2015xin-de-ji-hua"&gt;2015新的计划&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;读完APUE/各种源码等&lt;/li&gt;
&lt;li&gt;例行: 学习一门新语言, haskell/lisp(一年一门系列).&lt;/li&gt;
&lt;li&gt;重要:把一些该做的事情做了, 不再逃避(&lt;strong&gt;*&lt;/strong&gt;*)&lt;/li&gt;
&lt;li&gt;例行: keep reading * 30, 只读经典.&lt;/li&gt;
&lt;li&gt;例行: 旅行, 似乎该去大西北了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2014, 是变化和积累的一年&lt;/p&gt;
&lt;p&gt;2015, 我希望是大后期的输出一年:)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;so. 把该搞定的事情都搞定了&lt;/p&gt;
&lt;p&gt;放开, 往前奔跑, 前方如何, 暂时不管了&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>Python-基础-时间日期处理小结</title><link href="http://www.wklken.me/posts/2015/03/03/python-base-datetime.html" rel="alternate"></link><published>2015-03-03T00:00:00+08:00</published><updated>2015-03-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-03-03:/posts/2015/03/03/python-base-datetime.html</id><summary type="html">&lt;p&gt;好久没写文了, 继续清理笔记, 都是一些小结之类的, 源码分析以及在做系统中一些细节难点等, 后续逐步发&lt;/p&gt;
&lt;p&gt;另外打个广告, &lt;a href="http://www.itianpin.com/join"&gt;甜品礼物&lt;/a&gt;, 坐标深圳, 有兴趣的同学可以给我发邮件, 非python职位会转到对应同事:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      _       _       _   _
     | |     | |     | | (_)
   __| | __ _| |_ ___| |_ _ _ __ ___   ___
  / _` |/ _` | __/ _ \ __| | '_ ` _ \ / _ \
 | (_| | (_| | ||  __/ |_| | | | | | |  __/
  \__,_|\__,_|\__\___|\__|_|_| |_| |_ …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;好久没写文了, 继续清理笔记, 都是一些小结之类的, 源码分析以及在做系统中一些细节难点等, 后续逐步发&lt;/p&gt;
&lt;p&gt;另外打个广告, &lt;a href="http://www.itianpin.com/join"&gt;甜品礼物&lt;/a&gt;, 坐标深圳, 有兴趣的同学可以给我发邮件, 非python职位会转到对应同事:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      _       _       _   _
     | |     | |     | | (_)
   __| | __ _| |_ ___| |_ _ _ __ ___   ___
  / _` |/ _` | __/ _ \ __| | '_ ` _ \ / _ \
 | (_| | (_| | ||  __/ |_| | | | | | |  __/
  \__,_|\__,_|\__\___|\__|_|_| |_| |_|\___|
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;原则, 以&lt;code&gt;datetime&lt;/code&gt;为中心, 起点或中转, 转化为目标对象, 涵盖了大多数业务场景中需要的日期转换处理&lt;/p&gt;
&lt;p&gt;步骤:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 掌握几种对象及其关系
2. 了解每类对象的基本操作方法
3. 通过转化关系转化
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="she-ji-dui-xiang"&gt;涉及对象&lt;/h2&gt;
&lt;h3 id="1-datetime"&gt;1. datetime&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;946118&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'datetime.datetime'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-timestamp"&gt;2. timestamp&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;1421075455.568243&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-time-tuple"&gt;3. time tuple&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-string"&gt;4. string&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'2015-01-12 23:13:08'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-date"&gt;5. date&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="datetimeji-ben-cao-zuo_1"&gt;datetime基本操作&lt;/h2&gt;
&lt;h4 id="1-huo-qu-dang-qian-datetime"&gt;1. 获取当前datetime&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;475680&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-huo-qu-dang-tian-date"&gt;2. 获取当天date&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3-huo-qu-ming-tian-qian-ntian"&gt;3. 获取明天/前N天&lt;/h4&gt;
&lt;p&gt;明天&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三天前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;492226&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59363&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4-huo-qu-dang-tian-kai-shi-he-jie-shu-shi-jian-000000-235959"&gt;4. 获取当天开始和结束时间(00:00:00 23:59:59)&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5-huo-qu-liang-ge-datetimede-shi-jian-chai"&gt;5. 获取两个datetime的时间差&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;44747.768075&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="6-huo-qu-ben-zhou-ben-yue-shang-yue-zui-hou-yi-tian"&gt;6. 获取本周/本月/上月最后一天&lt;/h4&gt;
&lt;p&gt;本周&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sunday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sunday&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本月&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;calendar&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_day_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monthrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;last_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_day_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;last_day&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取上个月的最后一天(可能跨年)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lastMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="guan-xi-zhuan-huan_1"&gt;关系转换&lt;/h2&gt;
&lt;p&gt;几个关系之间的转化&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Datetime Object / String / timestamp / time tuple&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="guan-xi-zhuan-huan-li-zi"&gt;关系转换例子&lt;/h2&gt;
&lt;h4 id="datetime-string"&gt;datetime &amp;lt;=&amp;gt; string&lt;/h4&gt;
&lt;p&gt;datetime -&amp;gt; string&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'2015-01-12 23:13:08'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;string -&amp;gt; datetime&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2014-12-31 18:20:10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h4 id="datetime-timetuple"&gt;datetime &amp;lt;=&amp;gt; timetuple&lt;/h4&gt;
&lt;p&gt;datetime -&amp;gt; timetuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;struct_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_mday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_sec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_wday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_yday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tm_isdst&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;timetuple -&amp;gt; datetime&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;timetuple =&amp;gt; timestamp =&amp;gt; datetime [看后面datetime&amp;lt;=&amp;gt;timestamp]
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h4 id="datetime-date"&gt;datetime &amp;lt;=&amp;gt; date&lt;/h4&gt;
&lt;p&gt;datetime -&amp;gt; date&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;date -&amp;gt; datetime&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h4 id="datetime-timestamp"&gt;datetime &amp;lt;=&amp;gt; timestamp&lt;/h4&gt;
&lt;p&gt;datetime -&amp;gt; timestamp&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timetuple&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;
&lt;span class="mf"&gt;1421077403.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;timestamp -&amp;gt; datetime&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1421077403.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Linux及Bash笔记</title><link href="http://www.wklken.me/posts/2015/01/17/linux-notes.html" rel="alternate"></link><published>2015-01-17T00:00:00+08:00</published><updated>2015-01-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-01-17:/posts/2015/01/17/linux-notes.html</id><summary type="html">&lt;p&gt;第一次接触, 在大学时期, 但是真正去学习和了解, 大概是在刚毕业那年&lt;/p&gt;
&lt;p&gt;到现在, 三年多, 主后端开发, 工具也就是一个command line加vim, 每天开个终端就开始噼里啪啦干活, 兼职一些简单的部署运维工作&lt;/p&gt;
&lt;p&gt;去年, 是变化和积累的一年, 今年, 希望有些产出&lt;/p&gt;
&lt;p&gt;Linux和bash, 记了很多笔记, 逐一梳理出来&lt;/p&gt;
&lt;p&gt;之前的两篇文章 &lt;a href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;LINUX SHELL脚本攻略笔记&lt;/a&gt; 以及 &lt;a href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html"&gt;如何书写SHELL脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也会一并汇总, 这可能是今年唯一产出的一本笔记了, python源码阅读和python基础笔记, 这两个在本地的gitbook上, 工程量太浩大, 后面以博文的形式慢慢发吧:)&lt;/p&gt;
&lt;p&gt;好了, 放到&lt;code&gt;github&lt;/code&gt;上了, 当前10%的样子, 欢迎 &lt;code&gt;star&lt;/code&gt;以及提&lt;code&gt;pr&lt;/code&gt;, 纠正以及丰富之&lt;/p&gt;
&lt;p&gt;地址: &lt;a href="https://github.com/wklken/linux-notes"&gt;https://github.com/wklken/linux-notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先这样......后面开始专注码业余项目去了, 博文产出估计会少点, 当然也不会太少 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;第一次接触, 在大学时期, 但是真正去学习和了解, 大概是在刚毕业那年&lt;/p&gt;
&lt;p&gt;到现在, 三年多, 主后端开发, 工具也就是一个command line加vim, 每天开个终端就开始噼里啪啦干活, 兼职一些简单的部署运维工作&lt;/p&gt;
&lt;p&gt;去年, 是变化和积累的一年, 今年, 希望有些产出&lt;/p&gt;
&lt;p&gt;Linux和bash, 记了很多笔记, 逐一梳理出来&lt;/p&gt;
&lt;p&gt;之前的两篇文章 &lt;a href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;LINUX SHELL脚本攻略笔记&lt;/a&gt; 以及 &lt;a href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html"&gt;如何书写SHELL脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也会一并汇总, 这可能是今年唯一产出的一本笔记了, python源码阅读和python基础笔记, 这两个在本地的gitbook上, 工程量太浩大, 后面以博文的形式慢慢发吧:)&lt;/p&gt;
&lt;p&gt;好了, 放到&lt;code&gt;github&lt;/code&gt;上了, 当前10%的样子, 欢迎 &lt;code&gt;star&lt;/code&gt;以及提&lt;code&gt;pr&lt;/code&gt;, 纠正以及丰富之&lt;/p&gt;
&lt;p&gt;地址: &lt;a href="https://github.com/wklken/linux-notes"&gt;https://github.com/wklken/linux-notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先这样......后面开始专注码业余项目去了, 博文产出估计会少点, 当然也不会太少&lt;/p&gt;
&lt;p&gt;2015-01-17&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>一些nginx配置</title><link href="http://www.wklken.me/posts/2015/01/01/some-nginx-configs.html" rel="alternate"></link><published>2015-01-01T00:00:00+08:00</published><updated>2015-01-01T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-01-01:/posts/2015/01/01/some-nginx-configs.html</id><summary type="html">&lt;p&gt;nginx配置&lt;/p&gt;
&lt;p&gt;开年第一篇, 梳理笔记本中....&lt;/p&gt;
&lt;p&gt;没啥, 一些用到以及后面可能用到的&lt;code&gt;nginx&lt;/code&gt;配置, 记录一下, 备查备用&lt;/p&gt;
&lt;p&gt;ps. 之前一篇 &lt;a href="http://www.wklken.me/posts/2013/11/23/nginx-base.html"&gt;nginx基础笔记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="shi-yong-du-li-mu-lu-ran-hou-includeju-ti-pei-zhi"&gt;使用独立目录, 然后include具体配置&lt;/h2&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx.conf
site/
    a.conf
    b.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http {

    .......
    include /etc/nginx/conf.d/*.conf;
    include sites/*.conf;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gzip-on"&gt;gzip on&lt;/h3&gt;
&lt;p&gt;加到&lt;code&gt;http&lt;/code&gt;模块中, 开启&lt;code&gt;gzip&lt;/code&gt;, 注意&lt;code&gt;gzip_types&lt;/code&gt;配置得是压缩的资源类型&lt;/p&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http {


    .....


    gzip on;
    gzip_min_length …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;nginx配置&lt;/p&gt;
&lt;p&gt;开年第一篇, 梳理笔记本中....&lt;/p&gt;
&lt;p&gt;没啥, 一些用到以及后面可能用到的&lt;code&gt;nginx&lt;/code&gt;配置, 记录一下, 备查备用&lt;/p&gt;
&lt;p&gt;ps. 之前一篇 &lt;a href="http://www.wklken.me/posts/2013/11/23/nginx-base.html"&gt;nginx基础笔记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="shi-yong-du-li-mu-lu-ran-hou-includeju-ti-pei-zhi"&gt;使用独立目录, 然后include具体配置&lt;/h2&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx.conf
site/
    a.conf
    b.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http {

    .......
    include /etc/nginx/conf.d/*.conf;
    include sites/*.conf;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gzip-on"&gt;gzip on&lt;/h3&gt;
&lt;p&gt;加到&lt;code&gt;http&lt;/code&gt;模块中, 开启&lt;code&gt;gzip&lt;/code&gt;, 注意&lt;code&gt;gzip_types&lt;/code&gt;配置得是压缩的资源类型&lt;/p&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http {


    .....


    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 5;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/javascript text/javascript application/x-javascript text/xml application/xml application/xml+rss application/json image/x-icon image/png image/jpg image/jpeg application/font-woff;
    gzip_vary on;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="for-multi-processers_1"&gt;for multi processers&lt;/h2&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;worker_processes  4;
events {
    worker_connections  2048;
    use epoll;
    multi_accept on;
}

worker_rlimit_nofile 100000;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="static-file-cache"&gt;static file cache&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~*&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.(?&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;css&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;js&lt;/span&gt;&lt;span class="o"&gt;)$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;expires&lt;/span&gt; &lt;span class="err"&gt;12h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;access_log&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;add_header&lt;/span&gt; &lt;span class="err"&gt;Cache-Control&lt;/span&gt; &lt;span class="err"&gt;"public"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;proxy_redirect&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="proxy-pass"&gt;proxy pass&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_pass_header&lt;/span&gt; &lt;span class="err"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="err"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Real-IP&lt;/span&gt; &lt;span class="err"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Scheme&lt;/span&gt; &lt;span class="err"&gt;$scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Host&lt;/span&gt; &lt;span class="err"&gt;$http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_redirect&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以设置超时时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        proxy_connect_timeout 500s;
        proxy_read_timeout 500s;
        proxy_send_timeout 500s;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jing-tai-mu-lu-or-wen-jian"&gt;静态目录 or 文件&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    location /movies/ {
        alias /Volumes/Media/Movies/;
        allow all;
    }

    location = /abc.txt {
        alias /data/www/static/abc.txt;
        expires  30d;
        access_log off;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jing-tai-zhan"&gt;静态站&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;       &lt;span class="err"&gt;192.168.1.1:80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt;  &lt;span class="err"&gt;www.abc.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;client_max_body_size&lt;/span&gt; &lt;span class="err"&gt;1M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;access_log&lt;/span&gt; &lt;span class="err"&gt;logs/blog_access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;error_log&lt;/span&gt; &lt;span class="err"&gt;logs/blog_error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;root&lt;/span&gt; &lt;span class="err"&gt;/data/static_site_dir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;index&lt;/span&gt; &lt;span class="err"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fu-wu-zhuan-fa"&gt;服务转发&lt;/h2&gt;
&lt;p&gt;将收到的服务url/参数等, 原封不动转给另一个服务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt;  &lt;span class="err"&gt;www.xxxx.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;~&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;192.168.1.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;is_args&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_read_timeout&lt;/span&gt; &lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="return"&gt;return&lt;/h2&gt;
&lt;p&gt;直接&lt;code&gt;return&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return http_code;
return http_code "content";
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location /api/test/ {
    return 403;
}

location /stat/ {
    return 204;
}

location /ping/ {
    return 200;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="for-mobile"&gt;for mobile&lt;/h2&gt;
&lt;p&gt;移动端和网站端互相跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$uri&lt;/span&gt; &lt;span class="err"&gt;@mobile_rewrite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;^/(&lt;/span&gt;&lt;span class="nt"&gt;login&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;search&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;album&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;404&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;album&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+|&lt;/span&gt;&lt;span class="nt"&gt;item&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+|&lt;/span&gt;&lt;span class="nt"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;)$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$uri&lt;/span&gt; &lt;span class="err"&gt;@mobile_rewrite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;mobile_rewrite&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;http_user_agent&lt;/span&gt; &lt;span class="o"&gt;~*&lt;/span&gt; &lt;span class="s2"&gt;"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$mobile_rewrite&lt;/span&gt; &lt;span class="err"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;http_user_agent&lt;/span&gt; &lt;span class="o"&gt;~*&lt;/span&gt; &lt;span class="s2"&gt;"^(1207|6310|6590|3gso|4thp|50&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="na"&gt;-w&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;)|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|n20&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$mobile_rewrite&lt;/span&gt; &lt;span class="err"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;arg_mobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$mobile_rewrite&lt;/span&gt; &lt;span class="err"&gt;do_not_perform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;arg_mobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$mobile_rewrite&lt;/span&gt; &lt;span class="err"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;mobile_rewrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;perform&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;proxy_pass&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_set_header&lt;/span&gt; &lt;span class="nt"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_set_header&lt;/span&gt; &lt;span class="nt"&gt;X-Real-IP&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;remote_addr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_set_header&lt;/span&gt; &lt;span class="nt"&gt;Host&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;http_host&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_redirect&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;m&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$pc_rewrite&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;($http_user_agent&lt;/span&gt; &lt;span class="err"&gt;~*&lt;/span&gt; &lt;span class="err"&gt;"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge&lt;/span&gt; &lt;span class="err"&gt;|maemo|midp|mmp|netfront|opera&lt;/span&gt; &lt;span class="err"&gt;m(ob|in)i|palm(&lt;/span&gt; &lt;span class="err"&gt;os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows&lt;/span&gt; &lt;span class="err"&gt;(ce|phone)|xda|xiino")&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$pc_rewrite&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;http_user_agent&lt;/span&gt; &lt;span class="o"&gt;~*&lt;/span&gt; &lt;span class="s2"&gt;"^(1207|6310|6590|3gso|4thp|50&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="na"&gt;-w&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;)|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|n20&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$pc_rewrite&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;pc_rewrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/m/(.*)$&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;proxy_pass&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_set_header&lt;/span&gt; &lt;span class="nt"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_set_header&lt;/span&gt; &lt;span class="nt"&gt;X-Real-IP&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;remote_addr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_set_header&lt;/span&gt; &lt;span class="nt"&gt;Host&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;http_host&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nt"&gt;proxy_redirect&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="redirect-to-www"&gt;redirect to www&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt;  &lt;span class="err"&gt;abc.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^(.*)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="allow-and-deny"&gt;allow and deny&lt;/h2&gt;
&lt;p&gt;访问ip控制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location /test/ {
    allow 192.168.1.1;
    deny all;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fu-zai-jun-heng"&gt;负载均衡&lt;/h2&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="err"&gt;upstream&lt;/span&gt; &lt;span class="err"&gt;A&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;192.168.1.1:5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;192.168.1.2:5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sites/a.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {

    location / {
        proxy_pass A;
    }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;h2 id="centos-service-cmds"&gt;centos service cmds&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;检查配置文件正确性
service nginx configtest


重新加载配置
service nginx reload
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="nginx"></category></entry><entry><title>重读&gt;</title><link href="http://www.wklken.me/posts/2014/12/06/are-your-lights-on.html" rel="alternate"></link><published>2014-12-06T00:00:00+08:00</published><updated>2014-12-06T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-12-06:/posts/2014/12/06/are-your-lights-on.html</id><summary type="html">&lt;p&gt;书今年到是读了不少, 50本的目标目测已然超标了:), 发现今年的博客目标还差11篇(50篇), 目测完不成指标了, 随性写写吧, 能写几篇是几篇&lt;/p&gt;
&lt;p&gt;&lt;img alt="are-your-lights-on" src="/imgs/books/are-your-lights-on.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这本书是原先团队老大推荐的, 看过一遍, 后来自己入了一本, 今天重读(发现我越来越喜欢这类很薄的树)&lt;/p&gt;
&lt;p&gt;做事情本质上就是遇到问题，分析问题，解决问题的过程。而对如何解决问题本身，这本书做了一些讨论
           &lt;/p&gt;
&lt;p&gt;三点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 问题是什么（期望和体验）
2. 谁的问题（不同人会有不同的解决方式，责任）
3. 问题来源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了一些原则性的结论，每一点仔细思考分析.&lt;/p&gt;
&lt;p&gt;记得当时总结过一句话: 当”问题”成为问题时, 才是问题.&lt;/p&gt;
&lt;p&gt;值得反复阅读, 以下更多的是做一些摘录&lt;/p&gt;
&lt;h2 id="di-yi-bu-fen-wen-ti-shi-shi-yao"&gt;第一部分: 问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是什么类型的问题? 谁碰到了问题? 问题是什么? 或者说, 此时此刻, 问题的本质是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁碰到了问题? 问题的本质是什么?&lt;/p&gt;
&lt;p&gt;谁的问题? 如果没有负责人, 那将永远得不到解决. 具体到了细节 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;书今年到是读了不少, 50本的目标目测已然超标了:), 发现今年的博客目标还差11篇(50篇), 目测完不成指标了, 随性写写吧, 能写几篇是几篇&lt;/p&gt;
&lt;p&gt;&lt;img alt="are-your-lights-on" src="/imgs/books/are-your-lights-on.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这本书是原先团队老大推荐的, 看过一遍, 后来自己入了一本, 今天重读(发现我越来越喜欢这类很薄的树)&lt;/p&gt;
&lt;p&gt;做事情本质上就是遇到问题，分析问题，解决问题的过程。而对如何解决问题本身，这本书做了一些讨论
           &lt;/p&gt;
&lt;p&gt;三点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 问题是什么（期望和体验）
2. 谁的问题（不同人会有不同的解决方式，责任）
3. 问题来源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了一些原则性的结论，每一点仔细思考分析.&lt;/p&gt;
&lt;p&gt;记得当时总结过一句话: 当”问题”成为问题时, 才是问题.&lt;/p&gt;
&lt;p&gt;值得反复阅读, 以下更多的是做一些摘录&lt;/p&gt;
&lt;h2 id="di-yi-bu-fen-wen-ti-shi-shi-yao"&gt;第一部分: 问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是什么类型的问题? 谁碰到了问题? 问题是什么? 或者说, 此时此刻, 问题的本质是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁碰到了问题? 问题的本质是什么?&lt;/p&gt;
&lt;p&gt;谁的问题? 如果没有负责人, 那将永远得不到解决. 具体到了细节, 责任人负责并弄清楚. 分配到人&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题就是理想状态和现实状态之间的差别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;调整理想状态或者改变现实状态.&lt;/p&gt;
&lt;p&gt;期望和结果, 你能做的, 降低期望, 或者去改变结果.&lt;/p&gt;
&lt;p&gt;“忽略问题”是一种古老但有效的方法(降低敏感度, 降低期望)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们永远不知道问题是什么, 直到我们彻底解决了拜托了这些问题&lt;/p&gt;
&lt;p&gt;别去费力榜缺乏幽默感的人解决问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-er-bu-fen-zhe-ci-de-wen-ti-shi-shi-yao"&gt;第二部分: 这次的问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;不要把别人的解决方法作为定义问题的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你的最终目的是什么? 你的问题本质是什么. focus在问题本身, 而不是问题的解决方法上, 错误地将解决方法作为你的问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;别把问题的解决方案误当做问题的定义, 当这个解决方案是由你提出的时候尤其如此&lt;/p&gt;
&lt;p&gt;如果你解决问题太过神速, 别人根本不会相信你真的解决了问题.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;头疼.....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面对有利可图的问题时, 道德考量很可能就烟消云散了&lt;/p&gt;
&lt;p&gt;即使问题已经解决, 你也无法确定你的问题定义是正确的.&lt;/p&gt;
&lt;p&gt;你永远无法确定已经找到的问题定义是正确的, 但是永远不要停下寻找正确定义的脚步&lt;/p&gt;
&lt;p&gt;不要仓促下结论, 但也不要忽视第一印象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-san-bu-fen-wen-ti-dao-di-shi-shi-yao"&gt;第三部分: 问题到底是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个解决方案都是下一个问题的来源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修复一个bug可能引起另外一个bug&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某些问题最困难的部分就在于发现问题的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你已经麻木了, 无法站在新的视角对事情进行评估, 确定是否有问题存在&lt;/p&gt;
&lt;p&gt;问题和习惯，一旦我们习惯了某些东西，就会对某些问题视而不见，改变习惯是非常困难的事情，每做一件事情的时候，都有必要问下自己，有必要真么做么？
             
事不过三，每次改善一点点，都能节约出很多时间和精力，放在重要的事情&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看你对问题的理解, 如果想不出至少三个可能有出错的地方, 你就没有真正理解这个问题&lt;/p&gt;
&lt;p&gt;问题的关键就是在于首先要意识到问题的存在, 或者让设计者意识到有问题存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;吃自己的狗粮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数不协调之处一经发现很容易解决&lt;/p&gt;
&lt;p&gt;借助外国人/盲人/儿童来检验你给出的定义, 或者让自己设身处地地站到外国人/盲人/儿童的角度来检验.......每转换一次视角, 都会发现新的不协调之处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;切换角度看问题, 发现不协调&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想得到不同的解决方案, 该怎样变换问题的表述方式?......一旦你将一个问题描述拟成了文字, 做些文字游戏, 以确保每个人对问题的理解可以统一.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先, 语义层面, 问问题的方式, 都可能带有偏向或误导, 如何客观地阐述问题?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你沿着定义问题的道路疲倦前行时, 过一会就要回头看看, 确定字节没有走错路&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-si-bu-fen-wen-ti-gai-you-shui-jie-jue"&gt;第四部分: 问题该由谁解决?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当别人可以妥善解决自己的问题是, 不要越俎代庖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特别是leader....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果这是别人的问题, 就把它当成是别人的问题&lt;/p&gt;
&lt;p&gt;如果一个人处于解决问题的位置, 却并不受问题困扰, 那就采取一些行动使他能亲身体验到问题.&lt;/p&gt;
&lt;p&gt;你的灯亮着么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何让别人意识到问题?&lt;/p&gt;
&lt;h2 id="di-wu-bu-fen-wen-ti-lai-zi-na-li"&gt;第五部分: 问题来自哪里?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;人们觉得无力解决问题, 常常把问题归因为天性, 以逃避解决问题的责任.&lt;/p&gt;
&lt;p&gt;大多数情况下, 问题的根源在你自己身上.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记住这一点, 我们往往不承认这一点, 但这是无可辩驳的事实.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;世界上有两种人, 一种人做事, 另一种人制造出事来让其他人做. 远离那些找事让别人做的人, 你就能好好过日子了.&lt;/p&gt;
&lt;p&gt;世界上有两种人, 一种人做事, 另一种人领赏, 做第一种人吧, 那里的争斗比较少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="di-liu-bu-fen-ni-zhen-de-xiang-jie-jue-wen-ti-yao"&gt;第六部分: 你真的想解决问题么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数情况下, 只要知道问题是什么, 解决问题就是一件非常不值一提的事情.&lt;/p&gt;
&lt;p&gt;无论表面上如何, 在你提供他们所要求的东西之前, 他们极少知道自己想要什么.&lt;/p&gt;
&lt;p&gt;从最后的情况看, 想要真正解决问题的人并不是很多.&lt;/p&gt;
&lt;p&gt;人们永远没有足够的时间把它做好, 但永远有足够的时间重新来过.&lt;/p&gt;
&lt;p&gt;人们永远没有足够的时间去考虑到底是不是想要它, 但永远有足够的时间去为之后悔&lt;/p&gt;
&lt;p&gt;鱼, 总是最后一个看到水的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当局者迷.&lt;/p&gt;
&lt;hr/&gt;</content><category term="books"></category></entry><entry><title>重读&gt;</title><link href="http://www.wklken.me/posts/2014/11/30/pomodoro-technique-illustrated.html" rel="alternate"></link><published>2014-11-30T00:00:00+08:00</published><updated>2014-11-30T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-30:/posts/2014/11/30/pomodoro-technique-illustrated.html</id><summary type="html">&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我…)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我…)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很赞同, 打断是效率杀手.&lt;/p&gt;
&lt;p&gt;如果一天打断太多, 加上会太多, 很可能意味着晚上要花时间补回这段时间. That is not cool!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要想做到专注, 你就得坚决抛开各种杂念&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是番茄工作法? 简单来说, 就是列出你当天要做的事, 设置25分钟闹钟, 然后从第一件事开始.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很简单的做法, 但是实践两年多, 感觉行之有效. 而自己的番茄钟, 也根据任务性质长短不一, 从10分钟到1小时不等, 特别是半夜码代码写东西根本停不下来.&lt;/p&gt;
&lt;p&gt;而对于我这种比较懒散的人来说, 最简单的方式才是最好的方式, 例如每个番茄钟的休息时间, 只要自己感觉精力ok, 可以进入下一步, 就开始. 如果感觉一定要继续下去, 那么继续. 灵活运用, 不要僵化了(但是最开始的时候应该对自己严格些).&lt;/p&gt;
&lt;p&gt;同样, 你没有必要买一个番茄钟(我就买了一个…现在放厨房里落灰, 原因是滴答滴答的声音太干扰了), 手机/网页/软件, 你可以发现各类好用的东西, 主旨: 能在适时通知你, 不干扰你的工作和思路, 能记录. (我用的是&lt;code&gt;Vitamin-R 2&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;每隔一段时间, 回顾下所有步骤, 看看有没有需要简化或干脆去掉的步骤.&lt;/p&gt;
&lt;p&gt;我是&lt;code&gt;伪GTD&lt;/code&gt;爱好者, 从狂热到降温, 使用一个个工具, 最终确定了&lt;code&gt;things&lt;/code&gt;这个工具(足够轻). 而GTD步骤, 也被简化到了适合我工作场景的情况.&lt;/p&gt;
&lt;p&gt;不要僵化于步骤, 不要狂热于工具, 关注自己, 关注做事, 工具神马的, 够轻够用就好, 适合自己的才是最好的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一次只做一件事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人是并行动物, 但不意味着你可以同时干几件事.&lt;/p&gt;
&lt;p&gt;同时并行干几件事, 代价太大, 先不说最坏的情况是都干砸了, 最好的都干成了, 但是你也把自己搞得筋疲力尽.&lt;/p&gt;
&lt;p&gt;不断的中断, 上下文切换, 最终导致了&lt;code&gt;cpu&lt;/code&gt;过载......&lt;/p&gt;
&lt;p&gt;一次只做一件事, 集中精力, 高效搞定, 然后下一件.&lt;/p&gt;
&lt;p&gt;或者, 你可以将&lt;code&gt;想法&lt;/code&gt;挂起后台, 到了你真正去做的时候, &lt;code&gt;想法&lt;/code&gt;已经进化并成熟了很多.(亲测有效)&lt;/p&gt;
&lt;p&gt;so, 不要在&lt;code&gt;一边....一边....&lt;/code&gt;, 或许看起来很忙很努力, 就像&amp;lt;&amp;lt;Rewrok&amp;gt;&amp;gt;中提到的&lt;code&gt;工作狂&lt;/code&gt;, 这是很愚蠢的事情.(能多线doing的天才除外啊)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么要用番茄工作法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面对复杂, 望而却步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;无聊琐事, 越拖越久&lt;/li&gt;
&lt;li&gt;小事忙活一天, 大事一件没办&lt;/li&gt;
&lt;li&gt;最后期限, 步步紧逼&lt;/li&gt;
&lt;li&gt;从休息回到工作, 心智调整不过来&lt;/li&gt;
&lt;li&gt;一错再错, 不长记性&lt;/li&gt;
&lt;li&gt;没想到一件事要做这么久&lt;/li&gt;
&lt;li&gt;没想到一件事越做越复杂&lt;/li&gt;
&lt;li&gt;头脑被各种想法占据&lt;/li&gt;
&lt;li&gt;时间都用来学习适应复杂的工作方法了&lt;/li&gt;
&lt;li&gt;只顾低头干活, 忘了抬头看路&lt;/li&gt;
&lt;li&gt;把预估当做承诺            &lt;/li&gt;
&lt;li&gt;牵着不走, 打着倒退&lt;/li&gt;
&lt;li&gt;完美主义, 碍手碍脚&lt;/li&gt;
&lt;li&gt;前怕狼后怕虎, 害怕失败和批评&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过执行一套相同的动作和准备程序, 可以使大脑自我调整, 进入执行某类事务的最佳状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点&lt;code&gt;迷信&lt;/code&gt;的感觉. 但是, 其实目的仅仅是像书里说的, 通知大脑, 我要开始做什么了, 准备好.&lt;/p&gt;
&lt;p&gt;另一个我觉得, 是为了防止中断, 例如开工前去倒好水, 调整好电脑, IM和邮件通知关掉等等,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;短暂的定期休息, 能够促进融会贯通的能力.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It works.&lt;/p&gt;
&lt;p&gt;每隔25分钟, 常规休息, 4个番茄钟后进行15~30分钟阶段休息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“心流”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种精神状态, 创造性的状态.&lt;/p&gt;
&lt;p&gt;明确的目标, 集中, 专注, 自我意识消失, 时间感扭曲, 直接和即时反馈, 能力水平与面对挑战的平衡, 个人控制感, 工作本身的内在奖励, 行为与认知的合一.&lt;/p&gt;
&lt;p&gt;在那种状态下, 效率奇高, 你感觉自己无所不能, 集中专注, 自我意识消失(你不会意识到自己在这种状态下)&lt;/p&gt;
&lt;p&gt;虽然书中提到&lt;code&gt;节奏&lt;/code&gt;一说, 要定时从&lt;code&gt;心流&lt;/code&gt;中跳出规划全局再进入, 但我更倾向于多进入这种状态, 尽可能长地维持, 因为要进入&lt;code&gt;心流&lt;/code&gt;状态, 是很困难的. 如何快速进入也是需要逐渐训练的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在短时间内对工作方法做反复调整&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑, 调整得到&lt;code&gt;正确的姿势&lt;/code&gt;—论如何优雅地工作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法的阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计划: 从inbox里, 得到一张&lt;code&gt;今日待办&lt;/code&gt;的清单(当天的自我承诺)&lt;/li&gt;
&lt;li&gt;跟踪: 开始番茄钟后, 收集一些过程指标, 比如中断次数&lt;/li&gt;
&lt;li&gt;记录: 一天结束时, 将跟踪数据记录归档&lt;/li&gt;
&lt;li&gt;处理: 对跟踪数据进行分析思考, 得到一些特征和规律&lt;/li&gt;
&lt;li&gt;可视化: 将信息组织起来, 找出改进流程的思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是每天要进行的, 个人感觉太重了, 而且重心在改进, 而不再&lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;前期还没有形成自己节奏的时候, 适用, 中后期, 应该将重心放在&lt;code&gt;do&lt;/code&gt;上, 轻化&lt;code&gt;计划&lt;/code&gt;和&lt;code&gt;跟踪&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;处理外部中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是&lt;code&gt;别人的问题&lt;/code&gt;, 进行分派.&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;我的问题&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;邮件/IM过来的, 可视为不紧急, 完成番茄钟后处理&lt;/li&gt;
&lt;li&gt;电话, 一两分钟能done的, 做掉. 不能, 确认紧急程度, 不紧急, 给承诺, add to TODO list, back to work. 紧急的, 到4&lt;/li&gt;
&lt;li&gt;当面, 同2, 确认对方最晚可接受的时间, 如果不紧急, 承诺, 结束对话&lt;/li&gt;
&lt;li&gt;紧急, 给当前工作打断点, 注释或纸笔, 写下当前状态思路, 然后去做紧急的事情.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;书中提到的处理策略: &lt;code&gt;告知(dong something)-协商(when)-计划(todo list)-答复(done)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;怎么区分&lt;code&gt;紧急&lt;/code&gt;, 需要慢慢去学习.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;邮件的处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果答复时间不超过1分钟, 立即答复&lt;/p&gt;
&lt;p&gt;如果需要分派, 分派&lt;/p&gt;
&lt;p&gt;如果可以委托他人, 委托&lt;/p&gt;
&lt;p&gt;如果需要我处理, 不紧急, 回复处理时间, 记todo list&lt;/p&gt;
&lt;p&gt;如果需要我处理, 紧急?(紧急的事情会用邮件? 一般是&lt;code&gt;伪紧急&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;过度学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;达到熟练程度后, 继续学习或者练习的行为.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续改善&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一种工作方法, 以改进为目标, 对渐进变化的专注.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事前预估与时间所花工夫之间经常不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;做预估的方法或能力有待改进&lt;/li&gt;
&lt;li&gt;工作开始后, 又出现新情况, 新问题, 使得环境发生改变.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;p&gt;很多时候, 我们的工作倾向于&lt;code&gt;无序&lt;/code&gt;的, 如何将有限的时间分配到无限的工作中, 需要一些技巧, 并且辅助以工具, 不要神化&lt;code&gt;技巧&lt;/code&gt;, 也不要狂热于&lt;code&gt;工具&lt;/code&gt;, 最重要的是人本身, 是完成事情本身, 学习一些方法(番茄/GTD), 应用, 思考, 改进, 这就够了:)&lt;/p&gt;</content><category term="books"></category></entry><entry><title>关于代码调试de那些事</title><link href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html" rel="alternate"></link><published>2014-11-23T00:00:00+08:00</published><updated>2014-11-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-23:/posts/2014/11/23/how-to-debug.html</id><summary type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么 …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么, 保持清醒&lt;/h3&gt;
&lt;p&gt;代码调试有时候会让你陷入无尽的自我怀疑/迷茫/愤怒/沮丧/窘迫/挫败(无限负能量), 很容易被这些情绪左右, 不清醒, 陷入怀疑自我(一定是我调用的方式不对), 或者怀疑一切(一定是数据库问题, 不对, 缓存问题, 不对, 接口问题, 好像不对, 数据问题), 或者胡乱改代码(改-跑-错了-再改-跑-又错-再改, 传说中的随机行走编程), 或者......(挣扎吧......)&lt;/p&gt;
&lt;p&gt;此刻, 保持清醒的自我是非常重要的, 要明确: &lt;code&gt;我在做什么&lt;/code&gt;, &lt;code&gt;问题是什么症状&lt;/code&gt;, &lt;code&gt;原来逻辑是什么&lt;/code&gt;, &lt;code&gt;最有可能出问题的是哪里&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id="2xiang-qing-chu-liao-zai-xie-dai-ma"&gt;2.想清楚了再写代码&lt;/h3&gt;
&lt;p&gt;如果连需求是什么, 想要做什么都没整明白, 就吭哧吭哧开写, 意图在实践中摸索通向胜利的道路, 是很愚蠢的行为.&lt;/p&gt;
&lt;p&gt;需要去理解需求, 自己要做什么, 然后, 在大脑中构造, 现在有什么, 为了完成需求需要做什么, 完成大体的组成结构/步骤流程的思考后, 再着手去做.&lt;/p&gt;
&lt;p&gt;大到整体设计, 小到一个函数, 都可以这么处理&lt;/p&gt;
&lt;p&gt;例如, 遇到复杂问题, 可以先写注释, 完整所有函数整体设计, 然后再填充细节&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="err"&gt;“””&lt;/span&gt;
        &lt;span class="err"&gt;“””&lt;/span&gt;
        &lt;span class="c1"&gt;# step1: call func test()&lt;/span&gt;

        &lt;span class="c1"&gt;# step2: parse url to &lt;/span&gt;

        &lt;span class="c1"&gt;# step3: judge&lt;/span&gt;

        &lt;span class="c1"&gt;# step4: convert and return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3guan-yu-jiao-shou-jia-dai-ma"&gt;3.关于&lt;code&gt;脚手架&lt;/code&gt;代码&lt;/h3&gt;
&lt;p&gt;在逻辑的关键位置, print/assert关键信息, 用于在调试中迅速确认问题. (一些中间值/状态/条件判断结果)&lt;/p&gt;
&lt;p&gt;当然, 信息除了&lt;code&gt;关键&lt;/code&gt;这个特性, 还需要足够&lt;code&gt;丰富&lt;/code&gt;和&lt;code&gt;显眼&lt;/code&gt;, 一遍一次性定位问题. (既要好看又要有用)&lt;/p&gt;
&lt;p&gt;你需要确定下如何用顺手的编辑器快速输入这些代码, 可以用各类语言的snippets&lt;/p&gt;
&lt;p&gt;例如, 在写python时候, 我很喜欢prt&lt;tab&gt;(k-vim自动补全), 快速插入一些需要的信息&lt;/tab&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"TRACK ================= result"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4xie-wan-yi-duan-dai-ma-di-yi-shi-jian-zi-ji-reviewyi-xia"&gt;4.写完一段代码第一时间自己review一下&lt;/h3&gt;
&lt;p&gt;事实证明, review的效果比写完直接跑再来调, 效率高多了.&lt;/p&gt;
&lt;p&gt;刚写完一段代码, 思路还很清晰, 跳到开始, review过程中注意各类变量, 条件判断, 函数调用, 上下文, 一致性, 错误处理等, 花不了多少时间, 却能发现一些&lt;code&gt;显而易见&lt;/code&gt;的问题, 省下很多无谓的调试时间(没问题不需要调试!).&lt;/p&gt;
&lt;h3 id="5reviewzhong-zhu-yi-dai-ma-shi-kou-guo-lai-de-yao"&gt;5.review中注意, 代码是&lt;code&gt;抠&lt;/code&gt;过来的么?&lt;/h3&gt;
&lt;p&gt;很多时候从其他地方copy代码过来(一行或几行, 有时候只是一个函数调用或一个判断), 但是很容易忘了根据当前情况修改一些必要的值, 导致问题&lt;/p&gt;
&lt;p&gt;例如函数调用, 这个地方调用参数可能跟你copy这行代码需要参数不一样, 但是放在这里并不会报错(一切运作正常), 最终结果并不对.....&lt;/p&gt;
&lt;p&gt;好了, 开始调试&lt;/p&gt;
&lt;h3 id="6gao-ming-bai-wen-ti-de-biao-xian-shi-shi-yao-zheng-zhuang"&gt;6.搞明白问题的表现是什么(症状)&lt;/h3&gt;
&lt;p&gt;运行代码, 报错了, 有些人会瞬切回编辑器, 开始改代码(作高效状)......&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;问题是: &lt;code&gt;报错提示你看了么, 看明白了么?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在大部分语言, 其报错提示已经很明显了, 精确到行/变量, 虽然整个异常栈信息可能很长(非常长), 但是都有其特征(在最前或在最后,或在中间靠后, 有关键字), 仔细看下报错信息, 精确制导才是王道.&lt;/p&gt;
&lt;p&gt;所以, 你需要从错误信息中先确认&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;错误类型
发生错误的地方
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很多语法问题可以根据这个信息直接定位&lt;/p&gt;
&lt;h3 id="7diao-shi-guo-cheng-zhong-xu-yao-shi-ke-zhu-yi"&gt;7.调试过程中, 需要时刻注意&lt;/h3&gt;
&lt;p&gt;改的是不是正确的目录下正确的文件?(大坑)&lt;/p&gt;
&lt;p&gt;保存了么(编译了么)?(又一个坑)&lt;/p&gt;
&lt;p&gt;服务重启了么?&lt;/p&gt;
&lt;p&gt;跟数据库有没有关系/跟缓存有没有关系, 要不要清?&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;以上问题, 随便碰上一个你都可能发现, 自己书写的代码和当前运行来调试的代码不一样.(会浪费你巨量的时间)&lt;/p&gt;
&lt;p&gt;自己调试半天怎么还是一样的结果&lt;/p&gt;
&lt;p&gt;我一直在修改, 但是没有什么区别(出现这种情况要自问一下了)&lt;/p&gt;
&lt;p&gt;可以显示在代码头部打印或者故意出错, 确认是同一套代码&lt;/p&gt;
&lt;h3 id="8huan-jing-shu-ju-yi-zhi-xing"&gt;8.环境/数据一致性&lt;/h3&gt;
&lt;p&gt;当你发现在本地无法复现别人报过来的问题(在我电脑上是正常的), 这时候, 需要考虑是否是环境和数据的问题.&lt;/p&gt;
&lt;h3 id="9xian-bu-yao-dong-dai-ma-jia-she-dai-ma-shi-zheng-que-de"&gt;9.先不要动代码, 假设代码是正确的&lt;/h3&gt;
&lt;p&gt;遇到问题, 不要急着修改代码, 需要假设, 代码是正确的, 然后去复现, 复现之后定位.&lt;/p&gt;
&lt;h3 id="10shou-xian-yao-huai-yi-zi-ji"&gt;10.首先要怀疑自己&lt;/h3&gt;
&lt;p&gt;你不能一旦代码跑不动就怀疑是别人的问题, 然后抛给别人, 这样做同样是很不负责任而且很愚蠢的.&lt;/p&gt;
&lt;p&gt;首先, 你需要怀疑自己, 排查问题, 当确定不是自己的问题之后, 将问题定位, 输入, 预期结果, 现在的异常结果都处理好, 生成一个问题, 抛给对应负责人.
(一切没有价值的怀疑都是无意义的)&lt;/p&gt;
&lt;p&gt;程序员都是好人, 每次都在想: &lt;code&gt;一定是我的问题&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="11dui-yu-mo-ming-qi-miao-de-wen-ti-duo-shi-ji-chong-qing-kuang"&gt;11.对于莫名其妙的问题, 多试几种情况&lt;/h3&gt;
&lt;p&gt;有时候碰上一些诡异的问题, 例如有一种情况的输入会报错, 这时候, 再跳过去修改代码前, 可以多尝试几种输入, 涉及边界/异常/正常等情况, 排除法, 精确制导.&lt;/p&gt;
&lt;p&gt;例如, 可以变换输入值的范围(扩大或缩小, 可能用二分法), 变换输入类型和格式&lt;/p&gt;
&lt;h3 id="12xian-hui-dao-zheng-que-de-dai-ma"&gt;12.先回到&lt;code&gt;正确的代码&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果这段代码是由于修改导致的, 可以注掉此次变更代码, 同样的输入再次验证定位&lt;/p&gt;
&lt;h3 id="13ru-guo-yi-duan-dai-ma-shi-mei-dong-guo-de-dai-ma"&gt;13.如果一段代码是&lt;code&gt;没动过&lt;/code&gt;的代码&lt;/h3&gt;
&lt;p&gt;如果你确保&lt;code&gt;确实没动过&lt;/code&gt;, 此时, 先不要怀疑自己, 更大的可能是&lt;code&gt;别人的问题&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;可能情况: 依赖出了问题(调用函数返回数据不对/异常? 依赖请求挂了? ……), 数据出了问题(表结构变更/服务返回数据变更), 环境问题(数据库/缓存)&lt;/p&gt;
&lt;h3 id="14bugzong-shi-qing-xiang-yu-ji-zhong-chu-xian-zai-yi-qi"&gt;14.bug总是倾向于集中出现在一起&lt;/h3&gt;
&lt;p&gt;很多时候, bug是扎堆的, 可以回忆下之前修改的地方, 确认问题.&lt;/p&gt;
&lt;h3 id="15dui-yu-hen-chang-hen-chang-shang-er-fen-fa"&gt;15.对于很长很长, 上&lt;code&gt;二分法&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;可能函数很长, 或者调用链很长, 不易调试.(光打调试信息就得打得手疼)&lt;/p&gt;
&lt;p&gt;找到关键变量, 上&lt;code&gt;二分法&lt;/code&gt;, 无上利器.&lt;/p&gt;
&lt;h3 id="16print-or-debug"&gt;16.print or debug?&lt;/h3&gt;
&lt;p&gt;个人偏好简单粗暴的&lt;code&gt;print&lt;/code&gt;, 主要是用的vim+sinppet, 快速高效.&lt;/p&gt;
&lt;p&gt;当然, 如果用IDE, 用   &lt;code&gt;debug&lt;/code&gt;吧&lt;/p&gt;
&lt;h3 id="17shi-fen-shi-fen-gui-yi-de-wen-ti"&gt;17.十分十分诡异的问题&lt;/h3&gt;
&lt;p&gt;上&lt;code&gt;debug&lt;/code&gt;, 打断点, 一点点调试吧, 只能这样了.&lt;/p&gt;
&lt;h3 id="18dang-yi-ge-wen-ti-chao-guo-ban-xiao-shi"&gt;18.当一个问题超过半小时&lt;/h3&gt;
&lt;p&gt;歇一歇, 走动走动, 打个水, 呼吸下新鲜空气.&lt;/p&gt;
&lt;p&gt;这时候有利于脱出情境, 去掉挫败感/愤怒/迷信等&lt;/p&gt;
&lt;p&gt;很多时候突然灵感一到, 瞬间明了(这种感觉很奇妙)&lt;/p&gt;
&lt;h3 id="19guan-yu-google"&gt;19.关于google&lt;/h3&gt;
&lt;p&gt;有些错误信息, 如果觉得比较独特诡异, 可以google下, 你会找到更多的一些信息的.&lt;/p&gt;
&lt;h3 id="20guan-yu-qiu-zhu"&gt;20.关于求助&lt;/h3&gt;
&lt;p&gt;实在搞不定, google大神也搞不定, 此时可能需要求助了.&lt;/p&gt;
&lt;p&gt;前提, 你自己能把问题想清楚, 并且逻辑清晰地描述出来.(什么业务什么位置的什么逻辑, 报错类型和报错信息, 输入输出, 迄今做了哪些尝试等等) 要学会聪明地问问题, 高效, 尊重自己也尊重别人.&lt;/p&gt;
&lt;p&gt;如果你自己都没整明白怎么问, 别人也无能为力.&lt;/p&gt;
&lt;p&gt;遇到很多人, 直接上来就一句&lt;code&gt;xxx出问题了&lt;/code&gt;, 没有前置条件后置结果中间症状......&lt;/p&gt;
&lt;p&gt;不过, 如果你会聪明地问, 那就放心大胆地问吧, 不用磨磨唧唧的, 程序员大都是善良的孩子.&lt;/p&gt;
&lt;h3 id="21chi-yi-qian-chang-yi-zhi"&gt;21.吃一堑长一智&lt;/h3&gt;
&lt;p&gt;被坑了就要总结总结, 有个记录, 不被同一个问题坑两次.&lt;/p&gt;
&lt;p&gt;如果被坑了就忘, 还需要去反复求助, 那这属于坑队友的行为(鄙视下)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>关于代码调试de那些事</title><link href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html" rel="alternate"></link><published>2014-11-23T00:00:00+08:00</published><updated>2014-11-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-23:/posts/2014/11/23/how-to-debug.html</id><summary type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么 …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么, 保持清醒&lt;/h3&gt;
&lt;p&gt;代码调试有时候会让你陷入无尽的自我怀疑/迷茫/愤怒/沮丧/窘迫/挫败(无限负能量), 很容易被这些情绪左右, 不清醒, 陷入怀疑自我(一定是我调用的方式不对), 或者怀疑一切(一定是数据库问题, 不对, 缓存问题, 不对, 接口问题, 好像不对, 数据问题), 或者胡乱改代码(改-跑-错了-再改-跑-又错-再改, 传说中的随机行走编程), 或者......(挣扎吧......)&lt;/p&gt;
&lt;p&gt;此刻, 保持清醒的自我是非常重要的, 要明确: &lt;code&gt;我在做什么&lt;/code&gt;, &lt;code&gt;问题是什么症状&lt;/code&gt;, &lt;code&gt;原来逻辑是什么&lt;/code&gt;, &lt;code&gt;最有可能出问题的是哪里&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id="2xiang-qing-chu-liao-zai-xie-dai-ma"&gt;2.想清楚了再写代码&lt;/h3&gt;
&lt;p&gt;如果连需求是什么, 想要做什么都没整明白, 就吭哧吭哧开写, 意图在实践中摸索通向胜利的道路, 是很愚蠢的行为.&lt;/p&gt;
&lt;p&gt;需要去理解需求, 自己要做什么, 然后, 在大脑中构造, 现在有什么, 为了完成需求需要做什么, 完成大体的组成结构/步骤流程的思考后, 再着手去做.&lt;/p&gt;
&lt;p&gt;大到整体设计, 小到一个函数, 都可以这么处理&lt;/p&gt;
&lt;p&gt;例如, 遇到复杂问题, 可以先写注释, 完整所有函数整体设计, 然后再填充细节&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="err"&gt;“””&lt;/span&gt;
        &lt;span class="err"&gt;“””&lt;/span&gt;
        &lt;span class="c1"&gt;# step1: call func test()&lt;/span&gt;

        &lt;span class="c1"&gt;# step2: parse url to &lt;/span&gt;

        &lt;span class="c1"&gt;# step3: judge&lt;/span&gt;

        &lt;span class="c1"&gt;# step4: convert and return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3guan-yu-jiao-shou-jia-dai-ma"&gt;3.关于&lt;code&gt;脚手架&lt;/code&gt;代码&lt;/h3&gt;
&lt;p&gt;在逻辑的关键位置, print/assert关键信息, 用于在调试中迅速确认问题. (一些中间值/状态/条件判断结果)&lt;/p&gt;
&lt;p&gt;当然, 信息除了&lt;code&gt;关键&lt;/code&gt;这个特性, 还需要足够&lt;code&gt;丰富&lt;/code&gt;和&lt;code&gt;显眼&lt;/code&gt;, 一遍一次性定位问题. (既要好看又要有用)&lt;/p&gt;
&lt;p&gt;你需要确定下如何用顺手的编辑器快速输入这些代码, 可以用各类语言的snippets&lt;/p&gt;
&lt;p&gt;例如, 在写python时候, 我很喜欢prt&lt;tab&gt;(k-vim自动补全), 快速插入一些需要的信息&lt;/tab&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"TRACK ================= result"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4xie-wan-yi-duan-dai-ma-di-yi-shi-jian-zi-ji-reviewyi-xia"&gt;4.写完一段代码第一时间自己review一下&lt;/h3&gt;
&lt;p&gt;事实证明, review的效果比写完直接跑再来调, 效率高多了.&lt;/p&gt;
&lt;p&gt;刚写完一段代码, 思路还很清晰, 跳到开始, review过程中注意各类变量, 条件判断, 函数调用, 上下文, 一致性, 错误处理等, 花不了多少时间, 却能发现一些&lt;code&gt;显而易见&lt;/code&gt;的问题, 省下很多无谓的调试时间(没问题不需要调试!).&lt;/p&gt;
&lt;h3 id="5reviewzhong-zhu-yi-dai-ma-shi-kou-guo-lai-de-yao"&gt;5.review中注意, 代码是&lt;code&gt;抠&lt;/code&gt;过来的么?&lt;/h3&gt;
&lt;p&gt;很多时候从其他地方copy代码过来(一行或几行, 有时候只是一个函数调用或一个判断), 但是很容易忘了根据当前情况修改一些必要的值, 导致问题&lt;/p&gt;
&lt;p&gt;例如函数调用, 这个地方调用参数可能跟你copy这行代码需要参数不一样, 但是放在这里并不会报错(一切运作正常), 最终结果并不对.....&lt;/p&gt;
&lt;p&gt;好了, 开始调试&lt;/p&gt;
&lt;h3 id="6gao-ming-bai-wen-ti-de-biao-xian-shi-shi-yao-zheng-zhuang"&gt;6.搞明白问题的表现是什么(症状)&lt;/h3&gt;
&lt;p&gt;运行代码, 报错了, 有些人会瞬切回编辑器, 开始改代码(作高效状)......&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;问题是: &lt;code&gt;报错提示你看了么, 看明白了么?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在大部分语言, 其报错提示已经很明显了, 精确到行/变量, 虽然整个异常栈信息可能很长(非常长), 但是都有其特征(在最前或在最后,或在中间靠后, 有关键字), 仔细看下报错信息, 精确制导才是王道.&lt;/p&gt;
&lt;p&gt;所以, 你需要从错误信息中先确认&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;错误类型
发生错误的地方
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很多语法问题可以根据这个信息直接定位&lt;/p&gt;
&lt;h3 id="7diao-shi-guo-cheng-zhong-xu-yao-shi-ke-zhu-yi"&gt;7.调试过程中, 需要时刻注意&lt;/h3&gt;
&lt;p&gt;改的是不是正确的目录下正确的文件?(大坑)&lt;/p&gt;
&lt;p&gt;保存了么(编译了么)?(又一个坑)&lt;/p&gt;
&lt;p&gt;服务重启了么?&lt;/p&gt;
&lt;p&gt;跟数据库有没有关系/跟缓存有没有关系, 要不要清?&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;以上问题, 随便碰上一个你都可能发现, 自己书写的代码和当前运行来调试的代码不一样.(会浪费你巨量的时间)&lt;/p&gt;
&lt;p&gt;自己调试半天怎么还是一样的结果&lt;/p&gt;
&lt;p&gt;我一直在修改, 但是没有什么区别(出现这种情况要自问一下了)&lt;/p&gt;
&lt;p&gt;可以显示在代码头部打印或者故意出错, 确认是同一套代码&lt;/p&gt;
&lt;h3 id="8huan-jing-shu-ju-yi-zhi-xing"&gt;8.环境/数据一致性&lt;/h3&gt;
&lt;p&gt;当你发现在本地无法复现别人报过来的问题(在我电脑上是正常的), 这时候, 需要考虑是否是环境和数据的问题.&lt;/p&gt;
&lt;h3 id="9xian-bu-yao-dong-dai-ma-jia-she-dai-ma-shi-zheng-que-de"&gt;9.先不要动代码, 假设代码是正确的&lt;/h3&gt;
&lt;p&gt;遇到问题, 不要急着修改代码, 需要假设, 代码是正确的, 然后去复现, 复现之后定位.&lt;/p&gt;
&lt;h3 id="10shou-xian-yao-huai-yi-zi-ji"&gt;10.首先要怀疑自己&lt;/h3&gt;
&lt;p&gt;你不能一旦代码跑不动就怀疑是别人的问题, 然后抛给别人, 这样做同样是很不负责任而且很愚蠢的.&lt;/p&gt;
&lt;p&gt;首先, 你需要怀疑自己, 排查问题, 当确定不是自己的问题之后, 将问题定位, 输入, 预期结果, 现在的异常结果都处理好, 生成一个问题, 抛给对应负责人.
(一切没有价值的怀疑都是无意义的)&lt;/p&gt;
&lt;p&gt;程序员都是好人, 每次都在想: &lt;code&gt;一定是我的问题&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="11dui-yu-mo-ming-qi-miao-de-wen-ti-duo-shi-ji-chong-qing-kuang"&gt;11.对于莫名其妙的问题, 多试几种情况&lt;/h3&gt;
&lt;p&gt;有时候碰上一些诡异的问题, 例如有一种情况的输入会报错, 这时候, 再跳过去修改代码前, 可以多尝试几种输入, 涉及边界/异常/正常等情况, 排除法, 精确制导.&lt;/p&gt;
&lt;p&gt;例如, 可以变换输入值的范围(扩大或缩小, 可能用二分法), 变换输入类型和格式&lt;/p&gt;
&lt;h3 id="12xian-hui-dao-zheng-que-de-dai-ma"&gt;12.先回到&lt;code&gt;正确的代码&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果这段代码是由于修改导致的, 可以注掉此次变更代码, 同样的输入再次验证定位&lt;/p&gt;
&lt;h3 id="13ru-guo-yi-duan-dai-ma-shi-mei-dong-guo-de-dai-ma"&gt;13.如果一段代码是&lt;code&gt;没动过&lt;/code&gt;的代码&lt;/h3&gt;
&lt;p&gt;如果你确保&lt;code&gt;确实没动过&lt;/code&gt;, 此时, 先不要怀疑自己, 更大的可能是&lt;code&gt;别人的问题&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;可能情况: 依赖出了问题(调用函数返回数据不对/异常? 依赖请求挂了? ……), 数据出了问题(表结构变更/服务返回数据变更), 环境问题(数据库/缓存)&lt;/p&gt;
&lt;h3 id="14bugzong-shi-qing-xiang-yu-ji-zhong-chu-xian-zai-yi-qi"&gt;14.bug总是倾向于集中出现在一起&lt;/h3&gt;
&lt;p&gt;很多时候, bug是扎堆的, 可以回忆下之前修改的地方, 确认问题.&lt;/p&gt;
&lt;h3 id="15dui-yu-hen-chang-hen-chang-shang-er-fen-fa"&gt;15.对于很长很长, 上&lt;code&gt;二分法&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;可能函数很长, 或者调用链很长, 不易调试.(光打调试信息就得打得手疼)&lt;/p&gt;
&lt;p&gt;找到关键变量, 上&lt;code&gt;二分法&lt;/code&gt;, 无上利器.&lt;/p&gt;
&lt;h3 id="16print-or-debug"&gt;16.print or debug?&lt;/h3&gt;
&lt;p&gt;个人偏好简单粗暴的&lt;code&gt;print&lt;/code&gt;, 主要是用的vim+sinppet, 快速高效.&lt;/p&gt;
&lt;p&gt;当然, 如果用IDE, 用   &lt;code&gt;debug&lt;/code&gt;吧&lt;/p&gt;
&lt;h3 id="17shi-fen-shi-fen-gui-yi-de-wen-ti"&gt;17.十分十分诡异的问题&lt;/h3&gt;
&lt;p&gt;上&lt;code&gt;debug&lt;/code&gt;, 打断点, 一点点调试吧, 只能这样了.&lt;/p&gt;
&lt;h3 id="18dang-yi-ge-wen-ti-chao-guo-ban-xiao-shi"&gt;18.当一个问题超过半小时&lt;/h3&gt;
&lt;p&gt;歇一歇, 走动走动, 打个水, 呼吸下新鲜空气.&lt;/p&gt;
&lt;p&gt;这时候有利于脱出情境, 去掉挫败感/愤怒/迷信等&lt;/p&gt;
&lt;p&gt;很多时候突然灵感一到, 瞬间明了(这种感觉很奇妙)&lt;/p&gt;
&lt;h3 id="19guan-yu-google"&gt;19.关于google&lt;/h3&gt;
&lt;p&gt;有些错误信息, 如果觉得比较独特诡异, 可以google下, 你会找到更多的一些信息的.&lt;/p&gt;
&lt;h3 id="20guan-yu-qiu-zhu"&gt;20.关于求助&lt;/h3&gt;
&lt;p&gt;实在搞不定, google大神也搞不定, 此时可能需要求助了.&lt;/p&gt;
&lt;p&gt;前提, 你自己能把问题想清楚, 并且逻辑清晰地描述出来.(什么业务什么位置的什么逻辑, 报错类型和报错信息, 输入输出, 迄今做了哪些尝试等等) 要学会聪明地问问题, 高效, 尊重自己也尊重别人.&lt;/p&gt;
&lt;p&gt;如果你自己都没整明白怎么问, 别人也无能为力.&lt;/p&gt;
&lt;p&gt;遇到很多人, 直接上来就一句&lt;code&gt;xxx出问题了&lt;/code&gt;, 没有前置条件后置结果中间症状......&lt;/p&gt;
&lt;p&gt;不过, 如果你会聪明地问, 那就放心大胆地问吧, 不用磨磨唧唧的, 程序员大都是善良的孩子.&lt;/p&gt;
&lt;h3 id="21chi-yi-qian-chang-yi-zhi"&gt;21.吃一堑长一智&lt;/h3&gt;
&lt;p&gt;被坑了就要总结总结, 有个记录, 不被同一个问题坑两次.&lt;/p&gt;
&lt;p&gt;如果被坑了就忘, 还需要去反复求助, 那这属于坑队友的行为(鄙视下)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>基于 PostgreSQL 的数据统计系统</title><link href="http://www.wklken.me/posts/2014/11/16/unit-statistics-system.html" rel="alternate"></link><published>2014-11-16T20:58:00+08:00</published><updated>2014-11-16T20:58:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-16:/posts/2014/11/16/unit-statistics-system.html</id><summary type="html">&lt;p&gt;看到标题就知道我要写什么了, 这是之前一个项目的小结吧, 自己对统计的一些认识和看法.&lt;/p&gt;
&lt;p&gt;当时从前到后, 包括技术选型, 花了接近一个月的时间, 也在生产上用了两三个月, 一致在持续维护, 做完图表配置化已然接近完工, 无奈后来离开了, 不过目前应该还在运转&lt;/p&gt;
&lt;p&gt;至于源代码, 暂时不考虑开源, 太渣(其中在看了几天js情况下, 自己撸了1000行js的前端框架, 质量堪忧), 全套用python实现.&lt;/p&gt;
&lt;p&gt;提供一种快速实现运营统计需求的思路.&lt;/p&gt;
&lt;p&gt;(图为百度 echarts 示例)&lt;/p&gt;
&lt;p&gt;&lt;img alt="statistics" src="/imgs/system/statistics.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="yi-chang-jing"&gt;一. 场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;统计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所谓统计, 抽象出来就是计数而已(还有各个计数之间的算术运算). 再具体一些, 根据不同维度进行计数.&lt;/p&gt;
&lt;p&gt;而统计后台, 无外乎数据的输入, 处理, 及输出.&lt;/p&gt;
&lt;p&gt;对于实时性, 一般会以天为单位进行统计.&lt;/p&gt;
&lt;p&gt;而在具体业务场景下, 需要计数的数据来源于各个项目和同一个项目的不同机器(分布式部署), 就需要考虑, 如何将日志进行汇聚, 如何更为便捷地进行处理, 存储, 以及展现.&lt;/p&gt;
&lt;p&gt;其中要考虑, 需求是不断在变化的, 如何将成本降到最低?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以往的统计方式:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分析统计需求 -&amp;gt; 修改项目记录日志内容和格式 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;看到标题就知道我要写什么了, 这是之前一个项目的小结吧, 自己对统计的一些认识和看法.&lt;/p&gt;
&lt;p&gt;当时从前到后, 包括技术选型, 花了接近一个月的时间, 也在生产上用了两三个月, 一致在持续维护, 做完图表配置化已然接近完工, 无奈后来离开了, 不过目前应该还在运转&lt;/p&gt;
&lt;p&gt;至于源代码, 暂时不考虑开源, 太渣(其中在看了几天js情况下, 自己撸了1000行js的前端框架, 质量堪忧), 全套用python实现.&lt;/p&gt;
&lt;p&gt;提供一种快速实现运营统计需求的思路.&lt;/p&gt;
&lt;p&gt;(图为百度 echarts 示例)&lt;/p&gt;
&lt;p&gt;&lt;img alt="statistics" src="/imgs/system/statistics.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="yi-chang-jing"&gt;一. 场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;统计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所谓统计, 抽象出来就是计数而已(还有各个计数之间的算术运算). 再具体一些, 根据不同维度进行计数.&lt;/p&gt;
&lt;p&gt;而统计后台, 无外乎数据的输入, 处理, 及输出.&lt;/p&gt;
&lt;p&gt;对于实时性, 一般会以天为单位进行统计.&lt;/p&gt;
&lt;p&gt;而在具体业务场景下, 需要计数的数据来源于各个项目和同一个项目的不同机器(分布式部署), 就需要考虑, 如何将日志进行汇聚, 如何更为便捷地进行处理, 存储, 以及展现.&lt;/p&gt;
&lt;p&gt;其中要考虑, 需求是不断在变化的, 如何将成本降到最低?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以往的统计方式:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分析统计需求 -&amp;gt; 修改项目记录日志内容和格式(到磁盘) -&amp;gt; 自行将日志汇总到一台机器(rsync) -&amp;gt; crontab脚本分析日志(要删或备份历史数据) -&amp;gt; 新建db表, 存储统计结果 -&amp;gt; 写管理后台, 查询统计结果(最繁琐) -&amp;gt; 处理分页/图表等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然每次耗时或许并不会太长(0.5-2d, 视需求大小), 但对于不同项目和需求变更, 这些工作都是纯体力毫无技术含量的枯燥工作, 可以说是无意义的资源浪费.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分析统计需求 -&amp;gt; 确认日志内容和格式  -&amp;gt; 统计后台配置输入/处理/输出逻辑 -&amp;gt; 查看结果
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说白了就是, 处理统计需求变成了 &lt;code&gt;写sql&lt;/code&gt; + &lt;code&gt;配置&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="er-chu-li-si-lu"&gt;二. 处理思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大体思路如下(从后往前):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 将日志进行汇总
2. 日志格式一致化
3. 将日志导入到一个容器中
4. 便捷地通过容器进行计算(计数)
5. 统计结果进行统一存储
6. 提供统一的查询接口
7. 提供前端框架组件, 可以通过配置调用统一查询接口, 并对数据进行分页及图表化
8. 提供配置入口, 可以配置日志入口, 处理逻辑, 展现逻辑. 即完全地配置化
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;需要统一的地方:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;日志格式
容器存储
报告存储
查询接口
前端组件
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;系统成型后&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;增加/修改统计需求: 只需要在后台配置数据来源(日志), 处理逻辑(一段 sql), 展示逻辑(一段前端 json配置), 就可以实现图标
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="san-ju-ti"&gt;三. 具体&lt;/h3&gt;
&lt;h3 id="0-ji-ben-jia-gou"&gt;0. 基本架构&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;             ----------------------------------------------
            |      日志(UniteStats or ApplicationLogs)     |
             ----------------------------------------------
                              ||
                 ---------------------------
                |        load处理程序        |
                 ---------------------------
                              ||
                ___________________________
               |存储容器--计算容器           |
               |                          |
               |  Container(Postgresql)   |   //json - sql - 聚集函数
               |                          |
               |___________________________
                             ||
            --------------------------------------
           |        [自定义统计脚本-查询逻辑及报告表]  |
            --------------------------------------
                             ||
            ---------------------------------------
           |            统计报告                    |
            ---------------------------------------
                            ||
            ---------------------------------------
           |            统一查询接口                |
            ---------------------------------------
                            ||
             ------------------------------------
            |      [自定义前端-使用统一库-配置生成]   |
             ------------------------------------
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="1-ri-zhi-ge-shi"&gt;1. 日志格式&lt;/h3&gt;
&lt;p&gt;日志, 即文本.&lt;/p&gt;
&lt;p&gt;但是文本存在各种格式, 例如常见的’\t’分隔的列, csv, json, xml等等.&lt;/p&gt;
&lt;p&gt;这里的要求是: 一定要满足自描述, 易读(人), 易处理(生成和解析).&lt;/p&gt;
&lt;p&gt;最终选择了&lt;code&gt;json&lt;/code&gt;. 将原先无结构数据转成半结构化数据.&lt;/p&gt;
&lt;p&gt;原因之一, &lt;code&gt;容器&lt;/code&gt;对半结构化的数据支持已经非常完善了, 例如postgresql, mongodb等, 对于后续计算很重要.&lt;/p&gt;
&lt;p&gt;原因之二, 作为一个统一的平台, 我只在乎数据是一份日志, 但是不在乎, 日志里存了些什么, 每个字段的意义, 这些只有平台的使用者需要知道. 否则带来很大一个问题是, 对于使用者在新增或变更一份日志格式时, 需要明确告诉系统这份日志各个字段是什么(名称和类型), 复杂化了&lt;/p&gt;
&lt;p&gt;到这里, 我们统一了日志的格式, 记录为json, 每条记录一行.&lt;/p&gt;
&lt;h3 id="2-ri-zhi-shou-ji-hui-zong"&gt;2. 日志收集汇总&lt;/h3&gt;
&lt;p&gt;目的: 将日志汇总到同一台机器上, 便于统一处理&lt;/p&gt;
&lt;p&gt;命名规则: &lt;code&gt;$THE_LOG_PATH/{projectName}/{projectName}_{moduleName}_{ip}_{yyMMdd}.log&lt;/code&gt; (示例)&lt;/p&gt;
&lt;p&gt;日志汇总的方案有很多:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp
rsync
nfs
logstash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终的处理方案: 数据量小, 同一个机房, 使用NFS将日志汇总到目录, 不同机房, 使用rsync进行汇总. 如果数据量大, 可以考虑使用logstash, 直接将日志经过节点处理实时写到一台机器上(就不要分别记录到各自磁盘了).&lt;/p&gt;
&lt;p&gt;扩展: 使用多台机器, 只要保证最终导入同一个库即可.(同一个项目, 同一天存在一张表, 不同机器的日志导入之)&lt;/p&gt;
&lt;p&gt;到这里, 我们将所有json格式的日志汇集到了一起&lt;/p&gt;
&lt;h3 id="3-dao-ru-rong-qi-chu-li"&gt;3. 导入容器处理&lt;/h3&gt;
&lt;p&gt;目前每个项目的日志格式是,&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{projectName}/{projectName}_{moduleName}_{ip}_{yyMMdd}.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们会将同一个项目, 可能来自不同机器的日志导入同一张表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{projectName}/{projectName}_{moduleName}_*_{yyMMdd}.log
=&amp;gt;
table: projectName_moduleName_yyMMdd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理方式: 批量入库, 并且清理保留日期外的表&lt;/p&gt;
&lt;p&gt;建议使用批量导入的方式, 速度杠杠的. Postgresql请使用copy命令&lt;/p&gt;
&lt;h3 id="4-rong-qi"&gt;4. 容器&lt;/h3&gt;
&lt;p&gt;一个计算容器, 仅此而已&lt;/p&gt;
&lt;p&gt;技术选型时, 考虑过Mysql/Mongdb/Redis/MariaDB/OrientDB/CouchDB/RethinkDB等等, 最终敲定使用postgresql, 无它, 对json的完美支持, 满足业务: 一定的数据量, 足够简单的统计方式, 足够稳定, 简单易运维等&lt;/p&gt;
&lt;p&gt;提下&lt;code&gt;redis&lt;/code&gt;, 当时做了整套的&lt;code&gt;redis&lt;/code&gt;方案(接口文档都明确完了就差写代码了), 但是后来毙掉了. (典型的拿着锤子满世界都是钉子的案例). 思想是: 流式日志处理, 根据业务需求使用redis counter, 主从, 后台从redis直接取counter进行展示. 脑洞很大, 可以搞定实时/非实时情况, 还可以顺带把各类业务中的counter需求给做了, 以及更为灵活的展现方式, 但是学习成本较高, 对每个写统计的人要求较高(素质, 具备正确的统计思维, 否则会悲剧掉). 再加上业务本身要求实时性并不高, 所以废弃.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MySql&lt;/code&gt; 对 &lt;code&gt;json&lt;/code&gt; 的支持, 相对于 postgresql 而言逊色太多了, 对&lt;code&gt;json&lt;/code&gt;格式存在限制(多层复杂嵌套的情况)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mongodb&lt;/code&gt; 虽然对&lt;code&gt;json&lt;/code&gt;支持不错, 但是对于数据量较大的情况支持并不好, 并且查询以及运维都会带来一定困难, 对于使用者有一定学习成本&lt;/p&gt;
&lt;p&gt;PostGresql作为容器的好处:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 支持的数据量
2. 查询简单，支持json, 所有sql查询，group by/order by/嵌套子查询，聚集等
3. 各种聚集、统计函数均可用，搞定基本统计查询无障碍（再复杂的都可以）
4. 运维简单
5. 对于开发而言几乎没有学习成本, 会sql再学习下postgresql的json查询
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例:
假设搜索日志:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{‘ip’: ‘127.0.0.1’,
 ‘keyword’: ‘test’,
 ‘result_count’: ‘1’,
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计 pv&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select count(data-&amp;gt;'ip') from search_20141101;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计 uv&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select count(DISTINCT data-&amp;gt;&amp;gt;'ip') from search_20141101;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;无结果数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select count(*) from search_20141101 where data-&amp;gt;&amp;gt;'result_count' = '0';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜索热词排行榜&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select data-&amp;gt;&amp;gt;’keyword’, count(*)
from search_20141101
where data-&amp;gt;&amp;gt;'result_count' != '0'
group by data-&amp;gt;&amp;gt;’keyword’
order by count(*) desc
limit 100;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-pi-chu-li"&gt;5. 批处理&lt;/h3&gt;
&lt;p&gt;这里要做的事情, 需要有一个管理后台, 让开发可以配置上传自己的处理脚本, 设定脚本执行时间, 执行参数(处理日期/报告表名), 甚至是执行依赖.&lt;/p&gt;
&lt;p&gt;这里需要形成一个约定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;报告表名: projectName_statsModuleName
报告表一些字段名(因为统一查询接口需要用到): 日期 date,
其他约定字段
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每天, 系统会扫描并调度任务, 执行, 处理得到统计结果, 存入报告表.&lt;/p&gt;
&lt;p&gt;到这里, 我们每天的统计结果都存入到了报告表中&lt;/p&gt;
&lt;h3 id="6-shu-chu"&gt;6. 输出&lt;/h3&gt;
&lt;p&gt;报告表, 是以时间为维度的, 每条记录带有日期, 每条记录细化到要统计到的精确维度.(具体表现是一个维度会多一列字段), 原则是, 需求分析时充分考虑当前及后续可能的统计需求(要预见还是蛮容易的), 直接将统计维度最细化.&lt;/p&gt;
&lt;p&gt;当然, 如果无法最细化, 后面存在变更, 可以修改统计脚本, 根据情况对历史数据进行重新统计.&lt;/p&gt;
&lt;h3 id="7-tong-yi-cha-xun-ceng"&gt;7. 统一查询层&lt;/h3&gt;
&lt;p&gt;一层通用的接口, 支持传入表名, 条件, 需要结果字段, 格式等, 可以对系统中各类报告表进行各种形式的查询, 获取统计结果.&lt;/p&gt;
&lt;h3 id="8-qian-duan-kuang-jia-ji-zhan-xian"&gt;8. 前端框架及展现&lt;/h3&gt;
&lt;p&gt;是一整套的js款干啊&lt;/p&gt;
&lt;p&gt;分成几块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成查询表单: 模块化组件, 通过json配置, 自动生成统计查询的表单, 支持各类维度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置示例:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 产生条件html
    var condition_configs = {
        title: "频道访问统计摘要",
        conditions: [
                {
                    type: "date_begin_to_end", //开始结束日期选择框
                },
                {
                    type: "select",   //下拉框
                    label: "频道",
                    id: "channel",
                    options: [
                        {
                            text: "所有",
                            value: "",
                        },
                        {
                            text: "快速访问",
                            value: "quickaccess",
                        },

                    ]
                },
                {
                    type: "version", //文档框
                },
        ]
    };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就会自动生成表单&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;begin_date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;end_date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;组合查询条件: 表单提交时, 根据json配置, 将表单内容/字段/值/表等, 拼接成统一查询层接口需要的请求串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询后数据处理: 将查询后的结果, 根据json配置, 进行转化和展现, 并图表化.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个配置示例:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;一般文本
{
    'column': 'date',
    'name': '日期',
    'type': 'text',
},

百分比 $后面跟的是sql查询结果列名
{
    'column': 'uninstall_ratio',
    'name': '卸载率',
    'type': 'ratio',
    'value': '$uninstall_pv/$install_pv'
},

公式计算
{
    'column': 'the_qvod_link_pv',
    'name': '导入链接数',
    'type': 'calculate',
    'value': '$qvod_link_pv + $qvod_start_pv'
},

列值翻译
{
    'column': 'channel',
    'name': '渠道',
    'type': 'text',
    'translation': {
        "all": "all",
        "player": "播放器",
        "zx": "资讯",
        "other": "其他导入",
    }
},
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="9-tu-biao"&gt;9. 图表&lt;/h3&gt;
&lt;p&gt;使用百度 &lt;a href="http://echarts.baidu.com/"&gt;echats&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以根据配置, 将统一查询层的接口返回数据直接灌入echats, 生成表单&lt;/p&gt;
&lt;h3 id="10-guo-cheng-ri-zhi-ji-jian-kong"&gt;10. 过程日志及监控&lt;/h3&gt;
&lt;p&gt;需要一组管理表, 进行任务配置/调度/执行/执行结果, 整个过程中的操作可以配置和查看, 用于监控.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="si-xiao-jie"&gt;四. 小结&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s Simple, but it works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据情况, 当时大概每天 10G 日志 load 到库(处理前&amp;gt;10G), 每天日志数据大概是五千万条, 具体业务上了大概40个的样子, 每天30分钟左右处理完. 对于开发的改进是, 将原先0.5-2d的工作, 缩减到了1-2小时, 对生产力的提升较为显著.(对于日志数多且单一日志量较小的情况处理尤为便捷)&lt;/p&gt;
&lt;p&gt;适用范围: 对于一般团队应该足够了(流量百万级别), 每个项目每天3-5百万访问量, 日志数据10-20G, 当然, 一直没机会测试上限, 不过只要PostGresql能抗住, 量再大些应该也ok.(可以考虑上elasticsearch)&lt;/p&gt;
&lt;p&gt;以上思路, 仅供借鉴:) 就这样吧&lt;/p&gt;</content><category term="system"></category></entry><entry><title>简约之美 &amp; 编写可读代码的艺术</title><link href="http://www.wklken.me/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html" rel="alternate"></link><published>2014-11-16T00:00:00+08:00</published><updated>2014-11-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-16:/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</id><summary type="html">&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美—软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;———————————&lt;/p&gt;
&lt;h2 id="jian-yue-zhi-mei"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美—软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;———————————&lt;/p&gt;
&lt;h2 id="jian-yue-zhi-mei"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是&lt;code&gt;反馈有效问题&lt;/code&gt;, 还是&lt;code&gt;反馈不是你的问题的问题空耗你的时间&lt;/code&gt;. 所以花费时间去理解需求, 想明白之后再开始写代码, 这个很重要! (真正团队干活你会有直观感受的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题的根源通常在于编程......这一切都与复杂性有关......编程就成了把复杂问题化解为简单问题的劳动......”好程序员”应当竭尽全力, 把程序写得让其他程序员容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;bug的本质, 归根结底在于编程本身. &lt;/p&gt;
&lt;p&gt;我们往往容易把问题复杂化(大而全, 追求完美, 过早优化, 过早关注细节), 而过度复杂的后果导致后期代码的难以维护.(所谓的到时候再改/重构, 都是虚妄的), 程序员遇到一坨代码(别人写的或者之前写的), 有优化的冲动, 但是迫于需求或者时间或者系统稳定性, 往往惧怕&lt;code&gt;变化&lt;/code&gt;, 这段代码能工作就行.&lt;/p&gt;
&lt;p&gt;但是为什么要复杂化呢? 最简单的, 莫过于在最初就做到最好, 不要给自己&lt;code&gt;到时候再重构&lt;/code&gt;的念头. 写好每行代码.&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;其他程序员&lt;/code&gt;, 也可能是&lt;code&gt;一个月&lt;/code&gt;后的自己. 如果经常发现回头看自己的代码都看不懂, 那么说明进步的余地还是很大的:). &lt;/p&gt;
&lt;p&gt;到这里, 我们的目标转向: 寻找提高代码质量的科学方法.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个写代码的人都是设计师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小到一个变量名, 一个判断逻辑, 大到一个函数, 一个类, 一个算法, 从代码里可以感受到很多东西. 拿建筑设计师对比, 写代码, 如同构筑一栋建筑, 不管是小屋/公寓还是摩天大厦, 好的设计永远美好, 而糟糕的设计, 无论大小, 永远丑陋. 很多概念, 意识和技巧在里面.(建议阅读&lt;code&gt;编写可读代码的艺术&lt;/code&gt;, 然后是&lt;code&gt;代码大全&lt;/code&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全部软件都有一个相同的目标: 帮助其他人......不能理解&lt;code&gt;帮助其他人&lt;/code&gt;的程序员, 只能写出糟糕的程序, 也就是说, 他们的程序提供不了什么帮助……在做与软件有关的决策时, 指导法则就是判断能够提供什么样的帮助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样, 这里的&lt;code&gt;其他人&lt;/code&gt;, 可能是你自己. &lt;/p&gt;
&lt;p&gt;需求的优先级, 取决于这个需求对于用户帮助的大小.&lt;/p&gt;
&lt;p&gt;你这样做/这个功能/这么处理, 对于目标, 对于团队, 对于个人, 有何帮助?
如果没有, 为什么要这么做?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计科学的目标: 1.确保软件能够提供尽可能多的帮助. 2.确保软件能够持续提供尽可能多的帮助 3.设计程序员能尽可能简单地开发和维护的软件系统. 才能实现1/2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1代表软件本身的价值, 2代表软件的可维护性可扩展性, 3代表, 好的/简单的设计, 决定了可维护性和可扩展性, 是万丈高楼的地基. 不过1和3, 在有限资源的情况下(资源永远是不够的), 是互相冲突的, 所以要思考如何保持平衡.&lt;/p&gt;
&lt;p&gt;这里提到, 软件的开发和维护都应当简单, 要避免困难和复杂.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计方程式 可取程度=价值/成本  =&amp;gt;  可行性=(当前价值+未来价值)/(实现成本+维护成本)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前价值和实现成本往往是可评估的, 人们会关注于这一点, 带来的问题就是忽略了未来价值和维护成本, 这两个和时间相关, 不易评估, 但是却更为重要. 人很容易只着眼于现在而忽略了未来. 所以写代码时需要注意, &lt;code&gt;存在着未来&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;相比降低实现成本, 降低维护成本更为重要&lt;/code&gt;. 很直观的感觉, 一个设计良好的接口, 在需求变更的时候, 只需要动个参数或者动几行代码或者压根不需要改. 而一个糟糕的设计里, 每次需求变更, 会发现需要改动很多代码, 甚至是重写, 连带测试等时间, 你会发现很多时间耗费在里面. 所以应该一开始就理解, 往未来看一眼(预测短期未来是可行的, 预测长期未来是不靠谱的), 再进行设计, 再进行代码.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变化定律: 程序存在的时间越久, 它的某个部分需要变化的可能性就越高.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一切都是变化的, 你自己, 还有这个世界.&lt;/p&gt;
&lt;p&gt;所以需求变更是必然的:)&lt;/p&gt;
&lt;p&gt;之前学到一个很重要的观点: &lt;code&gt;拥抱变化&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计三大误区: 1.编写不必要的代码 2.代码难以修改 3.过分追求通用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;YAGIN, &lt;code&gt;不要编写不是必须的代码, 并且要删除没有用到的代码&lt;/code&gt;. 版本库干嘛用的? 提交, 然后删除那些没用的, 然后再提交:)&lt;/p&gt;
&lt;p&gt;僵化设计的原因: 1.对未来做了太多假设(......) 2.不仔细设计就编写代码(新手需注意). &lt;code&gt;设计程序时, 应当根据你现在确切知道的需求, 而不是你认为未来会出现的需求&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;避免过度设计: 仅仅根据目前确知的需求来考虑通用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷概率定律: 在程序中新增缺陷的可能性与代码修改量成正比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的设计, 代码少(很大可能), 代码变更少, 而糟糕的设计, 反之. 从而, bug出现的概率显而易见&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最好的设计, 就是能够适应外界尽可能多的变化. 而软件自身的变化要尽可能少.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不变应万变, 追求之&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不要&lt;code&gt;修正&lt;/code&gt;任何东西, 除非它真的可能有问题, 而且有证据表明问题确实存在.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如: “过早优化”!&lt;/p&gt;
&lt;p&gt;当问题成为问题的时候, 才是问题, 才需要去处理!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理想情况下, 任何系统里的任何信息, 都应当只存在一次.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;避免重复. 变更时代价最小.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简洁定律: 软件任何一部分的维护难度, 反比于该部分的简洁程度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简洁是相对的.&lt;/p&gt;
&lt;p&gt;保持一致/可读性(代码被阅读的次数远远多于编写和修改的次数)/命名/注释(代码的意图通常不应该用注释来说明, 直接阅读代码就应当能够理解)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂性是会叠加的, 而不是简单的线性叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题复杂, 解法不一定复杂. &lt;/p&gt;
&lt;p&gt;解决复杂性: 把它分解成独立的小部分, 并进行重新设计.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试法则: 你对软件行为的了解程度, 等于你真正测试它的程度......除非亲自测试过, 否则你不知道软件是否能正常运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;about test.&lt;/p&gt;
&lt;h2 id="bian-xie-ke-du-dai-ma-de-yi-zhu"&gt;编写可读代码的艺术&lt;/h2&gt;
&lt;p&gt;关于如何编写高质量可读的代码的方法论:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/the-art-of-readable-code.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;The Art of Readable Code&amp;gt;&amp;gt;, 这本书就不细写了, 因为不到两百页, 几乎每一页都是干货.&lt;/p&gt;
&lt;p&gt;强烈推荐.&lt;/p&gt;
&lt;p&gt;代码大全太厚, &amp;lt;&amp;lt;Clean Code&amp;gt;&amp;gt;太晦涩, 建议来读这本. 本次总能得到一些感悟.&lt;/p&gt;</content><category term="books"></category></entry><entry><title>重读Rework</title><link href="http://www.wklken.me/posts/2014/11/09/rework.html" rel="alternate"></link><published>2014-11-09T00:00:00+08:00</published><updated>2014-11-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-09:/posts/2014/11/09/rework.html</id><summary type="html">&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优秀是一种习惯, 进化是建立在成功的基础之上的. 每个人, 无时无刻都是在往前走的, 然而, 每个人最终得到的并不一样. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计划即瞎猜......现在就决定你这周要做什么,不必去管全年的计划, 只要找出下一项最重要的任务, 然后起而行之.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准确理解应该是: 长期计划即瞎猜......你不需要年度/季度/月度计划, 但是你需要年度/季度/月度目标, 计划总是赶不上变化的, 你总是花费很长一段时间或者很多精力给自己制定一个非常完美的计划, 但是计划永远只是计划而已.不去做, 只是徒费精力.我的做法是, 有目标, 然后拆解成小目标, 小目标更灵活可变, 而在do的时候, 只专注于一两个, 并且根据自己的心情/状态等灵活变动. 
拥抱变化, 只要保证不偏离目标主体就行.
不过短期计划还是需要的, 例如每天的todo list. 我现在切换成了&lt;code&gt;things&lt;/code&gt;管理, &lt;code&gt;wunderlist&lt;/code&gt;貌似也不错, 不过你需要找一个最适合你自己的工具.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作狂的行为不但没有必要, 而是愚蠢至极......真正的英雄早已想出办法, 搞定一切, 然后回家了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取三年前刚毕业那会, 我不会完全赞同这个观点, 经过三年, 三家公司, 三种完全不同的工作风格和模式, 看法已经彻底改变了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;快乐工作, 认真生活&lt;/code&gt;, 这句话我一年多前才完全认同之. &lt;code&gt;Work Smarter, Not Harder&lt;/code&gt;—来自zapier的一篇博文&lt;a href="https://zapier.com/blog/best-ways-work-smarter-not-harder/"&gt;16 of the Best Ways to Work Smarter, Not Harder
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前的博文提过, 恶性循环/良性循环, 所谓的工作狂, 就是处在恶性循环中而不自知, 如果觉得自己有点苗头, 需要自省.&lt;/p&gt;
&lt;p&gt;拼的是效率, 而不是时间.&lt;/p&gt;
&lt;p&gt;首先, 工作永远是干不完的, 你必须明确知道这一点. 其次, 效率是可以提升的, 你也必须认同这一点, 并通过不断完善自己的工作风格/模式, 优化共同方式, 积累经验, 技术栈工具栈补完, 你可以达到一个很好的状态. 再次, 努力成为&lt;code&gt;英雄&lt;/code&gt;而不是&lt;code&gt;工作狂&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用自己的方式, 做自己喜欢做的事情, 并从中获得回报.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这才是工作.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在宇宙中留下你的足迹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的一生有限.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;挠自己痒处,......最好还是做自己真正关心的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写代码, 有一个&lt;code&gt;吃自己的狗粮&lt;/code&gt;一说. 这里同, 做自己关心的东西, 感兴趣的东西, 优秀到卓越的区别在于此.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在你的人生中真正有意义的是你做了什么, 而不是你想过什么,说过什么, 或者计划过什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计划党/拖延症患者需注意....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远不会有正当其时的时候.....完美的时机永远不会出现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以, 不要找借口了吧骚年? 活在当下, 现在就开始.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Draw a line in the sand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;信念, 你所坚守的到底是什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;坚守某种信念并不仅仅是把它写下来. 不但要相信它, 还要让他成为你的生活方式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;think about it&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要的是承诺策略, 而不是退出策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你做事情的第一反应是?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与其做半个成品, 不如做好半个产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;以后再重构&lt;/code&gt;, 这句话是很虚无缥缈的, 可以说是遥遥无期, 所以, 经手的每一件事情, 每一行代码, 做到最好. 不要考虑&lt;code&gt;退出策略&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要过早关注细节......你只有在真正开始后, 才能认清到底哪些细节才是最重要的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同&lt;code&gt;不要过早优化&lt;/code&gt;:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关注不变因素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么才是不变的? 才是核心? 才是重要的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人们把装备当做取胜的法宝, 却不愿花时间去练习......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;妄图寻找捷径? &lt;/p&gt;
&lt;p&gt;有一段时间是工具控, 沉迷各种工具，编辑器，插件，操作系统，效率，gtd,浏览器等等&lt;/p&gt;
&lt;p&gt;其实，更重要的是事情本身, 是人本身&lt;/p&gt;
&lt;p&gt;Get things done, 就足够了&lt;/p&gt;
&lt;p&gt;花时间找到适合自己的工具, 不太重, 不过轻, 刚刚合适就好. 而不是花时间收集一大堆东西, 徒耗精力.&lt;/p&gt;
&lt;p&gt;现在，已经没那么狂热了，只遵循一个原则，尝试新事物，针对所有工具，使用二八原则，只关心最核心的20%. 足够了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;立马就上线...为了迅速上线,要砍掉一切不必要的东西…最有效的成功方法是不断尝试. 不要再臆测到底会发生什么事了, 到现实中去寻找答案吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小步快跑才是王道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;退出的理由?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么要这么做? 你在解决什么问题?这真的有用么?你加上去的东西有价值么? 这种改变真的会起作用么? 这种方法更简单吗? 有其他更值得做的事情吗? 这样做值吗?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interruption is the enemy of productivity……你的生活被各种干扰包围着, 只有你自己才能去发起反击.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;干扰不可避免, 只看你如何去解决. 你必须要形成行之有效的工作风格/模式, 以及沟通方式, 并&lt;code&gt;培训&lt;/code&gt;你的战友.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会议有毒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何更高效地开会? 这几个月已经彻底杜绝了&lt;code&gt;被动&lt;/code&gt;的会议, 但是有些必要的会议时间还是太长了.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good enough is fine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有更好, 只有合适. 简单有效就ok.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t be a hero&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些时候, 需要考虑适时退出.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该睡觉时睡觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作息规律, 高效保证, 熬夜苦撑没有任何好处&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;积累动力的方法就是完成一项任务，然后紧接去完成下一项任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重要, 不要给自己设置一个不可能完成的东西, 然后被恐惧压垮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;预估都是垃圾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是不预估, 而是, 你需要聪明地去预估. 分治, 小的任务总是更容易把控些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要做得比你的对手少, 并以此来击败他们.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要相信”客户永远是正确的”这种废话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要相信”产品/老板永远是正确的”这句话, 思辨地看待问题, 提出问题, 解决问题. 学会说’no’. (处理需求的时候很重要)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;头脑发热不等于当务之急&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做当前最重要的事情, 而不是最想去做的事情.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要保持低调, 你可以利用这段时间继续调整你的策略, 解决纠结的问题, 测试各种创意, 尝试新事物.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;黑暗森林?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一夜成名只是传说......道路很艰难, 但你必须充满信心.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生活&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;受不了时再招人......不要提前招人.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你最终会明确你想要招的是什么样的人.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;鸡尾酒会上的陌生人......要营造一个能让人直言不讳并且有安全感的环境.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所处的环境是不是这样的? 你能否感觉到自己是一份子, 能改变些什么? 而不是深深的无力感?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多年的无关经验......真正的差别来自于个人的努力程度, 性格差异以及智力水平.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人和人的区别和工作年限相关性其实蛮低的, 深有体会.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文化不是由谁创造的......企业文化是行为, 不是语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连着实习, 四家公司, 企业文化? 有两家白纸黑字进去新员工培训就有, 大大的标语什么的, 迄今没有记得是什么. 杭州一年多, 是那种潜移默化的, 你从大家的身上可以感受到的东西, 对我影响很大, 受益良多. 现在感受到的, 同样是身体力行, 在一件件事情中. 所以找工作, 如果觉得契合, ok, 如果感觉所谓的&lt;code&gt;文化&lt;/code&gt;很SB, 果断些.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会写代表会思考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码/总结/博客&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要一受伤就结疤, 不要因为一个人的一次错误而去指定规章制度.只有当一件事情反复发生时，才需要为之制定规章制度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们做事的时候是不是也这样? 一遭被蛇咬, 十年怕井绳. 这样自己的领域会不断地受限的.&lt;/p&gt;
&lt;p&gt;所以, 事不过三的原则很重要:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵感稍纵即逝......想法是不朽的, 一直都会存在. 最不可能长存的是灵感.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="books"></category></entry><entry><title>Vim相关资源</title><link href="http://www.wklken.me/posts/2014/10/03/vim-resources.html" rel="alternate"></link><published>2014-10-03T00:00:00+08:00</published><updated>2014-10-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-10-03:/posts/2014/10/03/vim-resources.html</id><summary type="html">&lt;h1 id="vimzi-yuan-lie-biao"&gt;Vim资源列表&lt;/h1&gt;
&lt;p&gt;之前在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 的readme中写了很多, 本次更新8.0版本后, 对其进行了梳理, 感觉放那并不合适, 所以迁过来这边:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .----------------.  .----------------.  .----------------.
    | .--------------. || .--------------. || .--------------. |
    | | ____   ____  | || |     _____    | || | ____    ____ | |
    | ||_  _| |_  _| | || |    |_   _|   | || ||_   \  /   _|| |
    | |  \ \   / /   | || |      | |     | || |  |   \/   |  | |
    | |   \ \ / /    | || |      | |     | || |  | |\  /| |  | |
    | |    \ ' /     | || |     _| |_    | || | _| |_\/_| |_ | |
    | |     \_/      | || |    |_____|   | || ||_____||_____|| |
    | |              | || |              | || |              | |
    | '--------------' || '--------------' || '--------------' |
    '----------------'  '----------------'  '----------------'
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan-ku"&gt;资源库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://u.memect.com/vim/"&gt;memect vim资源汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/communities/105049811056605918816"&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/vim/"&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimawesome.com/"&gt;插件库 vimawsome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcolors.com/"&gt;主题库 vim colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openvim.com/tutorial.html"&gt;openvim tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vimgenius.com/"&gt;vim genius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://inside.github.io/vim-presentation/#/"&gt;一个很赞的ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tips"&gt;Tips …&lt;/h2&gt;</summary><content type="html">&lt;h1 id="vimzi-yuan-lie-biao"&gt;Vim资源列表&lt;/h1&gt;
&lt;p&gt;之前在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 的readme中写了很多, 本次更新8.0版本后, 对其进行了梳理, 感觉放那并不合适, 所以迁过来这边:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .----------------.  .----------------.  .----------------.
    | .--------------. || .--------------. || .--------------. |
    | | ____   ____  | || |     _____    | || | ____    ____ | |
    | ||_  _| |_  _| | || |    |_   _|   | || ||_   \  /   _|| |
    | |  \ \   / /   | || |      | |     | || |  |   \/   |  | |
    | |   \ \ / /    | || |      | |     | || |  | |\  /| |  | |
    | |    \ ' /     | || |     _| |_    | || | _| |_\/_| |_ | |
    | |     \_/      | || |    |_____|   | || ||_____||_____|| |
    | |              | || |              | || |              | |
    | '--------------' || '--------------' || '--------------' |
    '----------------'  '----------------'  '----------------'
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan-ku"&gt;资源库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://u.memect.com/vim/"&gt;memect vim资源汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/communities/105049811056605918816"&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/vim/"&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimawesome.com/"&gt;插件库 vimawsome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcolors.com/"&gt;主题库 vim colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openvim.com/tutorial.html"&gt;openvim tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vimgenius.com/"&gt;vim genius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://inside.github.io/vim-presentation/#/"&gt;一个很赞的ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tips"&gt;Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vimbits.com/bits?sort=top"&gt;vimbits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.oberlin.edu/~kuperman/help/vim/home.html"&gt;vim tips and tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guo-nei-wen-zhang"&gt;国内文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kunli.info/2013/08/13/vim/"&gt;不要复杂化vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/44891/"&gt;七个高效文本编辑习惯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edyfox.codecarver.org/html/vim_fileencodings_detection.html"&gt;vim fileencodings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/bcbe916f97e1"&gt;vim 入门基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com/blog/nightire/1190000000445598"&gt;vim 哲学&lt;/a&gt; 一个系列, 推荐&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="guo-wai-wen-zhang"&gt;国外文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.moolenaar.net/habits.html"&gt;Seven habits of effective text editing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://benmccormick.org/learning-vim-in-2014/"&gt;learning vim in 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcasts.org/"&gt;vimcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/"&gt;how to boost your vim productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mislav.uniqpath.com/2011/12/vim-revisited/"&gt;vim revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huangjian.info/learn-vim-script/"&gt;learn vim script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="shi-pin"&gt;视频&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/search?q=vim"&gt;vimeo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/user1690209/videos"&gt;Derek Wyatt’s Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/vimlondon/videos"&gt;vim london&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/MinuteVimTricks/videos"&gt;minute vim tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://railscasts-china.com/episodes/rails-with-vim"&gt;rails with vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=YhqsjUUHj6g"&gt;vim as a python ide&lt;/a&gt; 对应 &lt;a href="https://speakerdeck.com/mbrochh/vim-as-a-python-ide"&gt;ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta-vimpei-zhi"&gt;其他vim配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/spf13-vim"&gt;spf13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/square/maximum-awesome"&gt;maximum-awsome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/exvim/main"&gt;exvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/carlhuda/janus"&gt;janus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sof"&gt;sof&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim"&gt;What is your most productive shortcut with Vim?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/726894/what-are-the-dark-corners-of-vim-your-mom-never-told-you-about"&gt;What are the dark corners of Vim your mom never told you about? &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://learnvimscriptthehardway.stevelosh.com/"&gt;Learning vim the hard way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.swaroopch.com/notes/vim/#Introduction"&gt;A Byte of vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://painlessvim.com/"&gt;painless vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://derekwyatt.org/"&gt;derekwyatt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BOOK: VIM 实用技巧&lt;/li&gt;
&lt;/ul&gt;</content><category term="vim"></category></entry><entry><title>Python 源码阅读 - dict</title><link href="http://www.wklken.me/posts/2014/08/11/python-source-dict.html" rel="alternate"></link><published>2014-08-11T00:00:00+08:00</published><updated>2014-08-11T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-11:/posts/2014/08/11/python-source-dict.html</id><summary type="html">&lt;p&gt;基本类型实现的最后一篇, 先告一段落, 专心找工作去......搞定工作后再开始扫后面的&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/dictobject.h"&gt;Include/dictobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/dictobject.c"&gt;Objects/dictobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectde-cun-chu-ce-lue"&gt;PyDictObject的存储策略&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 使用散列表进行存储

2. 使用开放定址法处理冲突

    2.1 插入, 发生冲突, 通过二次探测算法, 寻找下一个位置, 直到找到可用位置, 放入(形成一条冲突探测链)

    2.2 查找, 需要遍历冲突探测链

    2.3 删除, 如果对象在探测链上, 不能直接删除, 否则会破坏整个结构(所以不是真的删)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 hash表的 &lt;a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ji-ben-jian-zhi-pydictentry"&gt;基本键值PyDictEntry&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    Py_ssize_t me_hash;
    PyObject *me_key;
    PyObject *me_value;
} PyDictEntry;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;基本类型实现的最后一篇, 先告一段落, 专心找工作去......搞定工作后再开始扫后面的&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/dictobject.h"&gt;Include/dictobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/dictobject.c"&gt;Objects/dictobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectde-cun-chu-ce-lue"&gt;PyDictObject的存储策略&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 使用散列表进行存储

2. 使用开放定址法处理冲突

    2.1 插入, 发生冲突, 通过二次探测算法, 寻找下一个位置, 直到找到可用位置, 放入(形成一条冲突探测链)

    2.2 查找, 需要遍历冲突探测链

    2.3 删除, 如果对象在探测链上, 不能直接删除, 否则会破坏整个结构(所以不是真的删)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 hash表的 &lt;a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ji-ben-jian-zhi-pydictentry"&gt;基本键值PyDictEntry&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    Py_ssize_t me_hash;
    PyObject *me_key;
    PyObject *me_value;
} PyDictEntry;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyDictEntry 用于存储键值对信息

2. Py_ssize_t me_hash
存储了me_key计算得到的hash值, 不重复计算
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyDictEntry" src="/imgs/python-source/PyDictEntry.png"/&gt;&lt;/p&gt;
&lt;p&gt;PyDictEntry的三个状态(图片引自-Python源码剖析)&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyDictEntryState" src="/imgs/python-source/PyDictEntryState.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectding-yi"&gt;PyDictObject定义&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct _dictobject PyDictObject;
struct _dictobject {
    PyObject_HEAD

    Py_ssize_t ma_fill;
    Py_ssize_t ma_used;
    Py_ssize_t ma_mask;

    PyDictEntry *ma_table;
    PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, long hash);
    PyDictEntry ma_smalltable[PyDict_MINSIZE];
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_HEAD
反而声明为定长对象, 因为ob_size在这里用不上, 使用ma_fill和ma_used计数

2. Py_ssize_t ma_fill;
   Py_ssize_t ma_used;

    ma_fill = # Active + # Dummy
    ma_used = # Active

3. Py_ssize_t ma_mask;
散列表entry容量 = ma_mask + 1, 初始值ma_mask = PyDict_MINSIZE - 1 = 7

    ma_mask + 1 = # Unused + # Active + # Dummy

4. PyDictEntry *ma_table;
指向散列表内存, 如果是小的dict(entry数量&amp;lt;=8). 指向ma_smalltable数组

5. ma_lookup
搜索函数

6. PyDictEntry ma_smalltable[PyDict_MINSIZE];
小dict, 大小8, 小于8个键值对的字典会直接存放在这里, 超出后再从内存分配空间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyDictObject" src="/imgs/python-source/PyDictObject.png"/&gt;&lt;/p&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyDictObject在生命周期内, 需要维护ma_fill/ma_used/ma_mask 三个计数值

2. 初始化创建是ma_smalltable, 超过大小后, 会使用外部分配的空间
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="gou-zao-guo-cheng"&gt;构造过程&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; *
&lt;span class="n"&gt;PyDict_New&lt;/span&gt;(&lt;span class="nb"&gt;void&lt;/span&gt;)
{
    &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="n"&gt;PyDictObject&lt;/span&gt; *&lt;span class="n"&gt;mp&lt;/span&gt;;

    // &lt;span class="n"&gt;初始化dummy&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;dummy&lt;/span&gt; == &lt;span class="n"&gt;NULL&lt;/span&gt;) {
        &lt;span class="n"&gt;dummy&lt;/span&gt; = &lt;span class="n"&gt;PyString_FromString&lt;/span&gt;(&lt;span class="s"&gt;"&amp;lt;dummy key&amp;gt;"&lt;/span&gt;);
        &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;dummy&lt;/span&gt; == &lt;span class="n"&gt;NULL&lt;/span&gt;)
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;;

    // &lt;span class="n"&gt;暂时忽略&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;#ifdef SHOW_CONVERSION_COUNTS&lt;/span&gt;
        &lt;span class="n"&gt;Py_AtExit&lt;/span&gt;(&lt;span class="n"&gt;show_counts&lt;/span&gt;);
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;#ifdef SHOW_ALLOC_COUNT&lt;/span&gt;
        &lt;span class="n"&gt;Py_AtExit&lt;/span&gt;(&lt;span class="n"&gt;show_alloc&lt;/span&gt;);
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;#ifdef SHOW_TRACK_COUNT&lt;/span&gt;
        &lt;span class="n"&gt;Py_AtExit&lt;/span&gt;(&lt;span class="n"&gt;show_track&lt;/span&gt;);
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;
    }

    // &lt;span class="n"&gt;如果PyDictObject缓冲池可用&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;numfree&lt;/span&gt;) {
        // &lt;span class="n"&gt;取缓冲池最后一个可用对象&lt;/span&gt;
        &lt;span class="n"&gt;mp&lt;/span&gt; = &lt;span class="n"&gt;free_list&lt;/span&gt;[--&lt;span class="n"&gt;numfree&lt;/span&gt;];

        &lt;span class="n"&gt;assert&lt;/span&gt; (&lt;span class="n"&gt;mp&lt;/span&gt; != &lt;span class="n"&gt;NULL&lt;/span&gt;);
        &lt;span class="n"&gt;assert&lt;/span&gt; (&lt;span class="n"&gt;Py_TYPE&lt;/span&gt;(&lt;span class="n"&gt;mp&lt;/span&gt;) == &lt;span class="nv"&gt;&amp;amp;PyDict_Type&lt;/span&gt;);
        &lt;span class="n"&gt;_Py_NewReference&lt;/span&gt;((&lt;span class="n"&gt;PyObject&lt;/span&gt; *)&lt;span class="n"&gt;mp&lt;/span&gt;);

        // &lt;span class="n"&gt;初始化&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;mp-&lt;/span&gt;&amp;gt;&lt;span class="n"&gt;ma_fill&lt;/span&gt;) {
            // &lt;span class="mi"&gt;1&lt;/span&gt;. &lt;span class="n"&gt;清空&lt;/span&gt; &lt;span class="n"&gt;ma_smalltable&lt;/span&gt;
            // &lt;span class="mi"&gt;2&lt;/span&gt;. &lt;span class="n"&gt;ma_used&lt;/span&gt; = &lt;span class="n"&gt;ma_fill&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;
            // &lt;span class="mi"&gt;3&lt;/span&gt;. &lt;span class="n"&gt;ma_table&lt;/span&gt; -&amp;gt; &lt;span class="n"&gt;ma_smalltable&lt;/span&gt;
            // &lt;span class="mi"&gt;4&lt;/span&gt;. &lt;span class="n"&gt;ma_mask&lt;/span&gt; = &lt;span class="n"&gt;PyDict_MINSIZE&lt;/span&gt; - &lt;span class="mi"&gt;1&lt;/span&gt; = &lt;span class="mi"&gt;7&lt;/span&gt;
            &lt;span class="n"&gt;EMPTY_TO_MINSIZE&lt;/span&gt;(&lt;span class="n"&gt;mp&lt;/span&gt;);
        } &lt;span class="k"&gt;else&lt;/span&gt; {
            // &lt;span class="mi"&gt;1&lt;/span&gt;. &lt;span class="n"&gt;ma_table&lt;/span&gt; -&amp;gt; &lt;span class="n"&gt;ma_smalltable&lt;/span&gt;
            // &lt;span class="mi"&gt;2&lt;/span&gt;. &lt;span class="n"&gt;ma_mask&lt;/span&gt; = &lt;span class="n"&gt;PyDict_MINSIZE&lt;/span&gt; - &lt;span class="mi"&gt;1&lt;/span&gt; = &lt;span class="mi"&gt;7&lt;/span&gt;
            &lt;span class="n"&gt;INIT_NONZERO_DICT_SLOTS&lt;/span&gt;(&lt;span class="n"&gt;mp&lt;/span&gt;);
        }

        &lt;span class="n"&gt;assert&lt;/span&gt; (&lt;span class="n"&gt;mp-&lt;/span&gt;&amp;gt;&lt;span class="n"&gt;ma_used&lt;/span&gt; == &lt;span class="mi"&gt;0&lt;/span&gt;);
        &lt;span class="n"&gt;assert&lt;/span&gt; (&lt;span class="n"&gt;mp-&lt;/span&gt;&amp;gt;&lt;span class="n"&gt;ma_table&lt;/span&gt; == &lt;span class="n"&gt;mp-&lt;/span&gt;&amp;gt;&lt;span class="n"&gt;ma_smalltable&lt;/span&gt;);
        &lt;span class="n"&gt;assert&lt;/span&gt; (&lt;span class="n"&gt;mp-&lt;/span&gt;&amp;gt;&lt;span class="n"&gt;ma_mask&lt;/span&gt; == &lt;span class="n"&gt;PyDict_MINSIZE&lt;/span&gt; - &lt;span class="mi"&gt;1&lt;/span&gt;);
&lt;span class="c c-Singleline"&gt;#ifdef SHOW_ALLOC_COUNT&lt;/span&gt;
        &lt;span class="n"&gt;count_reuse&lt;/span&gt;++;
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;
    } &lt;span class="k"&gt;else&lt;/span&gt; {
        // &lt;span class="n"&gt;创建一个&lt;/span&gt;
        &lt;span class="n"&gt;mp&lt;/span&gt; = &lt;span class="n"&gt;PyObject_GC_New&lt;/span&gt;(&lt;span class="n"&gt;PyDictObject&lt;/span&gt;, &lt;span class="nv"&gt;&amp;amp;PyDict_Type&lt;/span&gt;);
        &lt;span class="k"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;mp&lt;/span&gt; == &lt;span class="n"&gt;NULL&lt;/span&gt;)
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;;
        // &lt;span class="n"&gt;初始化&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="n"&gt;EMPTY_TO_MINSIZE&lt;/span&gt;(&lt;span class="n"&gt;mp&lt;/span&gt;);

&lt;span class="c c-Singleline"&gt;#ifdef SHOW_ALLOC_COUNT&lt;/span&gt;
        &lt;span class="n"&gt;count_alloc&lt;/span&gt;++;
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;
    }

    // &lt;span class="n"&gt;搜索方法&lt;/span&gt;, &lt;span class="n"&gt;关注这个&lt;/span&gt;
    &lt;span class="n"&gt;mp-&lt;/span&gt;&amp;gt;&lt;span class="n"&gt;ma_lookup&lt;/span&gt; = &lt;span class="n"&gt;lookdict_string&lt;/span&gt;;

&lt;span class="c c-Singleline"&gt;#ifdef SHOW_TRACK_COUNT&lt;/span&gt;
    &lt;span class="n"&gt;count_untracked&lt;/span&gt;++;
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;
&lt;span class="c c-Singleline"&gt;#ifdef SHOW_CONVERSION_COUNTS&lt;/span&gt;
    ++&lt;span class="n"&gt;created&lt;/span&gt;;
&lt;span class="c c-Singleline"&gt;#endif&lt;/span&gt;

    // &lt;span class="n"&gt;返回&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; (&lt;span class="n"&gt;PyObject&lt;/span&gt; *)&lt;span class="n"&gt;mp&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简化步骤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 如果PyDictObject对象缓冲池有, 从里面直接取, 初始化

2. 否则, 创建一个, 初始化

3. 关联搜索方法lookdict_string

4. 返回
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 关注对象缓冲池

2. 关注lookdict_string
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="xiao-hui-guo-cheng"&gt;销毁过程&lt;/h1&gt;
&lt;p&gt;方法定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void
dict_dealloc(register PyDictObject *mp)
{
    register PyDictEntry *ep;
    Py_ssize_t fill = mp-&amp;gt;ma_fill;
    PyObject_GC_UnTrack(mp);
    Py_TRASHCAN_SAFE_BEGIN(mp)

    // 遍历销毁ma_table中元素 (ma_table可能指向small_table 或 外部)
    for (ep = mp-&amp;gt;ma_table; fill &amp;gt; 0; ep++) {
        if (ep-&amp;gt;me_key) {
            --fill;
            Py_DECREF(ep-&amp;gt;me_key);
            Py_XDECREF(ep-&amp;gt;me_value);
        }
    }

    // 如果指向外部, 销毁整个(上面一步只销毁内部元素)
    if (mp-&amp;gt;ma_table != mp-&amp;gt;ma_smalltable)
        PyMem_DEL(mp-&amp;gt;ma_table);

    // 如果对象缓冲池未满且是PyDict_Type, 放入
    if (numfree &amp;lt; PyDict_MAXFREELIST &amp;amp;&amp;amp; Py_TYPE(mp) == &amp;amp;PyDict_Type)
        free_list[numfree++] = mp;
    else
        // 否则回收
        Py_TYPE(mp)-&amp;gt;tp_free((PyObject *)mp);
    Py_TRASHCAN_SAFE_END(mp)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectdui-xiang-huan-chong-chi"&gt;PyDictObject对象缓冲池&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef PyDict_MAXFREELIST&lt;/span&gt;
&lt;span class="cp"&gt;#define PyDict_MAXFREELIST 80&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyDictObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PyDict_MAXFREELIST&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numfree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象缓冲池的结构(跟PyListObject对象缓冲池结构基本一样)&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyDictObjectPool" src="/imgs/python-source/PyDictObjectPool.png"/&gt;&lt;/p&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 最多会缓存80个对象

2. 只缓存 PyDictObject 本身, 其PyDictEntry全部会被回收

3. 缓存对象进去, 旧有的值没有变化, 取出来用的时候初始化时才改变
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="dict-cao-zuo"&gt;Dict 操作&lt;/h1&gt;
&lt;p&gt;查找/插入/resize/删除, 下个版本补&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;changelog&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-11 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python 源码阅读 - tuple</title><link href="http://www.wklken.me/posts/2014/08/10/python-source-tuple.html" rel="alternate"></link><published>2014-08-10T17:10:00+08:00</published><updated>2014-08-10T17:10:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-tuple.html</id><summary type="html">&lt;p&gt;还差一篇......写完写简历&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; b = ()
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = (1, )
&amp;gt;&amp;gt;&amp;gt; b = (1, )
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/tupleobject.h"&gt;Include/tupleobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/tupleobject.c"&gt;Objects/tupleobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="jie-gou"&gt;结构&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD
    PyObject *ob_item[1];

} PyTupleObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyTupleObject在底层是个变长对象(需要存储列表元素个数).
虽然, 在python中, tuple是不可变对象

2. PyObject *ob_item[1];
指向存储元素的数组

3 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;还差一篇......写完写简历&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; b = ()
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = (1, )
&amp;gt;&amp;gt;&amp;gt; b = (1, )
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/tupleobject.h"&gt;Include/tupleobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/tupleobject.c"&gt;Objects/tupleobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="jie-gou"&gt;结构&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD
    PyObject *ob_item[1];

} PyTupleObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyTupleObject在底层是个变长对象(需要存储列表元素个数).
虽然, 在python中, tuple是不可变对象

2. PyObject *ob_item[1];
指向存储元素的数组

3.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyTupleObject" src="/imgs/python-source/PyTupleObject.png"/&gt;&lt;/p&gt;
&lt;p&gt;构造方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyAPI_FUNC(PyObject *) PyTuple_New(Py_ssize_t size);
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="gou-zao"&gt;构造&lt;/h1&gt;
&lt;p&gt;看下构造方法定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyTuple_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="n"&gt;PyTupleObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 大小为负数, return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_BadInternalCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 如果大小=0, 空元组, 直接取free_list第一个返回&lt;/span&gt;
&lt;span class="cp"&gt;#if PyTuple_MAXSAVESIZE &amp;gt; 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef COUNT_ALLOCS&lt;/span&gt;
        &lt;span class="n"&gt;tuple_zero_allocs&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 如果free_list可分配, 从free_list取一个&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;PyTuple_MAXSAVESIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 上面  op = free_list[size] 取得单链表头&lt;/span&gt;
        &lt;span class="c1"&gt;// free_list指向单链表下一个元素, 对应位置阈值--&lt;/span&gt;
        &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTupleObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef COUNT_ALLOCS&lt;/span&gt;
        &lt;span class="n"&gt;fast_tuple_allocs&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

      &lt;span class="c1"&gt;// 初始化 ob_size和ob_type&lt;/span&gt;
      &lt;span class="cm"&gt;/* Inline PyObject_InitVar */&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef Py_TRACE_REFS&lt;/span&gt;
        &lt;span class="n"&gt;Py_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyTuple_Type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="n"&gt;_Py_NewReference&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="cp"&gt;#endif   &lt;/span&gt;&lt;span class="c1"&gt;// free_list不可用&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 计算空间&lt;/span&gt;
        &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* Check for overflow */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PY_SSIZE_T_MAX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTupleObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 分配内存&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_GC_NewVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTupleObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyTuple_Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 初始化ob_item每个元素&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 第一次分配空数组, 将其放入free_list第一个位置&lt;/span&gt;
&lt;span class="cp"&gt;#if PyTuple_MAXSAVESIZE &amp;gt; 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;          &lt;span class="cm"&gt;/* extra INCREF so that this is never freed */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;


&lt;span class="cp"&gt;#ifdef SHOW_TRACK_COUNT&lt;/span&gt;
    &lt;span class="n"&gt;count_tracked&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="n"&gt;_PyObject_GC_TRACK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 返回&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简化步骤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 如果size=0, 从free_list[0]取, 直接返回

2. 否则, 确认free_list[size], 是否可用, 可用获取

3. 否则, 从内存分配新的空间

4. 初始化, 返回
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="hui-shou"&gt;回收&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void
tupledealloc(register PyTupleObject *op)
{
    register Py_ssize_t i;
    // 获取元素个数
    register Py_ssize_t len =  Py_SIZE(op);

    PyObject_GC_UnTrack(op);
    Py_TRASHCAN_SAFE_BEGIN(op)


    if (len &amp;gt; 0) {
        i = len;
        // 遍历, 析构每个元素
        while (--i &amp;gt;= 0)
            Py_XDECREF(op-&amp;gt;ob_item[i]);

         // 与对象缓冲池相关
#if PyTuple_MAXSAVESIZE &amp;gt; 0
        if (len &amp;lt; PyTuple_MAXSAVESIZE &amp;amp;&amp;amp;
            numfree[len] &amp;lt; PyTuple_MAXFREELIST &amp;amp;&amp;amp;
            Py_TYPE(op) == &amp;amp;PyTuple_Type)
        {
            op-&amp;gt;ob_item[0] = (PyObject *) free_list[len];
            numfree[len]++;
            free_list[len] = op;
            goto done; /* return */
        }
#endif

    }
    // 调用回收
    Py_TYPE(op)-&amp;gt;tp_free((PyObject *)op);

done:
    Py_TRASHCAN_SAFE_END(op)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简化流程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 回收ob_item每个元素

2. 如果符合条件, 放入到free_list

3. 否则, 回收
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h1 id="tupledui-xiang-huan-chong-chi"&gt;tuple对象缓冲池&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Speed optimization to avoid frequent malloc/free of small tuples */&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef PyTuple_MAXSAVESIZE&lt;/span&gt;
&lt;span class="cp"&gt;#define PyTuple_MAXSAVESIZE     20&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef PyTuple_MAXFREELIST&lt;/span&gt;
&lt;span class="cp"&gt;#define PyTuple_MAXFREELIST  2000&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#if PyTuple_MAXSAVESIZE &amp;gt; 0&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyTupleObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PyTuple_MAXSAVESIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PyTuple_MAXSAVESIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 作用: 优化小tuple的mall/free

2. PyTuple_MAXSAVESIZE = 20
会被缓存的tuple长度阈值, 20, 长度&amp;lt;20的, 才会走对象缓冲池逻辑

3. PyTuple_MAXFREELIST  2000
每种size的tuple最多会被缓存2000个

4. PyTupleObject *free_list[PyTuple_MAXSAVESIZE]
free_list, 指针数组, 每个位置, 存储了指向一个单链表头的地址

5. numfree[PyTuple_MAXSAVESIZE]
numfree, 一个计数数组, 存储free_list对应位置的单链表长度

6. free_list[0], 指向空数组, 有且仅有一个
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;free_list的结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyTupleObjectPool" src="/imgs/python-source/PyTupleObjectPool.png"/&gt;&lt;/p&gt;
&lt;p&gt;回头看回收跟对象缓冲池相关的逻辑&lt;/p&gt;
&lt;p&gt;条件:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (len &amp;lt; PyTuple_MAXSAVESIZE &amp;amp;&amp;amp;         // len &amp;lt; 20
    numfree[len] &amp;lt; PyTuple_MAXFREELIST &amp;amp;&amp;amp; // numfree[len] &amp;lt; 2000
    Py_TYPE(op) == &amp;amp;PyTuple_Type) // 是tuple类型
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;op-&amp;gt;ob_item[0] = (PyObject *) free_list[len]; //ob_item指向free_list[len] 单链表头
numfree[len]++;  // len位置计数+1
free_list[len] = op; // op变成单链表的头
goto done; /* return */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 如果size=0, 直接从free_list[0]取

2. 如果size!=0, 判断size&amp;lt;20?

3.1 size &amp;lt; 20, 从free_list对应size位置的单链表, 取头部第一个位置

3.2 size &amp;lt; 20, free_list对应size位置还没有可用对象的话, 走内存分配逻辑

4 size &amp;gt; 20  走内存分配逻辑


------------------

回收时

如果size&amp;lt;20, 且free_list对应位置单链表长度没达到上限(2000), 将对象放入到单链表头
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 回收时, ob_item都会被回收, 只是本身对象缓存下来

2. 这里free_list, 复用ob_item作为链表指针, 指向下一个位置(通用整数对象池也是复用指针的方式, 不过用的是ob_type)
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;changelog&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-10 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python 源码阅读 - list</title><link href="http://www.wklken.me/posts/2014/08/10/python-source-list.html" rel="alternate"></link><published>2014-08-10T00:00:00+08:00</published><updated>2014-08-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-list.html</id><summary type="html">&lt;p&gt;还剩 tuple 和 dict就把几个基本类型写完了, 然后歇歇先找工作&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/listobject.h"&gt;Include/listobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/listobject.c"&gt;Objects/listobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ding-yi"&gt;定义&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD

    PyObject **ob_item;

    Py_ssize_t allocated;
} PyListObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyListObject是变长对象

2. PyObject **ob_item;
指向列表元素的指针数组, list[0] 即 ob_item[0]

3. Py_ssize_t allocated;
allocated列表分配的空间, ob_size为已使用的空间
allocated 总的申请到的内存数量
ob_size 实际使用内存数量

等式:

    0 &amp;lt;= ob_size &amp;lt;= allocated
    len(list …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;还剩 tuple 和 dict就把几个基本类型写完了, 然后歇歇先找工作&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/listobject.h"&gt;Include/listobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/listobject.c"&gt;Objects/listobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ding-yi"&gt;定义&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD

    PyObject **ob_item;

    Py_ssize_t allocated;
} PyListObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyListObject是变长对象

2. PyObject **ob_item;
指向列表元素的指针数组, list[0] 即 ob_item[0]

3. Py_ssize_t allocated;
allocated列表分配的空间, ob_size为已使用的空间
allocated 总的申请到的内存数量
ob_size 实际使用内存数量

等式:

    0 &amp;lt;= ob_size &amp;lt;= allocated
    len(list) == ob_size
    ob_item == NULL implies ob_size == allocated == 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyListObject" src="/imgs/python-source/PyListObject.png"/&gt;&lt;/p&gt;
&lt;h1 id="gou-zao"&gt;构造&lt;/h1&gt;
&lt;p&gt;只有一个方法&lt;/p&gt;
&lt;p&gt;定义如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyList_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyListObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef SHOW_ALLOC_COUNT&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Py_AtExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_alloc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="c1"&gt;// 大小为负数, return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_BadInternalCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 如果大小超过, 报错&lt;/span&gt;
    &lt;span class="cm"&gt;/* Check for overflow without an actual overflow,&lt;/span&gt;
&lt;span class="cm"&gt;     *  which can cause compiler to optimise out */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PY_SIZE_MAX&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// 计算需要的字节数(PyObject指针数组)&lt;/span&gt;
    &lt;span class="n"&gt;nbytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 如果缓冲池非空, 从缓冲池取&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 取缓冲池数组最后一个对象&lt;/span&gt;
        &lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;numfree&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// set refcnt=1&lt;/span&gt;
        &lt;span class="n"&gt;_Py_NewReference&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef SHOW_ALLOC_COUNT&lt;/span&gt;
        &lt;span class="n"&gt;count_reuse&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// 否则, GC_New分配内存空间&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_GC_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyListObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyList_Type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 分配失败&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef SHOW_ALLOC_COUNT&lt;/span&gt;
        &lt;span class="n"&gt;count_alloc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 确定ob_item列表元素指针的值&lt;/span&gt;
    &lt;span class="c1"&gt;// 若大小&amp;lt;=0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 分配内存&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyMem_MALLOC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 初始化, 填充&lt;/span&gt;
        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ob_size = size&lt;/span&gt;
    &lt;span class="n"&gt;Py_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// allocated&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;allocated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// gc用&lt;/span&gt;
    &lt;span class="n"&gt;_PyObject_GC_TRACK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简化步骤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 判断列表缓冲池是否为空, 是的话从缓冲池取(复用)
2. 否则, 从内存中分配空间
3. 然后初始化数据
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Py_SIZE(op) = size;
op-&amp;gt;allocated = size;
第一次生成list, 其allocated = ob_size
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="list_resize"&gt;list_resize&lt;/h1&gt;
&lt;p&gt;同时注意list_resize方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;extends方法, list_resize(self, m + n)
pop方法,  list_resize(self, Py_SIZE(self) - 1)
append方法, list_resize(self, n+1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list_resize(PyListObject *self, Py_ssize_t newsize)
{
  ...........

  // 如果   allocated/2 &amp;lt;= newsize &amp;lt;= allocated
  // 直接修改ob_size
  if (allocated &amp;gt;= newsize &amp;amp;&amp;amp; newsize &amp;gt;= (allocated &amp;gt;&amp;gt; 1)) {
      assert(self-&amp;gt;ob_item != NULL || newsize == 0);
      Py_SIZE(self) = newsize;
      return 0;
  }


  //否则

  new_allocated = (newsize &amp;gt;&amp;gt; 3) + (newsize &amp;lt; 9 ? 3 : 6);
  new_allocated += newsize;

  .............

  Py_SIZE(self) = newsize;
  self-&amp;gt;allocated = new_allocated;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if allocated/2 &amp;lt;= newsize &amp;lt;= allocated

    allocated 不变
    ob_size = newsize

else

    allocated =  newsize +   ((newsize &amp;gt;&amp;gt; 3) + (newsize &amp;lt; 9 ? 3 : 6))
    ob_size = newsize
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="hui-shou-he-pylistobjectdui-xiang-huan-chong-chi"&gt;回收和PyListObject对象缓冲池&lt;/h1&gt;
&lt;p&gt;看下缓冲池相关的定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Empty list reuse scheme to save calls to malloc and free */&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef PyList_MAXFREELIST&lt;/span&gt;
&lt;span class="cp"&gt;#define PyList_MAXFREELIST 80&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="c1"&gt;// 80个&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyListObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PyList_MAXFREELIST&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numfree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们先看下list_dealloc的定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void
list_dealloc(PyListObject *op)
{
    Py_ssize_t i;
    PyObject_GC_UnTrack(op);
    Py_TRASHCAN_SAFE_BEGIN(op)

    // 遍历ob_item, 释放所有类表内元素空间
    if (op-&amp;gt;ob_item != NULL) {
        /* Do it backwards, for Christian Tismer.
           There's a simple test case where somehow this reduces
           thrashing when a *very* large list is created and
           immediately deleted. */
        i = Py_SIZE(op);
        while (--i &amp;gt;= 0) {
            Py_XDECREF(op-&amp;gt;ob_item[i]);
        }
        PyMem_FREE(op-&amp;gt;ob_item);
    }

    // 如果free_list还没满, PyListObject加入到列表中
    if (numfree &amp;lt; PyList_MAXFREELIST &amp;amp;&amp;amp; PyList_CheckExact(op))
        free_list[numfree++] = op;
    else
        // free_list已经满了, 则回收内存
        Py_TYPE(op)-&amp;gt;tp_free((PyObject *)op);

    Py_TRASHCAN_SAFE_END(op)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;对一个列表对象PyListObject, 回收时, ob_item会被回收, 其每个元素指向的对象引用-1.
但是PyListObject对象本身, 如果缓冲池未满, 会被放入缓冲池, 复用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;缓冲池结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyListObjectPool" src="/imgs/python-source/PyListObjectPool.png"/&gt;&lt;/p&gt;
&lt;h1 id="listde-cao-zuo-guo-cheng"&gt;List的操作过程&lt;/h1&gt;
&lt;h3 id="cha-ru"&gt;插入&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. resize n+1
2. 确定插入点
3. 插入点后所有元素后移
4. 执行插入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; a.insert(0, 9)
&amp;gt;&amp;gt;&amp;gt; a
[9, 1, 2, 3]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="append"&gt;append&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. resize n+1
2. 放入最后一个位置(ob_size)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; a.append(4)
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="extend"&gt;extend&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 计算两个list大小 m n
2. resize m+n(此时本身被复制)
3. 遍历长度为n的数组, 从ob_item+m的位置开始加入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; n = [4, 5]
&amp;gt;&amp;gt;&amp;gt; m.extend(n)
&amp;gt;&amp;gt;&amp;gt; m
[1, 2, 3, 4, 5]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shan-chu"&gt;删除&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 找到要删除元素位置
2. 删除之, 后面元素前移
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 2]
&amp;gt;&amp;gt;&amp;gt; a.remove(2)
&amp;gt;&amp;gt;&amp;gt; a
[1, 3, 2]
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;changelog&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-10 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python 源码阅读 - string</title><link href="http://www.wklken.me/posts/2014/08/08/python-source-string.html" rel="alternate"></link><published>2014-08-08T00:00:00+08:00</published><updated>2014-08-08T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-08:/posts/2014/08/08/python-source-string.html</id><summary type="html">&lt;p&gt;本周进展不大(去掉北上, 选择余地太小了), 下周开始投简历:(&lt;/p&gt;
&lt;p&gt;这一章, 就一张图, 代码比较多&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pystringobject"&gt;PyStringObject&lt;/h1&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/stringobject.h"&gt;Include/stringobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/stringobject.c"&gt;Objects/stringobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
  PyObject_VAR_HEAD
  long ob_shash;
  int ob_sstate;
  char ob_sval[1];

  /* Invariants:
   *     ob_sval contains space for 'ob_size+1' elements.
   *     ob_sval[ob_size] == 0.
   *     ob_shash is the hash of the string or -1 if not computed yet …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;本周进展不大(去掉北上, 选择余地太小了), 下周开始投简历:(&lt;/p&gt;
&lt;p&gt;这一章, 就一张图, 代码比较多&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pystringobject"&gt;PyStringObject&lt;/h1&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/stringobject.h"&gt;Include/stringobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/stringobject.c"&gt;Objects/stringobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
  PyObject_VAR_HEAD
  long ob_shash;
  int ob_sstate;
  char ob_sval[1];

  /* Invariants:
   *     ob_sval contains space for 'ob_size+1' elements.
   *     ob_sval[ob_size] == 0.
   *     ob_shash is the hash of the string or -1 if not computed yet.
   *     ob_sstate != 0 iff the string object is in stringobject.c's
   *       'interned' dictionary; in this case the two references
   *       from 'interned' to this object are *not counted* in ob_refcnt.
   */
} PyStringObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyStringObject是变长对象, 比定长对象多了一个ob_size字段

2. ob_shash
存储字符串的hash值, 如果还没计算等于-1
当string_hash被调用, 计算结果会被保存到这个字段一份, 后续不再进行计算

3. ob_sstate
如果是interned, !=0, 否则=0
interned后面说

4. char ob_sval[1]
字符指针指向一段内存, char数组指针, 指向一个ob_size+1大小数组(c中字符串最后要多一个字符`\0`表字符串结束)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyStringObject" src="/imgs/python-source/PyStringObject.png"/&gt;&lt;/p&gt;
&lt;p&gt;构造方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyAPI_FUNC(PyObject *) PyString_FromString(const char *);

PyAPI_FUNC(PyObject *) PyString_FromStringAndSize(const char *, Py_ssize_t);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两个构造方法其实区别不大,&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyString_FromStringAndSize 参数可以为`NULL`, 无论是否为`NULL`, 都会分配`size+1`个字节空间.(不为NULL的话字符数组会进行拷贝)

PyString_FromString, 参数不能为`NULL`, 且必须是`\0`结束的字符数组, 会调用c 语言string.h模块的strlen()函数计算字符串长度, 分配空间, 并将整个字符数组拷贝到ob_sval指向的内存
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们关注&lt;code&gt;PyString_FromString&lt;/code&gt;就行&lt;/p&gt;
&lt;h1 id="chuang-jian-guo-cheng-pystring_fromstring"&gt;创建过程 PyString_FromString&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//默认未初始化, 均为NULL&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyStringObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UCHAR_MAX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyStringObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nullstring&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyString_FromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="n"&gt;PyStringObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 计算参数字符数组长度&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 超长, 报错(PY_SSIZE_T_MAX平台相关,32位2GB)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PY_SSIZE_T_MAX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyStringObject_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_OverflowError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"string is too long for a Python string"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 长度=0, 且nullstring已定义, 返回nullstring&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nullstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef COUNT_ALLOCS&lt;/span&gt;
        &lt;span class="n"&gt;null_strings&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 字符缓冲池逻辑&lt;/span&gt;
    &lt;span class="c1"&gt;// 长度=1, 且characters[*str &amp;amp; UCHAR_MAX]字符已定义&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;UCHAR_MAX&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef COUNT_ALLOCS&lt;/span&gt;
        &lt;span class="n"&gt;one_strings&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 申请内存空间&lt;/span&gt;
    &lt;span class="cm"&gt;/* Inline PyObject_NewVar */&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyStringObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;PyObject_MALLOC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyStringObject_SIZE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// 初始化&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_INIT_VAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyString_Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_shash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//未计算hash, -1&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_sstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSTATE_NOT_INTERNED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//未intern, 0&lt;/span&gt;
    &lt;span class="c1"&gt;// 将字符数组拷贝到PyStringObject&lt;/span&gt;
    &lt;span class="n"&gt;Py_MEMCPY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_sval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="c1"&gt;// 在nullstring和字符缓冲池对应位置未初始化时, 会走到这个逻辑&lt;/span&gt;
    &lt;span class="cm"&gt;/* share short strings */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// 走intern, 后面说&lt;/span&gt;
        &lt;span class="n"&gt;PyString_InternInPlace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyStringObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// 初始化nullstring&lt;/span&gt;
        &lt;span class="n"&gt;nullstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// 走intern, 后面说&lt;/span&gt;
        &lt;span class="n"&gt;PyString_InternInPlace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyStringObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// 初始化字符缓冲池对应位置&lt;/span&gt;
        &lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;UCHAR_MAX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;// 返回&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤简化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 计算长度
2. 长度0, 空字符串, 是返回已定义好的nullstring
3. 长度1, 字符, 返回字符缓冲池里面的
4. 都不是, 分配内存, 初始化
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;长度0/长度1, 会用到intern机制
注意, intern机制对长度&amp;gt;1的字符串也适用
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="internedji-zhi"&gt;interned机制&lt;/h1&gt;
&lt;p&gt;interned&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* This dictionary holds all interned strings.  Note that references to&lt;/span&gt;
&lt;span class="cm"&gt;strings in this dictionary are *not* counted in the string's ob_refcnt.&lt;/span&gt;
&lt;span class="cm"&gt;When the interned string reaches a refcnt of 0 the string deallocation&lt;/span&gt;
&lt;span class="cm"&gt;function will delete the reference from this dictionary.&lt;/span&gt;

&lt;span class="cm"&gt;Another way to look at this is that to say that the actual reference&lt;/span&gt;
&lt;span class="cm"&gt;count of a string is:  s-&amp;gt;ob_refcnt + (s-&amp;gt;ob_sstate?2:0)&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kr"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;interned&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//指针, 指向PyDictObject&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;interned定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;void&lt;/span&gt;
&lt;span class="nt"&gt;PyString_InternInPlace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;register&lt;/span&gt; &lt;span class="err"&gt;PyStringObject&lt;/span&gt; &lt;span class="err"&gt;*s&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;(PyStringObject&lt;/span&gt; &lt;span class="err"&gt;*)(*p)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;PyObject&lt;/span&gt; &lt;span class="err"&gt;*t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;检查值使用在PyStringObject上,&lt;/span&gt; &lt;span class="err"&gt;派生类不适用&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(s&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="err"&gt;NULL&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="err"&gt;!PyString_Check(s))&lt;/span&gt;
        &lt;span class="err"&gt;Py_FatalError("&lt;/span&gt;&lt;span class="n"&gt;PyString_InternInPlace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c"&gt;/* If it's a string subclass, we don't really know what putting it in the interned dict might do. */&lt;/span&gt;

    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;不是字符串类型,&lt;/span&gt; &lt;span class="err"&gt;返回&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(!PyString_CheckExact(s))&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;本身已经intern了(标志位ob_sstate),&lt;/span&gt; &lt;span class="err"&gt;不重复进行,&lt;/span&gt; &lt;span class="err"&gt;返回&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(PyString_CHECK_INTERNED(s))&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;未初始化字典,&lt;/span&gt; &lt;span class="err"&gt;初始化之&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(interned&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="err"&gt;NULL)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;注意这里&lt;/span&gt;
        &lt;span class="err"&gt;interned&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;PyDict_New()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(interned&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="err"&gt;NULL)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;PyErr_Clear()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Don't leave an exception */&lt;/span&gt;
            &lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="nt"&gt;interned&lt;/span&gt;&lt;span class="err"&gt;字典中已存在&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;修改&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;返回&lt;/span&gt;&lt;span class="nt"&gt;intern&lt;/span&gt;&lt;span class="err"&gt;独享&lt;/span&gt;
    &lt;span class="nt"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;PyDict_GetItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;interned&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*)&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;Py_INCREF(t)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;Py_DECREF(*p)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;*p&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="nt"&gt;interned&lt;/span&gt;&lt;span class="err"&gt;字典中不存在&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;放进去&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;PyDict_SetItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;interned&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*)&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*)&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;PyErr_Clear()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;加入&lt;/span&gt;&lt;span class="nt"&gt;interned&lt;/span&gt;&lt;span class="err"&gt;字典&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;key-value&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="err"&gt;会导致&lt;/span&gt;&lt;span class="nt"&gt;refcnt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;去掉&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;保证当外部没有引用时&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;refcnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;可以进行回收处理&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;不&lt;/span&gt;&lt;span class="nt"&gt;-2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;refcnt&lt;/span&gt;&lt;span class="err"&gt;永远&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;/* The two references in interned are not counted by refcnt.&lt;/span&gt;
&lt;span class="c"&gt;       The string deallocator will take care of this */&lt;/span&gt;
    &lt;span class="nt"&gt;Py_REFCNT&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;修改字符串对象的&lt;/span&gt;&lt;span class="nt"&gt;ob_sstate&lt;/span&gt;&lt;span class="err"&gt;标志位&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;SSTATE_INTERNED_MORTAL&lt;/span&gt;
    &lt;span class="nt"&gt;PyString_CHECK_INTERNED&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;SSTATE_INTERNED_MORTAL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用的地方&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 构造方法
PyAPI_FUNC(PyObject *) PyString_FromString(const char *);

PyAPI_FUNC(PyObject *) PyString_FromStringAndSize(const char *, Py_ssize_t);


// SSTATE_INTERNED_MORTAL, 计数0会被回收
PyObject *
PyString_InternFromString(const char *cp)
{
    PyObject *s = PyString_FromString(cp);
    if (s == NULL)
        return NULL;
    PyString_InternInPlace(&amp;amp;s);
    return s;
}


// SSTATE_INTERNED_IMMORTAL, 永远不会被销毁
void
PyString_InternImmortal(PyObject **p)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = ''
&amp;gt;&amp;gt;&amp;gt; b = ''
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = 'x'
&amp;gt;&amp;gt;&amp;gt; b = 'x'
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = "abc"
&amp;gt;&amp;gt;&amp;gt; b = "abc"
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;python源代码自己也大量使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dict_str = PyString_InternFromString("__dict__")
lenstr = PyString_InternFromString("__len__")
s_true = PyString_InternFromString("true")
empty_array = PyString_InternFromString("[]")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好处&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;一旦字符串被intern, 会被python保存到字典中, 整个python运行期间, 系统中有且仅有一个对象. 下次相同字符串再进入, 不会重复创建对象.
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="zi-fu-huan-chong-chi"&gt;字符缓冲池&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UCHAR_MAX 平台相关

static PyStringObject *characters[UCHAR_MAX + 1];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面&lt;code&gt;PyString_FromString&lt;/code&gt;可以看到, 字符缓冲池在使用中初始化(存在直接返回, 不存在建一个, 放interned字典中, 初始化字符缓冲池对应位置)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyObject *t = (PyObject *)op;
// 走intern, 后面说
PyString_InternInPlace(&amp;amp;t);
op = (PyStringObject *)t;

// 初始化字符缓冲池对应位置
characters[*str &amp;amp; UCHAR_MAX] = op;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="zi-fu-chuan-xiao-hui-guo-cheng"&gt;字符串销毁过程&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void
string_dealloc(PyObject *op)
{
    // 是否intern
    switch (PyString_CHECK_INTERNED(op)) {
        // 非, 跳出 -&amp;gt; 回收内存
        case SSTATE_NOT_INTERNED:
            break;

        // 普通, 从interned字典中删除, 跳出 -&amp;gt; 回收内存
        case SSTATE_INTERNED_MORTAL:
            /* revive dead object temporarily for DelItem */
            Py_REFCNT(op) = 3;
            if (PyDict_DelItem(interned, op) != 0)
                Py_FatalError(
                    "deletion of interned string failed");
            break;
        // 永不回收的对象, 报错
        case SSTATE_INTERNED_IMMORTAL:
            Py_FatalError("Immortal interned string died.");

        default:
            Py_FatalError("Inconsistent interned string state.");
    }

    // 回收内存
    Py_TYPE(op)-&amp;gt;tp_free(op);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="xing-neng-xiang-guan"&gt;性能相关&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;与 &lt;code&gt;join&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;'a' + 'b' + 'c'

or

''.join(['a', 'b', 'c'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以查看&lt;code&gt;string_concat&lt;/code&gt;方法和&lt;code&gt;string_join&lt;/code&gt;方法的源代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;string_concat, 一次加=分配一次内存空间, 拷贝两次. N次链接, 需要N-1次内存分配.
string_join, 计算序列所有元素字符串总长度, 用PyString_FromStringAndSize((char*)NULL, sz)分配内存空间, 然后逐一拷贝. 一次内存操作.
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;changelog&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-08 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python 源码阅读 - int</title><link href="http://www.wklken.me/posts/2014/08/06/python-source-int.html" rel="alternate"></link><published>2014-08-06T00:00:00+08:00</published><updated>2014-08-06T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-06:/posts/2014/08/06/python-source-int.html</id><summary type="html">&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;代码我也仅仅是粗粗读了一遍, 可能出现疏漏和理解错误, 发现了望指出哈.&lt;/p&gt;
&lt;p&gt;今天面了一家靠谱的创业公司, 可惜不是Python向的, 想继续玩Python是有代价的, 选择余地太窄了......&lt;/p&gt;
&lt;p&gt;话说写文章很耗时间, 这个花了两个多小时....主要还是自个绘图渣效率低:(&lt;/p&gt;
&lt;p&gt;准备找工作事宜很占时间, 后面只能慢慢来了(好像还很多很多的样子)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 1
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; c = 257
&amp;gt;&amp;gt;&amp;gt; d = 257
&amp;gt;&amp;gt;&amp;gt; id(c) == id(d)
False

#在python2.x中, 对于大的序列生成, 建议使用xrange(100000) 而不是range(100000), why?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/intobject.h"&gt;Include/intobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/intobject.c"&gt;Objects/intobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pyintobject"&gt;PyIntObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;代码我也仅仅是粗粗读了一遍, 可能出现疏漏和理解错误, 发现了望指出哈.&lt;/p&gt;
&lt;p&gt;今天面了一家靠谱的创业公司, 可惜不是Python向的, 想继续玩Python是有代价的, 选择余地太窄了......&lt;/p&gt;
&lt;p&gt;话说写文章很耗时间, 这个花了两个多小时....主要还是自个绘图渣效率低:(&lt;/p&gt;
&lt;p&gt;准备找工作事宜很占时间, 后面只能慢慢来了(好像还很多很多的样子)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 1
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; c = 257
&amp;gt;&amp;gt;&amp;gt; d = 257
&amp;gt;&amp;gt;&amp;gt; id(c) == id(d)
False

#在python2.x中, 对于大的序列生成, 建议使用xrange(100000) 而不是range(100000), why?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/intobject.h"&gt;Include/intobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/intobject.c"&gt;Objects/intobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pyintobject"&gt;PyIntObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_HEAD
    long ob_ival;
} PyIntObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyIntObject" src="/imgs/python-source/PyIntObject.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="ji-ge-gou-zao-fang-fa"&gt;几个构造方法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# 从字符串, 生成PyIntObject对象&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;# 从Py_UNICODE, 生成PyIntObject对象&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef Py_USING_UNICODE&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromUnicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_UNICODE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;# 从long值, 生成PyIntObject对象&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromSize_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PyAPI_FUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromSsize_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这几个方法, 只需要关注&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 因为大家最后都调用这个方法完成对象生成
PyAPI_FUNC(PyObject *) PyInt_FromLong(long);
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="ju-ti-de-gou-zao-fang-fa-pyint_fromlong"&gt;具体的构造方法 PyInt_FromLong&lt;/h3&gt;
&lt;p&gt;这个方法的定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyInt_FromLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ival&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="n"&gt;PyIntObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* MARK: 如果, 值在小整数范围内, 直接从小整数对象池获取得到对象 */&lt;/span&gt;

    &lt;span class="cp"&gt;#if NSMALLNEGINTS + NSMALLPOSINTS &amp;gt; 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;NSMALLNEGINTS&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;ival&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ival&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;NSMALLPOSINTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="cm"&gt;/* MARK: small_ints是什么后面说 */&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ival&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;NSMALLNEGINTS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;// 引用+1&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cm"&gt;/* 这里先忽略, 计数 */&lt;/span&gt;
        &lt;span class="cp"&gt;#ifdef COUNT_ALLOCS&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ival&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;quick_int_allocs&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;quick_neg_int_allocs&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cp"&gt;#endif&lt;/span&gt;

        &lt;span class="c1"&gt;// 返回&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="c1"&gt;// 如果free_list还不存在, 或者满了&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free_list&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 新建一块PyIntBlock, 并将空闲空间链表头部地址给free_list&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;free_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fill_free_list&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// 如果失败, 返回&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 从free_list分出一个位置存放新的整数&lt;/span&gt;

    &lt;span class="cm"&gt;/* Inline PyObject_New */&lt;/span&gt;
    &lt;span class="c1"&gt;// 使用单向链表头位置&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;free_list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// free_list指向单向链表下一个位置&lt;/span&gt;
    &lt;span class="n"&gt;free_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyIntObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Py_TYPE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 初始化对象, 类型为PyInt_type, 值为ival&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_INIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PyInt_Type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_ival&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ival&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 返回&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里的&lt;code&gt;Py_TYPE()&lt;/code&gt;方法, 在我们&lt;a href="http://www.wklken.me/posts/2014/08/05/python-source-object.html"&gt;第一篇文章&lt;/a&gt;里面有提到, 不知道的回去复习下对象的数据结构&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define Py_TYPE(ob)             (((PyObject*)(ob))-&amp;gt;ob_type)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 先判断数值是否是小整数, 是的话从小整数对象池里面直接返回
(这个池固定大小, 下一点讲)

2. 如果不是, 从通用整数对象池里面取一个, 初始化返回
(如果这时候通用整数对象池还不存在或者已经满了, 新建一个池加入维护. 通用整数对象池后面讲)
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="xiao-zheng-shu-dui-xiang-chi"&gt;小整数对象池&lt;/h3&gt;
&lt;p&gt;先看定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef NSMALLPOSINTS&lt;/span&gt;
&lt;span class="cp"&gt;#define NSMALLPOSINTS           257&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef NSMALLNEGINTS&lt;/span&gt;
&lt;span class="cp"&gt;#define NSMALLNEGINTS           5&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#if NSMALLNEGINTS + NSMALLPOSINTS &amp;gt; 0&lt;/span&gt;
&lt;span class="cm"&gt;/* References to small integers are saved in this array&lt;/span&gt;
&lt;span class="cm"&gt;   so that they can be shared.&lt;/span&gt;
&lt;span class="cm"&gt;   The integers that are saved are those in the range&lt;/span&gt;
&lt;span class="cm"&gt;   -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyIntObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;small_ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSMALLNEGINTS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;NSMALLPOSINTS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实, 小整数对象池就是一个&lt;code&gt;PyIntObject指针&lt;/code&gt;数组(注意是指针数组), 大小=257+5=262, 范围是&lt;code&gt;[-5, 257)&lt;/code&gt; 注意左闭右开. 即这个数组包含了262个指向PyIntObject的指针.&lt;/p&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="small_ints" src="/imgs/python-source/PyInt_smallints.png"/&gt;&lt;/p&gt;
&lt;p&gt;创建整数时, 如果在[-5, 257)范围, 直接返回已经存在的整数对象指针, 所以我们看到开头的例子, id比较一个true/一个false&lt;/p&gt;
&lt;p&gt;小整数对象池, 在一开始就初始化了, 其初始化代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int
_PyInt_Init(void)
{
    PyIntObject *v;
    int ival;

    // 注意这里, free_list再次出现

#if NSMALLNEGINTS + NSMALLPOSINTS &amp;gt; 0

    // 循环, 逐一生成
    for (ival = -NSMALLNEGINTS; ival &amp;lt; NSMALLPOSINTS; ival++) {
          if (!free_list &amp;amp;&amp;amp; (free_list = fill_free_list()) == NULL)
                  return 0;

        // 注意这段代码, 和上面PyInt_FromLong那段代码一样的
        /* PyObject_New is inlined */
        v = free_list;
        free_list = (PyIntObject *)Py_TYPE(v);
        PyObject_INIT(v, &amp;amp;PyInt_Type);
        v-&amp;gt;ob_ival = ival;

        // 放到数组里
        small_ints[ival + NSMALLNEGINTS] = v;
    }
#endif

    return 1;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码很眼熟吧, 觉得不眼熟回上面看代码&lt;/p&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 小整数对象池缓存 [-5, 257) 内的整数对象, 数值在这个范围的整数对象有且只存在一个...

2. 小整数对象池, 只是一个指针数组, 其真正对象依赖通用整数对象池
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="tong-yong-zheng-shu-dui-xiang-chi-1-ji-chu-jie-gou-pyintblock"&gt;通用整数对象池1 - 基础结构PyIntBlock&lt;/h3&gt;
&lt;p&gt;首先, 有个数据结构PyIntBlock&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define BLOCK_SIZE      1000    /* 1K less typical malloc overhead */
#define BHEAD_SIZE      8       /* Enough for a 64-bit pointer */
#define N_INTOBJECTS    ((BLOCK_SIZE - BHEAD_SIZE) / sizeof(PyIntObject))


struct _intblock {
    struct _intblock *next;
    PyIntObject objects[N_INTOBJECTS];
};

typedef struct _intblock PyIntBlock;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回忆一下&lt;code&gt;PyIntObject&lt;/code&gt;结构(1个int, 1指针, 1个long), size=4+4+4(先这么算), N_INTOBJECTS = 82&lt;/p&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyIntBlock" src="/imgs/python-source/PyIntBlock.png"/&gt;&lt;/p&gt;
&lt;h3 id="tong-yong-zheng-shu-dui-xiang-chi-2-chuang-jian-guo-cheng-ji-yun-xing-shi-jie-gou"&gt;通用整数对象池2 - 创建过程及运行时结构&lt;/h3&gt;
&lt;p&gt;有两个指针&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 指向一个block
static PyIntBlock *block_list = NULL;

# 指向一个PyIntObject
static PyIntObject *free_list = NULL;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成过程的定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 初始化一个PyIntBlock
static PyIntObject *
fill_free_list(void)
{
    PyIntObject *p, *q;
    // 建立一个新的block
    /* Python's object allocator isn't appropriate for large blocks. */
    p = (PyIntObject *) PyMem_MALLOC(sizeof(PyIntBlock));

    // 建立失败(内存耗光了)
    if (p == NULL)
        return (PyIntObject *) PyErr_NoMemory();

    // block_list指向新的PyIntBlock节点
    ((PyIntBlock *)p)-&amp;gt;next = block_list;
    block_list = (PyIntBlock *)p;

    /* Link the int objects together, from rear to front, then return
       the address of the last int object in the block. */

    // p=block里面 PyIntObjects数组头地址, q是尾地址
    p = &amp;amp;((PyIntBlock *)p)-&amp;gt;objects[0];
    q = p + N_INTOBJECTS;

    // 从尾部开始向首部移动, 利用对象里的ob_type指针(相当于使用这个字段, ob_type不作为原来的用途), 建立起一个单向链表
    // 这个单向链表的头部是数组的最后一个
    while (--q &amp;gt; p)
        Py_TYPE(q) = (struct _typeobject *)(q-1);
    Py_TYPE(q) = NULL; // 单向链表最后一个元素的next指向null

    // 返回单向链表的头地址!!!
    return p + N_INTOBJECTS - 1;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建第一个时, 只有一个&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyIntBlock" src="/imgs/python-source/PyIntBlock1.png"/&gt;&lt;/p&gt;
&lt;p&gt;从里面拿整数时, 取&lt;code&gt;free_list&lt;/code&gt;指向的节点, 然后&lt;code&gt;free_list&lt;/code&gt;指向链表下一个节点&lt;/p&gt;
&lt;p&gt;当一个block用完了之后, 即&lt;code&gt;free_list=NULL&lt;/code&gt;, 此时要新建另一个PyIntBlock&lt;/p&gt;
&lt;p&gt;新建第二个&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyIntBlock" src="/imgs/python-source/PyIntBlock2.png"/&gt;&lt;/p&gt;
&lt;h3 id="tong-yong-zheng-shu-dui-xiang-chi-3-shan-chu-yi-ge-zheng-shu-shi"&gt;通用整数对象池3 - 删除一个整数时&lt;/h3&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define PyInt_CheckExact(op) ((op)-&amp;gt;ob_type == &amp;amp;PyInt_Type)

static void
int_dealloc(PyIntObject *v)
{
    // 是整数类型, 将对象放入free_list单向链表头
    if (PyInt_CheckExact(v)) {
        Py_TYPE(v) = (struct _typeobject *)free_list;
        free_list = v;
    }
    else
        Py_TYPE(v)-&amp;gt;tp_free((PyObject *)v); //不是整数类型, 对应类型析构
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到, 回收的时候, 把空间给放回到&lt;code&gt;free_list&lt;/code&gt;了, 后面接着用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;block_list&lt;/code&gt;维护着所有&lt;code&gt;PyIntBlock&lt;/code&gt;列表, 查看源码注释可以看到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyIntBlocks are never returned to the
 system before shutdown (PyInt_Fini).
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即, &lt;code&gt;PyIntBlock&lt;/code&gt;申请的所有内存, 在Python结束之前, 都不会被释放&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;所以, 使用range(100000), 运行后, 虽然程序结束了, 但是整数占用空间还在.

建议对大范围的序列生成使用xrange

python3.x不用担心这个问题
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;changelog&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-07 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python 源码阅读 - 类型</title><link href="http://www.wklken.me/posts/2014/08/05/python-source-type.html" rel="alternate"></link><published>2014-08-05T19:31:00+08:00</published><updated>2014-08-05T19:31:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-type.html</id><summary type="html">&lt;p&gt;这篇主要涉及Python对象的类型机制&lt;/p&gt;
&lt;p&gt;有点绕, 一定要思维清晰的时候再看哦:)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;一个例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; a
1

&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'int'&amp;gt;

#等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(a))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(int)
&amp;lt;type 'type'&amp;gt;

#还是等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(type(a)))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(type(int))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们反向推导一个&lt;code&gt;int&lt;/code&gt;对象是怎么生成的.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-shou-xian-ding-yi-yi-chong-lei-xing-jiao-pytypeobject"&gt;1. 首先, 定义一种类型叫PyTypeObject&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/object.h"&gt;Include/object.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; typedef struct _typeobject {

  /* MARK: base …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;这篇主要涉及Python对象的类型机制&lt;/p&gt;
&lt;p&gt;有点绕, 一定要思维清晰的时候再看哦:)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;一个例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; a
1

&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'int'&amp;gt;

#等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(a))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(int)
&amp;lt;type 'type'&amp;gt;

#还是等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(type(a)))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(type(int))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们反向推导一个&lt;code&gt;int&lt;/code&gt;对象是怎么生成的.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-shou-xian-ding-yi-yi-chong-lei-xing-jiao-pytypeobject"&gt;1. 首先, 定义一种类型叫PyTypeObject&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/object.h"&gt;Include/object.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; typedef struct _typeobject {

  /* MARK: base, 注意, 是个变长对象*/
  PyObject_VAR_HEAD
  const char *tp_name; /* For printing, in format "&amp;lt;module&amp;gt;.&amp;lt;name&amp;gt;" */ //类型名
  Py_ssize_t tp_basicsize, tp_itemsize; /* For allocation */ // 创建该类型对象时分配的内存空间大小


  // 一堆方法定义, 函数和指针
  /* Methods to implement standard operations */
  printfunc tp_print;
  hashfunc tp_hash;

  /* Method suites for standard classes */
  PyNumberMethods *tp_as_number;   // 数值对象操作
  PySequenceMethods *tp_as_sequence; // 序列对象操作
  PyMappingMethods *tp_as_mapping; // 字典对象操作

  // 一堆属性定义
  ....

} PyTypeObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
变长对象

2. const char *tp_name
tp_name, 类型名字符串数组
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有Type都是PyTypeObject的"实例": PyType_Type/PyInt_Type&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="2-ran-hou-yong-pytypeobjectchu-shi-hua-de-dao-yi-ge-dui-xiang-pytype_type"&gt;2. 然后, 用PyTypeObject初始化得到一个对象PyType_Type&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/typeobject.c"&gt;Objects/typeobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyTypeObject PyType_Type = {
  PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
  "type",                                     /* tp_name */
  sizeof(PyHeapTypeObject),                   /* tp_basicsize */
  sizeof(PyMemberDef),                        /* tp_itemsize */
  (destructor)type_dealloc,                   /* tp_dealloc */

  // type对象的方法和属性初始化值
  .....

};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. tp_name
类型名, 这里是"type"

2. PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
PyVarObject_HEAD_INIT, 这个方法在 Include/object.h中,
等价于
        ob_refcnt = 1
        *ob_type = &amp;amp;PyType_Type
        ob_size = 0

即, PyType_Type的类型是其本身!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;第一张图, 箭头表示&lt;code&gt;实例化&lt;/code&gt;(google doc用不是很熟找不到对应类型的箭头)
&lt;img alt="PyType_Type" src="/imgs/python-source/PyType_Type.png"/&gt;&lt;/p&gt;
&lt;p&gt;第二张图, 箭头表示&lt;code&gt;指向&lt;/code&gt;
&lt;img alt="PyType_Type2" src="/imgs/python-source/PyType_Type2.png"/&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 1. int 的 类型 是`type`
&amp;gt;&amp;gt;&amp;gt; type(int)
&amp;lt;type 'type'&amp;gt;

# 2. type 的类型 还是`type`, 对应上面说明第二点
&amp;gt;&amp;gt;&amp;gt; type(type(int))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 无论任何时候, ob_type指向的是 PyTypeObject的实例: PyType_Type/PyInt_Type...&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="3-zai-ran-hou-ding-yi-ju-ti-de-lei-xing-zhe-li-yi-pyint_typewei-li-zi"&gt;3. 再然后, 定义具体的类型, 这里以PyInt_Type为例子&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/intobject.c"&gt;Objects/intobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyTypeObject PyInt_Type = {
  PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
  "int",
  sizeof(PyIntObject),
  0,

  // int类型的相关方法和属性值
  ....

  (hashfunc)int_hash,                         /* tp_hash */

};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. "int"
PyInt_Type的类型名是int

2.PyVarObject_HEAD_INIT(&amp;amp;PyType_Type, 0)
PyInt_Type的

    *ob_type = &amp;amp;PyType_Type
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyType_Type2" src="/imgs/python-source/PyType_Type3.png"/&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; type(1)
&amp;lt;type 'int'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; type(type(1))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="4-zui-hou-sheng-cheng-yi-ge-zheng-shu-dui-xiang-int"&gt;4. 最后, 生成一个整数对象int&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/intobject.h"&gt;Include/intobject.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_HEAD
    long ob_ival;
} PyIntObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyType_Type2" src="/imgs/python-source/PyType_Type4.png"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyIntObject为整数类型

2. 声明一个整数后得到整数对象

3. 对象ob_type指向PyInt_type对象
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="dao-zhe-li-zong-jie-xia"&gt;到这里, 总结下&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. 一切都是对象

 2. PyType_Type / PyInt_Type / PyString_Type ....等
 这些是`类型对象`, 可以认为是同级, 都是PyTypeObject这种`类型`的实例!

 3. 虽然是同级,
 但是其他PyXXX_Type, 其类型指向 PyType_Type
 PyType_Type 的类型指向自己, 它是所有类型的`类型`

 4. PyTypeObject 是一个变长对象

 5. 每个object, 例如PyIntObject都属于一种`类型`
 object初始化时进行关联
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="duo-tai-shi-ru-he-shi-xian-de"&gt;多态是如何实现的?&lt;/h3&gt;
&lt;p&gt;对象的多态, 例如hash&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; hash(1)
1
&amp;gt;&amp;gt;&amp;gt; hash("abc")
1453079729188098211
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面数据结构可以看到, 方法及属性, 在不同Type实例化时就确定了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PyTypeObject PyInt_Type = {
    ...
    (hashfunc)int_hash,                         /* tp_hash */
    ...
}


PyTypeObject PyString_Type = {
    ...
    (hashfunc)string_hash,                      /* tp_hash */
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python内部传递的是泛型指针&lt;code&gt;PyObject *&lt;/code&gt;, 函数调用时, 找到其类型&lt;code&gt;* ob_type&lt;/code&gt;, 然后调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;object -&amp;gt; ob_type -&amp;gt; tp_hash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即: 大量函数指针决定了该类型的具体行为&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;changelog&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-05 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python 源码阅读 - 对象</title><link href="http://www.wklken.me/posts/2014/08/05/python-source-object.html" rel="alternate"></link><published>2014-08-05T17:32:00+08:00</published><updated>2014-08-05T17:32:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-object.html</id><summary type="html">&lt;p&gt;结束休息期, 开始准备面试事宜了, 发现要准备的东西好多(╯‵□′)╯︵┻━┻,  顺手整理下Python源码阅读笔记(力争在写完前找到工作)&lt;/p&gt;
&lt;p&gt;参考内容: Python源码 + &lt;code&gt;&amp;lt;&amp;lt;Python源码剖析&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;源代码+说明+图解&lt;/code&gt;的方式, 尽量说明白吧, 有一份注释在github上&lt;/p&gt;
&lt;p&gt;内容:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; 对象/类型
-&amp;gt; 各种内建类型对象及机制
-&amp;gt; 虚拟机相关(编译及执行)
-&amp;gt; 内存管理/动态加载/多线程等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: 画图的话google doc很好用&lt;/p&gt;
&lt;p&gt;好的, 第一篇开始&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;一切皆为对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象, 在C语言是如何实现的?&lt;/p&gt;
&lt;p&gt;Python中对象分为两类: 定长(int等), 非定长(list/dict等)&lt;/p&gt;
&lt;p&gt;所有对象都有一些相同的东西, 源码中定义为&lt;code&gt;PyObject&lt;/code&gt;和&lt;code&gt;PyVarObject&lt;/code&gt;, 两个定义都有一个共同的头部定义&lt;code&gt;PyObject_HEAD&lt;/code&gt;(其实PyVarObject有自己的头部定义&lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt;, 但其实际上用的也是&lt;code&gt;PyObject_HEAD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;源码位置 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;结束休息期, 开始准备面试事宜了, 发现要准备的东西好多(╯‵□′)╯︵┻━┻,  顺手整理下Python源码阅读笔记(力争在写完前找到工作)&lt;/p&gt;
&lt;p&gt;参考内容: Python源码 + &lt;code&gt;&amp;lt;&amp;lt;Python源码剖析&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;源代码+说明+图解&lt;/code&gt;的方式, 尽量说明白吧, 有一份注释在github上&lt;/p&gt;
&lt;p&gt;内容:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; 对象/类型
-&amp;gt; 各种内建类型对象及机制
-&amp;gt; 虚拟机相关(编译及执行)
-&amp;gt; 内存管理/动态加载/多线程等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: 画图的话google doc很好用&lt;/p&gt;
&lt;p&gt;好的, 第一篇开始&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;一切皆为对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象, 在C语言是如何实现的?&lt;/p&gt;
&lt;p&gt;Python中对象分为两类: 定长(int等), 非定长(list/dict等)&lt;/p&gt;
&lt;p&gt;所有对象都有一些相同的东西, 源码中定义为&lt;code&gt;PyObject&lt;/code&gt;和&lt;code&gt;PyVarObject&lt;/code&gt;, 两个定义都有一个共同的头部定义&lt;code&gt;PyObject_HEAD&lt;/code&gt;(其实PyVarObject有自己的头部定义&lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt;, 但其实际上用的也是&lt;code&gt;PyObject_HEAD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;源码位置: &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/object.h"&gt;Include/object.h&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pyobject_head"&gt;PyObject_HEAD&lt;/h3&gt;
&lt;p&gt;Python 内部, 每个对象拥有相同的头部.&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* PyObject_HEAD defines the initial segment of every PyObject. */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;define&lt;span class="w"&gt; &lt;/span&gt;PyObject_HEAD&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;_PyObject_HEAD_EXTRA&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Py_ssize_t&lt;span class="w"&gt; &lt;/span&gt;ob_refcnt&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;struct&lt;span class="w"&gt; &lt;/span&gt;_typeobject&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;ob_type&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. _PyObject_HEAD_EXTRA
先忽略, 双向链表结构, 后面垃圾回收再说

2. Py_ssize_t ob_refcnt
Py_ssize_t在编译时确定, 整型
ob_refcnt, 引用计数, 跟Python的内存管理机制相关(基于引用计数的垃圾回收)

3. struct _typeobject *ob_type
*ob_type 指向类型对象的指针(指向_typeobject结构体)
决定了这个对象的类型!
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pyobject"&gt;PyObject&lt;/h3&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; typedef struct _object {
     PyObject_HEAD
 } PyObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. 依赖关系
 PyObject -&amp;gt; PyObject_HEAD
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyObject" src="/imgs/python-source/PyObject.png"/&gt;&lt;/p&gt;
&lt;h3 id="pyvarobject"&gt;PyVarObject&lt;/h3&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD
} PyVarObject;

#define PyObject_VAR_HEAD               \
  PyObject_HEAD                       \
  Py_ssize_t ob_size; /* Number of items in variable part */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. 依赖关系
 PyVarObject -&amp;gt; PyObject_VAR_HEAD -&amp;gt; PyObject_HEAD

 2.Py_ssize_t ob_size
 ob_size, 变长对象容纳的元素个数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyVarObject" src="/imgs/python-source/PyVarObject.png"/&gt;&lt;/p&gt;
&lt;h3 id="dai-ma-guan-xi"&gt;代码关系&lt;/h3&gt;
&lt;p&gt;&lt;img alt="PyObjectCode" src="/imgs/python-source/PyObjectCode.png"/&gt;&lt;/p&gt;
&lt;h3 id="ji-ge-fang-fa"&gt;几个方法&lt;/h3&gt;
&lt;p&gt;跟对象相关的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define Py_REFCNT(ob)           (((PyObject*)(ob))-&amp;gt;ob_refcnt)
读取引用计数

#define Py_TYPE(ob)             (((PyObject*)(ob))-&amp;gt;ob_type)
获取对象类型

#define Py_SIZE(ob)             (((PyVarObject*)(ob))-&amp;gt;ob_size)
读取元素个数(len)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟引用计数相关的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Py_INCREF(op)  增加对象引用计数

Py_DECREF(op)  减少对象引用计数, 如果计数位0, 调用_Py_Dealloc

_Py_Dealloc(op) 调用对应类型的 tp_dealloc 方法(每种类型回收行为不一样的, 各种缓存池机制, 后面看)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;几个参数涉及&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ob_refcnt 引用计数, 与内存管理/垃圾回收相关
ob_type   类型, 涉及Python的类型系统
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;changelog:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2013-08-05 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python后端相关技术/工具栈</title><link href="http://www.wklken.me/posts/2014/07/26/python-tech-stack.html" rel="alternate"></link><published>2014-07-26T00:00:00+08:00</published><updated>2014-07-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-07-26:/posts/2014/07/26/python-tech-stack.html</id><summary type="html">&lt;p&gt;整理下目前涉及到的python的技术栈和工具栈(用过或了解的, 其他的后续用到再补充)&lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="/imgs/python/python-logo.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见: vim / &lt;a href="http://www.sublimetext.com/2"&gt;SublimeText2&lt;/a&gt; / &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim有兴趣可以看看 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 适合Python/Golang开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境
pip/easy_install 包管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;viertualenv&lt;/a&gt; + &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 库/版本管理, 环境隔离&lt;/p&gt;
&lt;p&gt;ipython/ipdb&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 框架
Python 的Web 框架非常多......&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人偏好[有分先后]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt; 轻量! 可以灵活组合各类组件进行开发(第三方组件很丰富), 简单高效, 便于快速开发和维护.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tornadoweb.org/en/stable/"&gt;tornado&lt;/a&gt; 异步, 高性能, 最新版本4.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; 有些重, 配置和约定众多, 可以快速开发一些"管理"性质的后台, 其版本更新非常快&lt;/p&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;bottle …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;整理下目前涉及到的python的技术栈和工具栈(用过或了解的, 其他的后续用到再补充)&lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="/imgs/python/python-logo.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见: vim / &lt;a href="http://www.sublimetext.com/2"&gt;SublimeText2&lt;/a&gt; / &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim有兴趣可以看看 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 适合Python/Golang开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境
pip/easy_install 包管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;viertualenv&lt;/a&gt; + &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 库/版本管理, 环境隔离&lt;/p&gt;
&lt;p&gt;ipython/ipdb&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 框架
Python 的Web 框架非常多......&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人偏好[有分先后]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt; 轻量! 可以灵活组合各类组件进行开发(第三方组件很丰富), 简单高效, 便于快速开发和维护.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tornadoweb.org/en/stable/"&gt;tornado&lt;/a&gt; 异步, 高性能, 最新版本4.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; 有些重, 配置和约定众多, 可以快速开发一些"管理"性质的后台, 其版本更新非常快&lt;/p&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;bottle&lt;/a&gt; 类flask, 一个文件, 足够小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORM
&lt;a href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎这个就足够了, 无出其右&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只提第三方(很多框架自带了, 例如Django/Tornado), 话说天下模板都大同小异&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt;, 最喜欢的一个, 之前写了篇 &lt;a href="http://www.wklken.me/posts/2013/12/21/python-template-jinja2.html"&gt;PYTHON模板-JINJA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.makotemplates.org/"&gt;Mako&lt;/a&gt;, 介绍&lt;a href="http://www.wklken.me/posts/2013/12/14/python-template-mako.html"&gt;PYTHON模板-MAKO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有挺多的, 后续了解后补充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码管理及Wiki&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用git, 搭建&lt;a href="https://about.gitlab.com/"&gt;gitlab&lt;/a&gt;
gilt针对项目级别, 可以用markdown写一些文档, 可以简单的code review, 可以进行讨论等等.&lt;/p&gt;
&lt;p&gt;Wiki的选择: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gollum/gollum"&gt;gollum&lt;/a&gt; 很赞&lt;/p&gt;
&lt;p&gt;&lt;a href="http://trac.edgewall.org/"&gt;trac&lt;/a&gt;老牌, 但是个人不大喜欢其语法编辑方式.    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fabric + rsync&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rsync.samba.org/"&gt;rsync&lt;/a&gt; 用于生产代码目录的同步, 足够简单强大&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.fabfile.org/"&gt;fabric&lt;/a&gt; 用于自动化部署, 将流程固化到脚本中重复使用, 提高效率降低风险, &lt;a href="http://www.wklken.me/posts/2013/03/25/python-tool-fabric.html"&gt;PYTHON FABRIC实现远程操作和部署&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fabric is a Python (2.5-2.7) library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;项目部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://nginx.org/cn/"&gt;nginx&lt;/a&gt; 服务器, 主要用于负载均衡, 反代等&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gunicorn.org/"&gt;gunicorn&lt;/a&gt; a Python WSGI HTTP Server for UNIX, 用来运行Flask项目&lt;/p&gt;
&lt;p&gt;&lt;a href="http://supervisord.org/"&gt;Supervisor&lt;/a&gt; A Process Control System, 配置管理各种程序, 进程监控, 自动重启等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.nagios.org/"&gt;nagios&lt;/a&gt; 服务器各类参数监控, 负载,内存,IO, 网络等, 也可以配置对进程进行监控报警&lt;/p&gt;
&lt;p&gt;&lt;a href="https://getsentry.com/welcome/"&gt;sentry&lt;/a&gt; 实时收集事件日志, 可以在管理后台查看到当前程序异常及报错具体信息, 很强大的平台, 支持多种语言的程序&lt;/p&gt;
&lt;p&gt;statsd + graphic&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/etsy/statsd"&gt;statsd&lt;/a&gt; 实时服务数据收集(e.g. counters and timers) 收集后数据提供给graphic进行展示&lt;/p&gt;
&lt;p&gt;&lt;a href="http://graphite.wikidot.com/"&gt;graphic&lt;/a&gt; 企业级开源监控工具(数据绘图工具)，用于采集服务器实时信息并进行统计, Graphite 自己本身并不收集具体的数据，这些数据收集的具体工作通常由第三方工具或插件完成. 其控制台前端项目 &lt;a href="https://github.com/urbanairship/tessera"&gt;tessera&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NOSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://redis.io/"&gt;redis&lt;/a&gt; 缓存/持久化/特殊需求(计数-排行榜-时间线等)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://memcached.org/"&gt;memcached&lt;/a&gt; 集群, 多用于有时限性质的缓存&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mongodb.org/"&gt;mongodb&lt;/a&gt; 在技术选型玩了下, 没有正式在生产用过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://dev.mysql.com/downloads/"&gt;mysql&lt;/a&gt; 不解释, 感觉是不是所有Python的底层db都是mysql......&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.postgresql.org/"&gt;postgresql&lt;/a&gt; 开发日志统计系统使用过, 学院派, 各种牛叉的功能, 对json的支持令人印象深刻.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抓取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;beautifulsoup&lt;/a&gt; 配合urllib2或者requests库进项简单的抓取分析工作&lt;/p&gt;
&lt;p&gt;&lt;a href="http://scrapy.org/"&gt;scrapy&lt;/a&gt; 很牛的抓取框架, 适合规模较大,需求复杂的的抓取任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索
&lt;a href="http://lucene.apache.org/solr/"&gt;solr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成搜索功能, 虽然Python也有一些实现, 但是感觉还是使用成熟的方案会好些, 文档/资源丰富, 便于开发和维护. Solr, 足够简单及强大.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好用的第三方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt;  HTTP for humans, 非常好用, 强烈推荐&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fxsjy/jieba"&gt;jieba&lt;/a&gt; 中文分词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步和队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://gearman.org/"&gt;gearman&lt;/a&gt; 支持分布式的任务分发框架, 并行/不同语言之间的通信. 之前使用主要用来跨机器任务分发.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt; 分布式任务队列&lt;/p&gt;
&lt;p&gt;&lt;a href="http://zeromq.org/"&gt;zeromq&lt;/a&gt; 之前使用的消息系统是基于这个的, 没有研究过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://logstash.net/"&gt;logstash&lt;/a&gt; 日志收集和分析, 支持不同来源不同格式, 进行统一收集和分析处理&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.elasticsearch.org/overview/elasticsearch/"&gt;Elasticsearch&lt;/a&gt; 数据&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt; A log analyzing web interface for logstash and elasticsearch&lt;/p&gt;
&lt;p&gt;三者组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://tower.im/"&gt;tower&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Log:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-07-24 first version
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>读书笔记-软件测试的艺术</title><link href="http://www.wklken.me/posts/2014/07/26/the-art-of-software-testing.html" rel="alternate"></link><published>2014-07-26T00:00:00+08:00</published><updated>2014-07-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-07-26:/posts/2014/07/26/the-art-of-software-testing.html</id><summary type="html">&lt;p&gt;这本书是三年前毕业时读的, 毕业时的职位是"测试开发工程师".&lt;/p&gt;
&lt;p&gt;好吧, 这本书年龄比我还大:), 毕业那会绝版了, 读的是电子版的. 前阵子看到有在卖就买了一本珍藏, 最近重读了一遍.&lt;/p&gt;
&lt;p&gt;可以作为测试入门读本.(测试界的经典书籍), 摘录一些, 一些关键字感兴趣可以自己google.&lt;/p&gt;
&lt;p&gt;&lt;img alt="software-test" src="/imgs/books/the-art-of-software-testing.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;好吧, 在很多人眼里, 测试只是点点鼠标等没技术含量的工作, 干开发干不了才干测试. But, 这个观点是错误的, 测试还是非常博大精深的, 要求还是非常高的(需要懂各类语言, 需要写各种代码, 需要懂各种业务, 需要懂各类场景, 需要项目管理, 需要......).&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓软件测试, 就是一个过程或一系列过程, 用来确认计算机代码完成了其应该完成的功能, 不执行其不该有的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意后半段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的心理学&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是为了发现错误而执行的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的行为总是倾向于具有高度目的性. 所以需要将目标定为: 证明程序中存在错误(某些情况下, 测试人员的态度可能比实际的测试过程本身还重要)&lt;/p&gt;
&lt;p&gt;所以, 要假设测试的程序是存在错误的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试的原则
(直接摘录了, 很多观点值得借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;编号&lt;/th&gt;
&lt;th align="left"&gt;原则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;测试用例中一个必需部分是对预期输出或结果进行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;这本书是三年前毕业时读的, 毕业时的职位是"测试开发工程师".&lt;/p&gt;
&lt;p&gt;好吧, 这本书年龄比我还大:), 毕业那会绝版了, 读的是电子版的. 前阵子看到有在卖就买了一本珍藏, 最近重读了一遍.&lt;/p&gt;
&lt;p&gt;可以作为测试入门读本.(测试界的经典书籍), 摘录一些, 一些关键字感兴趣可以自己google.&lt;/p&gt;
&lt;p&gt;&lt;img alt="software-test" src="/imgs/books/the-art-of-software-testing.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;好吧, 在很多人眼里, 测试只是点点鼠标等没技术含量的工作, 干开发干不了才干测试. But, 这个观点是错误的, 测试还是非常博大精深的, 要求还是非常高的(需要懂各类语言, 需要写各种代码, 需要懂各种业务, 需要懂各类场景, 需要项目管理, 需要......).&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓软件测试, 就是一个过程或一系列过程, 用来确认计算机代码完成了其应该完成的功能, 不执行其不该有的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意后半段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的心理学&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是为了发现错误而执行的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的行为总是倾向于具有高度目的性. 所以需要将目标定为: 证明程序中存在错误(某些情况下, 测试人员的态度可能比实际的测试过程本身还重要)&lt;/p&gt;
&lt;p&gt;所以, 要假设测试的程序是存在错误的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试的原则
(直接摘录了, 很多观点值得借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;编号&lt;/th&gt;
&lt;th align="left"&gt;原则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;测试用例中一个必需部分是对预期输出或结果进行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;程序员应当避免测试自己编写的程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;编写软件的组织不应当测试自己编写的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="left"&gt;应当彻底检查每个测试的执行结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="left"&gt;测试用例的编写不仅应当根据有限和预料到的输入情况, 而且也应当根据无效和未预料到的输入情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="left"&gt;检查程序是否"未做其应该做的"仅是测试的一半, 测试的另一半是检查程序是否"做了其不应该做的"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="left"&gt;应该避免测试用例用后即弃, 除非软件本身就是一个一次性的软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="left"&gt;计划测试工作时不应默许假定不会发生错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="left"&gt;程序某部分存在更多错误的可能性, 与该部分已发生错误的数量成正比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="left"&gt;软件测试是一项极富创造性, 极具智力挑战性的工作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;错误发现的越早, 改正错误的成本越低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so, 单元测试很重要, 代码走查很重要,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黑盒白盒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;黑盒测试(数据驱动测试), 将程序视为一个黑盒, 不用去理解程序的内部结构(测试目标与程序内部机制和结构完全无关), 构造测试数据(来源于软件规范), 检查输出是否符合预期.&lt;/p&gt;
&lt;p&gt;白盒测试(逻辑驱动测试), 对程序的逻辑结构进行检查, 从中获取测试数据.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;p&gt;功能测试&lt;/p&gt;
&lt;p&gt;系统测试: 能力, 容量, 强度, 可用性, 安全性, 性能, 存储, 配置, 兼容性, 安装, 可靠性, 可恢复性, 服务/可维护性, 文档, 过程&lt;/p&gt;
&lt;p&gt;验收测试&lt;/p&gt;
&lt;p&gt;安装测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试用例的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;白盒测试:&lt;/p&gt;
&lt;p&gt;逻辑覆盖测试, 从弱到强依次是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;语句覆盖,每个语句至少执行一次
判定覆盖(也称分支覆盖) 每个判断都至少有一个为真和为假的输出结果
条件覆盖, 确保将一个判断中的每个条件的所有可能结果都至少执行一次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;黑盒测试:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;等价划分, 穷举输入是不可能的, 但是可以将其划分成有限数量等价类, 获取一个子集输入.
边界值分析, 输入和输出等价类中那些恰好处于/大于/小于边界的状态
因果图, 需求规格 -&amp;gt; 因果关系分析 -&amp;gt; 因果图 -&amp;gt; 测试用例
错误猜测, 基于直觉和经验的猜测
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;做测试还是做开发?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我做了一年又三个月测试开发, 后来转职Python后端开发了.&lt;/p&gt;
&lt;p&gt;原因? 兴趣, 仅此而已.&lt;/p&gt;
&lt;p&gt;如果更在乎创造一些东西，做开发.&lt;/p&gt;
&lt;p&gt;如果更喜欢发现一些东西，做测试开发(现在似乎没有单纯的测试了吧?)&lt;/p&gt;
&lt;p&gt;(开发就像工匠, 测试就如寻宝的)&lt;/p&gt;
&lt;p&gt;开发主动权在手中，测试需要更多的博弈.&lt;/p&gt;
&lt;p&gt;(这么看来测试要求更高一些, 哈哈)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个开发都应该懂些测试的基本思想和原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写出的代码会更健壮. 多注意测试, 可以给后续维护以及重构节省一大笔时间.&lt;/p&gt;
&lt;p&gt;可以拿这本书作为入门.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管有没有专职测试, 单元测试都是必须的.(最好要有, 重构复杂项目的时候会发现感动的哭了)&lt;/p&gt;
&lt;p&gt;如果有专职测试, 开发测试比应该蛮高的, 好钢用在刀刃上, 对重要项目进行测试, 另外留出时间研究自动化测试/回归测试/测试工具等, 以及对项目流程进行优化, 最大化提高生产力.&lt;/p&gt;
&lt;p&gt;没有专职测试, 需要开发人员足够靠谱, 并且需要建立一套完善的生产部署流程, 监控机制, 以及用户反馈机制, 以小步快跑, 频繁发布的方式处理需求, 同时关注反馈.&lt;/p&gt;</content><category term="books"></category></entry><entry><title>千里行纪&amp;工作三周年小结</title><link href="http://www.wklken.me/posts/2014/07/22/summary-09-longjourney-and-three-years.html" rel="alternate"></link><published>2014-07-22T00:00:00+08:00</published><updated>2014-07-22T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-07-22:/posts/2014/07/22/summary-09-longjourney-and-three-years.html</id><summary type="html">&lt;p&gt;旅行结束好几天了, 狂睡了一天, 刷了三天书(打算把之前没看的看咯), 花一下午去仲裁(囧)......突然想想, 该写写了, 合着之前拖了两周的三周年小结一起.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/coding-life.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="qian-li-xing-ji"&gt;千里行纪&lt;/h2&gt;
&lt;p&gt;7月4日, 毕业工作三周年(三年前的7月4日, 在杭州, 入职第一天), 刚好, 也在不久前正式离职, 还没想好去做什么, 还有些问题没有想清楚, 所以选择出去走走.&lt;/p&gt;
&lt;p&gt;第一站杭州, 打算随走随玩, 无计划无时限, 一路北上, 走完一站再想下一站去哪, 累了就打道回府.&lt;/p&gt;
&lt;p&gt;然后, 带着一个kindle, 一本笔记, 一个背包, 出发.&lt;/p&gt;
&lt;p&gt;最终, 7月4日出发, 17日归, 从深圳, 动车到达杭州, 然后汽车转战安徽, 西递+黄山, 然后去了趟南京, 再转高铁到济南, 回学校逛了逛, 觉得累了, 买了张机票飞回来, 好好地睡了一整天.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;步数&lt;/th&gt;
&lt;th&gt;公里&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;旅行结束好几天了, 狂睡了一天, 刷了三天书(打算把之前没看的看咯), 花一下午去仲裁(囧)......突然想想, 该写写了, 合着之前拖了两周的三周年小结一起.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/coding-life.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="qian-li-xing-ji"&gt;千里行纪&lt;/h2&gt;
&lt;p&gt;7月4日, 毕业工作三周年(三年前的7月4日, 在杭州, 入职第一天), 刚好, 也在不久前正式离职, 还没想好去做什么, 还有些问题没有想清楚, 所以选择出去走走.&lt;/p&gt;
&lt;p&gt;第一站杭州, 打算随走随玩, 无计划无时限, 一路北上, 走完一站再想下一站去哪, 累了就打道回府.&lt;/p&gt;
&lt;p&gt;然后, 带着一个kindle, 一本笔记, 一个背包, 出发.&lt;/p&gt;
&lt;p&gt;最终, 7月4日出发, 17日归, 从深圳, 动车到达杭州, 然后汽车转战安徽, 西递+黄山, 然后去了趟南京, 再转高铁到济南, 回学校逛了逛, 觉得累了, 买了张机票飞回来, 好好地睡了一整天.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;步数&lt;/th&gt;
&lt;th&gt;公里&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7.4&lt;/td&gt;
&lt;td&gt;3804&lt;/td&gt;
&lt;td&gt;2.4&lt;/td&gt;
&lt;td&gt;动车&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.5&lt;/td&gt;
&lt;td&gt;31823&lt;/td&gt;
&lt;td&gt;23.3&lt;/td&gt;
&lt;td&gt;西湖, 曾经工作/住的地方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.6&lt;/td&gt;
&lt;td&gt;24202&lt;/td&gt;
&lt;td&gt;17.2&lt;/td&gt;
&lt;td&gt;再次西湖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.7&lt;/td&gt;
&lt;td&gt;14899&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;淘宝城/浙大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.8&lt;/td&gt;
&lt;td&gt;18180&lt;/td&gt;
&lt;td&gt;13.3&lt;/td&gt;
&lt;td&gt;灵隐龙井九溪六和塔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.9&lt;/td&gt;
&lt;td&gt;9071&lt;/td&gt;
&lt;td&gt;5.9&lt;/td&gt;
&lt;td&gt;屯溪/西递&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.10&lt;/td&gt;
&lt;td&gt;24186&lt;/td&gt;
&lt;td&gt;15.9&lt;/td&gt;
&lt;td&gt;九龙瀑布/黄山后山&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.11&lt;/td&gt;
&lt;td&gt;12586&lt;/td&gt;
&lt;td&gt;6.9&lt;/td&gt;
&lt;td&gt;下山/天都峰/南京&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.12&lt;/td&gt;
&lt;td&gt;29551&lt;/td&gt;
&lt;td&gt;21.2&lt;/td&gt;
&lt;td&gt;玄武湖/中山陵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.13&lt;/td&gt;
&lt;td&gt;24232&lt;/td&gt;
&lt;td&gt;16.9&lt;/td&gt;
&lt;td&gt;明孝陵/总统府/南京大屠杀遇难者纪念馆/夫子庙/夜游秦淮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.14&lt;/td&gt;
&lt;td&gt;19112&lt;/td&gt;
&lt;td&gt;15.3&lt;/td&gt;
&lt;td&gt;高铁/经十路&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.15&lt;/td&gt;
&lt;td&gt;23788&lt;/td&gt;
&lt;td&gt;17.3&lt;/td&gt;
&lt;td&gt;黑虎泉/泉城广场/趵突泉/大明湖一半/山大中心校区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.16&lt;/td&gt;
&lt;td&gt;19547&lt;/td&gt;
&lt;td&gt;14.1&lt;/td&gt;
&lt;td&gt;解放路/山大路/中心校区/大明湖另一半/齐鲁软件学院&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.17&lt;/td&gt;
&lt;td&gt;4051&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;飞机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;总计&lt;/td&gt;
&lt;td&gt;259032&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;耗时13天, 行程应该有2800公里, 步行259032步, 共184公里, 平均每天14.1公里, 拍了1863张照片. 走最多的一天是到杭州第二天逛西湖, 原来每周骑车绕没觉得多远, 这次踏踏实实逛了一圈, 着实累, 要是车子还在就好了. 第二天陪同事再逛, 不过路线不同, 囧. 最累的一天是爬黄山, 整整一天都在爬台阶......第二天下山也累, 不过下山顺带爬了下天都峰, 不虚此行.&lt;/p&gt;
&lt;p&gt;到了四个地方, 感受了四种不同的生活节奏.&lt;/p&gt;
&lt;p&gt;杭州, 很熟悉怀念的感觉, 慢节奏(我快十点到的杭州, 一如既往, 大街上一片漆黑, 店基本关了, 一个人走了一公里多, 有点类似以前加班下班后回家的感觉)/美食(复习了三天外婆家, 没复习完...)/美景无限, 适合生活的地方, 记得在杭州的时候天天把景区当后院逛, 每次骑车冲山出来后, 都要惯例绕西湖一圈, 坐一坐, 然后会公司蹭水, 再回家歇着. 这次, 走过了西湖, 走过了龙井, 到之前工作的地方, 到之前住的地方, 行走, 回忆.&lt;/p&gt;
&lt;p&gt;去黄山前先去了西递, 大巴转小车, 彻彻底底在农村住了一晚. 不记得已经有多少年, 没有感受到泥土的气息了, 或许从高中外出求学开始. 水墨画的景致, 典型的农家, 荷塘月色蛙鸣, 八九点基本都熄灯了, 走在青石小巷里的感觉, 很宁谧安定.&lt;/p&gt;
&lt;p&gt;黄山, 值得一爬, 记忆里爬泰山就是爬台阶去了, 黄山还好. 黄山从后山上的, 早上三个小时爬了趟九龙瀑布, 刚到后山山口, 果断下山寄存了大部分东西吃了顿午饭再坐车到山口开始爬(好重, 差点给跪了).晚上订的宾馆床位略坑, 没睡好, 另外日出没看到.....下山爬天都峰, 体验了一把在云端的感觉, 陡且险, 顿觉不虚此行.&lt;/p&gt;
&lt;p&gt;南京, 六朝古都, 下了黄山之后大巴当晚到, 地图一查找了个交通方便的地方住下了, 后来才发现那是南京最繁华的地方. 第二天, 一个人背着包带着相机, 雨中漫步玄武湖, 是周六, 但是好像没什么人, 沿湖边慢慢行走, 后来上了古城墙, 走了一段, 发现没人了, 整个城墙视野里就我一个人, 坐了很久才下来.然后去了九华山公园, 玄奘寺, 午间吃了顿热腾腾的南京汤包(很赞, 对我胃口), 还没热乎走几步, 被倾盆暴雨淋了个透心凉, 回酒店洗洗, 穿着拖鞋再出发, 中山陵. 第二天, 明孝陵/总统府/南京大屠杀遇难者纪念馆/夫子庙/夜游秦淮, 可能是住的地方的问题, 没感受到这个城市真正的生活气息(新街口下面地铁人来人往, 刚到的时候被吓到了, 这人也太多了吧....).&lt;/p&gt;
&lt;p&gt;济南, 熟悉而又陌生的城市, 记得七年前北上来到这个城市. 呆了近四年, 时隔三年, 再次回到这座城. 刚下车, 很热, 非常热......在体育馆边坐了会, 昏黄的路灯, 旁边是繁忙的立交桥, 行人, 纳凉的大爷大妈, 感受了下这里的生活气息. 空气不是很好, 但是很熟悉, 熟悉的地名, 街道名, 公交线路. 最后一天, 回软件学院看了下, 听说要撤并, 不知道下次来了还在不在. 走在之前上课, 上自习, 吃饭, 图书馆, 实验室, 那些自己曾近踏足的路上, 感觉很奇怪. 很多东西没什么变化, 只有回忆, 景依旧, 人不在. 怀念自己上学的日子, 感叹那时不好好珍惜. 生活是把杀猪刀, 时间无情的推着我们前进.&lt;/p&gt;
&lt;p&gt;以上差不多流水账的感觉, 后面是一些感受.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为何行走?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此次出行, 主要是, 一半, 走之前走过的路, 一半, 去几个新的地方. 想一些事情, 希望有些收获.&lt;/p&gt;
&lt;p&gt;在南京的酒店里, 看电视, 听到了一首歌, &amp;lt;&amp;lt;生来彷徨&amp;gt;&amp;gt;, 突然很有感觉.&lt;/p&gt;
&lt;p&gt;生来彷徨, 小学, 初中, 中考, 到市里上学, 高考, 到山东上学, 到北京实习, 到杭州工作, 再到深圳, 一路过来, 发现在工作之前, 都是按部就班的走完了二十几年的路, 然后, 毕业进入社会, 选择权在自己手里, 突然某一天觉醒的感觉, 开始思考, 生活的意义, 如何选择, 彷徨迷茫, 不断行走与思考, 然后做一些或对或错的决定, 一路前行. 人生是一场单程票的旅行, 在一次次决定中, 我们在一个个岔路口选择下一段旅程, 最终到达终点.&lt;/p&gt;
&lt;p&gt;为什么要行走? 为什么要旅行? 或许是我们在寻找些什么.&lt;/p&gt;
&lt;p&gt;其实, 旅行, 远远没有宅在家里好吃好喝好玩, 行走, 往往就是一趟趟自虐的过程, 例如, 爬山...爬山是对自己体力,耐力,意志力的一次次挑战...每次爬山途中, 不上不下累得要死都告诉自己, 下回老子再也不来了, 但是, 每次依旧会乐此不疲.&lt;/p&gt;
&lt;p&gt;但是, 依旧要旅行, 要行走, 特别是当你有些东西没有想明白的时候, 在自己固有的环境里, 在自己熟悉的生活模式和节奏里, 是很难想清楚的. 而在旅途中, 新的环境, 不同的人, 不同的事情, 飞快飘过的景物, 飞快发生的事情, 身体的极度劳累, 很多想法会进入大脑, 你开始意识到一些东西: 我拥有什么? 我又欠缺什么? 我该珍惜些什么? 什么地方好, 什么地方不好? 为什么? 慢慢地, 获得一些观点, 得到一些结论, 有些初步的想法. 这或许就是旅行的目的.&lt;/p&gt;
&lt;p&gt;行走, 不只是为了拍照, 哈哈&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;放慢脚步, 感受生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次从走过之前走过的很多路, 突然发现, 过去的生活, 似乎太快了, 行色匆匆, 短短三年, 从指尖流逝, 似乎很少刻意觉察到, 然后慢下来, 感受下生活中点点美好. 这跟逛西湖类似, 以往骑车逛的时候, 一圈, 一小时不到, 效率杠杠的, 但是匆匆而过, 固定的线路, 在固定的几个地方停留坐坐, 看到那些熟悉的景色. 靠双腿行走, 却又是不同的感觉, 慢慢前行, 一步步丈量, 往往会发现很多之前没看过的东西, 曲径, 柳暗花明, 如果一直骑车, 永远不会看到这些.&lt;/p&gt;
&lt;p&gt;so, 让自己成长强大, 可以更高效地搞定工作/学习等等那些事情, 让生活慢下来, 好好地感受生活. e.g. 我写这个脚本, 只为了以后每天可以省五分钟出来发发呆, 哈. 另外不要让自己陷入一种模式, 例如周一-周五+周六周日=一周=7天, 认认真真过好每一天, 不要被模式限制了, 过得充实些, 去热爱一些东西.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于世界的猜想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时候走着走着发现一个人都没有, 会想下&lt;/p&gt;
&lt;p&gt;其实, 世界的本质就是一个系统, 你自个就是一个进程, 你看到的整个世界都是模拟出来的, 你跑到这个地方之所以看不到人, 是因为你跑太快了, 系统只来得及初始化地方, 还来不及初始化 NPC, 没给你挂起已经不错了, 慢点走吧, 别剧情(主线支线)逻辑还没走就空跑结束了......^_^&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你想要的生活是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次出行, 看了 N 本知乎周刊, 一本小说&amp;lt;&amp;lt;陆犯焉识&amp;gt;&amp;gt;, 半本&amp;lt;&amp;lt;明朝那些事儿&amp;gt;&amp;gt;.&amp;lt;&amp;lt;陆犯焉识&amp;gt;&amp;gt;, 有之前看&amp;lt;&amp;lt;平凡的世界&amp;gt;&amp;gt;的感觉. 然后, 有一个下午, 坐在杭州的马路牙子上, 看着夕阳余晖下, 马路边的车流人流.(上一次这么干好像是和在庐山下和景元邪真坐在马路边) 然后, 在黄山下, 一个小饭店里, 看着路口人来人往, 这里人们的生活, 还有游客. 然后, 刚到南京, 下地铁到了地下步行街, 穿越, 匆匆而行的人们. 到了济南, 又在马路牙子上坐了一会, 昏黄的路灯.&lt;/p&gt;
&lt;p&gt;每个人有自己的生活, 我们生活在自己意识里的世界里, 抛却自己朝九晚五的日子, 到大街上看看, 并不是每个人的生活方式和你一样. 同时, 不要用自己的评价体系去评价别人的生活, 活得好不好, 快不快乐, 幸不幸福, 并不是你能评价的, 与你无关, 很多东西, 我们往往都只看到了表面, 按照自己的思维体系去判断, 但是, 很多事情, 都跟喝水一样, 冷暖自知.&lt;/p&gt;
&lt;p&gt;感同身受, 大部分都是扯淡的, 很多时候, 只有亲身体验才知道.&lt;/p&gt;
&lt;p&gt;很多时候, 我们生活在"大家"的评价中, 很多时候, 我们追求的是"大家"的"成功", 很多时候, 我们去做"大家"都做的事情.&lt;/p&gt;
&lt;p&gt;并不是说"大家"的就是错的, 而是, 我们往往很难独立地去思考, 自己真正想要的是什么? 很容易陷入到"别人的眼光"和"大家的看法"里面.&lt;/p&gt;
&lt;p&gt;天龙八部, 悲剧在于"求而不得", 但是"求啥得啥"或许就不是生活了, 人总要有点追求的吧, 追逐自己想要的.&lt;/p&gt;
&lt;p&gt;但是, 这或许不重要:), 有时候想多了反而迷惘(好吧, 唉).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's easy to find out what you don't like, but it's hard to figure out what you really want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;so, 你想要的生活又是什么样的呢?&lt;/p&gt;
&lt;p&gt;最近的感受时, 慢慢接受自己是一个怎样的人了, 不再为了"改变"而改变, 心安理得地做自己, 顺着自己的心意. be cool about it. 改变, 只因自己想变.&lt;/p&gt;
&lt;p&gt;我自己, 似乎还是飘了太久了, 现在似乎该停下来, 思考下这个问题了. 有些初步的想法了.(&amp;lt;&amp;lt;平凡之路&amp;gt;&amp;gt;单曲循环......)&lt;/p&gt;
&lt;p&gt;PS. 推荐一部电影&amp;lt;&amp;lt;奇怪的她&amp;gt;&amp;gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该以怎样的心态去看待一切&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;性格内向, 情商极低(低到自己都有些鄙视的地步), 很多时候思维相对偏激, 虽然不是处女座, 但是推崇完美主义(完美主义害死人), 所以, 总成了对待事物, 总容易形成两极分化. 好的东西偏执地喜欢, 不好的东西(自己的看法), 总是避免去了解接触.&lt;/p&gt;
&lt;p&gt;总之, 看待事物心态不够open, 太过偏执. 在有些事情上, 属于冲动型, 快刀乱麻一路到黑, 在有些事情上, 容易犹犹豫豫婆婆妈妈, 纠结一些不该纠结的东西.&lt;/p&gt;
&lt;p&gt;不要太过苛求完美, 就像你不可能把所有景点的路遍历一遍(深度优先广度优先都不行), 只能, 选择一条最优的路线.&lt;/p&gt;
&lt;p&gt;人生太短, 心态放开, 不要浪费时间.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;围城&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;围城, 围城啊.&lt;/p&gt;
&lt;p&gt;三年多过去了, 这次一路, 见到了很多同学, 朋友, 曾经的同事, 城市不同, 职业不同, 每个人的境遇也不同, 都变化蛮大, 回头看看自己, 似乎没什么变化, 迄今了然一身, 总是自嘲自由.&lt;/p&gt;
&lt;p&gt;生活就是座围城, 不管城里城外, 做好自己的选择, 走好自己的路, 也就够了吧.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记录&amp;amp;早起&amp;amp;读书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎该养成, 记录的习惯.&lt;/p&gt;
&lt;p&gt;之前只会到特殊的日子, 写写小结, 前阵子开始用DayOne, 变得好些了.&lt;/p&gt;
&lt;p&gt;很多东西, 过了, 没有记录. 美好或不美好, 酸甜苦辣, 烈日或阴雨.&lt;/p&gt;
&lt;p&gt;虽然一直号称记忆力不错, 但是, 可以按秒按天按月按年去衡量时间, 可以轻易的说出一个长度, 但是无法回顾, 那些值得记录的东西.&lt;/p&gt;
&lt;p&gt;早起, 以前都是忙到半夜, 早上八点多起, 旅途过程中, 基本都五六七点就起, 发现一天变得很长很充实, 能走很多地方, 做很多事情, 回来到现在, 生物钟一直保持吧.&lt;/p&gt;
&lt;p&gt;读书, 身体和灵魂, 总有一个在路上, 如果不在途中,就多读些读书吧.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要一个人旅行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个人的旅行真的很累......&lt;/p&gt;
&lt;p&gt;I don't want to walk alone anymore!&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gong-zuo-san-nian-xiao-jie"&gt;工作三年小结&lt;/h2&gt;
&lt;p&gt;好吧, 我工作三年了, 很多时候不大想承认哈.&lt;/p&gt;
&lt;p&gt;额, 三年了.&lt;/p&gt;
&lt;p&gt;经验之谈, 扯一些有用没用的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;经验很重要, 要学会积累&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记得, 在学校和刚毕业那会, 对"xx年工作经验"总是嗤之以鼻, 不认为很重要, 但是实际上, 或许对于天才型的人是这样的, 但是大部分人都是平凡的, 我也是, 经验很重要.&lt;/p&gt;
&lt;p&gt;三年, 见过一年有 N 年经验的(加班), 也见过 N 年只一年经验的, 所以, 如何保持持续成长, 积累经验值很重要, 这跟你挂机在野外平砍小怪或者开挂刷副本是一个道理, 后者给力很多, 当然, 跟环境和团队也有一定关系.&lt;/p&gt;
&lt;p&gt;但个人的成长, 主要还是跟自身相关性最大, 自己需要为自己负责.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;效率&amp;amp;工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有一段时间, 我在追求高效, 应该有小半年吧, 那段时间研究了下工作中自己的瓶颈所在, 从前辈那里取得一些真经, 同时也看了很多时间管理的东西, 研究了下 GTD, 各种快捷键, 快捷工具, 很庆幸, 那时候也顺带深入搞了把VIM和Shell. 然后逐渐形成了自己的工作方式和风格.&lt;/p&gt;
&lt;p&gt;后来又有段时间, 大概三个月吧, 彻彻底底的工具党, 试用各种系统, 各种浏览器, 各种编辑器, 各种 GTD 工具, 还有快速启动, 系统管理, 记录等等. 结果发现重心在工具而不是自己所作的事情上了.&lt;/p&gt;
&lt;p&gt;后来的后来, 脱离了工具党(可能是某一天悟了吧), 不在花时间在各种工具上, 工具只是工具, 在精不在多, 找到了适合自己的就行, 集中一段时间研究下适合自己的工具还是值得的, 将受益终身(e.g. markdown/VIM).&lt;/p&gt;
&lt;p&gt;first, 你必须在平时了解一下自己的痛点(例如以事不过三的原则, 当一个事情重复三次, 就要注意了)&lt;/p&gt;
&lt;p&gt;然后想办法解决之.&lt;/p&gt;
&lt;p&gt;学会从一些渠道知道一些优秀的工具, 然后选择其中的佼佼者, 以开放的心态去试用, 找到适合自己的, 然后花点时间研究下, 事半功倍&lt;/p&gt;
&lt;p&gt;唯一的目标: 事半功倍. 所以不要care什么编辑器之争, 语言之争(下一个谈).很浪费时间.(当然, 选择时候要花点时间对比的, 但不要去争论)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在毕业前, 连写了三年多Java, 当时一直认为毕业后从事Java相关的工作, 后来工作中自学了Python, 然后转职成了Python后端, 间带学习了下Golang, 今年业务需要认真学了一把之前偶尔要用到的JavaScript. 最近离职间隙, 打算重新捡一下Java, 认真学习下C.&lt;/p&gt;
&lt;p&gt;Python是世界上最好的语言......&lt;/p&gt;
&lt;p&gt;语言, 你可以选择自己喜欢的语言, 但是不要局限自己不去学习其他的, 起码, 要有第二门辅助性质的语言, 然后第三门, 第四门......一年一门, 不算过分吧?&lt;/p&gt;
&lt;p&gt;每种语言的思维模式都不同, 尝试去学习和使用, 有利无害.&lt;/p&gt;
&lt;p&gt;当你深入学习一门语言后, 再学习其他语言其实是非常快的, 很多东西都是相同的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础知识很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算法/数据结构/IO 模型等等, 很多基础的东西, 例如算法, 可能平时用不到, 但这并不意味着不需要去学习, 基础很重要.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; @左耳朵耗子: 很多人都并不知道，哪些知识是用来生存的，哪些知识是用来改变命运的//@左耳朵耗子: “学好英文，算法，系统原理，基础知识没用啊？反正工作中又用不到！”，有这样想法的人不在少数，这个想法相当务实。同理，对于一个人来说，初中毕业所掌握的知识对于生存来说就够了，也没必要上什么高中和大学了。当然，我们都知道只有初中毕业的人在这社会上会是啥样。这对于程序员也是同理。
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;微博&amp;amp;RSS&amp;amp;知乎&amp;amp;笔记&amp;amp;博客&amp;amp;github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前三者是输入, 后三者输出&lt;/p&gt;
&lt;p&gt;很多人不用微博, 但是微博作为我获取信息的主要渠道, 每天还是会花时间刷一刷的, 不停地关注/取关, 最终形成稳定的信息渠道. 例如上面那条微博, 你能获取到很多东西, 而不是把自己困守在一个狭窄的世界.&lt;/p&gt;
&lt;p&gt;然后就是RSS订阅和知乎.&lt;/p&gt;
&lt;p&gt;从这些渠道, 看到了很多好的文章, 好的资源, 好的工具&lt;/p&gt;
&lt;p&gt;自从开始用markdown后, 所有笔记从原先doc开始逐渐全部转换成markdown了, 分门别类, 应该有上千了. 定期梳理, 主要用于在学习某些新的东西时, 能获取最优的学习路径, 或者, 能够在短暂时间内搜索到自己曾经记录的东西.&lt;/p&gt;
&lt;p&gt;笔记多了, 定期总结汇总, 维持规模, 其中一些梳理出来, 变成了blog.&lt;/p&gt;
&lt;p&gt;github和bitbucket作为开源和私有的代码库, 写一些东西, 存一些东西, 关注一些东西.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单反穷三代, kindle富一生.&lt;/p&gt;
&lt;p&gt;kindle成为了我今年最值得购买的东西.&lt;/p&gt;
&lt;p&gt;非技术书, 可以往杂里读, 还可以研究一些自己感兴趣的东西, 或者方法论等等.&lt;/p&gt;
&lt;p&gt;然后就是技术书籍, 基本都买了纸质版的, 迄今不习惯电子版的, 因为要做好多笔记, 反复看, 或者脱水.&lt;/p&gt;
&lt;p&gt;对于知识体系的系统构建, 以及深入, 主要还是靠书本, 网络的很多东西作为补充.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;三年间, 感觉自己变化不大, 性格上, 依旧内向, 依旧是我, 很多东西不会改变. 生活上, 依旧单身(人艰自拆, maybe I need to think about: 择一城终老, 遇一人白首).&lt;/p&gt;
&lt;p&gt;三年间, 感觉自己变化蛮大的, 从菜鸟开始慢慢蜕变了, 有了独立的意识, 有了目标, 开始尝试去挣脱一些东西, 追求一些东西, 去掌控一些东西. 最大的变化, 还是从 无意识 -&amp;gt; 有意识了.&lt;/p&gt;
&lt;p&gt;三年间, 形成了自己的做事方法和风格, 有了一些准则, 有了一套工具栈, 开始完善自己的知识体系.&lt;/p&gt;
&lt;p&gt;三年间, 36个月, 在两个城市生活过, 跳过一次槽, 涨过五次薪, 工资翻了三倍不到, 拿过三次年终奖, 当然, 其中一次只有1000块(冲动的后果, 囧).&lt;/p&gt;
&lt;p&gt;三年间, 经历了两家公司, 很庆幸遇到了两位很nice的老大, 以及很多给力的同事, 在他们的帮助下, 一步步成长, 很感激大家! Always, Thank you for everyting.&lt;/p&gt;
&lt;p&gt;三年间, 感觉自己还是对得起"靠谱"二字, I hope I didn't make anyone disappointed, If I did, I am sorry.&lt;/p&gt;
&lt;p&gt;三年间, 经历了很多.&lt;/p&gt;
&lt;p&gt;时间飞逝, 人生又有多少个三年.&lt;/p&gt;
&lt;p&gt;且行(码)且珍惜&lt;/p&gt;
&lt;p&gt;(感叹完毕!)&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="guan-yu-wei-lai"&gt;关于未来&lt;/h2&gt;
&lt;p&gt;未来是多远?&lt;/p&gt;
&lt;p&gt;未来一周, 刷书, 好多没看的, 看了, 该留留, 该出的出, 堆得太多压力大.&lt;/p&gt;
&lt;p&gt;未来两周到一个月(or 两个月?), 更新简历, 开始找工作了, 深圳或者杭州, 创业团队or BAT, 寻找后端开发方面的工作, 希望去做一些有价值的事情, 给力的产品&lt;/p&gt;
&lt;p&gt;未来一两年, 继续走技术这条路吧, 当前目标:Linux后端全栈, 长期的目标是, 成为某一方面的技术专家or系统架构师(需努力).&lt;/p&gt;
&lt;p&gt;工作上, 快起来, 生活上, 慢下来.&lt;/p&gt;
&lt;p&gt;要考虑更多的事情了.&lt;/p&gt;
&lt;p&gt;我在三年前毕业的博文里面写的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;未来，不敢说太远，今后五到十年，好好努力吧，好好奋斗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好吧, 现在才过了三年, 仍需努力.&lt;/p&gt;
&lt;p&gt;最后, 前不久看到的一句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要放任梦想, 而要把它当做一种习惯去培育  --拉里佩奇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;诸位共勉.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2014-07-22 于深圳&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>简单搜索系统组成总结</title><link href="http://www.wklken.me/posts/2014/06/09/search-system.html" rel="alternate"></link><published>2014-06-09T00:00:00+08:00</published><updated>2014-06-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-06-09:/posts/2014/06/09/search-system.html</id><summary type="html">&lt;p&gt;最近在进行离职前交接工作了, 对之前做的一些东西也大概进行了下简单总结.&lt;/p&gt;
&lt;p&gt;今天整理了下, 搜索系统组成简要描述, 一些思想, 不涉及太多具体实现.&lt;/p&gt;
&lt;p&gt;这套系统从开始设计到最终完成, 前前后后花了3个月的样子(计算所有时间投入), 也算是做得感觉比较完善的一套系统.&lt;/p&gt;
&lt;p&gt;上线接近一年, 支持快玩游戏搜索业务(快玩盒子/快玩网站/移动端等), 系统每天百万级的搜索(峰值在250w左右, 应用层两台机器负载均衡, 单机核心层, 单机引擎), 很遗憾, 由于业务所限, 一直没有看到这套系统能支持的量上限, 即使在峰值, 核心层qps大概也才50左右, 预计搜索量到千万级应该没什么压力, 当然, 优化的余地还很多.&lt;/p&gt;
&lt;p&gt;外面正在狂风骤雨, 开始吧&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-biao"&gt;目标&lt;/h3&gt;
&lt;p&gt;当系统数据达到一定量时, 搜索就成为了除类目以外的第二大入口.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更好的搜索结果(指标: 召回率, 转化率, 排序效果)&lt;/li&gt;
&lt;li&gt;更好的用户体验(下拉提示点击率,相关搜索准确率等)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="sou-suo-liu-cheng"&gt;搜索流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用户在输入框输入关键词, 此时输入框会下拉提示一些词, 用户可以选择进行搜索&lt;/li&gt;
&lt;li&gt;用户点击, 进行搜索, 前端调用搜索接口&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3 …&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;最近在进行离职前交接工作了, 对之前做的一些东西也大概进行了下简单总结.&lt;/p&gt;
&lt;p&gt;今天整理了下, 搜索系统组成简要描述, 一些思想, 不涉及太多具体实现.&lt;/p&gt;
&lt;p&gt;这套系统从开始设计到最终完成, 前前后后花了3个月的样子(计算所有时间投入), 也算是做得感觉比较完善的一套系统.&lt;/p&gt;
&lt;p&gt;上线接近一年, 支持快玩游戏搜索业务(快玩盒子/快玩网站/移动端等), 系统每天百万级的搜索(峰值在250w左右, 应用层两台机器负载均衡, 单机核心层, 单机引擎), 很遗憾, 由于业务所限, 一直没有看到这套系统能支持的量上限, 即使在峰值, 核心层qps大概也才50左右, 预计搜索量到千万级应该没什么压力, 当然, 优化的余地还很多.&lt;/p&gt;
&lt;p&gt;外面正在狂风骤雨, 开始吧&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-biao"&gt;目标&lt;/h3&gt;
&lt;p&gt;当系统数据达到一定量时, 搜索就成为了除类目以外的第二大入口.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更好的搜索结果(指标: 召回率, 转化率, 排序效果)&lt;/li&gt;
&lt;li&gt;更好的用户体验(下拉提示点击率,相关搜索准确率等)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="sou-suo-liu-cheng"&gt;搜索流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用户在输入框输入关键词, 此时输入框会下拉提示一些词, 用户可以选择进行搜索&lt;/li&gt;
&lt;li&gt;用户点击, 进行搜索, 前端调用搜索接口&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3.1 请求关键词改写, 获得改写后词
3.2 查询缓存是否存在, 存在直接返回缓存内容. 此时, 会记录搜索日志
3.3 不存在缓存, 调用解析输入, 调用核心层接口
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心层, 调用引擎接口, 获取搜索结果, 并整合信息, 返回应用层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;应用层, 获取结果, 此时根据需要, 可能调用相关搜索和热门词服务, 获取必要信息, 最终进行页面渲染, 记录日志, 返回给客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="xi-tong-jie-gou-tu"&gt;系统结构图&lt;/h3&gt;
&lt;p&gt;实现: java(solr)只需配置 + python(所有服务) + golang(suggestion)&lt;/p&gt;
&lt;p&gt;&lt;img alt="search system" src="/imgs/system/search.png"/&gt;&lt;/p&gt;
&lt;h3 id="xi-tong-zu-cheng-jian-dan-miao-shu"&gt;系统组成(简单描述)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对外服务  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搜索整体系统,对外提供服务包括&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本搜索服务
用户输入query, 系统返回筛选并且排序后的结果, 在前端进行展现&lt;/li&gt;
&lt;li&gt;下拉提示服务
用户在输入框输入query时, 下拉框根据输入提示搜索关键词, google/baidu的搜索框&lt;/li&gt;
&lt;li&gt;相关搜索服务
在搜索结果页,根据用户所在的系统(客户端/移动端/网站等)以及关键词,提示搜索query相关的搜索&lt;/li&gt;
&lt;li&gt;热门搜索
在某些业务中,或者前端,展示热门搜索关键词&lt;/li&gt;
&lt;li&gt;关键词改写
对用户输入关键词进行改写, 以获取更好的搜索结果, 或者进行关键词纠错, 转换&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缓存在整个搜索系统中起到很关键的作用, 各个服务都需要使用缓存进行优化&lt;/p&gt;
&lt;p&gt;系统使用memcached/redis分别进行处理. 整个搜索中用得最多的是下拉提示suggestion, 用户输入关键词整个过程中存在变动都会发起一次请求.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;业务(应用层+核心层)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;核心层, 提供单一职责, 灵活且性能足够的接口&lt;/p&gt;
&lt;p&gt;应用层, 根据不同系统的业务需求进行编写, 调用核心层接口获取数据, 整合搜索结果, 并进行展示渲染&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元信息(数据元信息+排行信息等)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;业务本身的核心数据, 包含元信息, 元信息中只有少部分需要导入引擎, 建立索引 or 存储, 元信息中还可能包含排序相关的信息, 例如评分等&lt;/p&gt;
&lt;p&gt;排行信息, 主要来自后端统计系统&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引擎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对元信息, 进行分析并处理, 建立索引, 存储内容&lt;/p&gt;
&lt;p&gt;并提供搜索, 可以决定排序规则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;日志系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;负责记录各个服务的日志, 用于统计以及其他服务的数据挖掘&lt;/p&gt;
&lt;p&gt;可以记录每次搜索的时间,用户,关键词,改写词,是否有结果,结果信息, 翻页信息等等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;算法模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对记录日志进行分析, 使用算法生成其他服务需要的数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;报告系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对日志进行统计, 计算搜索pv/uv, 无结果率, 搜索关键词排行, 下拉提示点击率等等&lt;/p&gt;
&lt;p&gt;用于关键性指标的统计, 方便针对性优化&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;接下去, 分块简要说明下&lt;/p&gt;
&lt;h3 id="sou-suo-fu-wu-shu-ju-ceng"&gt;搜索服务-数据层&lt;/h3&gt;
&lt;p&gt;数据存储跟各自业务有关系, 信息录入渠道主要是运营录入或者抓取导入等, 存储使用&lt;code&gt;mysql/postgresql&lt;/code&gt;等数据库&lt;/p&gt;
&lt;p&gt;rank data 主要是由日志系统统计出一些根据涉及排序相关的数据, 例如用户点击次数, 玩次, 评分等等, 会直接影响到结果排序&lt;/p&gt;
&lt;p&gt;注意, 由于这些数据都会存在变更, 所以, 需要存储update_time, 用于引擎增量建立索引.&lt;/p&gt;
&lt;h3 id="sou-suo-fu-wu-yin-qing"&gt;搜索服务-引擎&lt;/h3&gt;
&lt;p&gt;实现上, 使用的是开源的 &lt;a href="http://lucene.apache.org/solr/"&gt;apache solr&lt;/a&gt;, 版本4.5, 刚才看了下最新版到了4.8了. &lt;/p&gt;
&lt;p&gt;曾经一度想自己去实现, 结果发现复杂化了, 系统设计中, 切忌把实现问题的手段当做问题本身去处理.&lt;/p&gt;
&lt;p&gt;还有很多同类引擎, 可以去对比下.&lt;/p&gt;
&lt;p&gt;选中solr的原因: 简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入, 足够简单的数据提供方式, 通过配置文件定义数据库及sql等信息, 就可以建立元数据到引擎数据的关系, 且有接口可以方便地进行全量/增量更新&lt;/li&gt;
&lt;li&gt;配置简单, 可以配置索引处理方式, 例如中文分词,拼音搜索等, 可以配置不同接口的排序, 可以配置缓存等. ps: 拼音搜索可以使用&lt;code&gt;EdgeNGram&lt;/code&gt;索引处理实现.&lt;/li&gt;
&lt;li&gt;输出, 足够强大的查询接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于引擎, 很重要一块是搜索结果排序, &lt;code&gt;solr&lt;/code&gt; 可以很方便地支持自定义排序, 可以依赖于输入数据中的排序字段, 进行公式计算, 得到最终的加权和, 用于决定排序. 这里的公式需要针对业务中影响排序的因素进行分析, 然后不断调整因素的权重, 得到最终的排序效果.&lt;/p&gt;
&lt;p&gt;如果要进行一些其他处理, 可以在应用层或核心层进行额外处理.&lt;/p&gt;
&lt;h3 id="xia-la-ti-shi-fu-wu"&gt;下拉提示服务&lt;/h3&gt;
&lt;p&gt;前后做了两个版本, 一个版本基于&lt;code&gt;分词-统计-cache&lt;/code&gt;实现的, 后面一个版本基于 &lt;code&gt;trie树-cache&lt;/code&gt;实现.&lt;/p&gt;
&lt;p&gt;元信息直接导出, 以游戏为例, 游戏名+图标+类型+玩次等信息&lt;/p&gt;
&lt;p&gt;主要是针对游戏名进行处理:(原词+拼音+拼音首字母)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;植物大战僵尸 -&amp;gt; [植物大战僵尸, zhiwudazhanjiangshi, zwdzjs]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 在内存中建立前缀树. 这里使用的是&lt;code&gt;double-arry-trie&lt;/code&gt;实现&lt;/p&gt;
&lt;p&gt;&lt;code&gt;double-array-trie&lt;/code&gt;文章: &lt;a href="http://en.wikipedia.org/wiki/Trie"&gt;What is Trie&lt;/a&gt; | &lt;a href="http://linux.thai.net/~thep/datrie/datrie.html"&gt;An Implementation of Double-Array Trie&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户输入query, 没发生一次变化, 发送请求到下拉提示服务, 首先会去命中缓存, 未命中, 进入trie树搜索前缀, 获取此前缀所有后缀, 即获取提示关键词集合, 排序获取权重最高的进行返回(是这个流程, 但实际上没那么简单, 要考虑性能).&lt;/p&gt;
&lt;p&gt;如果不开缓存，实时计算的话，对cpu占用率非常高，每次都要搜索&lt;code&gt;trie&lt;/code&gt;树，所以开启了memcached外部缓存.&lt;/p&gt;
&lt;p&gt;开源了一份, 但并不是线上的实现, 而是优化版本, 但是一直没有机会上到线上看下效果, 有兴趣可以看下 &lt;a href="https://github.com/wklken/suggestion"&gt;suggestion&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xiang-guan-sou-suo-fu-wu"&gt;相关搜索服务&lt;/h3&gt;
&lt;p&gt;目前做得比较简单, 使用同一个用户的搜索关键词链进行分析, 处理成
&lt;code&gt;[ 搜索关键词-后继搜索关键词]&lt;/code&gt;, 并进行统计, 最终获取统计结果.&lt;/p&gt;
&lt;p&gt;这个服务一直没有进行优化, 导致相关搜索的结果并不好, 存在很多bad case(推荐重复的内容/单字符推荐等).&lt;/p&gt;
&lt;p&gt;可以基于算法进行重构.&lt;/p&gt;
&lt;h3 id="guan-jian-ci-gai-xie"&gt;关键词改写&lt;/h3&gt;
&lt;p&gt;关键词改写, 主要分成两类, 一类是输入关键字错误导致无结果(错别字/缺字/多字等), 另一类是输入关键字是业务上某些名称的别名, 系统内没有, 需要转换.&lt;/p&gt;
&lt;p&gt;通过改写, 可以实现纠错以及转换的目的, 使用户能正确获取结果&lt;/p&gt;
&lt;p&gt;关于纠错, 目前处理方式, 用户搜索关键词链, 处理成 &lt;code&gt;[无结果词 - 有结果词]&lt;/code&gt;, 另外还有用户下拉提示点击 &lt;code&gt;[无结果输入词 - 有结果点击词]&lt;/code&gt;, 然后进行统计, 根据一系列规则进行筛选, 获取改写列表.(目前是基于规则的, 优化空间还很大)&lt;/p&gt;
&lt;p&gt;关于业务上的改写, 需要提供入口, 提供给运营人员针对一些术语进行改写, 例如&lt;code&gt;[gta -&amp;gt; 侠盗猎车手]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个服务比较简单粗暴, 计算完成后直接将键值对刷入缓存, 对外提供服务.&lt;/p&gt;
&lt;p&gt;关键词改写需要进行持续的优化, 定期获取新的日志进行批量处理, 加入列表. 优化余地很大, 可以有效降低无结果率.&lt;/p&gt;
&lt;h3 id="tong-ji"&gt;统计&lt;/h3&gt;
&lt;p&gt;主要对每日的搜索日志进行统计, 得到两部分信息:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;报表数据: 不同平台不同渠道的每日pv/uv, 无结果率, 下拉提示点击率等&lt;/li&gt;
&lt;li&gt;排行数据: 不同纬度下搜索排行, 用于反向作用于搜索引擎排序&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h3 id="yi-xie-keng"&gt;一些坑&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统使用的&lt;code&gt;memcached&lt;/code&gt;集群作为缓存, 遇到一些坑, 例如&lt;code&gt;key&lt;/code&gt;最大长度250,   &lt;code&gt;key&lt;/code&gt;不能包含空格和控制字符, 存储数据最大1M. 即, 默认对用户的输入不信任(看日志才知道有多少奇葩的搜索query). 切成redis或许会好一些.&lt;/li&gt;
&lt;li&gt;关于备份. 由于业务初期流量一直不大, 所以除了应用层使用&lt;code&gt;nginx&lt;/code&gt;做负载均衡外, 核心层和&lt;code&gt;solr&lt;/code&gt;都使用单机实例. 带来的问题是, 虽然整体负载不高, 但是没有备份, 出现过一次&lt;code&gt;solr&lt;/code&gt;引擎挂到导致搜索整体失效30分钟的故障, 后面对每个单机服务都进行了服务备份, 失效启用.&lt;/li&gt;
&lt;li&gt;需要对整体系统进行监控, 使用&lt;code&gt;sentry&lt;/code&gt;和&lt;code&gt;statsd&lt;/code&gt;, 可以实时监测到流量变化以及程序错误.&lt;/li&gt;
&lt;li&gt;日志很重要, 要针对自己需要了解的指标以及需要统计分析的字段, 设计尽可能完整的日志记录.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h3 id="yi-xie-gan-xiang"&gt;一些感想&lt;/h3&gt;
&lt;p&gt;需要确认整体目标, 然后建立关键性指标, 实现基础方案, 上线, 并持续地关注数据, 分析日志以及bad case, 然后进行优化, 观察指标变化. 记得系统最初的召回率84%, 后来一步步提升到了92%. 这是一个长期的, 不断优化的过程.&lt;/p&gt;
&lt;p&gt;很多东西, 都需要自己一步步去摸索和尝试.&lt;/p&gt;
&lt;p&gt;当然, 这只是一个小型的搜索系统, 其中每一个模块都可以针对性地扩展和优化, 使用更好的算法, 达到更好的效果.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's simple, but it works, that's enough:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;系统总是跟随业务逐渐成长变化的, 很可惜, 业务夭折, 这个系统可能失去了在这里继续进化的可能. &lt;/p&gt;
&lt;p&gt;希望提供一些可供大家借鉴的方法. That's all.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;先这样吧&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2014-06-09 于深圳&lt;/p&gt;</content><category term="system"></category></entry><entry><title>JavaScript学习补充</title><link href="http://www.wklken.me/posts/2014/05/25/Learning-JavaScript.html" rel="alternate"></link><published>2014-05-25T00:00:00+08:00</published><updated>2014-05-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-05-25:/posts/2014/05/25/Learning-JavaScript.html</id><summary type="html">&lt;p&gt;以下笔记全部摘录和整理(缩减)自互联网文章, 太多了已然没法找到对应作者, 在此感谢分享者&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="js-advance" src="/imgs/front/js-advance.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="null-he-undefined"&gt;null 和 undefined&lt;/h3&gt;
&lt;p&gt;Undefined相当于一个变量并没有明确的被赋值(是否被赋值, 可能无心忽略, 逻辑问题)
JS的怪异之处就在于undefined真的是一个可以使用的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; var foo;
&amp;gt; foo
undefined
同理，当缺失参数时 JavaScript 会分配一个 undefined：

&amp;gt; function id(x) { return x }
&amp;gt; id()
undefined

a = 1;
a !== undefined // true

a = undefined
var b
a === b //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Null相当于变量被明确指定了没有值，而不是由于意外的原因被忽略掉了(赋值null, 正当逻辑)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与运算&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS的null如果进入运算，真的会被解析成为0或false：&lt;/p&gt;
&lt;p&gt;(1 + null …&lt;/p&gt;</summary><content type="html">&lt;p&gt;以下笔记全部摘录和整理(缩减)自互联网文章, 太多了已然没法找到对应作者, 在此感谢分享者&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="js-advance" src="/imgs/front/js-advance.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="null-he-undefined"&gt;null 和 undefined&lt;/h3&gt;
&lt;p&gt;Undefined相当于一个变量并没有明确的被赋值(是否被赋值, 可能无心忽略, 逻辑问题)
JS的怪异之处就在于undefined真的是一个可以使用的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; var foo;
&amp;gt; foo
undefined
同理，当缺失参数时 JavaScript 会分配一个 undefined：

&amp;gt; function id(x) { return x }
&amp;gt; id()
undefined

a = 1;
a !== undefined // true

a = undefined
var b
a === b //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Null相当于变量被明确指定了没有值，而不是由于意外的原因被忽略掉了(赋值null, 正当逻辑)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与运算&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS的null如果进入运算，真的会被解析成为0或false：&lt;/p&gt;
&lt;p&gt;(1 + null) # 1
(1 * null) # 0
(1 * null) # Infinity&lt;/p&gt;
&lt;p&gt;undefined进入运算，一律得到NaN：&lt;/p&gt;
&lt;p&gt;(1 + undefined) # NaN
(1 * undefined) # NaN
(1 / undefined) # NaN&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑判断&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;null和undefined逻辑判断时都认为是false。&lt;/p&gt;
&lt;p&gt;只用一个判断，就可以同时检验这两项是否为真:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//也会把 false, -0, +0, NaN 与 '' 当成“空值”
if (v) {
    // v 有值
} else {
    // v 没有值
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果碰到大坑==的时候&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var foo;
console.log(foo == null); // true
console.log(foo == undefined); // true
console.log(foo === null); // false
console.log(foo === undefined); // true
console.log(null == undefined); // true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好的做法, 一律使用&lt;code&gt;===&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;判断一个量已定义且非空，只使用：if (a !== null &amp;amp;&amp;amp; a !== undefined)。
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="he"&gt;=== 和 ==&lt;/h3&gt;
&lt;p&gt;1.==用来判断两个值是否相等&lt;/p&gt;
&lt;p&gt;当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉，这可能不是你想要的结果。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"" == "0" // false
0 == "" // true
0 == "0" // true
false == "false" // false
false == "0" // true
false == undefined // false
false == null // false
null == undefined // true
" \t\r\n" == 0 // true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.===&lt;/p&gt;
&lt;p&gt;类型+值比较&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"如果两边的操作数具有相同的类型和值，===返回true，!==返回false。"——《JavaScript：语言精粹》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最佳实践:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任何时候在比较操作中使用 === 和  !==
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jsoncao-zuo"&gt;json操作&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var person = {name :'Saad', age : 26, department : {ID : 15, name : "R&amp;amp;D"} };

var stringFromPerson = JSON.stringify(person);
/* stringFromPerson is equal to "{"name":"Saad","age":26,"department":{"ID":15,"name":"R&amp;amp;D"}}"   */

var personFromString = JSON.parse(stringFromPerson);
/* personFromString is equal to person object  */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to string&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var obj = {
    name: 'myObj'
};

JSON.stringify(obj);
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="han-shu-dui-xiang-ji-ni-ming-han-shu"&gt;函数对象及匿名函数&lt;/h3&gt;
&lt;p&gt;1.函数对象赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var slice_func = [].slice
//slice_func()

var a = function() {
};
// a()

var a = {
    fun : function() {
    };
}
// a.fun()

someElement.addEventListener("click", function(e) {
    // I'm anonymous!
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var f = function foo(){
    return typeof foo; // foo是在内部作用域内有效
};
// foo在外部用于是不可见的
typeof foo; // "undefined"
f(); // "function"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匿名函数&lt;/p&gt;
&lt;p&gt;from&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Chris'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'34'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'single'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createMember&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getMemberDetails&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myApplication = function(){
var name = 'Chris';
var age = '34';
var status = 'single';
return{
createMember:function(){
// [...]
},
getMemberDetails:function(){
// [...]
}
}
}();
// myApplication.createMember() and
// myApplication.getMemberDetails() now works.
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="zui-jia-shi-jian"&gt;最佳实践&lt;/h3&gt;
&lt;p&gt;1.定义多个变量时，省略var关键字，用逗号代替&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var someItem = 'some string';
var anotherItem = 'another string';
var oneMoreItem = 'one more string';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var someItem = 'some string',
    anotherItem = 'another string',
    oneMoreItem = 'one more string';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.谨记，不要省略分号, 不要省略花括号&lt;/p&gt;
&lt;p&gt;省略分号,可能导致更大的,未知的,难以发现的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;someItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'some string'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething() {&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;someItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'some string'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething() {&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.使用{}代替 new Ojbect()&lt;/p&gt;
&lt;p&gt;在JavaScript中创建对象的方法有多种。可能是传统的方法是使用”new”加构造函数，像下面这样:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var o = new Object();
o.name = 'Jeffrey';
o.lastName = 'Way';
o.someFunction = function() {
console.log(this.name);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var o = {}; //空对象

var o = {
name: 'Jeffrey',
lastName = 'Way',
someFunction : function() {
    console.log(this.name);
}
};
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;只要把多个全局变量都整理在一个名称空间下，拟将显著降低与其他应用程序、组件或类库之间产生糟糕的相互影响的可能性。——Douglas Crockford&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.使用[]代替 new Array()&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var a = new Array();
a[0] = "Joe";
a[1] = 'Plumber';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的做法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var a = ['Joe','Plumber'];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.typeof判断&lt;/p&gt;
&lt;p&gt;typeof一般只能返回如下几个结果：number,boolean,string,function,object,undefined&lt;/p&gt;
&lt;p&gt;expr:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typeof xx === ''
typeof xx !== ''
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Numbers&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;37&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;14&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;Infinity&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;尽管&lt;/span&gt;&lt;span class="nt"&gt;NaN&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="s2"&gt;"Not-A-Number"&lt;/span&gt;&lt;span class="err"&gt;的缩写&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;意思是&lt;/span&gt;&lt;span class="s2"&gt;"不是一个数字"&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Strings&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="s2"&gt;"bla"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;typeof&lt;/span&gt;&lt;span class="err"&gt;返回的肯定是一个字符串&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Booleans&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'boolean'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'boolean'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Undefined&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;blabla&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'undefined'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;一个未定义的变量&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;或者一个定义了却未赋初值的变量&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Objects&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;使用&lt;/span&gt;&lt;span class="nt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isArray&lt;/span&gt;&lt;span class="err"&gt;或者&lt;/span&gt;&lt;span class="nt"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;call&lt;/span&gt;&lt;span class="err"&gt;方法可以分辨出一个数组和真实的对象&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Functions&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'function'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'function'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;typeof&lt;/span&gt; &lt;span class="nt"&gt;null&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'object'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;从&lt;/span&gt;&lt;span class="nt"&gt;JavaScript&lt;/span&gt;&lt;span class="err"&gt;诞生以来&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;一直是这样的&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.三元运算符 :强大且风骚&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;expression ? xxx : yyy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var direction;
if(x &amp;lt; 200){
  direction = 1;
} else {
  direction = -1;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var direction = x &amp;lt; 200 ? 1 : -1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.使用逻辑 AND/OR 做条件判断&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var foo = 10;
foo == 10 &amp;amp;&amp;amp; doSomething(); // 等价于 if (foo == 10) doSomething();
foo == 5 || doSomething(); // 等价于 if (foo != 5) doSomething();

//默认值
a = b || 'default'
return b || c || d &amp;gt; 1 ? 0 : 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.给一个变量赋值的时候不要忘记使用var关键字&lt;/p&gt;
&lt;p&gt;给一个未定义的变量赋值会导致创建一个全局变量。要避免全局变量&lt;/p&gt;
&lt;p&gt;9.自我调用的函数&lt;/p&gt;
&lt;p&gt;自调用匿名函数（Self-Invoked Anonymous Function）或者即时调用函数表达式（IIFE-Immediately Invoked Function Expression)。这是一个在创建后立即自动执行的函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(function(){
    // some private code that will be executed automatically
})();

(function(a,b){
    var result = a+b;
    return result;
})(10,20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10.避免使用 eval() 和 Function 构造函数&lt;/p&gt;
&lt;p&gt;Eval=邪恶, 不仅大幅降低脚本的性能（译注：JIT编译器无法预知字符串内容，而无法预编译和优化），而且这也会带来巨大的安全风险，因为这样付给要执行的文本太高的权限，避而远之&lt;/p&gt;
&lt;p&gt;使用 eval 和 Function 构造函数是非常昂贵的操作，因为每次他们都会调用脚本引擎将源代码转换成可执行代码。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var func1 = new Function(functionCode);
var func2 = eval(functionCode);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;11.避免使用 with()&lt;/p&gt;
&lt;p&gt;使用 with() 会插入一个全局变量。因此，同名的变量会被覆盖值而引起不必要的麻烦&lt;/p&gt;
&lt;p&gt;12.脚本放在页面的底部&lt;/p&gt;
&lt;p&gt;记住——首要目标是让页面尽可能快的呈献给用户，脚本的夹在是阻塞的，脚本加载并执行完之前，浏览器不能继续渲染下面的内容。因此，用户将被迫等待更长时间&lt;/p&gt;
&lt;p&gt;13.避免在For语句内声明变量&lt;/p&gt;
&lt;p&gt;bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;container&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;document.getElementById('container')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;container.innerHtml&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;'my&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;console.log(i)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;getElementById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'container'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;len&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;container.innerHtml&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;'my&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;console.log(i)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14.给代码添加注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 循环数组，输出每项名字（译者注：这样的注释似乎有点多余吧）.
for(var i = 0, len = array.length; i &amp;lt; len; i++) {
console.log(array[i]);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;15.instanceof&lt;/p&gt;
&lt;p&gt;instanceof 方法要求开发者明确地确认对象为某特定类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oStringObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oStringObject&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 输出 "true"&lt;/span&gt;

&lt;span class="c1"&gt;// 判断 foo 是否是 Foo 类的实例&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//true&lt;/span&gt;

&lt;span class="c1"&gt;// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Aoo&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Aoo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//JavaScript 原型继承&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Aoo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;16.apply/call&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someFn.call(this, arg1, arg2, arg3);
someFn.apply(this, [arg1, arg2, arg3]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;apply&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function.apply(obj,args)方法能接收两个参数

obj：这个对象将代替Function类里this对象
args：这个是数组，它将作为参数传给Function（args--&amp;gt;arguments）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;call&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function.call(obj,[param1[,param2[,…[,paramN]]]])
obj：这个对象将代替Function类里this对象
params：这个是一个参数列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用哪个取决于参数的类型&lt;/p&gt;
&lt;h3 id="kuo-zhan-yue-du"&gt;扩展阅读&lt;/h3&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/8087/"&gt;Limu：JavaScript的那些书&lt;/a&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;mozilla js文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编程风格&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html"&gt;Javascript编程风格&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/12203/"&gt;完全理解关键字this&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/39305/"&gt;详解JavaScript中的this&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/54267/"&gt;解密 JavaScript 中的 this&lt;/a&gt;
| &lt;a href="http://blog.jobbole.com/67347/"&gt;JavaScript中this的工作原理以及注意事项&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/31951/"&gt;编写快速、高效的JavaScript代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/37306/"&gt;Javascript执行效率小结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/47304/"&gt;JavaScript的性能优化：加载和执行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;闭包&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html"&gt;学习Javascript闭包（Closure）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模块化编程&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html"&gt;Javascript模块化编程（一）：模块的写法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/40409/"&gt;深入研究JavaScript的Module模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/66135/"&gt;为现代JavaScript开发做好准备&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;面向对象&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/23563/"&gt;Javascript定义类（class）的三种方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oschina.net/question/100267_52409"&gt;JavaScript面向对象15分钟教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/18191/"&gt;如何编写可维护的面向对象JavaScript代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/31274/"&gt;拥抱原型面向对象编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/6441.html"&gt;Javascript 面向对象编程&lt;/a&gt; | &lt;a href="http://coolshell.cn/articles/6668.html"&gt;再谈javascript面向对象编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/38614/"&gt;全面理解面向对象的 JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/19795/"&gt;JavaScript原型和继承&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/66441/"&gt;JavaScript中的原型和继承&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;事件&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/39446/"&gt;生动详细解释javascript的冒泡和捕获&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/52430/"&gt;DOM事件简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chajn.org/project/javascript-events-responding-user/"&gt;你若触发，我就处理——浅谈JavaScript的事件响应&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计模式&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/25537/"&gt;理解JavaScript中的设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/29454/"&gt;常用的Javascript设计模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/9648/"&gt;理解JavaScript原型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;console&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.segmentfault.com/classicemi/1190000000481884"&gt;你真的了解console吗?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/60787/"&gt;通过console.table()做高级JavaScript调试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tools&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/64771/"&gt;JavaScript基础工具清单&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/60938/"&gt;给开发者提供的 35 款 JavaScript 图形图表库&lt;/a&gt; + &lt;a href="http://echarts.baidu.com/"&gt;百度图标库Echarts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/60245/"&gt;Responsive Javascript 是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/53487/"&gt;JavaScript 跨域总结与解决办法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html"&gt;Javascript的10个设计缺陷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/43649/"&gt;从零开始写JavaScript框架（一）&lt;/a&gt; | &lt;a href="http://blog.jobbole.com/43663/"&gt;从零开始写JavaScript框架（二&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/52069/"&gt;JavaScript核心&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/39571/"&gt;JavaScript必知必会+理解总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/47296/"&gt;JavaScript变量作用域之殇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/66699/"&gt;JavaScript 的常见“陷阱”&lt;/a&gt;&lt;/p&gt;</content><category term="javascript"></category></entry><entry><title>我的mac app列表</title><link href="http://www.wklken.me/posts/2014/05/24/my-mac-app-list.html" rel="alternate"></link><published>2014-05-24T00:00:00+08:00</published><updated>2014-05-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-05-24:/posts/2014/05/24/my-mac-app-list.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;我曾经说过, 买mac是2013年自己做的最正确的决定之一&lt;/p&gt;
&lt;p&gt;转眼一年多过去了, mac为我节省的时间,带来的便捷,以及给自己工作和生活带来的变化是没法估量的&lt;/p&gt;
&lt;p&gt;整理下自己app列表, 瞅了下连带系统自带的一共125个app&lt;/p&gt;
&lt;p&gt;&lt;img alt="myapps" src="/imgs/resources/my-apps.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xiao-lu"&gt;效率&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Alfred 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;神器,不解释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEVONthink Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源素材收集整理分类, 知识管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OmniFocus Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GTD&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vitanmin-R 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;番茄时间工作法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BetterTouchTool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触控板/鼠标功能扩展&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keyboard Maestro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;键盘大师, 门槛较高&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aText&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键字扩展 (准备尝试TextExpander)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Moom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;窗口管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClipMenu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剪贴板&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PopClip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类iphone选中工具,拥有很多给力的插件,例如打开选中下的链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1Password 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;密码管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bartender&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MenuBar管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HyperSwitch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好的切换工具(better than …&lt;/p&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;我曾经说过, 买mac是2013年自己做的最正确的决定之一&lt;/p&gt;
&lt;p&gt;转眼一年多过去了, mac为我节省的时间,带来的便捷,以及给自己工作和生活带来的变化是没法估量的&lt;/p&gt;
&lt;p&gt;整理下自己app列表, 瞅了下连带系统自带的一共125个app&lt;/p&gt;
&lt;p&gt;&lt;img alt="myapps" src="/imgs/resources/my-apps.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xiao-lu"&gt;效率&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Alfred 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;神器,不解释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEVONthink Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源素材收集整理分类, 知识管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OmniFocus Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GTD&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vitanmin-R 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;番茄时间工作法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BetterTouchTool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触控板/鼠标功能扩展&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keyboard Maestro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;键盘大师, 门槛较高&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aText&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键字扩展 (准备尝试TextExpander)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Moom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;窗口管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClipMenu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剪贴板&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PopClip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类iphone选中工具,拥有很多给力的插件,例如打开选中下的链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1Password 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;密码管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bartender&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MenuBar管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HyperSwitch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好的切换工具(better than km or manico)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Manico&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用切换, 辅助&lt;/p&gt;
&lt;h3 id="bian-ji-qi"&gt;编辑器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MacVim&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编辑器之神,不解释, 配置见 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mou&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;markdown编辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;haroopad&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;markdown编辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sublime Text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;源码查看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chocolat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;临时文件编辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Day One&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日记&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iA Writer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写作工具,支持markdown&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Atom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下一代编辑器,下了尝鲜&lt;/p&gt;
&lt;h3 id="kai-fa"&gt;开发&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;iTerm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;终端利器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文档速查&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xcode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写app用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CodeBox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码片段&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OhMyStar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;github star项目管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gas Mask&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;host快速切换&lt;/p&gt;
&lt;h3 id="liu-lan-qi-ji-yue-du"&gt;浏览器及阅读&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Google Chrome&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一号浏览器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Firefox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二号浏览器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Safari&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三号浏览器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pocket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;read it later&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReadKit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;rss 订阅&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kindle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电子书&lt;/p&gt;
&lt;h3 id="she-jiao"&gt;社交&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;QQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常年挂机&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RTX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内部交流&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WeChat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信,妈蛋这货不保存聊天记录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AliWangwang&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;淘宝&lt;/p&gt;
&lt;h3 id="yun"&gt;云&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dropbox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重要文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evernote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云笔记&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;百度云同步盘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源文件&lt;/p&gt;
&lt;h3 id="gtd"&gt;GTD&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Wunderlist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录待办事项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fantastical&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日历管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eggscellent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;番茄钟&lt;/p&gt;
&lt;h3 id="jie-mian"&gt;界面&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Flux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;色温调整&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;爱壁纸HD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;壁纸管理&lt;/p&gt;
&lt;h3 id="ying-yin"&gt;影音&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MPlayerX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;播放器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xiami&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虾米&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;diumoo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;豆瓣&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iTunes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自带&lt;/p&gt;
&lt;h3 id="ban-gong"&gt;办公&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Keynote
Numbers
Pages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三件套&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XMind&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脑图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Airmail&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;邮件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift Publisher 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pages 增强&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Balsamiq Mockups&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原型图&lt;/p&gt;
&lt;h3 id="xi-tong-gong-ju"&gt;系统工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Parallels Desktop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虚拟机&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Path Finder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;增强finder&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CleanMyMac 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;垃圾清理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;切图&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Folx 3 / Thunder&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caffeine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;保持屏幕常亮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lock Screen Plus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;锁屏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keka&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩解压&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GoAgentX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;科学上网&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LICEcap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;录屏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Better Rename 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;批量文件重命名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gemini&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重复文件查找&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MacHider&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文件隐藏&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MagicanRest&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;休息提醒&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;smcFanControl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动控制风扇&lt;/p&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;LIMBO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个很虐的游戏&lt;/p&gt;</content><category term="mac"></category></entry><entry><title>读书笔记--你就是极客!软件开发人员生存指南</title><link href="http://www.wklken.me/posts/2014/05/03/BeingGeek.html" rel="alternate"></link><published>2014-05-03T00:00:00+08:00</published><updated>2014-05-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-05-03:/posts/2014/05/03/BeingGeek.html</id><summary type="html">&lt;p&gt;BeingGeek:The Software Developer's Carrer Handbook&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/being-geek.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;五一三天,读完五本书.....这本算是重读&lt;/p&gt;
&lt;p&gt;写作风格类似&amp;lt;黑客与画家&amp;gt;&lt;/p&gt;
&lt;p&gt;10分标准,打个7.5&lt;/p&gt;
&lt;p&gt;个人职业生涯面临的种种境遇和问题:跳槽,面试,管理,招聘,危机处理,沟通,合作,团队建设,演讲,绩效考核等,甚至还有一篇是专门写给我们背后的支持者的(例如女朋友,如果有的话.....).&lt;/p&gt;
&lt;p&gt;书上关于 团队管理,沟通,换工作的几章,可以重点看下&lt;/p&gt;
&lt;p&gt;里面包含了很多观点,隔一段时间来重看认识会有不同,摘录几点.....算是读书摘要吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;阅读时,要不断重复3个问题(明确方向)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我正在做什么?
2.我真正想做的是什么?
3.我在乎的是什么?我关心的是什么?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-sheng-zhi-dao"&gt;致胜之道&lt;/h3&gt;
&lt;p&gt;系统思维:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们寻找 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;BeingGeek:The Software Developer's Carrer Handbook&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/being-geek.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;五一三天,读完五本书.....这本算是重读&lt;/p&gt;
&lt;p&gt;写作风格类似&amp;lt;黑客与画家&amp;gt;&lt;/p&gt;
&lt;p&gt;10分标准,打个7.5&lt;/p&gt;
&lt;p&gt;个人职业生涯面临的种种境遇和问题:跳槽,面试,管理,招聘,危机处理,沟通,合作,团队建设,演讲,绩效考核等,甚至还有一篇是专门写给我们背后的支持者的(例如女朋友,如果有的话.....).&lt;/p&gt;
&lt;p&gt;书上关于 团队管理,沟通,换工作的几章,可以重点看下&lt;/p&gt;
&lt;p&gt;里面包含了很多观点,隔一段时间来重看认识会有不同,摘录几点.....算是读书摘要吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;阅读时,要不断重复3个问题(明确方向)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我正在做什么?
2.我真正想做的是什么?
3.我在乎的是什么?我关心的是什么?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-sheng-zhi-dao"&gt;致胜之道&lt;/h3&gt;
&lt;p&gt;系统思维:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们寻找"定义"来了解
"系统",以便找出
"规则",这样我们才能
明白下一步该做什么
并最终获得胜利
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要投入足够的时间和精力,是可以完全地认识系统的&lt;/p&gt;
&lt;p&gt;麻烦的"人", 人总是会把事情搞砸,他们是系统故障的根源&lt;/p&gt;
&lt;p&gt;提高胜率:为不可预测事件做好准备&lt;/p&gt;
&lt;p&gt;只有自己,才能成就自己的事业.认为身边所有人都要对你的职业生涯负责的想法是错误的.&lt;/p&gt;
&lt;h3 id="san-yao-su"&gt;三要素&lt;/h3&gt;
&lt;p&gt;将职业发展与管理哲学归结为三要素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.技术方向
最接近代码的人最有资格为工作设定技术方向
你才是代码的拥有者,你需要关心它,每天都要
你是否主动地确定产品的技术方向?

2.保持成长
不进则退,不胜则亡,成长的基本单位是知识
增长代表一种战略.可以学到更多,完成更多的工作,获得晋升,改善自己,并承担更多责任.
你是否明白要做的哪些事情才能一直成长?

3.交付工作
言出必行,兑现承诺,重视自己的信誉
你是否能按时完成工作?兑现承诺?言出必行?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gong-zuo-zhi-yang"&gt;工作之痒&lt;/h3&gt;
&lt;p&gt;检验:我满意现在的工作么?你对自己的工作有多投入?你的动机是什么?&lt;/p&gt;
&lt;p&gt;不要在一气之下换工作.没有什么比愤怒更能让人失去理智.&lt;/p&gt;
&lt;p&gt;你需要以自信的立场来考虑换工作.不应该是为了逃避一个错误.而应该是去迎接一个新的机遇.&lt;/p&gt;
&lt;p&gt;关于移交工作:工作永远是做不完的,从来没有哪个时刻是适合辞职离开的&lt;/p&gt;
&lt;h3 id="gong-si-wen-hua"&gt;公司文化&lt;/h3&gt;
&lt;p&gt;如果想获得提拔,就要成功地满足某一群人的需求.&lt;/p&gt;
&lt;p&gt;问题是,永远要想在管理着前面,&lt;/p&gt;
&lt;h3 id="gou-tong"&gt;沟通&lt;/h3&gt;
&lt;p&gt;不要用借口来回答问题&lt;/p&gt;
&lt;p&gt;每次开口,应该言之有物,在令人不安的沉默中,应该坚持这种观点,而不是把自己放在受害者的角度上寻求借口&lt;/p&gt;
&lt;h3 id="chu-li-wei-ji"&gt;处理危机&lt;/h3&gt;
&lt;p&gt;几点:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.如果缺乏指引,人么会追随错误的导向

2.人们不停地讨论正在面对的危机,以互相提供群体治疗

3.每个人都想了解全部的真相
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三场会议&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.一对一面谈
2.部门会议
3.成果检查会议
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xi-tong-de-you-xi-hua"&gt;系统的游戏化&lt;/h3&gt;
&lt;p&gt;让某些事情变得有趣,积极参与&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.规则必须是明确的
2.规则必须是不可违反的
3.不到万不得已,不要拿金钱作为奖励手段
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hou-xiang-qiao-pai"&gt;后巷桥牌&lt;/h3&gt;
&lt;p&gt;在工作中,应该和同事保持多近的距离?&lt;/p&gt;
&lt;p&gt;彼此信任和尊重的团队会更加多产且高效.我们的目标不适合每个人都成为朋友,而是建立一组关系,这组关系中,我们互相相信对方是可靠地,诚实的,有能力的,有毅力的.&lt;/p&gt;
&lt;h3 id="ren-wu-lie-biao"&gt;任务列表&lt;/h3&gt;
&lt;p&gt;每天的任务事项:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.今天,必须今天完成的
2.稍后,不需要今天,稍后搞定即可
3.永不,我永远不会去完成这项任务
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不需要等级结构,标签,不需要优先级,不需要设定日期.&lt;/p&gt;
&lt;p&gt;保持极简&lt;/p&gt;
&lt;h3 id="juan-di-lie-biao"&gt;涓滴列表&lt;/h3&gt;
&lt;p&gt;坚持长期投入零散的时间,最后能做到的就远远超乎自己的想象.&lt;/p&gt;
&lt;p&gt;例如:人,写作,读书....&lt;/p&gt;
&lt;p&gt;充分利用零散时间&lt;/p&gt;
&lt;h3 id="gong-ju-de-kuang-re-fa-ze"&gt;工具的狂热法则&lt;/h3&gt;
&lt;p&gt;合适的工具将使生产力指数增长&lt;/p&gt;
&lt;p&gt;狂热法则:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.貌似简单
2.不受工作场所限制
3.设计的目的都是免除重复动作
4.只做我让他们做的事情
5.只属于我自己
6.我的工具一直为自己的生存而战
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mian-dui-ze-nan"&gt;面对责难&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.承认你搞砸了这个问题
2.承认"我不知道"
3.具体地解释你准备查明问题的步骤,并给自己定下最后期限.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-xiao-kao-he"&gt;绩效考核&lt;/h3&gt;
&lt;p&gt;描述:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.完成了什么工作
2.完成得如何
3.下一步需要做什么
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dui-ji-yu-de-wan-zheng-bu-fa"&gt;对机遇的完整步法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我打算去哪里?
2.我打算创造什么?
3.我打算如何创造出来?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-yi-que-kou"&gt;注意缺口&lt;/h3&gt;
&lt;p&gt;每个人都是可替代的&lt;/p&gt;
&lt;h3 id="jing-yan"&gt;经验&lt;/h3&gt;
&lt;p&gt;你的经验和你努力拼搏的过去,这些给你做决定所以来的有用的,有价值的直觉&lt;/p&gt;
&lt;p&gt;经验有半衰期&lt;/p&gt;
&lt;p&gt;了解我的世界,预测下一步会发生什么?&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;仅仅是现在做得很棒,并不意味着你是成功的
困难是有益的
冲突就是学习
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>后端不高兴——关于协作和沟通</title><link href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html" rel="alternate"></link><published>2014-04-24T00:00:00+08:00</published><updated>2014-04-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-24:/posts/2014/04/24/unhappy-about-cooperation-and-communication.html</id><summary type="html">&lt;p&gt;==================&lt;/p&gt;
&lt;p&gt;再过两月毕业三周年，回顾一下，突然想起了一些问题，顺手记录一下&lt;/p&gt;
&lt;p&gt;选择后端的原因之一，代码写得好一些，然后改需求的时候，刷刷刷改几行代码发布，然后泡杯茶站在前端同学后面看他们苦逼地改页面:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhappy" src="/imgs/blabla/unhappyface.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工作那么久，逐渐变得“冷血”，要学会说no，学会排期，学会去“降低”一些人的期望甚至是“无情”扼杀，所以或许初次合作会给人一种不“友好”的印象。&lt;/p&gt;
&lt;p&gt;但是在“友好”和“效率”，我选择了后者，记得当初很菜很菜的时候，我还是很“友好”的。(妈蛋，一天要处理N多问题，跟运营运维产品前端测试等等沟通，还得挤时间码代码测试发布上线，只能高效至上了)&lt;/p&gt;
&lt;p&gt;不扯了，归正题，聊一些平时沟通合作遇到的问题&lt;/p&gt;
&lt;p&gt;PS:这里后端偏指服务端开发，当然，问题普适于各个角色&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-wen-wen-ti-de-fang-shi"&gt;1. 问问题的方式&lt;/h3&gt;
&lt;p&gt;之前在微博看见人说过的一个现象，再次提一下&lt;/p&gt;
&lt;p&gt;假如有人找你咨询一个问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;==================&lt;/p&gt;
&lt;p&gt;再过两月毕业三周年，回顾一下，突然想起了一些问题，顺手记录一下&lt;/p&gt;
&lt;p&gt;选择后端的原因之一，代码写得好一些，然后改需求的时候，刷刷刷改几行代码发布，然后泡杯茶站在前端同学后面看他们苦逼地改页面:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhappy" src="/imgs/blabla/unhappyface.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工作那么久，逐渐变得“冷血”，要学会说no，学会排期，学会去“降低”一些人的期望甚至是“无情”扼杀，所以或许初次合作会给人一种不“友好”的印象。&lt;/p&gt;
&lt;p&gt;但是在“友好”和“效率”，我选择了后者，记得当初很菜很菜的时候，我还是很“友好”的。(妈蛋，一天要处理N多问题，跟运营运维产品前端测试等等沟通，还得挤时间码代码测试发布上线，只能高效至上了)&lt;/p&gt;
&lt;p&gt;不扯了，归正题，聊一些平时沟通合作遇到的问题&lt;/p&gt;
&lt;p&gt;PS:这里后端偏指服务端开发，当然，问题普适于各个角色&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-wen-wen-ti-de-fang-shi"&gt;1. 问问题的方式&lt;/h3&gt;
&lt;p&gt;之前在微博看见人说过的一个现象，再次提一下&lt;/p&gt;
&lt;p&gt;假如有人找你咨询一个问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在? (在么?/在不在?)
B: 额
A: xxx功能你知道么？
B: 知道
A: xxx有个功能有问题了，能帮看下么
B: 什么地方
A: xxxxxxxx
B: 算了你切个图过来吧
A: [图]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个，首先，可能我在写代码，闪动弹窗对有轻微强迫症的人来说，必须要点开的啊（妈蛋），然后，我即时响应了，可能由于你有事什么的，过一会回答，但是这个等待过程中我又很那去投入一件事，很容易投入没几分钟被打断...这几句对话可能跨度是几分钟，甚至几个钟头（跑去吃了个饭回来看到消息给才给回复，哥都快忘了），其次，我真的很吝啬打那么多字&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;效率杀手之一&lt;/p&gt;
&lt;p&gt;最有效率的其实是：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在吗?xxx功能你知道么?现在有问题了，xxx异常，访问链接 http://xxxxxxx，截图如下
   （给力一点的还会圈起来标注说明）
B: ok，稍等我看下
.....
B: 已修复，验证下
A: 好的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;感受下吧&lt;/p&gt;
&lt;p&gt;推荐一篇文章 &lt;a href="http://macshuo.com/?p=367"&gt;如何提问&lt;/a&gt; | 一本书 &lt;a href="http://book.douban.com/subject/20428922/"&gt;学会提问&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2-gao-ming-bai-zhe-shi-shui-de-wen-ti"&gt;2. 搞明白“这事谁的问题”&lt;/h3&gt;
&lt;p&gt;当一个人发现一个问题的时候，总是很兴奋地，迫不及待想要证实&lt;/p&gt;
&lt;p&gt;然后就会有如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;系统是不是挂了，我登陆不上去【有时候是页面差异，系统操作失败等】&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;稍等，我看下&lt;/span&gt;
&lt;span class="err"&gt;三分钟后&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;后台正常，刚才重新走了一遍流程，没问题，&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;切图&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="err"&gt;你再试下，可能&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;问题&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我忘改&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;了&lt;/span&gt;&lt;span class="sr"&gt;/登陆超时了/xxx了/&lt;/span&gt;&lt;span class="err"&gt;我忘记做&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;操作了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;吐血的问题，很多时候，都是自己机器的问题，可能是host/网络/浏览器/系统登陆等等因素导致的，但是大多数人已发现问题，总是认为是别人的问题(系统的问题)，然后迫不及待，然后，我们要花费时间来排查各个可能的问题，跳转N多机器，检查N多服务，而且，相信我，这个过程不会很有趣，而且问题本身的种类很难导致很难将其自动化....《论排查问题的复杂性》&lt;/p&gt;
&lt;p&gt;当然，如果是可以自动化而你偏偏要每次人肉查而且乐在其中，那我没办法了。&lt;/p&gt;
&lt;p&gt;后来就变成&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;系统是不是挂了，我点发布了但是前台没更新&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;重做一遍，&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;分钟后没更新通知我&lt;/span&gt; &lt;span class="err"&gt;【够冷血吧】&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这类问题次数少也就忍了，担心的是对应人员新人进来的时候，没有老员工带或者培训，那么系统开发者往往一次又一次成为“义务培训导师”.....&lt;/p&gt;
&lt;p&gt;另外遇到问题也要忍住证实的欲望，先自己确认下&lt;/p&gt;
&lt;p&gt;有一本书推荐《你的灯亮着么》&lt;/p&gt;
&lt;h3 id="3-suprise"&gt;3. Suprise&lt;/h3&gt;
&lt;p&gt;后端最讨厌的是suprise，安排和做事情的节奏都会被打乱。&lt;/p&gt;
&lt;p&gt;我的原则是，不接受&amp;amp;unhappy，紧急的会去配合做，当然心情不会happy&lt;/p&gt;
&lt;p&gt;方案设计，评审，开发，测试那么多环节都没发现，要上线前，需求变更或者xxx有问题，suprise&lt;/p&gt;
&lt;p&gt;然后，上线时间有时候又是固定的，所以必须要配合处理&lt;/p&gt;
&lt;p&gt;当然，作为一枚“有责任感”的后端，肯定都会全力配合处理，不高兴是一回事，把事情完美地搞完是一回事。&lt;/p&gt;
&lt;p&gt;但这时候，往往会发现，时间不等人，所有人都盯着你，瞬间亚历山大，如果没搞好还很容易成为“责任人”，延期什么的很容易落到你头上，属于吃力不讨好的角色，前期按时完成，suprise却要背负所有，心里瞬间失衡(╯‵□′)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;问题是，这个suprise的来源. 才是问题所在，更多的应该反思这里，否则很容易造成后续合作困难。&lt;/p&gt;
&lt;p&gt;另外，suprise很容易导致黑逻辑、补丁、牛皮糖、硬编码等等，将一块干净的自留地变成垃圾桶，而且破窗理论，所以，要控制。&lt;/p&gt;
&lt;h3 id="4-yao-ming-bai-yi-ge-dao-li"&gt;4. 要明白一个道理&lt;/h3&gt;
&lt;p&gt;1个人1个月能干好一件事情，不代表30个人在1天能把这件事做了&lt;/p&gt;
&lt;p&gt;很简单的一个道理，但是很容易被人忽视&lt;/p&gt;
&lt;h3 id="5-guan-yu-gu-shi-jian"&gt;5. 关于估时间&lt;/h3&gt;
&lt;p&gt;后端需要信任，虽然我们有时候估时间不大准，但是基本都能在少于估算的时间内完成，超过的情况并不多。&lt;/p&gt;
&lt;p&gt;而且随着工作经验积累，估算时间会越来越准。(三小时就是三小时，额，上下误差几分钟)&lt;/p&gt;
&lt;p&gt;一般问题过来，很简单顺手做了，复杂的会给个完成时间。&lt;/p&gt;
&lt;p&gt;不要站在自己的角度去给后端的估时间，常见的理由是：“就简单加一个xxx”，“修改一下而已”等，你要知道有些系统并没有那么简单，你要的可能是一个现在能用的东西，但我们需要一个以后无论怎么改都好改而且能用的东西。（相信我，差异很大），同理，不要估工作量啊（2天的量估0.5天，要做完，那另外1.5天怎么破，哥做不到&amp;gt;_&amp;lt;）&lt;/p&gt;
&lt;p&gt;记住，除非火烧眉毛，否则，能在承诺完成时间内搞定的，不要催。&lt;/p&gt;
&lt;p&gt;我们需要的是冷静和清晰的思路。催促和打断于事无补。&lt;/p&gt;
&lt;h3 id="6-shang-di-tong-yi-shi-jian-nei-you-qie-jin-zhi-you-yi-ge"&gt;6. 上帝，同一时间内有且仅只有一个&lt;/h3&gt;
&lt;p&gt;所有人，都认为自己的需求优先级最高。&lt;/p&gt;
&lt;p&gt;对后端来说，合作和沟通的每个人都是上帝。&lt;/p&gt;
&lt;p&gt;但是要记住，上帝，同一时刻内只有一个。&lt;/p&gt;
&lt;p&gt;所以，有了优先级这一说，会排期，一次只做一件事。&lt;/p&gt;
&lt;p&gt;再给力的后端也不是超人，一次处理N件事情效率很低容易出错，非常不明智的&lt;/p&gt;
&lt;p&gt;所以，要学会接受排期，除非排的时间不合理要去沟通。&lt;/p&gt;
&lt;p&gt;你会发现，在截止日期到来的前一刻，后端小伙伴的东西已经搞完提供了。&lt;/p&gt;
&lt;h3 id="7-he-li-shi-yong-xiang-mu-guan-li-gong-ju-you-jian-imdian-hua"&gt;7. 合理使用项目管理工具/邮件/IM/电话&lt;/h3&gt;
&lt;p&gt;综合使用工具进行沟通&lt;/p&gt;
&lt;p&gt;涉及项目跟踪通知等，请用项目管理工具(目前tower)&lt;/p&gt;
&lt;p&gt;极重要事情，请邮件&lt;/p&gt;
&lt;p&gt;极紧急事情，请当面，或者电话&lt;/p&gt;
&lt;p&gt;其他，IM&lt;/p&gt;
&lt;p&gt;小事，确认，疑问，突发奇想？灵机一动？等等，注意除非这个沟通有可能导致你必须要去等，否则不到万不得已不要杀过去打断一个程序员的思路。&lt;/p&gt;
&lt;p&gt;打断是效率杀手，如果不用电话，那恕我只能定期去查，异步回复，所以就不要傻等。&lt;/p&gt;
&lt;h3 id="8-bei-kai-hui"&gt;8. 被开会&lt;/h3&gt;
&lt;p&gt;不重要的会议不要勾选抄送我，谢谢&lt;/p&gt;
&lt;p&gt;冗长无聊相关性不大的会议允许早退，或者过了跟自己相关的部分允许早退&lt;/p&gt;
&lt;p&gt;超紧急临时会议，没问题&lt;/p&gt;
&lt;p&gt;其他临时会议，没提前发邀约提前通知的会议都是耍流氓，要知道本来用来码代码的两小时被突如其来的会议占用，打乱了计划安排，那么晚上就得花一个小时加班补回来【别问我为啥是一个小时】&lt;/p&gt;
&lt;h3 id="9-na-dao-cheng-nuo"&gt;9. 拿到承诺&lt;/h3&gt;
&lt;p&gt;如果有一件事，你提给后端，不说明问题，优先级，截止时间，或者，压根你就扔给后端就不管了。（被动等待会等到海枯石烂的）&lt;/p&gt;
&lt;p&gt;然后你期望他把事情给做了，把结果给你，或者将事情跟完。很多时候，这都是你的幻想。&lt;/p&gt;
&lt;p&gt;如果我们没做出承诺，可能这件事情就被排后了，至于完成的时间，完全与取决于工作安排和工作量。&lt;/p&gt;
&lt;p&gt;所以，一般提给后端的时候，可以多问一句，“什么时候能搞定”，拿到承诺，一般没问题了。&lt;/p&gt;
&lt;h3 id="10-dang-mian-gou-tong-shi-ti-gong-shang-xia-wen"&gt;10. 当面沟通时提供上下文&lt;/h3&gt;
&lt;p&gt;遇到次数不多，但是还是会遇到，干活中都是有“状态”的&lt;/p&gt;
&lt;p&gt;有时候在做一件事情，一半&lt;/p&gt;
&lt;p&gt;然后例如这样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 把xxx字段改成xxxx.... blablablabla.......

B: 啊？（脑补痴呆状）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者这样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 把xxx字段改成xxxx.... blablablabla.......

B: 不合适吧，xxxxxxx.......

A: 我在说xx问题

B: 我以为你说XXX问题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实可以这样:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 关于xx的问题，我们..........
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;你要相信，大部分后端都是善良的孩子......&lt;/p&gt;
&lt;p&gt;而且大部分后端，一个人干N个人的活(N&amp;gt;=2), (╯‵□′)╯︵┻━┻&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>JavaScript一站式入门笔记</title><link href="http://www.wklken.me/posts/2014/04/20/javascript-base.html" rel="alternate"></link><published>2014-04-20T00:00:00+08:00</published><updated>2014-04-20T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-20:/posts/2014/04/20/javascript-base.html</id><summary type="html">&lt;p&gt;&lt;img alt="封面" src="/imgs/front/javascript.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;大二开始接触的javascript，到现在，五年过去了，中间断断续续用了一些，但是主要是搞后端的，没有正儿八经“学习”一下。&lt;/p&gt;
&lt;p&gt;对其了解不成系统，最近做了一个系统涉及前端框架，所以借此机会学习总结了下。&lt;/p&gt;
&lt;p&gt;入门笔记，非初学者可以绕道哈:)&lt;/p&gt;
&lt;p&gt;后续打算深入学习一下，顺带去玩玩node.js&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考教程&lt;/p&gt;
&lt;p&gt;入门: 【已完成】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitbookio.github.io/javascript/"&gt;gitbook javascript教程&lt;/a&gt; 【简单】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3school.com.cn/js/index.asp"&gt;w3cschool教程&lt;/a&gt; 【简单，较全】&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.jquery.com/javascript-101/"&gt;Jquery:JavaScript101&lt;/a&gt; 【质量高】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learn-javascript-tutorial.com/"&gt;JavaScript Tutorial&lt;/a&gt; 【全面，不错】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进阶：【待阅读】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ejohn.org/apps/learn"&gt;Learning Advanced JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;javascript资料大全-superherojs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jstherightway.org/"&gt;javascript the right way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript 权威指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：笔记全部来自于以上资料&lt;/p&gt;
&lt;h2 id="mu-lu"&gt;目录&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 第一部分 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="封面" src="/imgs/front/javascript.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;大二开始接触的javascript，到现在，五年过去了，中间断断续续用了一些，但是主要是搞后端的，没有正儿八经“学习”一下。&lt;/p&gt;
&lt;p&gt;对其了解不成系统，最近做了一个系统涉及前端框架，所以借此机会学习总结了下。&lt;/p&gt;
&lt;p&gt;入门笔记，非初学者可以绕道哈:)&lt;/p&gt;
&lt;p&gt;后续打算深入学习一下，顺带去玩玩node.js&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考教程&lt;/p&gt;
&lt;p&gt;入门: 【已完成】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitbookio.github.io/javascript/"&gt;gitbook javascript教程&lt;/a&gt; 【简单】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3school.com.cn/js/index.asp"&gt;w3cschool教程&lt;/a&gt; 【简单，较全】&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.jquery.com/javascript-101/"&gt;Jquery:JavaScript101&lt;/a&gt; 【质量高】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learn-javascript-tutorial.com/"&gt;JavaScript Tutorial&lt;/a&gt; 【全面，不错】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进阶：【待阅读】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ejohn.org/apps/learn"&gt;Learning Advanced JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;javascript资料大全-superherojs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jstherightway.org/"&gt;javascript the right way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript 权威指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：笔记全部来自于以上资料&lt;/p&gt;
&lt;h2 id="mu-lu"&gt;目录&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 第一部分：简介(Getting Started)
  1.HTML/CSS/JavaScript
  2.JavaScript书写和位置
  3.简单语法
 第二部分：基本语法
  1.变量(varivalbes)
  2.操作符(operators)
  3.真值判断 - 比较
  4.控制流
    分支
    循环
 第二部分：函数
  1.Functions
  2.global functions
 第三部分：对象
  1.Array
  2.Object
 第四部分：内置对象
  1.字符串(string)
  2.math
  3.date
  4.boolean
 第五部分: DOM 操作
 第六部分：其他
  1.正则
  2.this关键字
  3.异常处理
  4.作用域
    Global Scope
    Local Scope
  5.闭包
  6.typeof(Testing Type)
  7.Timers
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-jian-jie-getting-started"&gt;第一部分：简介(Getting Started)&lt;/h2&gt;
&lt;h3 id="1htmlcssjavascript"&gt;1.HTML/CSS/JavaScript&lt;/h3&gt;
&lt;p&gt;关系&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTML is for Content
CSS is for Presentation
JavaScript is for Interactivity
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2javascriptshu-xie-he-wei-zhi"&gt;2.JavaScript书写和位置&lt;/h3&gt;
&lt;p&gt;external,外部js文件引入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Code is written in a .js file, included via the script tag src attribute. --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/example.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;inline,本页面&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Embed code directly on a web page using script tags. --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
alert( "Hello World!" );
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;attribute&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Inline code directly on HTML elements being clicked. --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript:alert( 'Hello World' );"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"alert( 'Good Bye World' );"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me Too!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BP:将&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;放到页面底部，&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签之前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hello-world"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
// Moving the script to the bottom of the page will make sure the element exists.
var title = document.getElementById( "hello-world" );
console.log( title );
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3jian-dan-yu-fa"&gt;3.简单语法&lt;/h3&gt;
&lt;p&gt;code sample&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var hello = "Hello";
var world = "World";

// Message equals "Hello World"
var message = hello + " " + world;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分号 ;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分号用于分隔 JavaScript 语句。
通常我们在每条可执行的语句结尾添加分号。
使用分号的另一用处是在一行中编写多条语句。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 单行,This is a comment, it will be ignored by the interpreter
var a = "this is a variable defined in a statement";

/*
多行
This is a multi-line comment,
it will be ignored by the interpreter
*/
var a = "this is a variable defined in a statement";
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对代码行进行折行  - 可以对js代码通过反斜杠，拆分换行&lt;/p&gt;
&lt;p&gt;JavaScript 会忽略多余的空格。可以向脚本添加空格，来提高其可读性。(空格和折行无关紧要)&lt;/p&gt;
&lt;p&gt;javaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-er-bu-fen-ji-ben-yu-fa_1"&gt;第二部分：基本语法&lt;/h2&gt;
&lt;h3 id="1bian-liang-varivalbes"&gt;1.变量(varivalbes)&lt;/h3&gt;
&lt;p&gt;命名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;必须以字母开头, 也能以 $ 和 _ 符号开头（不过我们不推荐这么做）
可以包含数字
名称大小写敏感（y 和 Y 是不同的变量）
不能使用保留字
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：变量命名不要使用保留字 &lt;a href="https://learn.jquery.com/javascript-101/reserved-words/"&gt;Reserved Words&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明和赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var age;
age = 26;
//or
var age = 26;

var age, height, weight, gender;
//or
var name="Gates", age=56, job="CEO";

//注意，只声明不赋值，其值为undefined
var x;
x === undefined; // true

//=================

// This works:
var test = 1;
var test2 = function() { ... };
var test3 = test2( test );

// And so does this:
var test4 = 1,
    test5 = function() { ... },
    test6 = test2( test );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变量类型 Types&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Numbers
    Float: a number, like 1.21323, 4, -33.5, 100004 or 0.123
    Integer: a number like 1, 12, -33, 140 but not 1.233
String: a line of text like "boat", "elephant" or "damn, you are tall!"
Boolean: either true or false, but nothing else
    // Boolean values.
    var okay = true;
    var fail = false;
Arrays: a collection of values like: 1,2,3,4,'I am bored now'
Objects: a representation of a more complex object

null
    // Define a null value. 可用于清空变量
    var foo = null;
undefined, 表示变量不含值
    // Two ways to achieve an undefined value.
    var bar1 = undefined;
    var bar2;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2cao-zuo-fu-operators"&gt;2.操作符(operators)&lt;/h3&gt;
&lt;p&gt;算术(Arithmetic Operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Operator Description
+        Addition
-        Subtraction
*        Multiplication
/        Division
%        Modulus (remainder)
++       Increment by one
--       Decrement by one

Increment: Given a = 5
    c = a++, Results: c = 5 and a = 6
    c = ++a, Results: c = 6 and a = 6
Decrement: Given a = 5
    c = a--, Results: c = 5 and a = 4
    c = --a, Results: c = 4 and a = 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;减法(-)
将两边的操作数都转换为数字

加法(+)
1. 两边的操作数首先被转换成原始值.这里我们称之为A 和 B.
2. 如果有任意一个原始值是字符串,则把另一个也转换成字符串,执行A和B的连接操作并返回连接后的字符串.
3. 否则把A和B都转换为数字,返回两个数字的和

&amp;lt; 同 +
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值操作符(Assignment Operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Operator    Description
=           Assignment, a = 3
+=          (a+=3 is the same as a=a+3)
-=          (a-=3 is the same as a=a-3)
*=          (a*=3 is the same as a=a*3)
/=          (a/=3 is the same as a=a/3)
%=          (a%=3 is the same as a=a%3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串操作符(String Operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Operator    Description
+           Concatenation (var greeting = "Hello " + firstname;)
+=          One step concatenation and assignment (var greeting = "Hello "; greeting += firstname;)

"hello".concat(" world")// "hello world"

注意区别
// Addition vs. Concatenation
var foo = 1;
var bar = "2";
console.log( foo + bar ); // 12

// Coercing a string to act as a number.
var foo = 1;
var bar = "2";

console.log( foo + Number(bar) ); // 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三元运算(Ternary Operator)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test ? expression1 : expression2

test
任何 Boolean 表达式。
expression1
如果 test 为 true，则返回表达式。 可能是逗号表达式。
expression2
如果 test 为 false，则返回表达式。 可以使用逗号表达式链接多个表达式。

e.g.
// Set foo to 1 if bar is true; otherwise, set foo to 0:
var foo = bar ? 1 : 0;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认值(Default Operator)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Operator    Description
||          Used to assign a default operator

var yourName = prompt("Your Name?","") || "Stranger";
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比较运算符(Comparison operators)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;==  Equals
!=  Doesn't equal
=== Strictly equals
!== Doesn't strictly equal
&amp;gt;   Is greater than
&amp;lt;   Is less than
&amp;gt;=  Is greater than or equal to
&amp;lt;=  Is less than or equal to

== / === 的区别
== 值相等， === 值相等，且类型相同

BP: 相等比较总是使用 === 和 !===

//=====================

e.g.
var foo = 1;
var bar = 0;
var baz = "1";
var bim = 2;

foo == bar; // false
foo != bar; // true
foo == baz; // true; but note that the types are different

foo === baz;             // false
foo !== baz;             // true
foo === parseInt( baz ); // true

foo &amp;gt; bim;  // false
bim &amp;gt; baz;  // true
foo &amp;lt;= baz; // true
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3zhen-zhi-pan-duan-bi-jiao"&gt;3.真值判断 - 比较&lt;/h3&gt;
&lt;p&gt;真值判断&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Values that evaluate to false:

false
"" // An empty string.
NaN // JavaScript's "not-a-number" variable.
null
undefined // Be careful -- undefined can be redefined!
0 // The number zero.

// Values that evaluate to true:

true
// Everything else evaluates to true, some examples:
"0"
"any string"
[] // An empty array.
{} // An empty object.
1 // Any non-zero number.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑运算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//短路运算
&amp;amp;&amp;amp;  and (a == b &amp;amp;&amp;amp; c != d)
||  or (a == b || c != d)
!   not !(a == b || c != d)

--------------------

// Logical AND and OR operators

var foo = 1;
var bar = 0;
var baz = 2;

// returns 1, which is true
foo || bar;

// returns 1, which is true
bar || foo;

// returns 0, which is false
foo &amp;amp;&amp;amp; bar;

// returns 2, which is true
foo &amp;amp;&amp;amp; baz;

// returns 1, which is true
baz &amp;amp;&amp;amp; foo;

--------------------

if(x &amp;gt; 10 &amp;amp;&amp;amp; x &amp;lt; 20) {
    ...
}

if(country === 'England' || country === 'Germany') {
        ...
}


if ( (name === "John" || name === "Jennifer") &amp;amp;&amp;amp; country === "France")

--------------------

//其他用法
// Do something with foo if foo is truthy.
foo &amp;amp;&amp;amp; doSomething( foo );

// Set bar to baz if baz is truthy;
// otherwise, set it to the return value of createBar()
var bar = baz || createBar();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4kong-zhi-liu"&gt;4.控制流&lt;/h3&gt;
&lt;h4 id="fen-zhi"&gt;分支&lt;/h4&gt;
&lt;p&gt;if-eles&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (conditions) {
    statements;
} else if (conditions) {
    statements;
} else {
    statements;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (time&amp;lt;10)
{
    x="Good morning";
} else if (time&amp;lt;20)
{
    x="Good day";
} else
{
    x="Good evening";
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;switch&lt;/p&gt;
&lt;p&gt;在判断情况大于2种的时候，使用 switch/case 更高效，而且更优雅（更易于组织代码）。但在判断的情况超过10种的时候不要使用 switch/case&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;switch (expression) {
    case value :
        statements;
    case value :
        statements;
    default :
        statements;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//记得break
var quantity = 1;
switch (quantity) {
    case 1 :
        alert("quantity is 1");
        break;
    case 2 :
        alert("quantity is 2");
        break;
    default :
        alert("quantity is not 1 or 2");
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xun-huan"&gt;循环&lt;/h4&gt;
&lt;p&gt;for&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for (initialization; conditions; change) {
    statements;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for(var i = 0; i &amp;lt; 10; i = i + 1){
    // do this code ten-times
}

var i = 0;
for(; i&amp;lt;length; i+=2) {
}

var i=0,len=cars.length;
for (; i&amp;lt;len; )
{
    document.write(cars[i] + "&amp;lt;br&amp;gt;");
    i++;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for/in&lt;/p&gt;
&lt;p&gt;谨慎使用for-in, 遍历一个对象中的成员（属性，方法），如果用来遍历数组的到的结果并不是预期中数组每项的值，方法神马的会被遍历出来&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for (var index in array) {
    statements;
    //array[index]
}

for (var key in object) {
    statements;
    //object[key]
}
for (var name in object) {
    if (object.hasOwnProperty(name)) {
        // do something with name
    }
}

e.g.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while (conditions) {
    statements;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var i = 0, x = "";
while (i &amp;lt; 5) {
    x = x + "The number is " + i;
    i++;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;do-while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;do {
    statements;
} while (conditions);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;do {
    // Even though the condition evaluates to false
    // this loop's body will still execute once.
    alert( "Hi there!" );
} while ( false );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;break/continue&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;break 语句用于跳出循环。
continue 用于跳过循环中的一个迭代。

label:
    语句

break labelname;
continue labelname;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Stopping a loop
for ( var i = 0; i &amp;lt; 10; i++ ) {
    if ( something ) {
        break;
    }
}

// Skipping to the next iteration of a loop
for ( var i = 0; i &amp;lt; 10; i++ ) {
    if ( something ) {
        continue;
    }
    // The following statement will only be executed
    // if the conditional "something" has not been met
    console.log( "I have been reached" );

}
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-er-bu-fen-han-shu_2"&gt;第二部分：函数&lt;/h2&gt;
&lt;h3 id="1functions"&gt;1.Functions&lt;/h3&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Function declaration.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo() {&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Named function expression.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//function statements go here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="kr"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;or&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="kr"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;changeBg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// A simple function.
var greet = function( person, greeting ) {
    var text = greeting + ", " + person;
    console.log( text );
};

greet( "Rebecca", "Hello" ); // "Hello, Rebecca"


// A function that returns a value.
var greet = function( person, greeting ) {
    var text = greeting + ", " + person;
    return text;
};

console.log( greet( "Rebecca", "Hello" ) ); // "Hello, Rebecca"


// A function that returns another function.
var greet = function( person, greeting ) {
    var text = greeting + ", " + person;
    return function() {
        console.log( text );
    };
};

var greeting = greet( "Rebecca", "Hello" );

greeting(); // "Hello, Rebecca"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediately-Invoked Function Expression (IIFE)&lt;/p&gt;
&lt;p&gt;参阅文章 &lt;a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/"&gt;IIFE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建并立刻执行.This pattern is extremely useful for cases where you want to avoid polluting the global namespace with code – no variables declared inside of the function are visible outside of it.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// An immediately-invoked function expression.

(function() {
    var foo = "Hello world";
})();

console.log( foo ); // undefined!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法作为参数&lt;/p&gt;
&lt;p&gt;方法可以赋值给变量，且，可以作为函数参数传递&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Passing an anonymous function as an argument.
var myFn = function( fn ) {
    var result = fn();
    console.log( result );
};

// Logs "hello world"
myFn( function() {
    return "hello world";
});

// Passing a named function as an argument
var myFn = function( fn ) {
    var result = fn();
    console.log( result );
};

var myOtherFn = function() {
    return "hello world";
};

myFn( myOtherFn ); // "hello world"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2global-functions"&gt;2.global functions&lt;/h3&gt;
&lt;p&gt;These "global" functions we have discussed above are actually methods of the window object, but as window is assumed if no object is referenced, we don't need to explicitly write window.parseFloat() or window.isNaN(). Also, some of these functions such as Number() and String() are really function constructors for creating new String and Number objects. For now, just remember that you can use these functions to ensure you are working with a String or Number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个数值包装器&lt;/p&gt;
&lt;p&gt;Number的属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MAX_VALUE
MIN_VALUE
NEGATIVE_INFINITY
POSITIVE_INFINITY
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;toExponential ,  toExponential 方法以指数形式返回 数字的字符串表示
toFixed, 四舍五入
toPrecision
toString
valueOf, valueOf 方法返回调用它的对象类型的原始
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转为数字，如果失败返回NaN(Not a Number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var strNum1 = "1";
var strNum2 = "2";
var strSum = strNum1 + strNum2; //returns 12
alert(strSum);

var intNum1 = Number(strNum1);
var intNum2 = Number(strNum2);
var intSum = intNum1 + intNum2; //returns 3
alert(intSum);

// 四舍五入一个数字，保留N位小数
var num =2.443242342;
num = num.toFixed(4);  // num will be equal to 2.4432
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Boolean(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boolean 是一个 代表 true 或 false 值的对象&lt;/p&gt;
&lt;p&gt;Boolean 对象有多个值，这些值 &lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;相当于 false 值（0、 -0、null 或 “” [一个空字串]），未定义的 (NaN)，当然还有 false。
所有其他布尔 值相当于 true 值
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;var myBoolean = true;
if(myBoolean == true) {
// If the condition evaluates to true
}
else {
// If the condition evaluates to false
}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转为字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var intNum1 = 1;
var intNum2 = 2;
var intSum = intNum1 + intNum2; //returns 3
alert(intSum);

var strNum1 = String(intNum1);
var strNum2 = String(intNum2);
var strSum = strNum1 + strNum2; //returns 12
alert(strSum);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体见string 方法&lt;/p&gt;
&lt;p&gt;isNaN(object)&lt;/p&gt;
&lt;p&gt;判断是否为数字，或者是否可以被转为数字。如果是数字，return false，否则，return true;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;isNaN(4) //false
isNaN('4') //false

isNaN('hello') //true
isNaN(0/0) //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;parseFloat() and parseInt()&lt;/p&gt;
&lt;p&gt;The parseFloat() 如果字符串以数字开头，将会将字符串开头数字部分转为数字。否则，返回NaN&lt;/p&gt;
&lt;p&gt;The parseInt() 如果字符串以数字开头，将会将字符串开头数字部分转为数字。否则，返回NaN&lt;/p&gt;
&lt;p&gt;parseInt(string, radix), radix=[2,36], radix不设or0, 根据string, “0x”16进制, "0"8进制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var race = "26.2 miles";
parseFloat(race); //26.2
parseInt(race);  //26

race = "Marathon";
parseFloat(race); //NaN
parseInt(race); //NaN
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-san-bu-fen-dui-xiang_1"&gt;第三部分：对象&lt;/h2&gt;
&lt;h3 id="1array"&gt;1.Array&lt;/h3&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//语法
new Array();
new Array(size);
new Array(element0, element1, ..., elementn);

// Creating an array with the constructor:
var myarray = new Array();

// Creating an array with the array literal syntax:
var bar = [];

========================

// A simple array with constructor.
var myArray1 = new Array( "hello", "world" );

// Literal declaration, the preferred way.
var myArray2 = [ "hello", "world" ];

========================

var bar = new Array( 100 );
alert( bar[ 0 ] ); // undefined
alert( bar.length ); // 100

var foo = [ 100 ];
alert( foo[ 0 ] ); // 100
alert( foo.length ); // 1

a = new Array(3) // [undefined × 3]
a[0] // undefined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myArray = [];

myArray[ 0 ] = "hello";
myArray[ 1 ] = "world";
myArray[ 3 ] = "!";

//Missing indices will be filled with undefined.
console.log( myArray ); // [ "hello", "world", undefined, "!" ];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Accessing array items by index
var myArray = [ "hello", "world", "!" ];
console.log( myArray[ 2 ] ); // "!"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;属性-length&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Length of an array
var myArray = [ "hello", "world", "!" ];
console.log( myArray.length ); // 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/56712/"&gt;原生数组函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;遍历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// For loops and arrays - a classic
var myArray = [ "hello", "world", "!" ];
for ( var i = 0; i &amp;lt; myArray.length; i = i + 1 ) {
    console.log( myArray[ i ] );
}

// for/in
var x
var mycars = new Array()
mycars[0] = "Saab"
mycars[1] = "Volvo"

for (x in mycars)
{
    console.log(mycars[x]);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;p&gt;方法-push/pop&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Pushing and popping

var myArray = [];

myArray.push( 0 ); // [ 0 ]
myArray.push( 2 ); // [ 0 , 2 ]
myArray.push( 7 ); // [ 0 , 2 , 7 ]
b = myArray.pop();     // [ 0 , 2 ] , b=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-concat&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;myOtherArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;返回新数组&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;wholeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;concat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;myOtherArray&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;附加（&lt;/span&gt;&lt;span class="nt"&gt;append&lt;/span&gt;&lt;span class="err"&gt;）一个数组到另一个数组上&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Joe"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2458&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Doe"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;555&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;push&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;array1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;array2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c"&gt;/* array1 will be equal to  &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="s2"&gt;"Joe"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2458&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Doe"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;555&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="c"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-join&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Joining elements
var myArray = [ "hello", "world", "!" ];

// The default separator is a comma. 默认逗号
console.log( myArray.join() );     // "hello,world,!"

// Any string can be used as separator...
console.log( myArray.join( " " ) );  // "hello world !";
console.log( myArray.join( "!!" ) ); // "hello!!world!!!";

// ...including an empty one.
console.log( myArray.join( "" ) );   // "helloworld!"

// 拼标签
"&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;" + tdcell.join('&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;') + "&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-indexOf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var fruits = ["Banana", "Orange", "Apple", "Mango"];
var a = fruits.indexOf("Apple");
//2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-slice&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Slicing
var myArray = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
var newArray = myArray.slice( 3 );

console.log( myArray );  // [ 1, 2, 3, 4, 5, 6, 7, 8 ]
console.log( newArray ); // [ 4, 5, 6, 7, 8 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-splice&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myArray.splice( index, length, values, ... );
Index – The starting index.
Length – The number of elements to remove.
Values – The values to be inserted at the index position.

var myArray = [ 0, 7, 8, 5 ];
myArray.splice( 1, 2, 1, 2, 3, 4 ); //from index 1, cut 2 elements, and insert 1,2,3,4
console.log( myArray ); // [ 0, 1, 2, 3, 4, 5 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-sort&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Sorting without comparing function.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 1, 3, 4, 6&lt;/span&gt;

&lt;span class="c1"&gt;// Sorting with comparing function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;descending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;descending&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 6, 4, 3, 1 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-reverse&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myArray = [ "world" , "hello" ];
myArray.reverse(); // [ "hello", "world" ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-shift&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Queue with shift() and push()
var myArray = [];

myArray.push( 0 ); // [ 0 ]
myArray.push( 2 ); // [ 0 , 2 ]
myArray.push( 7 ); // [ 0 , 2 , 7 ]
b = myArray.shift();   // [ 2 , 7 ],  b=0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-unshift&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//Inserts an element at the first position of the array:
var myArray = [];

myArray.unshift( 0 ); // [ 0 ]
myArray.unshift( 2 ); // [ 2 , 0 ]
myArray.unshift( 7 ); // [ 7 , 2 , 0 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-forEach&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="nx"&gt;itself&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Index&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;itself&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c1"&gt;// Native .forEach()&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printElementAndIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"Index "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;": "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;negateElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Prints all elements to the console&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;printElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Prints "Index 0: 1", "Index 1: 2", "Index 2: 3", ...&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;printElementAndIndex&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// myArray is now [ -1, -2, -3, -4, -5 ]&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;negateElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取数字数组中最大最小值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];
var maxInNumbers = Math.max.apply(Math, numbers);
var minInNumbers = Math.min.apply(Math, numbers);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;清空一个数组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myArray = [12 , 222 , 1000 ];
myArray.length = 0; // myArray will be equal to [].

改变length可以进行数组截断或者扩增(扩增的项是undefined)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不要使用 delete 来删除一个数组中的项&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var items = [12, 548 ,'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' ,2154 , 119 ];
items.length; // return 11
delete items[3]; // return true
items.length; // return 11
/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */

使用

var items = [12, 548 ,'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' ,2154 , 119 ];
items.length; // return 11
items.splice(3,1) ;
items.length; // return 10
/* items will be equal to [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2object"&gt;2.Object&lt;/h3&gt;
&lt;p&gt;Objects包含一个或多个键值对，键：任意字符串，值：数字，字符串，array，其他objects，函数等&lt;/p&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Creating an object with the constructor:
var person1 = new Object;
person1.firstName = "John";
person1.lastName = "Doe";

alert( person1.firstName + " " + person1.lastName );

// Creating an object with the object literal syntax:
var person2 = {
    firstName: "Jane",
    lastName: "Doe"
};

alert( person2.firstName + " " + person2.lastName );

//包含方法
var myObject = {
    sayHello: function() {
        console.log( "hello" );
    },
    myName: "Rebecca"
};

myObject.sayHello(); // "hello"

console.log( myObject.myName ); // "Rebecca"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嵌套&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// As mentioned, objects can also have objects as a property.
var people = {};

people[ "person1" ] = person1;
people[ "person2" ] = person2;

alert( people[ "person1" ].firstName );
alert( people[ "person2" ].firstName );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取属性：寻址方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name=person.lastname;
name=person["lastname"];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;b = { 'b1': 1, 'b2':2 }
delete b['b2']
//Object {b1: 1}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取未定义的属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Properties&lt;/span&gt; &lt;span class="nt"&gt;that&lt;/span&gt; &lt;span class="nt"&gt;have&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;been&lt;/span&gt; &lt;span class="nt"&gt;created&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"John Doe"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nt"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;email&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问对象的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;objectName.methodName()
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-si-bu-fen-nei-zhi-dui-xiang_1"&gt;第四部分：内置对象&lt;/h2&gt;
&lt;h3 id="1zi-fu-chuan-string"&gt;1.字符串(string)&lt;/h3&gt;
&lt;p&gt;字符串可以是引号中的任意文本&lt;/p&gt;
&lt;p&gt;声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Single quotes can be used
var str = 'Our lovely string';

// Double quotes as well
var otherStr = "Another nice string";

//In Javascript, Strings can contain UTF-8 characters:
"中文 español English हिन्दी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어";
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连接字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//规则是：如果把数字与字符串相加，结果将成为字符串
var bigStr = 'Hi ' + 'JS strings are nice ' + 'and ' + 'easy to add';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Just use the property .length
var size = 'Our lovely string'.length;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;p&gt;方法-trim&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var str = "       Hello World!        ";
alert(str.trim());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-match&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;str.match("world")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-replace&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;StringObject.replace(searchValue,replaceValue)

StringObject:字符串
searchValue：字符串或正则表达式
replaceValue:字符串或者函数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replaceValue可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;amp;  与正则相匹配的字符串
$`  匹配字符串左边的字符
$’ 匹配字符串右边的字符
$1,$2,$,3,…,$n 匹配结果中对应的分组匹配结果
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"W3School"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;
&lt;span class="s"&gt;"hello world"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"healo world"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"heaao worad"&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sStr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'讨论一下正则表达式中的&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="err"&gt;的用法'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;sStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;正则表达式&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//讨论一下{正则表达式}中的replace的用法&lt;/span&gt;

&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"$`"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//aac&lt;/span&gt;
&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"$'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//acc"'`")&lt;/span&gt;

&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;nimojs&lt;/span&gt;&lt;span class="mf"&gt;@126.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)(@)(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"$2$1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//@nimojs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replaceValue 是函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;'JAVASCRIPT'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[A-G]/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="c1"&gt;//JaVaScRIPT&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;    
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//["nimojs@126.com", "nimojs", "@", "126.com", 0, "nimojs@126.com"] &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'返回值会替换掉匹配到的目标'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'nimojs@126.com'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(.+)(@)(.*)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-split(delimiter)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var s = "A,B,C,D";
var a = s.split(",");
document.write(a[2]);
//Returns C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-indexOf(substring,startPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;str.indexOf("Hello")
// if not exists, return -1
code.indexOf('a') === -1

webucator.indexOf("cat");
//Returns 4

webucator.indexOf("cat", 5);
//Returns -1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-lastIndexOf(substring,endPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.lastIndexOf("cat");
//Returns 4

 webucator.lastIndexOf("cat", 5);
 //Returns 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-substr(startPosition,length)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.substr(4, 3);
//Returns cat

webucator.substr(4);
//Returns cator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-substring(startPosition,endPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.substring(4, 7);
//Returns cat

webucator.substring(4);
//Returns cator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-slice(startPosition,endPosition)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.slice(4, 7);
//Returns cat

var str="Hello happy world!"
str.slice(6)// happy world!
str.slice(6,11) //happy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-slice(startPosition,positionFromEnd)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.slice(4, -2);
//Returns cat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-toLowerCase()/toUpperCase()&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.toLowerCase()
//Returns webucator

webucator.toUpperCase();
//Returns WEBUCATOR
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-charAt(position)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.charAt(4)
//Returns c (the fifth character)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-charCodeAt(position)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webucator.charCodeAt(4)
//Returns 99
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法-fromCharCode(characterCodes)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;String.fromCharCode(169)
//Returns ©
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2math"&gt;2.math&lt;/h3&gt;
&lt;p&gt;Math（算数）对象的作用是：执行常见的算数任务&lt;/p&gt;
&lt;p&gt;属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//Math.PI Pi (Π)
Math.PI;
//3.141592653589793

//Math.SQRT2  Square root of 2.
Math.SQRT2;
//1.4142135623730951
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.abs(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.abs(-12);
//Returns 12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.ceil(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.ceil(5.4);
//Returns 6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.floor(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.floor(5.6);
//Returns 5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.max(numbers)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.max(2, 5, 9, 3);
//Returns 9
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.min(numbers)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.min(2, 5, 9, 3);
//Returns 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.pow(number, power)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.pow(2, 5);
//Returns 32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.round(number)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Math.round(2.5);
//Returns 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.random();&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//Returns random
//number from 0 to 1
Math.random()
var rndDec = Math.random();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Math.power()&lt;/p&gt;
&lt;h3 id="3date"&gt;3.date&lt;/h3&gt;
&lt;p&gt;处理日期和时间&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;myDate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s2"&gt;"从 1970/01/01 至今已过去 "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;myDate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;getTime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" 毫秒"&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;now&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"month dd, yyyy hh:mm:ss);"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;redSoxWin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"October 21, 2004 12:01:00"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;redSoxWin&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;yyyy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;hh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;mm&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ss&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;redSoxWin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;21&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;01&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;redSoxWin&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;计数从&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="err"&gt;开始&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt; &lt;span class="nt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;2012&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="err"&gt;月&lt;/span&gt;&lt;span class="nt"&gt;15&lt;/span&gt;&lt;span class="err"&gt;日&lt;/span&gt;
&lt;span class="nt"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;getMonth&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;            &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;结果为&lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Date.parse 的返回结果不是一个Date对象，而是从1970-01-01午夜（GMT）到给定日期之间的毫秒数。可以用Date的构造函数将其转换为Date对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new Date(Date.parse("8/2/2012"));    // 正确识别为2012年8月2日
new Date(Date.parse("2012-08-02"));    // 正确识别为2012年8月2日
new Date(Date.parse("2012-8-2"));    // 不能识别
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;p&gt;getDate()   Returns the day of the month (1-31).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getDate();
//Returns 14
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getDay()    Returns the day of the week as a number (0-6, 0=Sunday, 6=Saturday).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getDay();
//Returns 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getMonth()  Returns the month as a number (0-11, 0=January, 11=December).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getMonth();
//Returns 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getFullYear()   Returns the four-digit year.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getFullYear();
//Returns 2011
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getHours()  Returns the hour (0-23).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getHours();
//Returns 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getMinutes()    Returns the minute (0-59).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getMinutes();
//Returns 23
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getSeconds()    Returns the second (0-59).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getSeconds();
//Returns 54
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getMilliseconds()   Returns the millisecond (0-999).&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getMilliseconds();
//Returns 650
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getTime()   Returns the number of milliseconds since midnight January 1, 1970.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getTime();
//Returns 1113452634650
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;getTimezoneOffset() Returns the time difference in minutes between the computer of user and GMT.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.getTimezoneOffset();
//Returns 240
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;toLocaleString()    Returns the Date object as a string.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.toLocaleString();
//Returns Thursday, April 14,
//2011 12:23:54 AM
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;toGMTString()   Returns the Date object as a string in GMT timezone.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rightNow.toGMTString();
//Returns Thu, 14 Apr 2011
//04:23:54 UTC
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4boolean"&gt;4.boolean&lt;/h3&gt;
&lt;p&gt;布尔（逻辑）只能有两个值：true 或 false&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var x=true
var y=false
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myBoolean=new Boolean()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的代码行均会创建初始值为 false 的 Boolean 对象。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myBoolean=new Boolean();
var myBoolean=new Boolean(0);
var myBoolean=new Boolean(null);
var myBoolean=new Boolean("");
var myBoolean=new Boolean(false);
var myBoolean=new Boolean(NaN);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的代码行均会创初始值为 true 的 Boolean 对象：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myBoolean=new Boolean(1);
var myBoolean=new Boolean(true);
var myBoolean=new Boolean("true");
var myBoolean=new Boolean("false");
var myBoolean=new Boolean("Bill Gates");
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-wu-bu-fen-domcao-zuo_1"&gt;第五部分: DOM操作&lt;/h2&gt;
&lt;h3 id="dom"&gt;DOM&lt;/h3&gt;
&lt;p&gt;当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。
HTML DOM 模型被构造为对象的树&lt;/p&gt;
&lt;p&gt;HTML DOM 树&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;JavaScript 能够改变页面中的所有 HTML 元素
JavaScript 能够改变页面中的所有 HTML 属性
JavaScript 能够改变页面中的所有 CSS 样式
JavaScript 能够对页面中的所有事件做出反应
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过id查找&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var x=document.getElementById("intro");
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本例查找 id="main" 的元素，然后查找 "main" 中的所有 &lt;p&gt; 元素：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var x=document.getElementById("main");
var y=x.getElementsByTagName("p");
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;document.write(Date());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变html&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;document.getElementById(id).innerHTML=new HTML
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变html属性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;document.getElementById(id).attribute=new value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变css&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;document.getElementById(id).style.property=new style
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTML Event Handlers&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;onblur ,onchange ,onclick ,ondblclick ,onfocus ,onkeydown ,onkeypress ,onkeyup ,onload ,onload ,onmousedown ,onmousemove ,onmouseout ,onmouseover ,onmouseup ,onreset ,onselect ,onsubmit ,onunload ,onunload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建节点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"div1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是一个段落&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是另一个段落&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
var para=document.createElement("p");
var node=document.createTextNode("这是新段落。");
para.appendChild(node);

var element=document.getElementById("div1");
element.appendChild(para);
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除节点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"div1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是一个段落。&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"p2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;这是另一个段落。&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
var parent=document.getElementById("div1");
var child=document.getElementById("p1");
parent.removeChild(child);
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-liu-bu-fen-qi-ta_1"&gt;第六部分：其他&lt;/h2&gt;
&lt;h3 id="1zheng-ze"&gt;1.正则&lt;/h3&gt;
&lt;p&gt;RegExp 对象用于存储检索模式。
通过 new 关键词来定义 RegExp 对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var patt1=new RegExp("e");
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RegExp 对象的方法
RegExp 对象有 3 个方法：test()、exec() 以及 compile()。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var patt1=new RegExp("e");
patt1.test("The best things in life are free"); //true

patt1.exec("The best things in life are free"); //["e"]

var patt1=new RegExp("e","g");
do
{
    result=patt1.exec("The best things in life are free");
    document.write(result);
}while (result!=null)

compile() 方法用于改变 RegExp。
compile() 既可以改变检索模式，也可以添加或删除第二个参数

var patt1=new RegExp("e");
document.write(patt1.test("The best things in life are free"));
patt1.compile("d");
document.write(patt1.test("The best things in life are free"));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/33054/"&gt;JavaScript中的正则有几个不同于其他语言的地方&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2thisguan-jian-zi"&gt;2.this关键字&lt;/h3&gt;
&lt;p&gt;"this"是一个特殊的关键字，用在方法中，指向调用该方法的对象。this的值
In JavaScript, as in most object-oriented programming languages, this is a special keyword that is used in methods to refer to the object on which a method is being invoked. The value of this is determined using a simple series of steps:&lt;/p&gt;
&lt;p&gt;1.调用方式是Function.call() 或者 Function.apply(), this将会被赋值为传递给.call()/.apply()的第一个参数.如果第一个参数是null或者undefined,this会指向global object.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// A function invoked using Function.call()
var myObject = {
    sayHello: function() {
        console.log( "Hi! My name is " + this.myName );
    },
    myName: "Rebecca"
};

var secondObject = {
    myName: "Colin"
};

myObject.sayHello();                    // "Hi! My name is Rebecca"
myObject.sayHello.call( secondObject ); // "Hi! My name is Colin"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.如果函数调用使用的是Function.bind(), this 会被赋值为传递给.bind()的第一个参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// A function created using Function.bind()

var myName = "the global object";
var sayHello = function() {
    console.log( "Hi! My name is " + this.myName );
};
var myObject = {
    myName: "Rebecca"
};
var myObjectHello = sayHello.bind( myObject );

sayHello();      // "Hi! My name is the global object"
myObjectHello(); // "Hi! My name is Rebecca"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.如果函数是作为对象的一个方法被调用，this指向该对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// A function being attached to an object at runtime.

var myName = "the global object";
var sayHello = function() {
    console.log( "Hi! My name is " + this.myName );
};
var myObject = {
    myName: "Rebecca"
};
var secondObject = {
    myName: "Colin"
};

myObject.sayHello = sayHello;
secondObject.sayHello = sayHello;

sayHello();              // "Hi! My name is the global object"
myObject.sayHello();     // "Hi! My name is Rebecca"
secondObject.sayHello(); // "Hi! My name is Colin"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当在一个大的命名空间内调用函数，可以通过给一个变量赋值减少代码量，但是，注意方法赋值和对象赋值，在调用时this的区别,可能会会导致bug.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myNamespace = {
    myObject: {
        sayHello: function() {
            console.log( "Hi! My name is " + this.myName );
        },
        myName: "Rebecca"
    }
};

var hello = myNamespace.myObject.sayHello;

hello(); // "Hi! My name is undefined"

or

var myNamespace = {
    myObject: {
        sayHello: function() {
            console.log( "Hi! My name is " + this.myName );
        },
        myName: "Rebecca"
    }
};

var obj = myNamespace.myObject;

obj.sayHello(); // "Hi! My name is Rebecca"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3yi-chang-chu-li"&gt;3.异常处理&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;try
{
    //在这里运行代码
}catch(err)
{
    //在这里处理错误
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;message() {&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;adddlert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Welcome guest!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"There was an error on this page.\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s2"&gt;"Error description: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s2"&gt;"Click OK to continue.\n\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;throw 语句允许我们创建自定义错误。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;正确的技术术语是：创建或抛出异常（&lt;/span&gt;&lt;span class="nx"&gt;exception&lt;/span&gt;&lt;span class="err"&gt;）。&lt;/span&gt;
&lt;span class="err"&gt;如果把&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="err"&gt;与&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="err"&gt;和&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="err"&gt;一起使用，那么您能够控制程序流，并生成自定义的错误消息。&lt;/span&gt;
&lt;span class="err"&gt;语法&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;exception&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction() {&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"empty"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"not a number"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"too high"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"too low"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mess"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Error: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4zuo-yong-yu"&gt;4.作用域&lt;/h3&gt;
&lt;h4 id="global-scope"&gt;Global Scope&lt;/h4&gt;
&lt;p&gt;如果一个变量或函数是全局的，可以在任意地方获取。对浏览器，全局作用域是window对象。&lt;/p&gt;
&lt;p&gt;如果一个变量在函数外面定义，则这个变量是全局的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var x = 9;

//anywhere
window.x or x
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="local-scope"&gt;Local Scope&lt;/h4&gt;
&lt;p&gt;在函数体中使用var定义的变量，是局部变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc() {&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError: x is not defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意如果不适用var进行定义，则该变量默认全局&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc() {&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediately-Invoked Function Expressions(IIFE) 可以避免全局变量(立刻定义和调用),在jQuery库中可以看到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(function() {
    var jQuery = { /* All my methods go here. */ };
    window.jQuery = jQuery;
})();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;局部变量在整个函数内可见，所以对于函数嵌套,内层可以访问外层变量:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer() {&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inner() {&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;外层不能访问内层变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer() {&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inner() {&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError: y is not defined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数中声明变量，没有使用var，javascript将作为全局变量处理，会到全局域去寻找该变量是否定义，如果未预定义，将会在全局域中定义该变量，造成一些不可预期的结果。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Functions have access to variables defined in the same scope.

var foo = "hello";

var sayHello = function() {
    console.log( foo );
};

sayHello(); // "hello"

console.log( foo ); // "hello"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全局变量和局部变量可以重名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var foo = "world";
var sayHello = function() {
    var foo = "hello";
    console.log( foo );
};

sayHello(); // "hello"

console.log( foo ); // "world"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When, within a function, you reference a variable defined in an outer scope, that function can see changes to the variable's value after the function is defined.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myFunction = function() {
    var foo = "hello";
    var myFn = function() {
        console.log( foo ); //指向该变量
    };
    foo = "world"; // change 变量对应的值变更了
    return myFn;
};

var f = myFunction();

f(); // "world"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个复杂的例子演示：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(function() {
    var baz = 1;
    var bim = function() {
        console.log( baz );
    };
    bar = function() {
        console.log( baz );
    };
})();

console.log( baz ); // baz is not defined outside of the function, ReferenceError

bar(); //  1, 外部可见，全局的

bim(); // ReferenceError: bim is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;局部变量会在函数运行以后被删除。&lt;/p&gt;
&lt;p&gt;全局变量会在页面关闭后被删除。&lt;/p&gt;
&lt;h3 id="5bi-bao_1"&gt;5.闭包&lt;/h3&gt;
&lt;p&gt;可以参考 &lt;a href="https://learn.jquery.com/javascript-101/closures/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var buildMultiplier = function(x) {
    return function(y) {
        return x * y;
    }
}

var double = buildMultiplier(2);
var triple = buildMultiplier(3);

double(3); // =&amp;gt; 6
triple(3); // =&amp;gt; 9
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Closures are an extension of the concept of scope.&lt;/p&gt;
&lt;p&gt;通过闭包，函数可以获取在函数定义位置作用域范围内的变量&lt;/p&gt;
&lt;p&gt;闭包需要通过实例去理解。&lt;/p&gt;
&lt;p&gt;下面这个例子，最终每个函数的i将会是函数循环结果的最后一个值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Each function executed within the loop will reference
// the last value stored in i (5).
// This won't behave as we want it to - every 100 milliseconds, 5 will alert
for ( var i = 0; i &amp;lt; 5; i++ ) {
    setTimeout(function() {
        alert( i );
    }, i * 100 );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;闭包可以避免这种情况，为每个循环建立独立的可见范围--将变量的每个独立值存储在其可见域内。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Using a closure to create a new private scope
// fix: “close” the value of i inside createFunction, so it won't change
var createFunction = function( i ) { //可见范围，i被保存，独立
    return function() {
        alert( i );
    };
};

for ( var i = 0; i &amp;lt; 5; i++ ) {
    setTimeout( createFunction( i ), i * 100 );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;闭包还通常和this关键字配合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Using a closure to access inner and outer object instances simultaneously.
var outerObj = {
    myName: "outer",
    outerFunction: function() {

        // Provide a reference to outerObj through innerFunction's closure
        var self = this;
        var innerObj = {
            myName: "inner",
            innerFunction: function() {
                console.log( self.myName, this.myName ); // "outer inner"
            }
        };

        innerObj.innerFunction();

        console.log( this.myName ); // "outer"
    }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6typeoftesting-type"&gt;6.typeof(Testing Type)&lt;/h3&gt;
&lt;p&gt;typeof关键之用于判断一个变量的类型&lt;/p&gt;
&lt;p&gt;type checking&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Testing the type of various variables.&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myRegExp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "function"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "object"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// "object" -- Careful!&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "string"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "number"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// "object" -- Careful!&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// "undefined"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;meh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// "undefined" -- undefined variable.&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="n"&gt;myRegExp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// "function" or "object" depending on environment.&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// probably an array (this is called "duck typing")&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s"&gt;"[object Array]"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Definitely an array!&lt;/span&gt;
    &lt;span class="c1"&gt;// This is widely considered as the most robust way&lt;/span&gt;
    &lt;span class="c1"&gt;// to determine if a specific value is an Array.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="7timers"&gt;7.Timers&lt;/h3&gt;
&lt;p&gt;Timers are started and stopped with the following four methods of the window object:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setTimeout(code_to_execute, wait_time_in_milliseconds)
clearTimeout(timer)

setInterval(code_to_execute, interval_in_milliseconds)
clearInterval(interval)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    var timer;
    function changeBg(color) {
        timer = setTimeout(function() { document.bgColor=color; }, 1000);
    }

    function stopTimer() {
        clearTimeout(timer);
    }
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"changeBg('red')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Change Background to Red&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"changeBg('white')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Change Background to White&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"stopTimer()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Wait! Don't do it!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="javaScript"></category></entry><entry><title>Vim技巧补充</title><link href="http://www.wklken.me/posts/2014/04/13/vim-addition-skills.html" rel="alternate"></link><published>2014-04-13T00:00:00+08:00</published><updated>2014-04-13T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-13:/posts/2014/04/13/vim-addition-skills.html</id><summary type="html">&lt;p&gt;读了一些文章，重新理一理，大部分是平常操作中容易忽视的,很容易忘了其实还可以这么干&lt;/p&gt;
&lt;h3 id="text-object"&gt;Text Object&lt;/h3&gt;
&lt;p&gt;y/d/c + text-object-operation&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    * iw …inner word
    * aw …a word
    * iW …inner WORD
    * aW …a WORD

    * is …inner sentence
    * as …a sentence

    * ip …inner paragraph
    * ap …a paragraph

    -------------------------

    * i( or i) …inner block
    * a( or a) …a block
    * i&amp;lt; or i&amp;gt; …inner block
    * a …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;读了一些文章，重新理一理，大部分是平常操作中容易忽视的,很容易忘了其实还可以这么干&lt;/p&gt;
&lt;h3 id="text-object"&gt;Text Object&lt;/h3&gt;
&lt;p&gt;y/d/c + text-object-operation&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    * iw …inner word
    * aw …a word
    * iW …inner WORD
    * aW …a WORD

    * is …inner sentence
    * as …a sentence

    * ip …inner paragraph
    * ap …a paragraph

    -------------------------

    * i( or i) …inner block
    * a( or a) …a block
    * i&amp;lt; or i&amp;gt; …inner block
    * a&amp;lt; or i&amp;gt; …a block
    * i{ or i} …inner block
    * a{ or a} …a block

    * i" …inner block
    * a" …a block
    * i` …inner block
    * a` …a block
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ti-huan"&gt;替换&lt;/h3&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:[range]s/pattern/string/[c,e,g,i]

range,范围， 1,7指从第一行到第七行  1,$第一行到最后一行
pattern,被替换字符串，可以用regexp来表示
string,替换成的字符串

c: confirm，每次替换前询问
e: 不提示error
g: globe, 不询问，整行替换[默认只替换第一个]
i: ignore,不区分大小写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:s/vivian/sky/
替换当前行第一个vivian为sky

:s/vivian/sky/g
替换当前行所有vivian为sky，g表示global

:n,$s/vivian/sky/
替换第n行开始到最后一行中每一行的第一个vivian为sky，n为数字

:.,$s/vivian/sky/g
替换当前行开始到最后一行中每一行所有vivian为sky

:%s/vivian/sky/g（等同于 :g/vivian/sky/g）
替换每一行中所有 vivian 为 sky

:s/vivian\//sky\//
替换当前行第一个vivian/为sky/，可以使用\作为转义符

:1,$s/^/some string/
在文件的第一行至最后一行的行首前插入some string

:%s/$/some string/g
在整个文件每一行的行尾添加some string

:%s/\s\+$//
去掉所有的行尾空格，“\s”表示空白字符（空格和制表符），“\+”对前面的字符匹配一次或多次（越多越好），“$”匹配行尾（使用“\$”表示单纯的“$”字符）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;反向引用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xiu-gai"&gt;修改&lt;/h3&gt;
&lt;p&gt;1.字符修改-大小写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v选中, U切换大写，u切花小写
~      光标所在之处字符大小写呼唤
guw    光标下的单词变为小写
gUw    光标下的单词变为大写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.字符互换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xp  左右交换光标处两字符的位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.行-合并&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;J   上下两行连起来
选中多行，然后 J    多行连起来
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.操作&lt;/p&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c{motion}
删除并进入输入模式 c$  ct!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ciw  change inner word, 修改当前光标下单词
cis  change inner sentence, 修改一整个句子

#text-object
ci"
ci(

cw   修改一个单词
cc   change the whole line,剪切光标所在行并进入插入模式

ctx  剪切光标至字符x，进入插入模式
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shan-chu"&gt;删除&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dG 删除至文件末尾
dgg 删除只文件开头
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cha-zhao-he-tiao-zhuan"&gt;查找和跳转&lt;/h3&gt;
&lt;p&gt;跳转到当前行某个位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fx  到第一个x
2fx 到第二个x

Fx  往回查找
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跳转到某行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;50G 移动到 50行
:50
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;标记并跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#对26个字母有效
ma 标记书签
'a 跳到书签
'.  最后一次编辑的地方
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;段落跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{   上一段(以空白行分隔)
}   下一段(以空白行分隔)

) 下一个句子
( 上一个句子
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xuan-zhong"&gt;选中&lt;/h3&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v   按字符
V   按行
ctrl+v 按块
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;va&amp;lt;object&amp;gt; or vi&amp;lt;object&amp;gt;

object ：
    w 一个单词， W 一个以空格为分隔的单词，
    s 一个句子，
    p 一个段落。
    也可以是一个特别的字符："、 '、 )、 }、 ]。
注意，这里v换成d/y就成了删除，拷贝的命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;假设你有一个字符串
    (map (+) ("foo")).

而光标键在第一个 o 的位置。
vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))'"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选中括号里的内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v% 光标在一侧括号
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全选&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ggVG
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bao-cun-he-tui-chu"&gt;保存和退出&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e file 打开文件
ZQ  无条件退出
ZZ  存盘退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存部分内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:1,10 w a.txt
:1,10 w &amp;gt;&amp;gt; a.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另存为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:saveas new_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行外部命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:!cmd
:r!cmd  指向外部命令的结果插入到当前
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="guan-yu-vimxue-xi-de-jian-yi"&gt;关于vim学习的建议&lt;/h3&gt;
&lt;p&gt;来自网上两篇文章&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;更多的是技能而非知识
更多的是双手而非头脑
Vim技巧
不贪图一下子掌握
不断实践
不是由头脑来搜索该用哪条操作技巧
而是建立手指的自然反应
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一定要阅读一下Bram Moolenaar(vim的作者)写的Seven habits of effective text editing(七个有效的文本编辑习惯)&lt;/p&gt;
&lt;p&gt;七个习惯&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;快速移动
不要两次键入同样的东西
错误修复
经常需要编辑不止一个文件
协同作业
文本是结构化的
养成习惯
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;大写的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D 删除当前到行尾，不要用d$
Y 复制整行，建议改写成复制当前到行尾
C 修改当前到行尾
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;repeat:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;. → (小数点) 可以重复上一次的命令
N&amp;lt;command&amp;gt; → 重复某个命令N次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;宏录制和使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;待补充
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>读书笔记--高效能人士的七个习惯+执行4原则</title><link href="http://www.wklken.me/posts/2014/03/30/highly-effective-and-execution.html" rel="alternate"></link><published>2014-03-30T00:00:00+08:00</published><updated>2014-03-30T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-30:/posts/2014/03/30/highly-effective-and-execution.html</id><summary type="html">&lt;p&gt;今天打算写的是，关于两本“成功学”的书&lt;/p&gt;
&lt;p&gt;《高效能人士的七个习惯》和《高效能人士的执行4原则》&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面1" src="/imgs/books/the-7-habits-of-highly-effective-people.jpg"/&gt;
&lt;img alt="封面2" src="/imgs/books/the-4-disciplines-of-execution.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;一直以来对“成功学”都不感冒，“虚”，“扯淡”，“毫无意义”，一直没搞明白为什么那么多人，会专门去花费大量金钱学习和研究这些东西&lt;/p&gt;
&lt;p&gt;以前不感冒，当然，现在也是，一如既往&lt;/p&gt;
&lt;p&gt;以上两本书，一本书是刚毕业那会部门老大推荐的，跳槽之后，新的老大也推了这本书，所以从书堆里翻出来，认认真真地看完了（很惊讶走了那么多地方书还能留着），后面一本是亚马逊kindle上捞到的。&lt;/p&gt;
&lt;p&gt;这两本，算是成功学，也不算，很多东西讲到了点上，有些道理，认同，也会去遵循&lt;/p&gt;
&lt;p&gt;值得一看，能从中能借鉴一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-qi-ge-xi-guan"&gt;高效能人士的七个习惯&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图1" src="/imgs/books/the-7-habits-of-highly-effective-people-concepts.jpg"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;习惯一：积极主动——个人愿景的原则
习惯二：以终为始——自我领导的原则
习惯三：要事第一——自我管理的原则
习惯四：双赢思维——人际领导的原则
习惯五 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;今天打算写的是，关于两本“成功学”的书&lt;/p&gt;
&lt;p&gt;《高效能人士的七个习惯》和《高效能人士的执行4原则》&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面1" src="/imgs/books/the-7-habits-of-highly-effective-people.jpg"/&gt;
&lt;img alt="封面2" src="/imgs/books/the-4-disciplines-of-execution.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;一直以来对“成功学”都不感冒，“虚”，“扯淡”，“毫无意义”，一直没搞明白为什么那么多人，会专门去花费大量金钱学习和研究这些东西&lt;/p&gt;
&lt;p&gt;以前不感冒，当然，现在也是，一如既往&lt;/p&gt;
&lt;p&gt;以上两本书，一本书是刚毕业那会部门老大推荐的，跳槽之后，新的老大也推了这本书，所以从书堆里翻出来，认认真真地看完了（很惊讶走了那么多地方书还能留着），后面一本是亚马逊kindle上捞到的。&lt;/p&gt;
&lt;p&gt;这两本，算是成功学，也不算，很多东西讲到了点上，有些道理，认同，也会去遵循&lt;/p&gt;
&lt;p&gt;值得一看，能从中能借鉴一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-qi-ge-xi-guan"&gt;高效能人士的七个习惯&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图1" src="/imgs/books/the-7-habits-of-highly-effective-people-concepts.jpg"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;习惯一：积极主动——个人愿景的原则
习惯二：以终为始——自我领导的原则
习惯三：要事第一——自我管理的原则
习惯四：双赢思维——人际领导的原则
习惯五: 知彼解己——移情沟通的原则
习惯六: 统合综效——创造性合作的原则
习惯七：不断更新——平衡的自我更新的原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xi-guan-yi-ji-ji-zhu-dong-ge-ren-yuan-jing-de-yuan-ze"&gt;习惯一：积极主动——个人愿景的原则&lt;/h4&gt;
&lt;p&gt;人性的本质是主动而非被动地——人类确实能主动努力以提升生命价值(主观能动性)&lt;/p&gt;
&lt;p&gt;积极主动，不仅指行事的态度，还意味着为人一定要对自己的人生负责&lt;/p&gt;
&lt;p&gt;积极主动的人专注于“影响圈”，专心做自己力所能及的事情，能量是积极的，是影响圈不断扩大&lt;/p&gt;
&lt;p&gt;影响圈的核心就是，作出承诺与信守诺言的能力&lt;/p&gt;
&lt;p&gt;其他习惯的基础！！！&lt;/p&gt;
&lt;h4 id="xi-guan-er-yi-zhong-wei-shi-zi-wo-ling-dao-de-yuan-ze"&gt;习惯二： 以终为始——自我领导的原则&lt;/h4&gt;
&lt;p&gt;以你的人生目标作为衡量一切的标准。由个人最重视的期许或价值观来决定一切&lt;/p&gt;
&lt;p&gt;在做任何事情之前，都需要认清方向——定目标&lt;/p&gt;
&lt;p&gt;你以什么为中心？你为谁而活？&lt;/p&gt;
&lt;p&gt;以原则为中心！！！！&lt;/p&gt;
&lt;p&gt;以永恒不变的原则作为生活重心，就能建立高效能的思维定势，也就能正确审视所有其他的生活中心。(一个人的思维定式能决定他的态度和行为)&lt;/p&gt;
&lt;p&gt;原因：主动的选择，没有受到环境和他人的影响；最有效的选择，且长期可预料；基于原则所作出的选择，能提高自身的价值。&lt;/p&gt;
&lt;p&gt;所以，撰写使命宣言并付诸实践(确定角色和目标)&lt;/p&gt;
&lt;p&gt;书写个人使命宣言 —— 即人生哲学或基本信念
（个人宪法，基于正确原则的个人使命宣言也同样是评价一切的标准）&lt;/p&gt;
&lt;h4 id="xi-guan-san-yao-shi-di-yi-zi-wo-guan-li-de-yuan-ze"&gt;习惯三：要事第一——自我管理的原则&lt;/h4&gt;
&lt;p&gt;把最重要的事情放在第一位，先做重要的事情&lt;/p&gt;
&lt;p&gt;矩阵： 重要/不重要  *  紧急/不紧急&lt;/p&gt;
&lt;p&gt;关注重要不紧急的事情&lt;/p&gt;
&lt;p&gt;重要不紧急的事情： 建立人际关系，撰写使命宣言，规划长期目标，防患于未然等等&lt;/p&gt;
&lt;p&gt;在必要时，勇于说“不”&lt;/p&gt;
&lt;p&gt;学会授权&lt;/p&gt;
&lt;h4 id="xi-guan-si-shuang-ying-si-wei-ren-ji-ling-dao-de-yuan-ze"&gt;习惯四：双赢思维——人际领导的原则&lt;/h4&gt;
&lt;p&gt;双赢 - 不断地在人际交往中寻求双边利益&lt;/p&gt;
&lt;p&gt;要明确意识到其重要性&lt;/p&gt;
&lt;p&gt;基础：信任&lt;/p&gt;
&lt;p&gt;双赢关系&lt;/p&gt;
&lt;p&gt;双赢的精髓就是信用，即情感账户&lt;/p&gt;
&lt;p&gt;双赢过程：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.要从对方的角度看问题，真正理解对方的想法
2.认清主要问题和顾虑（而非立场）
3.确定大家都能接受的结果
4.实现这种结果的各种可能途径
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xi-guan-wu-zhi-bi-jie-ji-yi-qing-gou-tong-de-yuan-ze"&gt;习惯五 知彼解己——移情沟通的原则&lt;/h4&gt;
&lt;p&gt;首先寻求去了解对方，然后再争取让对方了解自己。（进行有效人际交流的关键）&lt;/p&gt;
&lt;p&gt;你真的听懂了么？&lt;/p&gt;
&lt;p&gt;移情聆听&lt;/p&gt;
&lt;p&gt;以理解为目的的聆听，要求听者站在说话者的角度理解他们的思维模式和感受&lt;/p&gt;
&lt;p&gt;不仅要耳到，还要眼到，心到。用眼睛去观察，用心灵去体会&lt;/p&gt;
&lt;p&gt;有效的沟通：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.第一阶段，复述语句，至少能使人专心聆听
2.第二阶段，加入解释，纯用自己的词句表达，用左脑的逻辑思考去理解
3.第三阶段，深入个人的感觉，右脑发挥作用，开始体会对方的心情
4.即加以理解，又带有感情，左右脑并用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你真正爱一个人，那么花时间了解对方将有益于今后的坦诚相待&lt;/p&gt;
&lt;h4 id="xi-guan-liu-tong-he-zong-xiao-chuang-zao-xing-he-zuo-de-yuan-ze"&gt;习惯六 统合综效——创造性合作的原则&lt;/h4&gt;
&lt;p&gt;统合综效的基本心态是——如果一位具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会的奥妙，值得加以理解&lt;/p&gt;
&lt;p&gt;有分歧才有收获&lt;/p&gt;
&lt;p&gt;统合综效就是整体大于部分之和&lt;/p&gt;
&lt;p&gt;统合综效的精髓就是判断和尊重差异，取长补短&lt;/p&gt;
&lt;p&gt;所谓统合综效的沟通，是指敞开胸怀，接纳一切奇怪的想法，同时也贡献自己的浅见&lt;/p&gt;
&lt;p&gt;尊重差异，要尊重，不偏激&lt;/p&gt;
&lt;p&gt;即使处于不利的境地，也不应该放弃追求统合综效。&lt;/p&gt;
&lt;h4 id="xi-guan-qi-bu-duan-geng-xin-ping-heng-de-zi-wo-geng-xin-de-yuan-ze"&gt;习惯七：不断更新——平衡的自我更新的原则&lt;/h4&gt;
&lt;p&gt;拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠&lt;/p&gt;
&lt;p&gt;自我提升和完善的四个层面：身体，精神，智力，社会/情感&lt;/p&gt;
&lt;p&gt;不断更新，意味着要兼顾这四种要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身体层面：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;健康饮食、充足休息以及定期锻炼&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    耐力：源于有氧运动
    韧性：源于伸展运动
    力量：源于持久的肌肉运动
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;精神层面：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人的本质，核心，对价值体系的坚持，是生活中非常私人但是至关重要的领域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智力层面：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要靠教育，借此不断学习知识，魔力心智，开阔视野&lt;/p&gt;
&lt;p&gt;养成定期阅读优秀文学作品的习惯&lt;/p&gt;
&lt;p&gt;另一种有效的方式是写作，不断记录自己的想法，经历深刻见解和学习心得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社会、情感层面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在与他人的日常交往中完成，还需要必要的练习&lt;/p&gt;
&lt;p&gt;坚守原则，肯定自我，与人为善，相信人生不止输赢两种抉择&lt;/p&gt;
&lt;p&gt;平衡，要把握平衡！！！！！&lt;/p&gt;
&lt;p&gt;螺旋式上升，良性循环，学习-坚持-时间，并沿着螺旋式上升的路线不断提高实践的层次&lt;/p&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-zhi-xing-4yuan-ze_1"&gt;高效能人士的执行4原则&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图2" src="/imgs/books/the-4-disciplines-of-execution-concepts.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="yuan-ze-1ju-jiao-zui-zhong-yao-de-mu-biao-focus-on-the-wildly-important"&gt;原则1：聚焦最重要的目标(Focus on the Wildly Important)&lt;/h4&gt;
&lt;p&gt;将你最好的精力集中到一两个重要的目标（能够使你得到革命性结果的事情）&lt;/p&gt;
&lt;p&gt;日常事务（周而复始，要做但不是重点）-&amp;gt;    &amp;lt;- 新目标（聚集精力在此）&lt;/p&gt;
&lt;p&gt;好主意的数量总会超出执行能力的范围（learn to say no）&lt;/p&gt;
&lt;p&gt;（How）最重要的目标是能够给你的组织带来巨大变化的目标：如果其他方便都保持现状的话，改进哪一个会给我们带来巨大的收益？&lt;/p&gt;
&lt;p&gt;两类：来源于日常范围之内的（改进提升）来源于日常范围之外的（创新）&lt;/p&gt;
&lt;p&gt;注意：没有任何团队可以同时关注两个以上的最重要目标。你选择的局部战斗必须要为赢得整个战争服务。领导可以否决，但不能独断。所有最重要的目标必须要有完成的时限和标准（SMART原则）&lt;/p&gt;
&lt;h4 id="yuan-ze-2guan-zhu-yin-ling-xing-zhi-biao-act-on-the-lead-measures"&gt;原则2：关注引领性指标(Act on the Lead Measures)&lt;/h4&gt;
&lt;p&gt;引领性指标是指那些和达成最终目标关系最为紧密的事情&lt;/p&gt;
&lt;p&gt;滞后性指标（不能改变些什么，已经发生了，更容易获得，更直观）可以告诉你是否完成了目标，而引领性指标（预见性，可控性）可以教会你怎样做才能去完成目标&lt;/p&gt;
&lt;p&gt;引领性指标，指针对最终目标而制定的，可预见可控的阶段性目标（杠杆作用-&amp;gt;高效益）
显著特征：预见性，意味着一旦某个引领性指标发生变化，你就可以根据这个推断出滞后性指标之后会有什么变化。可控的，可以被你的团队所影响，你们可以靠自己的力量使促使引领性指标发生变化&lt;/p&gt;
&lt;p&gt;引领性指标的数据往往比滞后性指标数据更难以获取&lt;/p&gt;
&lt;h4 id="yuan-ze-3jian-chi-ji-li-xing-ji-fen-biao-keep-a-compelling-scoreboard"&gt;原则3：坚持激励性计分表(Keep a Compelling Scoreboard)&lt;/h4&gt;
&lt;p&gt;这是一条激励士气的原则&lt;/p&gt;
&lt;p&gt;确保每个人都能随时获知自己的成绩，这样他们才能知道自己领先还是落后（当面对成绩时，人们的表现将会发生变化）&lt;/p&gt;
&lt;p&gt;将引领性指标和滞后性指标-&amp;gt;看得见摸得着的量化指标&lt;/p&gt;
&lt;p&gt;一个伟大的团队，在任何时候都知道自己的进度是否成功&lt;/p&gt;
&lt;p&gt;建立激励性的选手型记分表：1.它是否简单？2.它是否显而易见3.是否能同时展示引领性指标和滞后性指标4.能否一眼从记分表上看出是否胜利&lt;/p&gt;
&lt;h4 id="yuan-ze-4jian-li-gui-lu-de-wen-ze-zhi-create-a-cadence-of-accountability"&gt;原则4：建立规律的问责制(Create a Cadence of Accountability)&lt;/h4&gt;
&lt;p&gt;建立有规律的责任机制，一个对过去表现和未来计划的有规律的周期性问责&lt;/p&gt;
&lt;p&gt;最重要目标会议：每周，20-30分钟之内，有一套完整流程并快速进行，为工作确定每一周的节奏，从而带动最重要目标的不断进展。&lt;/p&gt;
&lt;p&gt;两条原则：1.应该在每周的同一天的同一时间召开 2.永远不要把日常事务带到最重要目标会议中来&lt;/p&gt;
&lt;p&gt;组成部分：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.问责：汇报工作计划的完成情况
2.回顾记分表：寻找成功和不足
3.计划：清除障碍，作出新计划
&lt;/pre&gt;&lt;/div&gt;</content><category term="books"></category></entry><entry><title>Golang笔记-06-struct</title><link href="http://www.wklken.me/posts/2014/03/09/06-struct.html" rel="alternate"></link><published>2014-03-09T06:00:00+08:00</published><updated>2014-03-09T06:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-09:/posts/2014/03/09/06-struct.html</id><summary type="html">&lt;h3 id="struct"&gt;struct&lt;/h3&gt;
&lt;p&gt;struct，一组字段的集合，类似其他语言的class&lt;/p&gt;
&lt;p&gt;放弃了大量包括继承在内的面向对象特性，只保留了组合(composition)这个最基础的特性&lt;/p&gt;
&lt;h4 id="1sheng-ming-ji-chu-shi-hua"&gt;1.声明及初始化&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type person struct {
    name string
    age  int
}

//初始化

func main() {
    var P person

    P.name = "tom"
    P.age = 25
    fmt.Println(P.name)

    P1 := person{"Tom1", 25}
    fmt.Println(P1.name)

    P2 := person{age: 24, name: "Tom"}
    fmt.Println(P2 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="struct"&gt;struct&lt;/h3&gt;
&lt;p&gt;struct，一组字段的集合，类似其他语言的class&lt;/p&gt;
&lt;p&gt;放弃了大量包括继承在内的面向对象特性，只保留了组合(composition)这个最基础的特性&lt;/p&gt;
&lt;h4 id="1sheng-ming-ji-chu-shi-hua"&gt;1.声明及初始化&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type person struct {
    name string
    age  int
}

//初始化

func main() {
    var P person

    P.name = "tom"
    P.age = 25
    fmt.Println(P.name)

    P1 := person{"Tom1", 25}
    fmt.Println(P1.name)

    P2 := person{age: 24, name: "Tom"}
    fmt.Println(P2.name)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2structde-ni-ming-zi-duan-ji-cheng"&gt;2.struct的匿名字段(继承)&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Human struct {
    name string
    age int
    weight int
}

tyep Student struct {
    Human //匿名字段，默认Student包含了Human的所有字段
    speciality string
}

mark := Student(Human{"mark", 25, 120}, "Computer Science")

mark.name
mark.age
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;能够实现字段继承，当字段名重复的时候，优先取外层的,可以通过指定struct名还决定取哪个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mark.Human = Human{"a", 55, 220}
mark.Human.age -= 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;struct不仅可以使用struct作为匿名字段，自定义类型、内置类型都可以作为匿名字段,而且可以在相应字段上做函数操作&lt;/p&gt;
&lt;h4 id="3method"&gt;3.method&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Rect struct {
    x, y float64
    width, height float64
}

//method

Reciver 默认以值传递，而非引用传递，还可以是指针
指针作为Receiver会对实例对象的内容发生操作，而普通类型作为Receiver仅仅是以副本作为操作对象，而不对原实例对象发生操作

func (r ReciverType) funcName(params) (results) {

}

如果一个method的receiver是*T，调用时，可以传递一个T类型的实例变量V，而不必用&amp;amp;V去调用这个method

func (r *Rect) Area() float64 {
    return r.width * r.height
}

func (b *Box) SetColor(c Color) {
    b.color = c
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4methodji-cheng-he-zhong-xie_1"&gt;4.method继承和重写&lt;/h3&gt;
&lt;p&gt;采用组合的方式实现继承&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Human struct {
    name string
}

type Student struct {
    Human
    School string
}

func (h *Human) SayHi() {
    fmt.Println(h.name)
}

//则Student和Employee的实例可以调用
func main() {
    h := Human{name: "human"}
    fmt.Print(h.name)
    h.SayHi()

    s := Student{Human{"student"}}
    s.SayHi()

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以进行方法重写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;funct (e *Student) SayHi() {
    e.Human.SayHi()
    fmt.Println(e.School)
}
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category></entry><entry><title>读书笔记——我编程，我快乐</title><link href="http://www.wklken.me/posts/2014/03/08/the-passionate-programmer.html" rel="alternate"></link><published>2014-03-08T00:00:00+08:00</published><updated>2014-03-08T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-08:/posts/2014/03/08/the-passionate-programmer.html</id><summary type="html">&lt;p&gt;这是读到的第四本和37signals有联系的书&lt;/p&gt;
&lt;p&gt;春节在回家的动车上读完的(飞机火车阅读效率加成&amp;gt;_&amp;lt;)，有些收获，今天翻出来重读了一次&lt;/p&gt;
&lt;p&gt;一系列观点和方法论，很多还是值得借鉴和思考的&lt;/p&gt;
&lt;p&gt;记录观点以及自己一两句话的总结整理&lt;/p&gt;
&lt;p&gt;这本书还是值得一读的，建议入手&lt;/p&gt;
&lt;p&gt;PS:年后买纸质书需三思再三思，开始多读电子书吧&lt;/p&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选好技术和领域: 通才和专家
2.跟上潮流
3.学会更好更高效地工作：目标，计划，沟通，协作，写作，执行力....很多（重点）
4.避免思维僵固
5.写博客
6.维护自己的开源项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/passionate-programmer.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;帮你成就更卓越、更有意义的人生，工作只是其中的一部分&lt;/p&gt;
&lt;p&gt;如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活&lt;/p&gt;
&lt;p&gt;制定自己的计划&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选择市场——关注的技术和商业领域
2.投资——知识和技术
3.执行 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;这是读到的第四本和37signals有联系的书&lt;/p&gt;
&lt;p&gt;春节在回家的动车上读完的(飞机火车阅读效率加成&amp;gt;_&amp;lt;)，有些收获，今天翻出来重读了一次&lt;/p&gt;
&lt;p&gt;一系列观点和方法论，很多还是值得借鉴和思考的&lt;/p&gt;
&lt;p&gt;记录观点以及自己一两句话的总结整理&lt;/p&gt;
&lt;p&gt;这本书还是值得一读的，建议入手&lt;/p&gt;
&lt;p&gt;PS:年后买纸质书需三思再三思，开始多读电子书吧&lt;/p&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选好技术和领域: 通才和专家
2.跟上潮流
3.学会更好更高效地工作：目标，计划，沟通，协作，写作，执行力....很多（重点）
4.避免思维僵固
5.写博客
6.维护自己的开源项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/passionate-programmer.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;帮你成就更卓越、更有意义的人生，工作只是其中的一部分&lt;/p&gt;
&lt;p&gt;如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活&lt;/p&gt;
&lt;p&gt;制定自己的计划&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选择市场——关注的技术和商业领域
2.投资——知识和技术
3.执行——更好地产出
4.市场
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-zhang-xuan-ze-shi-chang"&gt;第一章 选择市场&lt;/h3&gt;
&lt;h5 id="1-wen-ding-cheng-shou-de-ji-zhu-huan-shi-wei-cheng-shou-de-ji-zhu"&gt;1. 稳定成熟的技术还是未成熟的技术？&lt;/h5&gt;
&lt;p&gt;前瞻性，业界&lt;/p&gt;
&lt;p&gt;决定权在你自己手中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论做出哪种选择，最终的目的是，产生利润&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="2-gong-ying-he-xu-qiu"&gt;2. 供应和需求&lt;/h5&gt;
&lt;p&gt;供需关系导致的薪资变化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要再价格上竞争，你承受不起&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要在能力上与之抗争,更高层面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发现市场上的不平衡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="3-zhi-hui-bian-cheng-shi-bu-gou-de"&gt;3. 只会编程是不够的&lt;/h5&gt;
&lt;p&gt;必须要深入了解你所处的领域&lt;/p&gt;
&lt;p&gt;你的行业经历应该成为你的重要才能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仔细思考在哪个商业领域投入时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="4-zuo-tuan-dui-zhong-zui-chai-de"&gt;4. 做团队中最差的&lt;/h5&gt;
&lt;p&gt;和优秀的人一起工作&lt;/p&gt;
&lt;p&gt;与一个团队合作时间长了，会对自身的能力产生持久的影响&lt;/p&gt;
&lt;p&gt;你身边的人会对你产生很大的影响，明智地选择你的圈子&lt;/p&gt;
&lt;h5 id="5-zai-si-wei-shang-tou-zi"&gt;5. 在思维上投资&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;没人给过我机会....?要学会抓住机遇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="6-bu-yao-ting-cong-fu-mu"&gt;6. 不要听从父母&lt;/h5&gt;
&lt;p&gt;父母总不希望儿女去冒险&lt;/p&gt;
&lt;p&gt;在职业道路上，需要一些有目的性的冒险。别让恐惧征服了你&lt;/p&gt;
&lt;h5 id="7-zuo-yi-ming-tong-cai"&gt;7. 做一名通才&lt;/h5&gt;
&lt;p&gt;传说中的全栈？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通才很少，所以珍贵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IT职业分解&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 职业阶梯的各层
- 平台和操作系统
- 代码和数据
- 系统和应用
- 业务和IT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;学会适应以及胜任不同角色的价值所在&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的技术应该超越技术平台&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="8-cheng-wei-yi-ming-zhuan-jia"&gt;8. 成为一名专家&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;很多人认为专攻某种技术就简单地意味着不知道其他技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很显然，这是错误的&lt;/p&gt;
&lt;p&gt;能搞定工作中遇到80%可预见的问题，并且有足够的知识来应付另外还未出现的20%的问题&lt;/p&gt;
&lt;h5 id="9-qie-ji-gu-zhu-yi-zhi"&gt;9. 切忌孤注一掷&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;以特定技术厂商为中心的观点，缺乏远见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确如此，厂商悲催了，你承受不了代价&lt;/p&gt;
&lt;h5 id="10-re-ai-ta-bu-ran-jiu-chi-kai-ta"&gt;10. 热爱它，不然就离开它&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;工作，因为你无法停止工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="di-er-zhang-zai-chan-pin-shang-tou-zi_1"&gt;第二章 在产品上投资&lt;/h3&gt;
&lt;h5 id="11-xue-hui-diao-yu"&gt;11. 学会钓鱼&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;需要主动问，不要等着别人来告诉你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要自己主动学习，自学能力&lt;/p&gt;
&lt;h5 id="12-xue-xi-xing-ye-shi-ru-he-yun-zhuan-de"&gt;12. 学习行业是如何运转的&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;只有了解了一个行业后，你才能创造性地有所建树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;业务领域很重要&lt;/p&gt;
&lt;h5 id="13-xun-zhao-liang-shi"&gt;13. 寻找良师&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;可以依赖别人，但需确保这个人是靠得住的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;减少试错成本&lt;/p&gt;
&lt;h5 id="14-zuo-yi-ming-liang-shi"&gt;14. 做一名良师&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;想要弄明白自己是不是真的懂得某一知识，那就把它讲给其他人听&lt;/p&gt;
&lt;p&gt;做导师不会下岗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="15-lian-xi-lian-xi-zai-lian-xi"&gt;15. 练习、练习、再练习&lt;/h5&gt;
&lt;p&gt;需要刻意练习&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在极限处练习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="16-zuo-shi-de-fang-fa"&gt;16. 做事的方法&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;想要拥有自己的步骤，那就执行它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习，实践某些方法论，优化工作流&lt;/p&gt;
&lt;h5 id="17-zhan-zai-ju-ren-de-jian-bang-shang"&gt;17. 站在巨人的肩膀上&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;从现有的程序中得到领悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习其他程序猿是如何系统地解决某一特定问题的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用现有的程序反思自己的程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要有更开阔的眼界&lt;/p&gt;
&lt;h5 id="18-zai-gong-zuo-zhong-jiang-zi-ji-zi-dong-hua"&gt;18. 在工作中，将自己自动化&lt;/h5&gt;
&lt;p&gt;找出消耗你时间的东西，自动化之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-san-zhang-zhi-xing_1"&gt;第三章 执行&lt;/h3&gt;
&lt;h5 id="19-jiu-shi-xian-zai"&gt;19. 就是现在&lt;/h5&gt;
&lt;p&gt;流程问题？拖延症等？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就现在，我们能做些什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;帕金森定律： 工作会自动膨胀到占满所有可用的时间&lt;/p&gt;
&lt;p&gt;开始行动，不要总是安于现状，要做推动者(活血这正是我目前缺乏的)&lt;/p&gt;
&lt;h5 id="20-du-xin-zhu"&gt;20. 读心术&lt;/h5&gt;
&lt;p&gt;仔细观察，倾听，了解所需要做的，所能改善的(前提，你了解的信息时正确的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读心术用得好，人们就会信任你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="21-mei-ri-cheng-ji"&gt;21. 每日成绩&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;每天都有可汇报的成绩&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录目标，并记录下来&lt;/p&gt;
&lt;h5 id="22-bie-wang-liao-ni-zai-wei-shui-gong-zuo"&gt;22. 别忘了你在为谁工作&lt;/h5&gt;
&lt;p&gt;确保你的目标和工作与你公司的目标一致&lt;/p&gt;
&lt;p&gt;即使不愿意，但需要绝对的执行力&lt;/p&gt;
&lt;p&gt;在结构良好的环境中，经历的目标，就是整个团队的目标，解决了经历的问题，就是解决了整个团队的问题&lt;/p&gt;
&lt;p&gt;好的经理的职责应该是为团队设定优先级，确保团队具备完成工作的一切需要，保证团队保持干劲和工作效率，并出示团队最终顺利完成工作。&lt;/p&gt;
&lt;h5 id="23-an-fen-shou-ji"&gt;23. 安分守己&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;要有雄心，但不必路人皆知&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;专注于现在的工作&lt;/p&gt;
&lt;p&gt;做好当下正确的事情&lt;/p&gt;
&lt;h5 id="24-jin-tian-wo-neng-ba-gong-zuo-zuo-dao-duo-hao"&gt;24. 今天我能把工作做到多好？&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;你能为工作增添多少乐趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发挥创造力来应对那些平凡的工作&lt;/p&gt;
&lt;h5 id="25-ni-de-jie-zhi-duo-shao"&gt;25. 你的价值多少&lt;/h5&gt;
&lt;p&gt;了解公司在你身上的开销和你的产出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问自己"今天实现自己的价值了么"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="26-yi-tong-shui-zhong-de-e-luan-shi"&gt;26. 一桶水中的鹅卵石&lt;/h5&gt;
&lt;p&gt;如果你明天离开公司，对公司造成的影响与其他同事离开有没有区别？&lt;/p&gt;
&lt;p&gt;永远不要高枕无忧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小心，别让成功冲昏了头脑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会让自己不可替代，要建立一种友好的工作关系&lt;/p&gt;
&lt;p&gt;同时也要知道，每个人都不是不可替代的，清楚知道这一点，并努力工作&lt;/p&gt;
&lt;h5 id="27-ai-shang-wei-hu"&gt;27. 爱上维护&lt;/h5&gt;
&lt;p&gt;人们都喜欢创造&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;维护也可以成为自由和创造的沃土&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最小开支维持软件正常运行&lt;/p&gt;
&lt;p&gt;可以设计更可见的改进&lt;/p&gt;
&lt;p&gt;可以有机会和其他客户直接进行交流&lt;/p&gt;
&lt;p&gt;最讽刺的是，项目工作其实就是维护，只要项目团队写下来的第一行编码。&lt;/p&gt;
&lt;h5 id="28-8xiao-shi-ji-qing-ran-shao"&gt;28. 8小时激情燃烧&lt;/h5&gt;
&lt;p&gt;在工作上，更少的工作时间可以有更高的效率&lt;/p&gt;
&lt;p&gt;创造力和工作质量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做项目像是马拉松，而不是全速短跑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;减少工作时间，你的收获更多&lt;/p&gt;
&lt;h5 id="29-xue-xi-ru-he-shi-bai"&gt;29. 学习如何失败&lt;/h5&gt;
&lt;p&gt;带着防御性错失进行编程是很重要的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个错误的音调离正确的音调不过一步之遥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决计数、沟通或者项目管理中的错误&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 发现错误第一时间提出，不要企图隐瞒错误
- 接受批评
- 提供解决方法
- 寻求帮助
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;充满压力的时候是赢得忠诚的最好时机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="30-shuo-bu"&gt;30. 说"不"&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;为了避免失望而说“是”，就是在说谎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这不是个好习惯&lt;/p&gt;
&lt;p&gt;要勇于诚实&lt;/p&gt;
&lt;h5 id="31-bu-yao-kong-huang"&gt;31. 不要恐慌&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;英雄从不恐慌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恐慌会导致丧失判断力&lt;/p&gt;
&lt;p&gt;遇到问题，分析情境，获取意见，换角度思考问题&lt;/p&gt;
&lt;h5 id="32-shuo-chu-lai-xing-dong-zhan-shi"&gt;32. 说出来、行动、展示&lt;/h5&gt;
&lt;p&gt;承诺 - 做计划&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;状态报告可以帮助你推销自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做计划时要时刻谨记的是，出现在计划上的每一项工作必须是要与后续工作相关，要么被完成、推迟、去除或被替代&lt;/p&gt;
&lt;p&gt;碰到问题，做出计划来解决问题，而不是抱怨&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-si-zhang-tui-xiao-bu-jin-jin-shi-ying-he_1"&gt;第四章 推销,不仅仅是迎合&lt;/h3&gt;
&lt;p&gt;表面上看，宣传自己很简单&lt;/p&gt;
&lt;p&gt;你的目标有两个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 让别人知道你的存在
- 以及让他们知道，当他们碰到难题时，你是那个可以解决问题的人
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="33-bu-yao-hu-shi-gan-jue"&gt;33. 不要忽视感觉&lt;/h5&gt;
&lt;p&gt;如果你非常出色，但并没有人知道，那你真的优秀么？谁会在意？没人会在意(很残酷，但是是对的)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绩效考核永远不会是客观的(很不幸，这句也是对的)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何地方对你的评价都是主观的，意味着对你做出的评价总是基于别人对你的感觉&lt;/p&gt;
&lt;h5 id="34-tan-xian-xiang-dao"&gt;34. 探险向导&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;客户害怕您&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让人们了解到你的沟通能力是非常重要的&lt;/p&gt;
&lt;h5 id="35-xue-hui-gou-tong-shan-yu-xie-zuo"&gt;35. 学会沟通，善与写作&lt;/h5&gt;
&lt;p&gt;文字表达能力非常重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你自己就是你需要解释的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="36-dao-chang"&gt;36. 到场&lt;/h5&gt;
&lt;p&gt;能够与上司和客户面对面地沟通是你的优势，不要浪费这个机会&lt;/p&gt;
&lt;p&gt;面对面沟通是必要的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解你的同事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="37-gua-dang-de-yu-yan"&gt;37. 适当的语言&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;请用行业术语推销你的成就&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="38-gai-bian-shi-jie"&gt;38. 改变世界&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;带着任务去上班，并确保别人知道你的任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你不知道自己要做的改变是什么，那你就没有在做任何改变&lt;/p&gt;
&lt;p&gt;如果你没有主动让自己获得承认，那你就还没有获得承认&lt;/p&gt;
&lt;h5 id="39-rang-ren-men-ting-dao-ni-de-sheng-yin"&gt;39. 让人们听到你的声音&lt;/h5&gt;
&lt;p&gt;暮光放的更远一些，不要把自己局限在某一特定公司中的程序员&lt;/p&gt;
&lt;p&gt;博客文章代码&lt;/p&gt;
&lt;h5 id="40-chuang-jian-zi-ji-de-shang-biao"&gt;40. 创建自己的商标&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;你的名字就是你的商标&lt;/p&gt;
&lt;p&gt;Google永远不会忘记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="41-fa-bu-ni-bian-xie-de-cheng-xu"&gt;41. 发布你编写的程序&lt;/h5&gt;
&lt;p&gt;开源&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人人都能使用Rails,但很少有人能开发出Rails&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="42-bian-wei-zhuo-yue-de-neng-li"&gt;42. 变为卓越的能力&lt;/h5&gt;
&lt;p&gt;卓越的意思是值得被关注&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;展示或者让它死亡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="43-jian-li-guan-xi"&gt;43. 建立关系&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;恐惧感是我们无法接近专业人士&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="di-wu-zhang-bao-chi-ji-zhu-ling-xian_1"&gt;第五章 保持技术领先&lt;/h3&gt;
&lt;h5 id="44-yi-jing-guo-shi-de-ji-zhu"&gt;44. 已经过时的技术&lt;/h5&gt;
&lt;p&gt;需要想想，哪些为何过时，哪些又不会？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你引以为傲的新技术已经过时了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间就是一切，学习之前要先动动脑子&lt;/p&gt;
&lt;p&gt;这就像是赌博，但是如果你不参加，就一定会输(....)&lt;/p&gt;
&lt;p&gt;向前看，清楚地知道你的技术发展方向&lt;/p&gt;
&lt;h5 id="45-ni-yi-jing-shi-qu-gong-zuo-liao"&gt;45. 你已经失去工作了&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;你不是你的工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何事情都是处于变化之中&lt;/p&gt;
&lt;p&gt;永远不要把自己当成一名程序员（记住这一点）&lt;/p&gt;
&lt;p&gt;不要给自己设限&lt;/p&gt;
&lt;h5 id="46-mei-you-zhong-dian-de-dao-lu"&gt;46. 没有终点的道路&lt;/h5&gt;
&lt;p&gt;职业生涯，最重要的部分不是晋升或者加薪，而是想这些发展方向努力工作的过程，或者，更重要的是，你抛开着一切忘我工作的过程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要关注结果，需要关注做事情的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（但是考核的时候，结果为导向?）&lt;/p&gt;
&lt;p&gt;都有个度的问题&lt;/p&gt;
&lt;h5 id="47-gei-zi-ji-yi-fen-lan-tu"&gt;47. 给自己一份蓝图&lt;/h5&gt;
&lt;p&gt;不要原地踏步&lt;/p&gt;
&lt;p&gt;个人产品路线蓝图是用来判断你是否在不断向前发展的依据&lt;/p&gt;
&lt;h5 id="48-yao-zhu-yi-guan-cha-shi-chang-bian-hua"&gt;48. 要注意观察市场变化&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;留意那些技术达人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;防止被淘汰哈&lt;/p&gt;
&lt;h5 id="49-jing-zi-li-de-pang-zi"&gt;49. 镜子里的胖子&lt;/h5&gt;
&lt;p&gt;自身很那去观察注意自己的职业发展&lt;/p&gt;
&lt;p&gt;找一个可信赖的第三方，是衡量进步的简单方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发员们，要自我反省&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;评价系统！&lt;/p&gt;
&lt;h5 id="50-nan-yin-du-zhuo-hou-xian-jing"&gt;50. 南印度捉猴陷阱&lt;/h5&gt;
&lt;p&gt;价值僵固：当你过于坚信某事的价值时，就会无法客观地来评判它&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;价值僵固是你脆弱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;语言之争，编辑器之战等等&lt;/p&gt;
&lt;h5 id="51-bi-mian-pu-bu-xing-zhi-ye-ji-hua"&gt;51. 避免瀑布型职业计划&lt;/h5&gt;
&lt;p&gt;职业改变不仅是有可能的，并且是非常必要的&lt;/p&gt;
&lt;p&gt;从实践中学习，不断改变你的目标&lt;/p&gt;
&lt;h5 id="52-mei-tian-du-you-jin-bu"&gt;52. 每天都有进步&lt;/h5&gt;
&lt;p&gt;每一个改变之后，你可能无法看到整体发生明显的不同&lt;/p&gt;
&lt;p&gt;量变引起质变&lt;/p&gt;
&lt;p&gt;即使一点小进步，你也应该感到高兴&lt;/p&gt;
&lt;p&gt;人，总是不断在进步和成长的，多读些书，多学写一些东西&lt;/p&gt;
&lt;h5 id="53-du-li"&gt;53. 独立&lt;/h5&gt;
&lt;p&gt;独立不是件简单的事情，这把你所有的技术作为一个专业来测试&lt;/p&gt;
&lt;p&gt;把它当做是个人发展项目&lt;/p&gt;
&lt;p&gt;好奇，是一种优点&lt;/p&gt;</content><category term="books"></category></entry><entry><title>Golang笔记-05-函数</title><link href="http://www.wklken.me/posts/2014/03/02/05-func.html" rel="alternate"></link><published>2014-03-02T05:00:00+08:00</published><updated>2014-03-02T05:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/05-func.html</id><summary type="html">&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;p&gt;Go语言里面的核心设计，通过关键字func来声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func funcName(input type1, input2 type2) (output1 type1, output2 type2) {
    //logical code
    return value1, value2
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ben-yu-fa"&gt;基本语法&lt;/h3&gt;
&lt;p&gt;1.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//一般函数
func func_name(a int) {
    println(a)
}

//多参数，无返回值
func func_name(a, b int, c string) {
    println(a, b, c)
}

//单个返回值
func func_name(a, b int) int { //同类型，可以省略 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;p&gt;Go语言里面的核心设计，通过关键字func来声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func funcName(input type1, input2 type2) (output1 type1, output2 type2) {
    //logical code
    return value1, value2
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ben-yu-fa"&gt;基本语法&lt;/h3&gt;
&lt;p&gt;1.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//一般函数
func func_name(a int) {
    println(a)
}

//多参数，无返回值
func func_name(a, b int, c string) {
    println(a, b, c)
}

//单个返回值
func func_name(a, b int) int { //同类型，可以省略  a, b int
    return a + b
}

//多个返回值
func func_name(a, b int) (c int, err error) {  //返回值还可以是   (int, error)
    return a+b, nil
}

func SumAndProduct(A, B int) (int, int) {
    return A+B, A*B
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.说明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;关键字func声明
可以有一个或多个参数，每个参数后面带有类型,通过","分隔函数可以返回多个值
返回值声明，可以只声明类型
    如果没有返回值，可以省略最后的返回信息
    如果有返回值，必须在外层添加return


Go函数不支持嵌套(nested),重载（overload）和默认参数(default parameters)
支持：
    1.无需声明原型
    2.不定长度变参
    3.多返回值
    4.命名返回值参数
    5.匿名函数
    6.闭包

注意：
    函数使用func开头，左大括号不能另起一行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;小写字母开头的函数指在本包内可见，大写字母开头的函数才能被其他包调用&lt;/p&gt;
&lt;h3 id="duo-fan-hui-zhi-ji-ming-ming-fan-hui-can-shu"&gt;多返回值及命名返回参数&lt;/h3&gt;
&lt;p&gt;可以像python那样返回多个结果，只是非tuple&lt;/p&gt;
&lt;p&gt;对于不想要的返回值，可以扔垃圾桶_&lt;/p&gt;
&lt;p&gt;如果用命名返回参数，return语句可以为空。return 不为空，返回值顺序是return的顺序而非在函数头声明的顺序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main

func change(a, b int) (x, y int) {
    x = a + 100
    y = b + 100

    return   //101, 102
    //return x, y  //同上
    //return y, x  //102, 101
}

func main(){
    a := 1
    b := 2
    c, d := change(a, b)
    println(c, d)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果命名返回参数被代码块中的同名变量覆盖了，就必须使用显式return返回结果&lt;/p&gt;
&lt;p&gt;不需要强制命名返回值，但是命名后的返回值可以让代码更加清晰，可读性更强&lt;/p&gt;
&lt;h3 id="can-shu-chuan-di-chuan-zhi-yu-chuan-zhi-zhen"&gt;参数传递:传值与传指针&lt;/h3&gt;
&lt;p&gt;指针, Go保留指针，用"."而非"-&amp;gt;"操作指针目标对象成员
操作符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;amp; 取变量地址
* 通过指针间接访问目标函数

func add1(a int) int {
    a = a + 1
    return a
}

x := 3
x1 := add1(x)
x //3
x1 //4
传值，x1的值没有改变

func add2(a *int) int {
    *a = *a + 1
    return *a
}
x := 3
x1 := add2(&amp;amp;x)
x // 4
x1 // 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;传指针多个函数能操作同一个对象&lt;/p&gt;
&lt;p&gt;传指针比较轻量级(8byte)，只是传内存地址，我饿们可以用指针来传递体积大的结构体&lt;/p&gt;
&lt;p&gt;Go语言中，string,slice,map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传指针&lt;/p&gt;
&lt;p&gt;注意，若函数需要改变 slice长度，仍需要取地址传指针&lt;/p&gt;
&lt;h3 id="can-shu-chuan-di-ke-bian-can-shu"&gt;参数传递:可变参数&lt;/h3&gt;
&lt;p&gt;变参本质上就是一个slice，且必须是最后一个形参&lt;/p&gt;
&lt;p&gt;将slice传递给变参函数时，注意用…展开，否则会被当做dang单个参数处理，和python类似&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main

func sum(s string, args ...int)  {
    var x int
    for _, n := range args {
        x += n
    }
    println(s, x)
}
func main(){
   sum("1+2+3=", 1, 2, 3)

   x := []int{0,1,2,3,4}
   sum("0+1+2+3=", x[:4]...)
}

...type类型只能作为函数的参数类型存在，并且是最后一个参数
本质上是一个数组切片，即[]type
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任意类型的不定参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func Printf(format string, args ...interface{}) {
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ni-ming-han-shu"&gt;匿名函数&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f := func(x,y int) int {
    return x + y
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="han-shu-zuo-wei-zhi-lei-xing"&gt;函数作为值、类型&lt;/h3&gt;
&lt;p&gt;在Go语言中，函数也是一种变量，可以通过type来定义它,它的类型就是所有拥有相同的参数，相同的返回值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;语法
type typeName func (input1 inputType1, input2 inputType2 [, ....]) (result1 resultType1 [,....])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用法e.g.1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type testInt func(int) bool //声明了一个函数类型

func filter(slice []int, f testInt) []int {
    var result []int
    for _, value := range slice {
        if f(value) {
            result = append(result, value)
        }
    }
}

func isOdd(integer int) bool {
    if integer % 2 == 0 {
        return false
    }
    return true
}

filter(a, isOdd)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种用法，在写接口的时候非常有用&lt;/p&gt;
&lt;p&gt;用法e.g.2&lt;/p&gt;
&lt;p&gt;可以定义函数类型，也可以将函数作为值进行传递(默认值nil)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main

//定义函数类型callback
type callback func(s string)

//定义一个函数，可以接收另一个函数作为参数
// sum为参数名称， func(int, int) int为参数类型
func test(a, b int, sum func(int, int) int)  {
    println( sum(a,b) )
}

func main(){
    //演示1
    var cb callback
    cb = func(s string) {
        println(s)
    }
    cb("hello world")

    //演示2
    test(1, 2, func(a, b int) int {return a + b})
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hello world
3
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category></entry><entry><title>Golang笔记-04-array/slice/map</title><link href="http://www.wklken.me/posts/2014/03/02/04-data-structure.html" rel="alternate"></link><published>2014-03-02T04:00:00+08:00</published><updated>2014-03-02T04:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/04-data-structure.html</id><summary type="html">&lt;h3 id="yi-array"&gt;一.Array&lt;/h3&gt;
&lt;p&gt;在Go语言中，数组是一个值类型(value type)&lt;/p&gt;
&lt;p&gt;所有的值类型变量在赋值和作为参数传递时都将产生一个复制动作&lt;/p&gt;
&lt;p&gt;如果作为函数的参数类型，则在函数调用时参数发生数据复制，在函数体中无法修改传入数组的内容&lt;/p&gt;
&lt;p&gt;数组相等用 = != 比较，不能用 &amp;lt; &amp;gt;&lt;/p&gt;
&lt;h4 id="1sheng-ming-fu-zhi"&gt;1.声明&amp;amp;赋值&lt;/h4&gt;
&lt;p&gt;初始化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;语法&lt;/span&gt;
&lt;span class="x"&gt;var VarName [n]type     // n&amp;gt;=0&lt;/span&gt;

&lt;span class="x"&gt;e.g.&lt;/span&gt;
&lt;span class="x"&gt;var a [5]int //[0 0 0 0 0]&lt;/span&gt;
&lt;span class="x"&gt;var c [2][3]int //二维&lt;/span&gt;

&lt;span class="x"&gt;var b int = [5]int{1,2,3,4 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="yi-array"&gt;一.Array&lt;/h3&gt;
&lt;p&gt;在Go语言中，数组是一个值类型(value type)&lt;/p&gt;
&lt;p&gt;所有的值类型变量在赋值和作为参数传递时都将产生一个复制动作&lt;/p&gt;
&lt;p&gt;如果作为函数的参数类型，则在函数调用时参数发生数据复制，在函数体中无法修改传入数组的内容&lt;/p&gt;
&lt;p&gt;数组相等用 = != 比较，不能用 &amp;lt; &amp;gt;&lt;/p&gt;
&lt;h4 id="1sheng-ming-fu-zhi"&gt;1.声明&amp;amp;赋值&lt;/h4&gt;
&lt;p&gt;初始化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;语法&lt;/span&gt;
&lt;span class="x"&gt;var VarName [n]type     // n&amp;gt;=0&lt;/span&gt;

&lt;span class="x"&gt;e.g.&lt;/span&gt;
&lt;span class="x"&gt;var a [5]int //[0 0 0 0 0]&lt;/span&gt;
&lt;span class="x"&gt;var c [2][3]int //二维&lt;/span&gt;

&lt;span class="x"&gt;var b int = [5]int{1,2,3,4,5} //声明并初始化&lt;/span&gt;

&lt;span class="x"&gt;a := [3]int{1,2,3}&lt;/span&gt;
&lt;span class="x"&gt;b := [10]int{1,2,3} //前三个元素，其他为0&lt;/span&gt;
&lt;span class="x"&gt;c := [20]int{19:1} //第20个元素初始化为1，其他默认0&lt;/span&gt;
&lt;span class="x"&gt;d := [...]int{4,5,6} //自动计算长度&lt;/span&gt;
&lt;span class="x"&gt;e := [...]int{0:1, 1:2, 19:3} //自动推断&lt;/span&gt;


&lt;span class="x"&gt;二维数组&lt;/span&gt;
&lt;span class="x"&gt;doubleArray := [2][4]int{[4]int{1,2,3,4}, [4]int{5,6,7,8}}&lt;/span&gt;
&lt;span class="x"&gt;easyArray := [2][4]int&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;多维 [...][n] 前者可推断，但是后者必须显示赋值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组的长度是该数组类型的一个内置常量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arrLength := len(arr)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，数组长度也是类型的一部分，因此不同长度数组为不同类型(内置常量)&lt;/p&gt;
&lt;p&gt;即[3]int和[4]int是不同类型，并且数组不能改变长度&lt;/p&gt;
&lt;p&gt;数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本(一次复制操作)，而不是它的指针，如果要传入指针，使用slice&lt;/p&gt;
&lt;h4 id="2yuan-su-fang-wen"&gt;2.元素访问&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;len&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;array&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;fmt.Println(i,&lt;/span&gt; &lt;span class="err"&gt;array&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;range&lt;/span&gt; &lt;span class="nt"&gt;array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;fmt.Println(i,&lt;/span&gt; &lt;span class="err"&gt;v)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用new创建数组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;p := new([10]int)
返回一个指向数组的指针
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意区分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;指向数组的指针
a := [100]int{}
var p *[100]int = &amp;amp;a

指针数组
x, y = 1, 2
a := [...]*int{&amp;amp;x, &amp;amp;y}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="er-slice_1"&gt;二.Slice&lt;/h3&gt;
&lt;p&gt;数组切片就像一个指向数组的指针，但更复杂，实际上它拥有自己的数据结构，而不仅仅是指针(指向原生数组的指针 + 数组切片中元素个数 + 数组切片已分配的存储空间)&lt;/p&gt;
&lt;p&gt;一个引用类型，总是指向一个底层array，声明可以向array一样，只是不需要长度&lt;/p&gt;
&lt;p&gt;slice就像一个结构体，包含三个元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;一个指针，指向数组中slice指定的开始位置
长度，即slice的长度
最大长度，也就是slice开始位置到数组的最后位置的长度
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1sheng-ming-fu-zhi_1"&gt;1.声明&amp;amp;赋值&lt;/h4&gt;
&lt;p&gt;通过array创建&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myArray [10]int = [10]int{1,2,3,4,5,6,7,8,9,10}
var mySlice []int = myArray[:5]

a := [5]int{1,2,3,4,5}
b := a[2:4]
b := a[:4]
b := a[2:]

从数组或已存在的slice再次声明
var ar [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}

var a, b []byte
a = ar[2:5]
b = ar[3:5]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接创建&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myslice1 := make([]int, 5)
myslice2 := make([]int, 5, 10) //初始个数5，预留10个元素的存储空间
myslice3 := []int{1,2,3,4,5}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2yuan-su-fang-wen_1"&gt;2.元素访问&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;len&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;mySlice&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;fmt.Println(i,&lt;/span&gt; &lt;span class="err"&gt;mySlice&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;range&lt;/span&gt; &lt;span class="nt"&gt;mySlice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;fmt.Println(i,&lt;/span&gt; &lt;span class="err"&gt;v)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3qi-ta-cao-zuo"&gt;3.其他操作&lt;/h4&gt;
&lt;p&gt;大小和容量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;len获取slice的长度
cap获取slice的最大容量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态增减元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;append想slice里面追加一个或者多个元素，然后返回一个和slice一样类型的slice

//append
mySlice = append(mySlice, 1, 2, 3) //增加三个元素
mySlice = append(mySlice, mySlice2) //增加另一个

注意，append会改变slice所引用的数组的内容，从而影响到引用统一数组的其他slice，
     但当slice中没有剩余空间，此时动态分配新的数组空间返回的slice数组指针将指向这个空间，
     而原数组的内容将保持不变，其他引用此数组的slice不受影响(坑，可能引入bug)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内容复制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;copy，从源slice的src中复制到目标dst，并且返回复制元素的个数
copy(dst, source) //会按短的个数复制

slice1 := []int{1,2,3,4,5}
slice2 := []int{5,4,3}

copy(slice2, slice1) //复制slice1前三个 1 -&amp;gt; 2
copy(slice1, slice2) //复制slice2的前三个 2 -&amp;gt; 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切片&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;默认开始位置0，ar[:n]等价于ar[0:n]
第二个序列默认是数组长度 ar[n:] 等价于 ar[n:len(ar)]
从一个数组直接获取slice，可以是ar[:]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;slice是引用类型，所以当改变其中元素的时候，其他的所有引用都会改变&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aSlice = array[3:7]
bslice = aSlice[:3]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="san-map_1"&gt;三.Map&lt;/h3&gt;
&lt;p&gt;Python中字典的概念&lt;/p&gt;
&lt;p&gt;map是无序的,长度不固定，内置的len可以用于map,可以方便的修改&lt;/p&gt;
&lt;h4 id="1sheng-ming-fu-zhi_2"&gt;1.声明&amp;amp;赋值&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map[keyType]valueType

var m map[string] PersonInfo
m = make(map[string] personInfo[, 100])

var numbers map[string]int
or
numbers := make(map[string]int)
numbers["one"] = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化一个字典&lt;/p&gt;
&lt;h4 id="2yuan-su-fang-wen_2"&gt;2.元素访问&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rating := map[string]float32 {"c":5, "Go":4.5}

csharpRating, ok := rating["C#"]
if ok {
    fmt.Println("get the value")
} else{
    fmt.Println("error")
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3ji-ben-cao-zuo"&gt;3.基本操作&lt;/h4&gt;
&lt;p&gt;赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m["1234"] = PersonInfo{}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;delete(m, "1234")
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="si-qi-ta_1"&gt;四.其他&lt;/h3&gt;
&lt;p&gt;make和new操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make用于内建类型(map,slice,channel) 的内存分配。

new用于各种类型的内存分配
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;new本质上和其他语言中同名函数一样, new(T)分配了零值填充的T类型的内存空间，并返回其地址，即一个*T类型的值
即，返回一个指针，指向新分配的类型T的零值&lt;/p&gt;
&lt;p&gt;make(T, args)，只能创建slice,map,channel，并返回一个有初始值（非零值）的T类型，而不是*T。
本质来讲，导致这三个类型有所不同的原因是，指向数据结构的引用在使用前必须被初始化&lt;/p&gt;</content><category term="golang"></category></entry><entry><title>Golang笔记-03-控制流</title><link href="http://www.wklken.me/posts/2014/03/02/03-control-flow.html" rel="alternate"></link><published>2014-03-02T03:00:00+08:00</published><updated>2014-03-02T03:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/03-control-flow.html</id><summary type="html">&lt;p&gt;控制结构分为： 条件+选择+循环&lt;/p&gt;
&lt;h3 id="if"&gt;IF&lt;/h3&gt;
&lt;p&gt;1.说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;条件表达式没有括号
支持一个初始化表达式（可以是多变量初始化语句）
初始化语句中定义的都是只能在block级别中使用的局部变量，不能在block之外使用
左大括号必须和条件语句在同一行(必须与if/else在同一行)
go没有三元运算符

if判断语句条件不需要括号
在判断语句里卖弄允许声明一个变量，其作用域只在逻辑块内，其他地方不起作用
花括号一定存在，且必须与if/else在同一行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//基本
if a &amp;gt; 0 {  //无括号
     dosomething()
} else if a == 0 { //必须用花括号
     doothertings()
} else {
     donothing()
}

//单行模式
if a &amp;gt; 0 { a += 100 } else { a -= 100 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.示例 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;控制结构分为： 条件+选择+循环&lt;/p&gt;
&lt;h3 id="if"&gt;IF&lt;/h3&gt;
&lt;p&gt;1.说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;条件表达式没有括号
支持一个初始化表达式（可以是多变量初始化语句）
初始化语句中定义的都是只能在block级别中使用的局部变量，不能在block之外使用
左大括号必须和条件语句在同一行(必须与if/else在同一行)
go没有三元运算符

if判断语句条件不需要括号
在判断语句里卖弄允许声明一个变量，其作用域只在逻辑块内，其他地方不起作用
花括号一定存在，且必须与if/else在同一行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//基本
if a &amp;gt; 0 {  //无括号
     dosomething()
} else if a == 0 { //必须用花括号
     doothertings()
} else {
     donothing()
}

//单行模式
if a &amp;gt; 0 { a += 100 } else { a -= 100 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;package&lt;/span&gt; &lt;span class="nt"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;func&lt;/span&gt; &lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

    &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;-=&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;101&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;b&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;b&lt;/span&gt; &lt;span class="err"&gt;-=&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;支持一个初始化语句&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//允许在条件之前执行一个简单语句，由此语句定义的变量作用域仅在if/else范围内&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;computedValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="nt"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;110
201
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，在有返回值的函数中，不允许将“最终的”return语句放到if ... else ... 结构中，否则编译失败&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func example(x int) int {
    if x == 0 {
        return 5
    } else {
        return x
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="for"&gt;FOR&lt;/h3&gt;
&lt;p&gt;for是go的"while", 只支持for关键字.有三种形式&lt;/p&gt;
&lt;p&gt;1.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;init&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//init不支持逗号，只能平行赋值&lt;/span&gt;
    &lt;span class="err"&gt;//condition每次循环开始都会检查，不建议在里面使用函数，建议用计算好的变量/常量代替&lt;/span&gt;
    &lt;span class="err"&gt;//post后面必须跟花括号,每轮循环结束的时候调用&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;-----------------------------&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;dosomething()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;-----------------------------&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//无限循环&lt;/span&gt;
    &lt;span class="err"&gt;dosomething()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;a++&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;-----------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="err"&gt;初始化和步进表达式可以使多个值：必须使用平行赋值&lt;/span&gt;
    &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;j&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;len&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;j-1&lt;/span&gt;
&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;每次循环都会重新检查条件表达式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;package&lt;/span&gt; &lt;span class="nt"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;func&lt;/span&gt; &lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abcd"&lt;/span&gt;
    &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;i&amp;lt;len(ss)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;i++&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;println(ss&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;97
98
99
100
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.配合range&lt;/p&gt;
&lt;p&gt;for循环和保留字range一起使用，完成迭代器iterator操作&lt;/p&gt;
&lt;p&gt;string, array, slice, map, channel都可以用range进行迭代器操作&lt;/p&gt;
&lt;p&gt;range返回序号和值，若是不想要，可以用_&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  for i, c := range "abc" {
      fmt.Printf("s[%d] = %c\n", i, c)
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  s[0] = a
  s[1] = b
  s[2] = c
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="switch"&gt;SWITCH&lt;/h3&gt;
&lt;p&gt;python里面没有&lt;/p&gt;
&lt;p&gt;1.语法&lt;/p&gt;
&lt;p&gt;支持初始化表达式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//默认break，匹配成功后不会自动向下执行其他case,而是跳出整个switch&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;0:&lt;/span&gt;         &lt;span class="err"&gt;//普通&lt;/span&gt;
        &lt;span class="err"&gt;println(a)&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;1,&lt;/span&gt; &lt;span class="err"&gt;2:&lt;/span&gt;      &lt;span class="err"&gt;//多个分支，逗号分隔&lt;/span&gt;
        &lt;span class="err"&gt;println(a)&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;100:&lt;/span&gt;       &lt;span class="err"&gt;//什么都不做&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;5:&lt;/span&gt;
        &lt;span class="err"&gt;println(a)&lt;/span&gt;
        &lt;span class="err"&gt;fallthrough&lt;/span&gt;   &lt;span class="err"&gt;//进入后面的case&lt;/span&gt; &lt;span class="err"&gt;进行处理，而不是跳出block&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;默认&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;注意，不需要&lt;/span&gt;&lt;span class="nt"&gt;break&lt;/span&gt;&lt;span class="err"&gt;来明确退出一个&lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="err"&gt;，一旦条件符合，自动终止&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;除非使用&lt;/span&gt;&lt;span class="nt"&gt;fallthough&lt;/span&gt;

&lt;span class="nt"&gt;--------------&lt;/span&gt;

&lt;span class="err"&gt;可以不带表达式&lt;/span&gt;
&lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="nt"&gt;sExpr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="n"&gt;expr1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;sExpr&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;expr1&lt;/span&gt;&lt;span class="err"&gt;必须类型一致&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;不限制为常量或者证书，可以用任何类型或表达式&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="err"&gt;Num&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;Num&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="err"&gt;3:&lt;/span&gt;
        &lt;span class="err"&gt;fmt.Printf("3")&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几种形式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;0:&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;a&amp;gt;=0:&lt;/span&gt;
        &lt;span class="err"&gt;....&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;a&amp;gt;1:&lt;/span&gt;
        &lt;span class="err"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;a&amp;gt;=0:&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;a&amp;gt;1:&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.替代if...else if…else…&lt;/p&gt;
&lt;p&gt;不指定switch 条件表达式(没有条件表达式，在case语句中有)，或者直接为true&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;
  &lt;span class="nt"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     &lt;span class="err"&gt;//两句可合并位&lt;/span&gt; &lt;span class="err"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;1:&lt;/span&gt;
          &lt;span class="err"&gt;println("a")&lt;/span&gt;
      &lt;span class="err"&gt;case&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;2:&lt;/span&gt;
          &lt;span class="err"&gt;println("b")&lt;/span&gt;
      &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="goto-break-continue"&gt;goto break continue&lt;/h3&gt;
&lt;p&gt;均可配合标签使用(标签区分大小写，若声明了没有使用会导致编译错误)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;break/continue可配合标签用于多重循环跳出
goto是调整执行位置，与其他两个执行结果并不相同
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.goto&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;支持函数内部goto跳转

请善用

必须跳转到当前函数内定义的标签,标签名大小写敏感

func myFunc() {
    i := 0
Here:
    println(i)
    i++
    goto Here
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.continue&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;进入下一次循环
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.break&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;终止循环

for index := 10; index &amp;gt; 0; index -- {
    if index == 5 {
        break //continue
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main
func main(){
    a := 1
    LABEL1:
        println("inc a=", a)
        a += 1

    LABEL2:
        //println("here")

    for ; a &amp;lt; 6; {
        println(a)
        if a == 3 {
            a += 1
            continue LABEL2
        }
        if a == 5 {
            break
        }
        goto LABEL1
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;inc a= 1
2
inc a= 2
3
4
inc a= 4
5
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category></entry><entry><title>Golang笔记-02-类型、变量、常量</title><link href="http://www.wklken.me/posts/2014/03/02/02-type-var-const.html" rel="alternate"></link><published>2014-03-02T02:00:00+08:00</published><updated>2014-03-02T02:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/02-type-var-const.html</id><summary type="html">&lt;h3 id="ji-ben-lei-xing"&gt;基本类型&lt;/h3&gt;
&lt;p&gt;1.基本类型列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;类型&lt;/span&gt;        &lt;span class="err"&gt;长度&lt;/span&gt;     &lt;span class="err"&gt;说明&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;默认&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;不能把非&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;值当做&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;不用数字代表&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;byte&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="nx"&gt;uint8&lt;/span&gt; &lt;span class="err"&gt;别名&lt;/span&gt;
&lt;span class="nx"&gt;rune&lt;/span&gt;         &lt;span class="mi"&gt;4&lt;/span&gt;      &lt;span class="nx"&gt;int32&lt;/span&gt;&lt;span class="err"&gt;别名。&lt;/span&gt; &lt;span class="err"&gt;代表一个&lt;/span&gt;&lt;span class="nx"&gt;unicode&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;
&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;unit&lt;/span&gt;            &lt;span class="err"&gt;一来所运行的平台，&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;
&lt;span class="nx"&gt;int8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
&lt;span class="nx"&gt;int16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint16&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32768&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;32767 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="ji-ben-lei-xing"&gt;基本类型&lt;/h3&gt;
&lt;p&gt;1.基本类型列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;类型&lt;/span&gt;        &lt;span class="err"&gt;长度&lt;/span&gt;     &lt;span class="err"&gt;说明&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;默认&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;不能把非&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;值当做&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;不用数字代表&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;byte&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="nx"&gt;uint8&lt;/span&gt; &lt;span class="err"&gt;别名&lt;/span&gt;
&lt;span class="nx"&gt;rune&lt;/span&gt;         &lt;span class="mi"&gt;4&lt;/span&gt;      &lt;span class="nx"&gt;int32&lt;/span&gt;&lt;span class="err"&gt;别名。&lt;/span&gt; &lt;span class="err"&gt;代表一个&lt;/span&gt;&lt;span class="nx"&gt;unicode&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;
&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;unit&lt;/span&gt;            &lt;span class="err"&gt;一来所运行的平台，&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;
&lt;span class="nx"&gt;int8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
&lt;span class="nx"&gt;int16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint16&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32768&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;32767&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;
&lt;span class="nx"&gt;int32&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint32&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="err"&gt;亿&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="err"&gt;亿，&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="err"&gt;亿&lt;/span&gt;
&lt;span class="nx"&gt;int64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint64&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="nx"&gt;float32&lt;/span&gt;      &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="err"&gt;精确到&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="err"&gt;位小数&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;相当于&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="kr"&gt;float&lt;/span&gt;
&lt;span class="nx"&gt;float64&lt;/span&gt;      &lt;span class="mi"&gt;8&lt;/span&gt;     &lt;span class="err"&gt;精确到&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="err"&gt;位小数&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;相当于&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="kr"&gt;double&lt;/span&gt;

&lt;span class="nx"&gt;complex64&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="nx"&gt;complex128&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;

&lt;span class="nx"&gt;uintptr&lt;/span&gt;            &lt;span class="err"&gt;足够保存指针的&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="err"&gt;位、&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="err"&gt;位整数&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;指针&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;可以存指针的整数型&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;              &lt;span class="err"&gt;值类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;数组&lt;/span&gt;
&lt;span class="nx"&gt;struct&lt;/span&gt;             &lt;span class="err"&gt;值类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;结构体&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt;             &lt;span class="err"&gt;值类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;字符串类型，常用&lt;/span&gt;
&lt;span class="nx"&gt;slice&lt;/span&gt;              &lt;span class="err"&gt;引用类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;切片&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;                &lt;span class="err"&gt;引用类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;字典&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;            &lt;span class="err"&gt;引用类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;通道&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt;          &lt;span class="err"&gt;接口类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;接口&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;           &lt;span class="err"&gt;函数类型&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.类型转换&lt;/p&gt;
&lt;p&gt;不支持隐式类型转换，必须进行显式类型转换&lt;/p&gt;
&lt;p&gt;转换只发生在两种互相兼容的类型之间: 各类int不允许相互赋值或操作，不然会在编译时报错&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;type&amp;gt;(expression)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;"fmt"&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1234&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1234.56&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;34
1234
256.000000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.类型别名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type t_str string
var b t_str = "a str"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.类型默认值&lt;/p&gt;
&lt;p&gt;声明不赋值，类型零值，非空值,而是声明后的默认值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;floats&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;pointers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;interfaces&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;slices&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bao-liu-zi"&gt;保留字&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;      &lt;span class="k"&gt;case&lt;/span&gt;   &lt;span class="nx"&gt;chan&lt;/span&gt;     &lt;span class="kr"&gt;const&lt;/span&gt;        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;default&lt;/span&gt;    &lt;span class="nx"&gt;defer&lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;     &lt;span class="nx"&gt;fallthrough&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;       &lt;span class="nx"&gt;go&lt;/span&gt;     &lt;span class="kr"&gt;goto&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt;           &lt;span class="kr"&gt;import&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt;  &lt;span class="nx"&gt;map&lt;/span&gt;    &lt;span class="kr"&gt;package&lt;/span&gt;  &lt;span class="nx"&gt;range&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="nx"&gt;select&lt;/span&gt;     &lt;span class="nx"&gt;struct&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;   &lt;span class="nx"&gt;type&lt;/span&gt;         &lt;span class="kd"&gt;var&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bian-liang"&gt;变量&lt;/h3&gt;
&lt;p&gt;1.变量声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//第一种，指定变量类型，声明后若不赋值，使用默认值
var v_name v_type
v_name = value

//第二种，根据值自行判定变量类型
var v_name = value

//第三种，省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误.
v_name := value

e.g.
var a int = 10
var b = 10
c : = 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main
var a = 1234
var b string = "hello"
var c bool

func main(){
    println(a, b, c)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1234 hello false
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.多变量声明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//类型相同多个变量, 非全局变量
var vname1, vname2, vname3 type
vname1, vname2, vname3 = v1, v2, v3

var vname1, vname2, vname3 = v1, v2, v3 //和python很像,不需要显示声明类型，自动推断

vname1, vname2, vname3 := v1, v2, v3 //出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误


//类型不同多个变量, 全局变量, 局部变量不能使用这种方式
var (
    vname1 v_type1
    vname2 v_type2
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main

var x, y int
var (  //这种只能出现在全局变量中，函数体内不支持
    a int
    b bool
)

var c, d int = 1, 2
var e, f = 123, "hello"

//这种不带声明格式的只能在函数体中出现
//g, h := 123, "hello"

func main(){
    g, h := 123, "hello"
    println(x, y, a, b, c, d, e, f, g, h)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 0 0 false 1 2 123 hello 123 hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.多变量赋值时，将先行计算所有左侧变量的值，再进行赋值

    i := 0
    i, l[i] = 1, 2
    //get i = 1， l[0] = 2


    sc[0], sc[0] = 1, 2
    //get sc[0] = 2

B.垃圾桶_

    func test()(int, string) {
        return 123, "abc"
    }

    a, _ := test()

C.已声明但是没有使用的变量会在编译阶段报错，较Python 更为严格
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chang-liang"&gt;常量&lt;/h3&gt;
&lt;p&gt;常量可以是字符，字符串，布尔或数字&lt;/p&gt;
&lt;p&gt;常量赋值是编译期的行为&lt;/p&gt;
&lt;p&gt;1.常量声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在编译阶段就能确定下来的值,在运行时无法改变该值
常量可以定义为数值、布尔值或字符串等类型

const constantName = value
const Pi float32 = 3.1415926

const c_name [type] = value
const c_name1, c_name2 = value1, value2
const (
    c_name1 = vluae1
    c_name2 = value2
)

=右侧，必须为常量或常量表达式，如果使用到了函数，必须为内置函数（编译期行为）

const i = 10000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;常量必须是编译期能确定的&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;在定义常量数组时，如果不提供初始化值，则表示与上行常量类型，值，完全相同&lt;/span&gt;

    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abc"&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;则&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abc"&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;常量可以用&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sizeof&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;常量计算表达式的值&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="err"&gt;常量表达式中，函数必须是内置函数，否则编译不过&lt;/span&gt;

    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;"unsafe"&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"abc"&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="err"&gt;结果：&lt;/span&gt;    &lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mei-ju"&gt;枚举&lt;/h3&gt;
&lt;p&gt;iota，特殊常量，可以认为是一个可以被编译器修改的常量&lt;/p&gt;
&lt;p&gt;在每一个const关键字出现时，被重置为0，然后再下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1&lt;/p&gt;
&lt;p&gt;不提供初始值，则表示使用上一行的表达式&lt;/p&gt;
&lt;p&gt;1.声明：&lt;/p&gt;
&lt;p&gt;iota生成从0开始的自动增长枚举值，意味着，多一个枚举值，iota+=1，无论是否使用&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const (
    a = 1
    b = 2
)

const (
    a = iota //0
    b  //1
    c  //2
)

const (
    _ = iota
    a    //1
    b    //2
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;iota用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func main() {
    const (
            a = iota  //0
            b   //1
            c   //2
            d = "ha"  //独立值，iota += 1
            e    //"ha"   iota += 1
            f = 100    //iota +=1
            g     //100  iota +=1
            h = iota  //7,恢复计数
            i      //8
    )

}

const (
    x = iota // 0
    y = iota // 1
    z = iota // 2
    w //省略，默认和前面一样字面值   w = iota, 即3
)
const v = iota //遇到const关键字，iota重置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 每行的变量数必须一致
    const (
        A, B = iota, iota
        C, D
        E, F
    )&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func main() {
    println(A,B,C,D,E,F)
}

//结果： 0 0 1 1 2 2   【各自增长】
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yun-suan-fu"&gt;运算符&lt;/h3&gt;
&lt;p&gt;Go运算符全部是从左到右结合的&lt;/p&gt;
&lt;p&gt;不支持运算符重载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;优先级    运算符                        说明
  高   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; % &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;AND NOT&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;
       &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;                             channel运算符
       &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  低   &lt;span class="o"&gt;||&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在go中，++ --为语句，而非表达式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;package main

func main(){
    i := 1
    i ++
    println(i)

    b := i
    println(b)

    //syntax error: unexpected ++, expecting semicolon or newline or }
    //c := i++
    //意味着, ++/--不能出现在等号右侧
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-zhen"&gt;指针&lt;/h3&gt;
&lt;p&gt;Go保留了指针， *T表示T对应的指针类型&lt;/p&gt;
&lt;p&gt;如果包含包名， 则应该是 *&lt;package&gt;.T&lt;/package&gt;&lt;/p&gt;
&lt;p&gt;代表指针类型的符号 '*' 总是和类型放在一起，而不是紧挨着变量名&lt;/p&gt;
&lt;p&gt;同样支持指针的指针**T&lt;/p&gt;
&lt;p&gt;1.声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var a, b *int
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;操作符&amp;amp;取变量地址，用*透过指针变量间接访问目标对象
默认值是nil,没有NULL常量
不支持指针运算，不支持‘-&amp;gt;'预算福，直接'.'选择符操作指针目标对象成员
可以在unsafe.Pointer和任意类型指针间进行转换
可以将unsafe.Pointer转换为uintptr,然后变相做指针运算，uintptr可以转换为整数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;"fmt"&lt;/span&gt;

&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;取地址&lt;/span&gt;

    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;取值&lt;/span&gt;


    &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Jack"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;直接取只针对想成员&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;u2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;拷贝对象&lt;/span&gt;
    &lt;span class="n"&gt;u2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;100
&amp;amp;{100 Jack}
&amp;amp;{100 Jack} {100 Tom}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fen-zu-sheng-ming"&gt;分组声明&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s2"&gt;"os"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;首行必须有常量表达式&lt;/span&gt;
    &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1415&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;全局变量可用，函数体内不支持&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="n"&gt;float32&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category></entry><entry><title>Golang笔记-01-简介</title><link href="http://www.wklken.me/posts/2014/03/02/01-intro.html" rel="alternate"></link><published>2014-03-02T01:00:00+08:00</published><updated>2014-03-02T01:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/01-intro.html</id><summary type="html">&lt;h3 id="goyu-yan-zui-zhu-yao-de-te-xing"&gt;Go语言最主要的特性&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;自动垃圾回收
更丰富的内置类型
函数多返回值
错误处理
匿名函数和闭包
类型和接口
并发编程
反射
语言交互性

高性能/高效开发
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;p&gt;安装说明 &lt;a href="http://golang.org/doc/install"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包下载 &lt;a href="https://code.google.com/p/go/downloads/list"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;确认是否安装成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;go version //查看版本
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huan-jing-bian-liang-she-zhi"&gt;环境变量设置&lt;/h3&gt;
&lt;h3 id="zheng-ti-mu-lu-jie-gou"&gt;整体目录结构&lt;/h3&gt;
&lt;p&gt;通过package组织，只有package名称为main的可以包含main函数&lt;/p&gt;
&lt;p&gt;一个程序有且仅有一个main包&lt;/p&gt;
&lt;p&gt;通过import 关键字导入其他非main包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/
    |- mathapp
pkg/
    |- 平台名
        |- xxx.a
src/
    |- mathapp
        |- main.go
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;Helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;声明文件的&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fmt"&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;包，不能包含没有用到的包，否则而编译错误&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;func …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="goyu-yan-zui-zhu-yao-de-te-xing"&gt;Go语言最主要的特性&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;自动垃圾回收
更丰富的内置类型
函数多返回值
错误处理
匿名函数和闭包
类型和接口
并发编程
反射
语言交互性

高性能/高效开发
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;p&gt;安装说明 &lt;a href="http://golang.org/doc/install"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包下载 &lt;a href="https://code.google.com/p/go/downloads/list"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;确认是否安装成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;go version //查看版本
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huan-jing-bian-liang-she-zhi"&gt;环境变量设置&lt;/h3&gt;
&lt;h3 id="zheng-ti-mu-lu-jie-gou"&gt;整体目录结构&lt;/h3&gt;
&lt;p&gt;通过package组织，只有package名称为main的可以包含main函数&lt;/p&gt;
&lt;p&gt;一个程序有且仅有一个main包&lt;/p&gt;
&lt;p&gt;通过import 关键字导入其他非main包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/
    |- mathapp
pkg/
    |- 平台名
        |- xxx.a
src/
    |- mathapp
        |- main.go
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;Helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;声明文件的&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fmt"&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;包，不能包含没有用到的包，否则而编译错误&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;入口函数&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;无参数无返回值&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;运行&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="goming-ling"&gt;go命令&lt;/h3&gt;
&lt;p&gt;用命令行查看&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;go help

go build 编译
go clean 移除当前源码包里面的编译生成文件
go fmt 格式化代码
go get 动态获取远程代码包
go install 生成结果文件，并将编译好的结果一到$GOPATH/pkg或者$GOPATH/bin
go test 运行测试用的可执行文件
go doc   godoc -http=:8080 查看文档

go fix 修复以前老版本代码到新版本
go version查看当前版本
go env 查看当前go的环境变量
go list 列出当前所有安装package
go run 编译并运行go语言程序
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="diao-shi"&gt;调试&lt;/h3&gt;
&lt;p&gt;使用gdb进行调试, go语言内部已经内置了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list
break
delete
backtrace
info
print
whatis
next
continue
set variable
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bian-ji-qi-she-zhi"&gt;编辑器设置&lt;/h3&gt;
&lt;p&gt;vim&lt;/p&gt;
&lt;h2 id="qi-ta-bu-chong_1"&gt;其他补充&lt;/h2&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//单行
/* ----- */ 多行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;import 多个包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s2"&gt;"os"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用包里地函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;packageName&amp;gt;.&amp;lt;Function&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category></entry><entry><title>读书笔记——写给大家看的设计书</title><link href="http://www.wklken.me/posts/2014/03/02/the-non-designers-design-book.html" rel="alternate"></link><published>2014-03-02T00:00:00+08:00</published><updated>2014-03-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-03-02:/posts/2014/03/02/the-non-designers-design-book.html</id><summary type="html">&lt;p&gt;&lt;img alt="cover" src="/imgs/books/design-book.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对设计，知之甚少，战5渣&lt;/p&gt;
&lt;p&gt;读到这本书，感觉蛮有收获的，起码会有一个基本的设计意识和概念，有些作用&lt;/p&gt;
&lt;p&gt;这本书主要围绕设计的四个基本原则展开说明，有详细的说明和对比案例&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="she-ji-yuan-ze"&gt;设计原则&lt;/h3&gt;
&lt;p&gt;得到优秀的设计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学习四大基本原则
2.认识到自己没有运用这些原则
3.应用基本原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1qin-mi-xing"&gt;1.亲密性&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;将相关项目组织在一起：移动这些项，使它们的物理位置互相靠近。
相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段

亲密性意味着存在关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，人们查看时的视觉感受，顺序(视线如何移动的，起点-路径-结束)、停留、重点。将有很近的亲密性的多个项目放一起，成为一个视觉单元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应当有关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;亲密性也同时意味着，对非亲密项进行隔离（利用空白、线、图等）,使孤立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;位置是否靠近可以体现出元素之间是否存在关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要对所有元素有一个分类组织的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲密性的根本目的是视线组织性(条理性)

条理，意味着更容易被阅读和记住
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cover" src="/imgs/books/design-book.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对设计，知之甚少，战5渣&lt;/p&gt;
&lt;p&gt;读到这本书，感觉蛮有收获的，起码会有一个基本的设计意识和概念，有些作用&lt;/p&gt;
&lt;p&gt;这本书主要围绕设计的四个基本原则展开说明，有详细的说明和对比案例&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="she-ji-yuan-ze"&gt;设计原则&lt;/h3&gt;
&lt;p&gt;得到优秀的设计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学习四大基本原则
2.认识到自己没有运用这些原则
3.应用基本原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1qin-mi-xing"&gt;1.亲密性&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;将相关项目组织在一起：移动这些项，使它们的物理位置互相靠近。
相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段

亲密性意味着存在关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，人们查看时的视觉感受，顺序(视线如何移动的，起点-路径-结束)、停留、重点。将有很近的亲密性的多个项目放一起，成为一个视觉单元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应当有关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;亲密性也同时意味着，对非亲密项进行隔离（利用空白、线、图等）,使孤立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;位置是否靠近可以体现出元素之间是否存在关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要对所有元素有一个分类组织的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲密性的根本目的是视线组织性(条理性)

条理，意味着更容易被阅读和记住
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不要仅仅因为有空白就把元素放在角落或者中间
避免一个页面上有太多孤立的元素
不要再元素之间留出相同大小的空白，除非各组同属于一个子集
不属于同一组的元素之间一定不要建立关系
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2dui-qi"&gt;2.对齐&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任何元素都不能在页面上随意安放，每一项都应当与页面上的某个内容存在某种视觉联系

对齐-更内聚的单元，虽然其物理位置可能是彼此分离的

建立一种看不见的关联

应该找到一条明确的对齐线，并用它来对齐(皆为线)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;左对齐和右对齐看起来外观更为清晰,效果更分明，而居中对齐不是，所以，尽量避免，多留意居中对齐的效果是否是你想要表达的。当然，慎用两端对齐&lt;/p&gt;
&lt;p&gt;勇敢一些，不要畏缩&lt;/p&gt;
&lt;p&gt;在得到更多培训之前，一定要坚持一个原则：页面上只是用一种文本对齐（所有文本都左对齐、右对齐或者居中）,避免混合使用多种对齐方式&lt;/p&gt;
&lt;p&gt;如果使用两种，需要懂得，聚聚项目之间的布局关系&lt;/p&gt;
&lt;p&gt;根本目的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;是页面统一而且有条理

统一性：页面上所有元素看上去统一、有联系而且彼此相关，需要在各个单独的元素之间存在某种视觉纽带
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要特别注意元素放在哪里。应当总能在页面上找出与之对齐的元素，尽管这两个对象的物理位置可能相距很远&lt;/p&gt;
&lt;h4 id="3zhong-fu"&gt;3.重复&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设计的某些方面需要在整个作品中重复

读者看到的任何方面都可以作为重复元素：字体，线，项目符号，颜色，设计要素，某种格式，空间关系

重复有助于组织信息:利于将设计中单独的部分统一起来，可以帮助读者浏览各个页面
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重复的最大好处是是各项看起来同属一组,虽然元素看起来都不完全相同.变换成一致的外观&lt;/p&gt;
&lt;p&gt;重复，将各个部分连在一起，从而同意并增强整个作品，否者这些部分只是彼此孤立的单元&lt;/p&gt;
&lt;p&gt;根本目的：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;统一，并增强视觉效果
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何实现&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;可以认为是保持一致性：需要把现有的一致性更向前推进一步
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;避免太多地重复一个元素，重复太多会让人讨厌.要注意对比的价值
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4dui-bi"&gt;4.对比&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果两个项不完全相同，就应当使之不同，而且应当是截然不同

要想实现有效地对比，对比就必须强烈！千万不要畏畏缩缩
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设计页面很少只是用某一种原则&lt;/p&gt;
&lt;p&gt;在页面上增加对比能吸引眼球，我们的眼睛喜欢看到对比的事物&lt;/p&gt;
&lt;p&gt;根本目的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;增强页面效果：更有意思，更好的可读性
有效于信息的组织
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何实现&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;最简单方法是实现字体对比，也可以利用线宽、颜色、大小、空间、元素之间间隔、材质等形成对比
重要的是：对比一定要强烈
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;避免的问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不要犹豫，如果想形成对比，就加大力度
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提高视觉敏感度&lt;/p&gt;
&lt;p&gt;从好的设计中获得理念，寻找灵感&lt;/p&gt;
&lt;h4 id="5she-ji-guo-cheng"&gt;5.设计过程&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.从中心点开始
确定希望读者最新看什么。除非你已经决定要建立一个非常协调的设计，否则就应该创建一个有强烈对比的中心店

2.将信息分组
按逻辑进行你分组，确定这些组之间的关系。通过组之间靠近与否来显示这些关系
在页面上组织文本和图片时，要建立并维护明确的对齐
创建重复，或者找出可以重复的项，建立重复
除非你已经决定要建立一个非常协调的设计，否则就应该创建强烈的对比
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;书中还有关于颜色选择、字体设计的部分章节，需要可以自查&lt;/p&gt;
&lt;p&gt;总的来说，很好的一本书，推荐&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2014-03-02 于深圳&lt;/p&gt;</content><category term="books"></category></entry><entry><title>Golang笔记-00-说明及资源</title><link href="http://www.wklken.me/posts/2014/02/23/golang-base-intro.html" rel="alternate"></link><published>2014-02-23T00:00:00+08:00</published><updated>2014-02-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-02-23:/posts/2014/02/23/golang-base-intro.html</id><summary type="html">&lt;p&gt;&lt;img alt="golang" src="/imgs/golang/golang.png"/&gt;&lt;/p&gt;
&lt;p&gt;这份笔记是在学习golang过程中，汇集几本书以及网络视频、博客等资料汇总而成的，记录，方便查询&lt;/p&gt;
&lt;p&gt;已经基本完成，逐步发上来&lt;/p&gt;
&lt;h4 id="she-ji-nei-rong"&gt;涉及内容&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;说明-资源 done
基础知识 done
类型 - 常量 - 变量 - 运算符 done
控制流 done
数据结构：数组，切片，map done
函数 done
结构struct
接口
字符串
文件
异常处理
数学计算
并发
反射
正则
数据库
时间日期
配置文件
日志logging
json/xml文件处理
测试
项目及项目结构
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-yuan"&gt;资源&lt;/h4&gt;
&lt;p&gt;书籍：
    &lt;a href="https://github.com/astaxie/build-web-application-with-golang"&gt;Go web编程&lt;/a&gt;|
    &lt;a href="https://github.com/Unknwon/the-way-to-go_ZH_CN"&gt;Go 入门指南(The …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="golang" src="/imgs/golang/golang.png"/&gt;&lt;/p&gt;
&lt;p&gt;这份笔记是在学习golang过程中，汇集几本书以及网络视频、博客等资料汇总而成的，记录，方便查询&lt;/p&gt;
&lt;p&gt;已经基本完成，逐步发上来&lt;/p&gt;
&lt;h4 id="she-ji-nei-rong"&gt;涉及内容&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;说明-资源 done
基础知识 done
类型 - 常量 - 变量 - 运算符 done
控制流 done
数据结构：数组，切片，map done
函数 done
结构struct
接口
字符串
文件
异常处理
数学计算
并发
反射
正则
数据库
时间日期
配置文件
日志logging
json/xml文件处理
测试
项目及项目结构
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-yuan"&gt;资源&lt;/h4&gt;
&lt;p&gt;书籍：
    &lt;a href="https://github.com/astaxie/build-web-application-with-golang"&gt;Go web编程&lt;/a&gt;|
    &lt;a href="https://github.com/Unknwon/the-way-to-go_ZH_CN"&gt;Go 入门指南(The Way to Go)&lt;/a&gt;
&lt;a href="https://github.com/astaxie/Go-in-Action"&gt;Go 实战开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频:
    &lt;a href="https://github.com/Unknwon/go-fundamental-programming"&gt;Go编程基础&lt;/a&gt;|
    &lt;a href="https://github.com/Unknwon/go-web-foundation"&gt;Go Web基础&lt;/a&gt;|
    &lt;a href="https://github.com/Unknwon/go-rock-libraries-showcases"&gt;Go名库讲解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网站：
    论坛&lt;a href="http://golangtc.com/"&gt;Golang中国&lt;/a&gt;|
    博客&lt;a href="http://blog.go-china.org/"&gt;Golang中国&lt;/a&gt;|
    &lt;a href="https://gobyexample.com/"&gt;Go by Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工具网站:
    API速查 &lt;a href="https://gowalker.org/"&gt;gowalker&lt;/a&gt;|
    在线编译 &lt;a href="http://gobuild.io/"&gt;gobuild&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;web框架:
    &lt;a href="https://github.com/astaxie/beego"&gt;beego&lt;/a&gt;|
    &lt;a href="https://github.com/hoisie/web"&gt;web.go-类web.py&lt;/a&gt;|
    &lt;a href="https://github.com/codegangsta/martini"&gt;Martini-类flask&lt;/a&gt;|
    &lt;a href="https://github.com/robfig/revel"&gt;revel&lt;/a&gt;|
    &lt;a href="https://github.com/hoisie/web"&gt;web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To be continue.....&lt;/p&gt;</content><category term="golang"></category></entry><entry><title>读书笔记——追随你的心，用思想改变世界</title><link href="http://www.wklken.me/posts/2014/01/19/follow-your-heart.html" rel="alternate"></link><published>2014-01-19T00:00:00+08:00</published><updated>2014-01-19T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-19:/posts/2014/01/19/follow-your-heart.html</id><summary type="html">&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录，可以反复读，即使读不懂，随着时间，阅历丰富，有些东西会逐渐懂得。&lt;/p&gt;
&lt;p&gt;第二章，斯坦福的演讲，看看不错, &lt;a href="http://v.163.com/special/opencourse/jobs.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后面的，大部分是发布会，以及采访，可以直接看视频，看文字没啥特别的感觉，感觉编辑纯粹是凑字数&lt;/p&gt;
&lt;p&gt;另外，还有一个遗失的访谈，蛮长的，一个多小时，但是不得不说，值得一看，&lt;a href="http://v.163.com/movie/2013/5/N/R/M8TBJIK7D_M8TBLIINR.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下，是一些感受&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我活着，就是为了改变世界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我只能说，帮主做到了。&lt;/p&gt;
&lt;p&gt;很多时候，我都在思考，为什么活着，这个是个哲学问题，又不是，很难想明白的&lt;/p&gt;
&lt;p&gt;每个工程师，都有改变世界的梦想&lt;/p&gt;
&lt;p&gt;这么多年，有些端倪了，活着，对我而言，更像是：“创造价值”，让我，以及我所能影响到的人，生活更加美好些&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;领袖和跟风者的区别就在于创新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有所感受，不敢妄加评论，起码我所接触到的中国互联网环境还太狭窄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人要么是天才，要么是笨蛋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些偏激，但是蛮有道理的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热忱是胜利的秘诀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对所做的事情，需要有热情&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;佛教中有一句话：初学者心态。拥有初学者心态是件了不起的事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每隔一段时间，都需要倒掉，空杯心态，去接触新的东西，去重新认识已有的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求知若渴，虚怀若谷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前者是现在必须努力达到的目标，后者，是一生需要学习和感悟的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人的时间有限，所以你不要为别人活着。不要让自己的内心被别人的意见左右，不要活在他人的观念里，更不要被平庸的教条限制。最重要的是，坚定地寻找和倾听自己心灵发出的声音，那才是你的真实想法。要相信你的直觉和心灵。除此之外，其他的一切都是次要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得，每个人都有必要自己读一读这段话，从小到大，我们的思想受到了太多束缚和限制，所以导致很多人，终其一生，都为了别人而活，活在别人的观念里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网创业不在于有多少人开始创办公司，而在于有多少人能坚持到底&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持很重要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有经验，你就永远不可能知道经验的价值，或者永远不可能知道如何正确地保有经验所创造的财富&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经验很重要，见过多年只有一年经验的人，也见过一年有多年经验的人。刚毕业那会，对所谓的“经验”很不屑，两年多过来，有了蛮多认识的。经验，很重要，而且通过书本什么的很那学来的，实践出真知。经验，应该可以作为“聪明”和“智慧”的分界线吧。and，经验是需要积累的，不断持续的积累，有意识地积累。帮主也提到，过去的一切，点滴，即使再小，在未来的某个时刻，也会起到作用，所有的事情和经历，都是关联的。all connected!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为海盗吧，成为海盗比加入海军更有意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;海军的优势，或许是“纪律”，但是劣势，或许也是“纪律”，向往自由的人，成为“海盗”更为合适。我的征途是星辰大海&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你若想将未来的点联系在一起，那你就只能先将过去的点联系起来。你得相信你的未来和你的过去是联系着的。你必须要相信直觉、命运、生活等这些东西。这个方法从来没有让我失望过，它反而让我的生活发生了奇妙的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多事情，并非一蹴而就，或许在外人看来是，但是背后，都以一段很长的过去。我们的现在，就是未来的过去，未来想要变成什么得到什么，和现在是相关的。&lt;/p&gt;
&lt;p&gt;另外，我开始相信直觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你的工作将会占据你的大部分时间，做你自己认为最了不起的工作时唯一让你真正满意的方法。而做好你最满意的工作的唯一方法就是热爱你所做的事情。因此，继续找你满意的工作，直到找到它，不要气馁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常赞同，在懵懂中度过了大学四年，花了接近两年，看是有点懂了。做自己喜欢的事情。决定并不难，难的是，如何真正知道自己喜欢什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记住一点，就是每个人都会死去。这是我遇到的最重要的决策工具，很多重大的人生选择都是在它的帮助下完成的。外部所有的骄傲、期望、对失败或尴尬的恐惧，在死亡面前，都会消失殆尽，只留下真正重要的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点感觉，但是还做不到，可能，还是自己太年轻了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热爱你所做的事是做伟大工作的最佳方法。如果你还没有找到你想要的工作，继续找。不要停下来。只要你全力以赴，你知道你一定会找到它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坚持&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短，你总有一天会离开人世。一个人没有机会去做那么多事，所以每个人都应该极其优秀才行。因为这就是我们的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;做选择的时候，多想想这个问题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2014-01-19&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="books"></category></entry><entry><title>如何书写shell脚本</title><link href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html" rel="alternate"></link><published>2014-01-12T00:00:00+08:00</published><updated>2014-01-12T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-12:/posts/2014/01/12/shell-script-base.html</id><summary type="html">&lt;p&gt;关于Linux基础命令，可以查看另一篇博文 &lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下内容，主要是，了解书写shell脚本所需要的大部分知识,主要内容来自于书籍和网络&lt;/p&gt;
&lt;p&gt;目的是，能快速书写出需要的shell脚本&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;p&gt;version 0.1 2014-01-12 基本内容, 完成度30%&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/shell.xml"&gt;google shell style guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/48717/"&gt;Linux Shell编程实战技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kodango.com/bash-pitfalls-part-1"&gt;Bash编程易犯的错误 1234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/16604/"&gt;关于shell脚本编程的10个最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bash.cumulonim.biz/BashPitfalls.html"&gt;Bash Pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-yi-xie-gai-nian"&gt;第一部分 一些概念&lt;/h2&gt;
&lt;p&gt;标准IO&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文件描述符
0 标准输入 默认键盘
1 标准输出 默认终端
2 标准错误 默认终端
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; 输出重定向
&amp;gt;&amp;gt; 追加到输出重定向
&amp;lt; 输入重定向
&amp;lt;&amp;lt; 追加到输入重定向

ls …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;关于Linux基础命令，可以查看另一篇博文 &lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下内容，主要是，了解书写shell脚本所需要的大部分知识,主要内容来自于书籍和网络&lt;/p&gt;
&lt;p&gt;目的是，能快速书写出需要的shell脚本&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;p&gt;version 0.1 2014-01-12 基本内容, 完成度30%&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/shell.xml"&gt;google shell style guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/48717/"&gt;Linux Shell编程实战技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kodango.com/bash-pitfalls-part-1"&gt;Bash编程易犯的错误 1234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/16604/"&gt;关于shell脚本编程的10个最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bash.cumulonim.biz/BashPitfalls.html"&gt;Bash Pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-yi-xie-gai-nian"&gt;第一部分 一些概念&lt;/h2&gt;
&lt;p&gt;标准IO&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文件描述符
0 标准输入 默认键盘
1 标准输出 默认终端
2 标准错误 默认终端
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; 输出重定向
&amp;gt;&amp;gt; 追加到输出重定向
&amp;lt; 输入重定向
&amp;lt;&amp;lt; 追加到输入重定向

ls -l &amp;gt; /tmp/a

cmd &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 #输出到垃圾桶
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;管道&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;前后连接两个命令

ls -l | grep test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;双引号：可以除了字符$`\外地任何字符或字符串
单引号：忽略任何引用值，将引号里的所有字符作为一个字符串 $var 不能被解析
反引号：设置系统命令输出到变量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shell脚本识别三种基本命令：内建命令，shell函数和外部命令&lt;/p&gt;
&lt;p&gt;基本的命令查找:shell会沿着查找路径$PATH来寻找命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $PATH

可以在.profile文件中修改
export PATH=$PATH:$HOME/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and/or&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;expression1 &amp;amp;&amp;amp; expression2 &amp;amp;&amp;amp; expression3
只有前面一条命令执行成功，才执行下一条
expression1执行成功，才执行expression2
串联的

expression1 || expression2 || expression3
执行命令，直到有一条成功为止
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-er-bu-fen-shelljiao-ben"&gt;第二部分 shell脚本&lt;/h2&gt;
&lt;p&gt;首行声明使用bash(声明脚本执行解释器)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# do something&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;/n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh xx.sh
bash xx.sh #大部分情况下两个一样，某些命令只有bash有，只能用这个

or

chmod u+x xx.sh
./xx.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#查看运行时，每个命令回显，执行之后回显
sh -x xx.sh

#执行之前回显
sh -v xx.sh

#检查语法错误，不执行
sh -n xx.sh

#如果使用了未定义的变量，给出错误信息
sh -u xx.sh

#调试部分脚本
echo "Hello $USER,"
set -x
echo "Today is $(date %Y-%m-%d)"
set +x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;判断执行结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;N=$?  #0 &amp;lt;= N &amp;lt;= 255

0 无错误，正常执行结束
非0 异常
    1-125命令不成功退出
    126命令成功，但文件无法执行
    127命令找不到
    &amp;gt;128命令因收到信号而死亡
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取目录名和文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# To find base directory
APP_ROOT=`dirname "$0"`

# To find the file name
filename=`basename "$filepath"`

# To find the file name without extension
filename=`basename "$filepath" .html`

e.g.
BASEDIR=$(dirname $0)
cd $BASEDIR
CURRENT_DIR=`pwd`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TODAY=`date +%Y%m%d`
DAY_1_AGO=`date -d "$TODAY 1 days ago" +%Y%m%d`

常用接受日期/使用默认日期处理

if [ -n "$1" ]
then
    TODAY="$1"
else
    TODAY=`date +%Y%m%d`
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;crontab调度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;查看
crontab -l
编辑
crontab -e

格式
* * * * * command_path

字段      含义     范围
1        分钟         0-59
2        小时         0-23
3        日期         1-31
4        月份         1-12
5        星期几，0=周日   0-6
6        具体命令,可以是调用脚本

*任意时刻
n1,n2  分割，n1和n2
*/n  每隔n单位
n1-n2   时段，一个时段内

0 */2 * * * sh run.sh     每隔两小时
20 7 * * * sh run.sh 每天7:20
0 1,5 * * * sh run.sh 每天1点和5点
* * * * * sh run.sh 每分钟执行一次
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-san-bu-fen-bian-liang"&gt;第三部分 变量&lt;/h2&gt;
&lt;h4 id="1bian-liang-fu-zhi"&gt;1.变量赋值&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;varname="value"
varname=`expression`

注意，等号两边必须不能包含空格
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2fen-lei"&gt;2.分类&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;四种变量：环境变量、本地变量、位置变量、特定变量参数

环境变量可作用于所有子进程
本地变量在用户现在的shell 生命期的脚本中使用，仅存在于当前进程
位置变量：作为程序参数
特定变量：特殊作用
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3huan-jing-bian-liang"&gt;3.环境变量&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置
MYVAR="test"
expirt MYVAR
or
export MYVAR="test"

只读
MYVAR="test"
readonly MYVAR
or
readonly MYVAR="test"

显示
export -p
env #查看所有环境变量
$MYVAR #获取

消除
unset MYVAR
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4ben-di-bian-liang"&gt;4.本地变量&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置
LOCAL_VAR="test"
or
LOCAL_VAR="test"
readonly LOCAL_VAR #设置只读

还可以使用declare命令定义
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5wei-zhi-bian-liang"&gt;5.位置变量&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$0 脚本名称
$# 传递到脚本参数个数
$$ shell脚本运行当前进程ID
$? 退出状态
$N N&amp;gt;=1，第n个参数
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="6zi-fu-chuan-chu-li"&gt;6.字符串处理&lt;/h4&gt;
&lt;p&gt;长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#VARIABLE_NAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; 可以给出字符串的长度。

if [ &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#authy_api_key&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; != 32 ]
then
    return &lt;span class="nv"&gt;$FAIL&lt;/span&gt;
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拼接字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "$x$y"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串切片&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="err"&gt;变量名&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;起始&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;长度&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;得到子字符串

$ test='I love china'
$ echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
e china
$ echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
e china

str="hello world"
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;  # &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串替换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="err"&gt;变量&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;查找&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;替换值&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; 一个“/”表示替换第一个，”//”表示替换所有,当查找中出现了：”/”请加转义符”\/”表示
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #首个
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #所有
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正则匹配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if [[ $str =~ [0-9]+\.[0-9]+ ]]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="7shu-zhi-chu-li"&gt;7.数值处理&lt;/h4&gt;
&lt;p&gt;自增&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a=1
a=`expr a + 1`

or

a=1
let a++
let a+=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;let&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;no1=4
no2=5
let result=no1+no2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expr&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=`expr 3 + 4`
result=$(expr $no1 + 5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=$[ no1 + no2 ]
result=$[ $no + 5 ]

result=$(( no1 + 5 ))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浮点数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "4 * 0.56" | bc
设定精度
echo "scale=2;3/8" | bc
进制转换
echo "obase=2;100" | bc
平方
echo "sqrt(100)" | bc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组和map&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-si-bu-fen-kong-zhi-liu_1"&gt;第四部分 控制流&lt;/h2&gt;
&lt;h4 id="1tiao-jian-ce-shi"&gt;1.条件测试&lt;/h4&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test condition
[ condition ] #注意两边加空格

$? #获取判断结果，0表示condition=true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;条件测试中的逻辑&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a 与
-o 或
!  非
&amp;amp;&amp;amp;
||

if [ -n "$str" -a -f "$file" ]
if [ -n "$str" ] &amp;amp;&amp;amp; [ -f "$file" ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=   两字符串相等
!=  两字符串不等
-z  空串 [zero]
-n  非空串 [nozero]

[ -z "$EDITOR" ]
[ "$EDITOR" = "vi" ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数值测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-eq  数值相等（equal）
-ne  不等（not equal）
-gt  A&amp;gt;B（greater than）
-lt  A&amp;lt;B（less than）
-le  A&amp;lt;=B（less、equal）
-ge  A&amp;gt;=B（greater、equal）

N=130
[ "$N" -eq 130 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d目录
-f 普通文件（Regular file）

-e 文件存在
-z 文件长度=0
-s 文件长度大于0，非空

-b 块专用文件
-c 字符专用文件
-L 符号链接

-r Readable（文件、目录可读）
-w Writable（文件、目录可写）
-x Executable（文件可执行、目录可浏览）

-g 如果文件的set-group-id位被设置则结果为真
-u 文件有suid位设置
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2fen-zhi-if-elsecase"&gt;2.分支if-else/case&lt;/h4&gt;
&lt;p&gt;if-else语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if condition1
then
    //do thing a
elif condition2
then
    //do thing b
else
    //do thing c
fi

or

if condition; then
# do something
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;case语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;case $VAR in
    1)
        echo "abc"
        ;;
    2|3|4)
        echo "def"
        ;;
    *)
        echo "last"
        ;;
esac
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3xun-huan-forwhileuntil"&gt;3.循环for/while/until&lt;/h4&gt;
&lt;p&gt;for语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for VARIABLE in 1 2 3 4 5 .. N
do
    //commands
done

for OUTPUT in $(Linux-Or-Unix-Command-Here)
do
    //commands on $OUTPUT
done

#bash
for (( EXP1; EXP2; EXP3 ))
do
    //commands
done

例子

for i in 1 2 3 4 5; do
    echo $i
done

for i in `seq 1 5`; do
    echo $i
done

#!/bin/bash
echo "Bash version"
for i in $(seq 1 2 20)
do
   echo "Welcome $i times"
done

for i in {1..5}; do
    echo $i
done

#!/bin/bash
echo "Bash version"
for i in {0..10..2}
do
    echo "Welcome $i times"
done

for ((i=1; i&amp;lt;=10; i++)); do
    echo $i
done

#无限循环
#!/bin/bash
for (( ; ; ))
do
   echo "infinite loops [ hit CTRL+C to stop]"
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while condition
do
    //do something
done

COUNTER=0
while [ $COUNTER -lt 5 ]
do
    COUNTER=`expr $COUNTER + 1`
    echo $COUNTER
done


无限循环
while [ 1 ]
do
    //
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;until&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#执行命令，直到条件为真，至少执行一次，可以用来做监控，condition每次都回去检查
until condition
do
    //do something
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;break/continue&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;break
允许跳出循环，通常在进行一些列处理后退出循环或case语句
若多重循环，可指定跳出的循环个数，如跳出两重循环  break 2

continue
不会跳出循环，只是跳过此循环步
命令是程序在本循体内忽略下面的语句,从循环头开始执行
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-wu-bu-fen-han-shu_1"&gt;第五部分 函数&lt;/h2&gt;
&lt;h4 id="1han-shu-ding-yi"&gt;1.函数定义&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func_name() {&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;func_name() {&lt;/span&gt;
    &lt;span class="c1"&gt;//do some thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;函数名，在脚本中必须唯一
函数必须，先定义，后使用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;return&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;equal() {&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;equal&lt;/span&gt;
&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2can-shu-chuan-di_1"&gt;2.参数传递&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#位置参数&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyfile() {&lt;/span&gt;
    &lt;span class="nx"&gt;cp&lt;/span&gt; &lt;span class="nx"&gt;$1&lt;/span&gt; &lt;span class="nx"&gt;$2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;调用&lt;/span&gt;

&lt;span class="nx"&gt;copyfile&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="err"&gt;获取返回值&lt;/span&gt;
&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`copyfile /tmp/a /tmp/b`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;位置参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$1 - $9，当参数超过10个时，需要使用&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
$# 参数个数
$* 将所有参数视为一个字符串="$1 $2 ..."
$@ 将所有参数视为个体="$1" "$2" "$3"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3fan-hui-zhi-he-tui-chu-zhuang-tai"&gt;3.返回值和退出状态&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#返回值&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func_a() {&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`func_a`&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;then&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;span class="nx"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#退出状态&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func_b() {&lt;/span&gt;
    &lt;span class="c1"&gt;//do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;func_b&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;then&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;span class="nx"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#更简洁&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;func_b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;span class="nx"&gt;fi&lt;/span&gt;

&lt;span class="nx"&gt;func_b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-si-bu-fen-gao-ji_1"&gt;第四部分 高级&lt;/h2&gt;
&lt;p&gt;bash中参数展开-展开运算符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果变量未定义，返回默认值&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;noexist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s s-Atom"&gt;返回0&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果变量未定义，设置变量为默认值&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;noexists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="s s-Atom"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;noexists&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="s s-Atom"&gt;得到0&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;?message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;若未定义，显示varname:message并退出当前的命令或脚本&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s s-Atom"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;若存在且非null，返回word，否则返回null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式匹配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="c1"&gt;##pattern&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-wu-bu-fen-qi-ta"&gt;第五部分 其他&lt;/h2&gt;
&lt;p&gt;读文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while read -r line; do
    echo $line
done &amp;lt; file

保留首尾字符
while IFS= reaad -r line; do
    echo $line
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一些内置命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:
空命令，类似python的pass

.
相当于source

\
用于跨行命令

echo
输出，类似println

exec

exit n
脚本以n作为退出码退出

export
设置或显示环境变量

expr
简单计算
x=`expr $x + 1`
x=$(expr $x + 1)

let
d=111
let d=$d+1; echo $d
112

printf
格式化输出

return
函数返回

set

shift
所有参数变量左移一个位置

unset
从环境变量中删除变量或函数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BP:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用$() 代替反引号``
$(()) 代替expr运算符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GNU Bash 主页
http://www.gnu.org/software/bash/
GNU Bash 手册
http://www.gnu.org/software/bash/manual/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的特性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$((3 + 4))          而不需要 expr 3 + 4, 算术展开
/usr/{bin,local/bin}  而不需要 /usr/bin /usr/local/bin
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;       而不需要 echo &lt;span class="nv"&gt;$str&lt;/span&gt; | sed ”s/&lt;span class="nv"&gt;$src&lt;/span&gt;/&lt;span class="nv"&gt;$dst&lt;/span&gt;/”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更方便的语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for (( expr1; expr2; expr3 )); do
        commands
done
for (( i = 0; i &amp;lt; 100; i++ )); do … done
echo a{b,c,d}e  ==&amp;gt; abe ace ade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表达式求值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$[]    []$中间可以加表达式  eg: echo $[$a+$b]
$(())   (())中间可以加表达式。Eg： total=$(($a*$b))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash的正则表达式
str='hello, world'
if [[ $str =~ '\s+world$' ]]; then
    echo match!
fi
if echo "$str" | grep -E '[ ]+world$'; then
    echo match!
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取软连接指向的真实文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#注:有些系统没有这个命令
readlink /usr/bin/python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加debug&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debug() {&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="nx"&gt;$DEBUG&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="nx"&gt;then&lt;/span&gt;
        &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt;&amp;gt; $*"&lt;/span&gt;
    &lt;span class="nx"&gt;fi&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;debug&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt; &lt;span class="s2"&gt;"Trying to find config file"&lt;/span&gt;

&lt;span class="err"&gt;还有来自于一些很酷的&lt;/span&gt;&lt;span class="nx"&gt;Geeks&lt;/span&gt;&lt;span class="err"&gt;的单行&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="err"&gt;函数：&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debug() {&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt;&amp;gt; $*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debug() {&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"$DEBUG"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt;&amp;gt; $*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将执行日志全部写到某个文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exec &amp;gt;&amp;gt;"$LOGPATH"/xx.log.$TODAY 2&amp;gt;&amp;amp;1
#begin of code
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;</content><category term="linux"></category></entry><entry><title>读书笔记-程序员的思维训练</title><link href="http://www.wklken.me/posts/2014/01/05/pragmatic-thinking-and-learning.html" rel="alternate"></link><published>2014-01-05T00:00:00+08:00</published><updated>2014-01-05T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-05:/posts/2014/01/05/pragmatic-thinking-and-learning.html</id><summary type="html">&lt;p&gt;================&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;程序员的思维修炼——开发认知潜能的九堂课&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;不是教你学习如何写代码之类的，而是，如何使用大脑，培养习惯，训练自己的思维&lt;/p&gt;
&lt;p&gt;当然，不仅限于程序员，我觉得对大多数人都有适用性&lt;/p&gt;
&lt;p&gt;方法论，有点类似程序员的成功学的味道，选择性阅读和实践&lt;/p&gt;
&lt;p&gt;以下是摘录&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;诀窍汇总:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;诀窍一：始终关注情境
诀窍二：新手使用规则，专家使用直觉
诀窍三：知道你不知道什么
诀窍四：通过观察和模仿来学习
诀窍五：保持实践以维持专家水平
诀窍六：如果你需要创造力，直觉或者独创技能，避免使用形式方法
诀窍七：学习如何学习的技能
诀窍八：捕获所有的想法以从中获益更多
诀窍九：综合学习与分析学习并重
诀窍十：争取好的设计，它真的很有效
诀窍十一：重新连线大脑，坚信这一点并不断实践
诀窍十二：增加感官体验以促进大脑的使用
诀窍十三：R型开路，L型紧跟
诀窍十四：使用隐喻作为L型和R型相融之处
诀窍十五 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;================&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;程序员的思维修炼——开发认知潜能的九堂课&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;不是教你学习如何写代码之类的，而是，如何使用大脑，培养习惯，训练自己的思维&lt;/p&gt;
&lt;p&gt;当然，不仅限于程序员，我觉得对大多数人都有适用性&lt;/p&gt;
&lt;p&gt;方法论，有点类似程序员的成功学的味道，选择性阅读和实践&lt;/p&gt;
&lt;p&gt;以下是摘录&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;诀窍汇总:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;诀窍一：始终关注情境
诀窍二：新手使用规则，专家使用直觉
诀窍三：知道你不知道什么
诀窍四：通过观察和模仿来学习
诀窍五：保持实践以维持专家水平
诀窍六：如果你需要创造力，直觉或者独创技能，避免使用形式方法
诀窍七：学习如何学习的技能
诀窍八：捕获所有的想法以从中获益更多
诀窍九：综合学习与分析学习并重
诀窍十：争取好的设计，它真的很有效
诀窍十一：重新连线大脑，坚信这一点并不断实践
诀窍十二：增加感官体验以促进大脑的使用
诀窍十三：R型开路，L型紧跟
诀窍十四：使用隐喻作为L型和R型相融之处
诀窍十五：培养幽默感以建立更强大的隐喻
诀窍十六：离开键盘去解决难题
诀窍十七：改变解决问题的角度
诀窍十八：推迟下结论
诀窍十九：适应不确定性
诀窍二十：信任记录而不是记忆，每一次思维的输出都是一次输入
诀窍二十一：从多个角度看待问题
诀窍二十二：尊重不同人的不同性格
诀窍二十三：想高级动物一样行动，请做深呼吸，而不要张口嘶鸣
诀窍二十四：相信直觉，但是要验证
诀窍二十五：建立SMART任务实现你的目标
诀窍二十六：对主动学习的投资做好计划
诀窍二十七：发现你的最佳学习方式
诀窍二十八：组织学习小组学习和辅导
诀窍二十九：主动阅读
诀窍三十：同时用R型和L型做笔记
诀窍三十一：写文档的过程比文档本身更重要
诀窍三十二：观察、实践、教学
诀窍三十三：为了更好地学习，请更好地玩
诀窍三十四：从相似点中学习，从差异中忘却
诀窍三十五：在你的环境中安全地探索、创造和应用
诀窍三十六：观察，不做判断，然后行动
诀窍三十七：允许失败，你会走向成功
诀窍三十八：让大脑为成功形成惯例
诀窍三十九：学会集中注意力
诀窍四十：挤出思维时间
诀窍四十一：使用wiki来管理信息和知识
诀窍四十二：指定交流规则来管理干扰
诀窍四十三：少发送邮件，你就会少收到邮件
诀窍四十四：为邮件通信选择你自己的进度
诀窍四十五：屏蔽中断来保持注意力
诀窍四十六：使用多台显示器来避免情境切换
诀窍四十七：优化你的个人工作流以达到最大化情境
诀窍四十八：抓住方向盘，你不能自动驾驶
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-zhang-xu-lun"&gt;第一章 绪论&lt;/h3&gt;
&lt;p&gt;认知科学，神经学，学习和行为理论&lt;/p&gt;
&lt;p&gt;对大脑进行重新设计和重新连线——更高效的工作&lt;/p&gt;
&lt;p&gt;程序设计其实就是解决问题，需要发明，创造和灵感&lt;/p&gt;
&lt;p&gt;软件开发失败——我们自己的错误造成的，我们自身往往增加了程序设计的难度&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件是在头脑中创造的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最重要的两项技能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;沟通能力:简单，有效沟通的重要性
学习和思考能力: 学习能力，批判性的思考能力和创造力——完全取决于你自己
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个人都是不同的，尝试执行一些建议，在判断哪些对你有用&lt;/p&gt;
&lt;p&gt;随着不断成长和适应，人么需要改变自己的习惯和方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;切忌随波逐流&lt;/p&gt;
&lt;p&gt;一切都是互相关联的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有什么事物是孤立存在的，一切都是系统和更大的情境的一部分&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有些东西是基础的，各领域相通的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;瑜伽和冥想&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-er-zhang-cong-xin-shou-dao-zhuan-jia-de-li-cheng"&gt;第二章 从新手到专家的历程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;制造问题的思维方式无法用来解决问题 ——爱因斯坦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解释观察到的现象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;事件理论:可以被测量，验证或证明
构建理论：无形的抽象，无法被证明.通过它的用处来很亮的，无法判断准确与否
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新手和专家&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;专家——使工作看起来更轻松
通常很难把他们的行为恰如其分的解释清楚，如此熟练以至于已经变成无意识的。大量经验都是通过大脑而非语言、无意识区存储的，难以观察表述
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;清晰表述专业技能十分困难&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;新手和专家的根本区别，是他们看待世界的方式不同，反应也不同——不只是知道更多或者获得了技术，而且在如何认识世界，解决问题和形成思维模型等方面体验到的根本区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;德雷福斯模型针对每项技能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;德雷福斯模型的5个阶段&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.新手：经验很少或者根本没有经验（通过实施这项技术促进了思维的改变）
        新手需要指令清单
        可以通过与情境无关的规则。但是，规则只能让你启程，不会让你走的更远
2.高级新手：能够多少拜托固定规则，可以独立尝试任务，但是仍难以解决问题
            高级新手想要快速获取信息，但是不追根究底
            能够根据过去经验，逐步在正确的情境里采纳建议，但是比较吃力——开始形成一些总体原则
            高级新手不需要全局思维
3.胜任者：建立问题域的概念模型，并有效地使用它们，可以独立地解决自己遇到的问题
          胜任者能够解决问题
          有主动性、足智多谋
          还没有足够的能力反思和自我纠正
4.精通者：需要全局思维，围绕这个技术，寻找并想了解更大的概念框架
          能够纠正以往不好的工作表现，会烦死以前是如何做的，并修改其做法，期望下一次表现得更好——自我改进
          会学习他人经验
          有足够的经验，知道下一步会发生什么
          可以有效地运用软件模式
          更像初级的专家，而不是高级的胜任者
5.专家：各个领域知识和信息的主要来源，总是不断地寻找更好的方法和方式去做事
        根据直觉做事，不需要理由
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;规则断送专家&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直觉是专家的工具，但公司往往轻视它，错误地认为，不科学或不可重复&lt;/p&gt;
&lt;p&gt;敏捷开发&lt;/p&gt;
&lt;p&gt;开发人员之间存在20：1-40：1的生产力差异&lt;/p&gt;
&lt;p&gt;企业的压力和所谓的公平，伤害了新手和专家&lt;/p&gt;
&lt;p&gt;新手到专家的变化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;从依赖规则想依赖直觉转变
观念变化，问题已不再是一个相关度等同的所有单元的集合体，而是一个完整的独特的整体，其中只有某些单元是相关的
从问题的旁观者转变为问题涉及的系统本身
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数人都是高级新手&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;专家 != 老师&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直觉和模式匹配能力超载了显性知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十年成就专家？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;大约十年的努力，需要辛勤工作
-需要一个明确定义的任务
-任务需要有适当的难度——有挑战性但可行
-任务环境可以提供大量反馈，以便于你采取行动
-提供重复犯错和纠正错误的机会

一旦你成为某个领域的专家，在别的领域成为专家就变得更容易
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没有实践就没有技能,而且没有什么东西可以替代实践&lt;/p&gt;
&lt;p&gt;模仿-吸收-创新&lt;/p&gt;
&lt;p&gt;在实践中保持技能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优胜者不会帮扶失败者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编程专家必须持续编程，并找到一个有意义有价值的职业生涯&lt;/p&gt;
&lt;p&gt;警惕工具陷阱——规则无法告诉你在某种情况下应该采取的最合适的行动,不要屈服于工具或者模型的虚假权威。没有什么可以替代思考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;警惕非情境化的客观性&lt;/p&gt;
&lt;p&gt;一种规格并非处处适用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h3 id="di-san-zhang-ren-shi-ni-de-da-nao"&gt;第三章 认识你的大脑&lt;/h3&gt;
&lt;p&gt;L模式，线性模式:细致工作并实现目标&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;语言能力
分析能力
符号能力
抽象能力
时间能力
推理能力
数字能力
逻辑能力
线性思维能力
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;R模式，富模式:直觉、问题解决和创造性,对于复杂的问题，不受直接意识控制。异步的，可以作为后台进程运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;非语言
非理性
综合
空间性
具体
直觉
分析
全面

能够提供直觉（专家必要）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随时记录想法(24*7)&lt;/p&gt;
&lt;p&gt;钢笔、记事本、索引卡片、PDA、语音设备、&lt;/p&gt;
&lt;p&gt;每个人都有好点子，点子价值并不高。拥有想法-跟踪想法-付诸行动-成功实现&lt;/p&gt;
&lt;p&gt;设计胜于功能——商品化意味着美学品味的竞争&lt;/p&gt;
&lt;p&gt;神经可塑性，意味着你能够学习的最大容量或者你可以获得的基恩能够数量不是固定的,没有上限，只要你相信这一点&lt;/p&gt;
&lt;p&gt;多编码，深思熟虑，专注实践&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-si-zhang-li-yong-you-nao"&gt;第四章 利用右脑&lt;/h3&gt;
&lt;p&gt;启动感官输入——使用多感官技术，通过增强触觉获得成功  积木等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用多感官反馈&lt;/p&gt;
&lt;p&gt;刺激你的大脑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用右脑画画——学习绘画&lt;/p&gt;
&lt;p&gt;激活右脑：听音乐、绘画、静思、慢跑、针线活、攀岩等等 建立L-R型互相转换&lt;/p&gt;
&lt;p&gt;需要用R型打头阵，然后转到L型去“生产”出来&lt;/p&gt;
&lt;p&gt;酒醉写作，酒醒修改——顺其自然，不要做完美主义者，如果想法过早的收到束缚，那么创造力就会被扼杀&lt;/p&gt;
&lt;p&gt;结对编程——一个L型，一个R型&lt;/p&gt;
&lt;p&gt;L型和R型在隐喻（创建类比的过程）相同&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;隐喻，一中激发创造力的强大技术
语言和意向共同的基础，实在左右半脑之间，在潜意识和意识之间游弋的途径
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;幽默能力都来自于发掘或者扩展常规之外的关系，真正突破思维界限&lt;/p&gt;
&lt;p&gt;收获R型线索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;你已经知道——一切输入都会被存储
许多想法无法用语言表述
利用图像流
利用自由日记
晨写技术——坚持天天写，限定页数，各类，不用审查，倾倒想法
自由写技术
利用散步——非目标驱动思维，把一切写到某个地方，不要试图思考，记住它，简单记住，让事实和问题自由地浸泡
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;收获模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码，一次编写，多次阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换种思路，角度——逆向思维，夸大想法，组合完全异类的想法&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-wu-zhang-diao-shi-ni-de-da-nao"&gt;第五章 调试你的大脑&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;直觉是伟大的，除了当它不伟大的时候&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四大问题 (读一读：批判性思维/决策与判断)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;认知偏见——如何被误导：思维定势，基本归因错误，自私的偏见，需要定论，认可上的偏见
时代影响
个性倾向
硬件故障
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;推迟下结论——通过明确的概率进行猜想&lt;/p&gt;
&lt;p&gt;记忆是靠不住的&lt;/p&gt;
&lt;p&gt;认清时代影响——当你强烈的支持或赞成一个观点时，你的论据是逻辑性的还是情感作怪？&lt;/p&gt;
&lt;p&gt;了解个性倾向(MBTI性格测评)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E/I 外向内向
S/N 感觉直觉
T/F 思考情感
J/P 判断知觉

INTJ 内向 - 直觉 - 思考 - 判断
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-liu-zhang-zhu-dong-xue-xi"&gt;第六章 主动学习&lt;/h3&gt;
&lt;p&gt;学习：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;学习不是强加于你的，而是需要你主动做的事情
仅仅掌握知识，而不去实践，没有用
随机的方法，没有目标和反馈，往往会导致随机的结果
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;目标任务使你更靠近目标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SMART目标&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;具体，可度量，可实现，相关的，时间可控的
相关的：兴趣，热情
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建立一个务实的投资计划&lt;/p&gt;
&lt;p&gt;把技术和才干看做一个只是投资组合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;制定具体计划
    现在（你的下一步行动）
    明年的目标
    五年后的目标
多样化
    不要把所有的鸡蛋放到同一个篮子里：更好地组合语言，环境，技术，行业和非技术领域（管理、公共演讲、人类学、音乐、艺术等）
主动投资
    需要客观地按天来评估你的计划，判断运作情况
定期投资
    成本平均法——养成一种习惯
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用你的原生学习模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;视觉型
听觉型
动觉型
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多元智力&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;身体-动觉：体育、舞蹈、DIY项目、木工、工艺、烹饪
语言：口头辩论，讲故事、阅读和写作
逻辑-数学：数学，数字，科学，分类学，几何
视觉-空间：图标图解，素描，绘画等
音乐：演奏，识别声音，节奏，模式，记忆标语，诗文
人际：感情共鸣、感觉、意图、他人的鼓励
自我认知：自我反省、了解内心世界、梦，和他人的关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一起工作一起学习&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;寻求建议
选择一项提议或者一个负责人
买书
安排午餐会议
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用增强的学习方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主动阅读和总结书面材料的更好方式
使用思维导图探索和发现模式和关系
以教代学
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SQ3R主动阅读&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;调查(Survey)：扫描每章目录和总结，得出总的看法
问题(Question)：记录所有问题
阅读(Read)：阅读全部内容
复述(Recite)：总结，笔记，用自己的话描述
回顾(Review)：重读，扩展笔记，与同事讨论
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用思维导图&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-qi-zhang-ji-lei-jing-yan"&gt;第七章 积累经验&lt;/h3&gt;
&lt;p&gt;积累经验是学习和成长的关键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通过构造来学习，而不是通过学习来构造
更好的利用反馈，让失败也变得有意义
让大脑提前为成功构建神经网络
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;真正的学习——对你有用的学习——来自实践和认知，而不是外部的教学活动或者死记硬背&lt;/p&gt;
&lt;p&gt;玩耍的意义Play&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;非目的性的探索，不仅仅接受信息，而且亲自探索和构建思维模型，犯错，吸取经验
引入一种新奇的感觉，乐趣
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用一种好玩的方式学习新资料或者解决问题，可以让这个过程变得更让人销售，也让学习变得容易&lt;/p&gt;
&lt;p&gt;利用现有的知识&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;未知量是什么-已知量是什么-条件是什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正确对待实践中的失败——失败是成功的关键，但不是任意的失败，需要管理失败&lt;/p&gt;
&lt;p&gt;一种高效有益的学习环境应该允许你安全地做三件事：探索、创造、应用&lt;/p&gt;
&lt;p&gt;建立探索环境&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;自由实验-能够原路返回-重现任意时刻的工作产品-能够证实进展
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;了解内在诀窍&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通过探索可以学得更好，而不是指令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;培养情境反馈&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;意识
不要把精力放在纠正一个个细节上，只需要具有意识
不要想着来纠正，但是在出错的时候要知道，然后再采取行动纠正
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压力扼杀认知——当面对时间压力时，人最没有创造力.面对压力时，我们要放松&lt;/p&gt;
&lt;p&gt;允许失败——允许失败会促进成功.一旦允许失败，你就不会失败&lt;/p&gt;
&lt;p&gt;想象超越感官——从大脑中获取经验&lt;/p&gt;
&lt;p&gt;利用大脑模拟成功&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-ba-zhang-kong-zhi-zhu-yi-li"&gt;第八章 控制注意力&lt;/h3&gt;
&lt;p&gt;信息过载，需要更好地管理你的思维&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;增强注意力
管理你的知识
优化当前情境
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;放松的，集中的注意力&lt;/p&gt;
&lt;p&gt;如何冥想&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;沉浸到一种宽松的思维中，可以意识到自己和你的情境，不用做出任何判断和回应
——内观冥想：意识到某些事情，但是没有额外的思考

寻找一个安静的地方，拜托干扰或中断
舒适，清醒地坐着，挺直背
闭上眼睛，将注意力集中在呼吸
注意呼吸节奏，吸气的长度和质量，吸气后屏气的短暂间歇，呼气的质量，呼气后屏气的短暂间歇。不要试图去改变它，只是感受
将思维集中于呼吸，不要说或，不要描述任何想法，不要和自己交谈
每当注意力游荡开，摒弃想法，注意力回到呼吸上
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内心的平静与强大&lt;/p&gt;
&lt;p&gt;通过分散注意力来集中注意力&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;你必须有意识地忘掉问题，让问题在思维中浸泡一会
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不做某些事&lt;/p&gt;
&lt;p&gt;管理你的知识：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;有一个外部的系统，有效地记录、管理等，可以快速获取
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优化当前情境&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;多任务处理将耗费你百分之二十至四十的生产力
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;避免分心&lt;/p&gt;
&lt;p&gt;有效地组织和处理任务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;仅扫描输入队列一次
顺序地处理每组工作
不要再头脑中保留清单
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;积极主动地去管理干扰&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;制定项目交流的规则
放缓电子邮件，做到异步定时而非实时: 设定邮件通知-加大检查邮件间隔 - 注意设定期望答复的速度和电子邮件数量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保持情境的一个办法是，提高进出情境的物力成本，有助于提醒你隐藏的精神成本&lt;/p&gt;
&lt;p&gt;启动可屏蔽中断&lt;/p&gt;
&lt;p&gt;保存情境堆栈：出栈时记录关键词等，方便回来&lt;/p&gt;
&lt;p&gt;保持任务注意力&lt;/p&gt;
&lt;p&gt;如何保持注意力：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学会安慰喋喋不休的L型思维
2.主动在前进中思考和增强思想，即使是不成熟的
3.明确情境切换的昂贵代价，尽可能地避免
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="di-jiu-zhang-chao-yue-zhuan-jia"&gt;第九章 超越专家&lt;/h3&gt;
&lt;p&gt;有效地改变&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;制定计划
“不作为”是敌人，而“错误”不是
给新习惯适应的时间
信念是真实的
采取步步为营的细小步骤
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;明天上午做什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不管你能做什么，或者期望自己能做什么，现在就开始做。勇敢可以给人智慧，力量和神奇。现在就开始做吧——歌德

一个笔记本，涂鸦，思维导图，几比几
开始写博客，为读过的书写书评
让散步成为你每天生活的一部分
再拿一个显示器,开始使用虚拟桌面
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;认识你自己，人士当前时刻，认识你所处的情境&lt;/p&gt;
&lt;p&gt;自由的代价是永远提高警惕。这也是意识的代价&lt;/p&gt;
&lt;hr/&gt;</content><category term="books"></category></entry><entry><title>电影人生</title><link href="http://www.wklken.me/posts/2014/01/01/movies.html" rel="alternate"></link><published>2014-01-01T00:00:00+08:00</published><updated>2014-01-01T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-01:/posts/2014/01/01/movies.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;每一部电影，都是一种人生，感悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每周五是我的电影之夜，以后有了自己小窝之后一定要搞个影院&lt;/p&gt;
&lt;p&gt;会记录一些看过的，个人喜欢的电影&lt;/p&gt;
&lt;p&gt;每部电影，都能看到什么，获得些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;无人区&lt;/p&gt;
&lt;p&gt;饥饿游戏1 饥饿游戏2&lt;/p&gt;
&lt;p&gt;地心引力&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;时空恋旅人&lt;/p&gt;
&lt;p&gt;意外的恋爱时光&lt;/p&gt;
&lt;p&gt;一座城池&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;和summer的500天/好好先生&lt;/p&gt;
&lt;p&gt;黄铜茶壶&lt;/p&gt;
&lt;p&gt;光的棍&lt;/p&gt;
&lt;p&gt;哈利波特4-7(Luna)&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;每一部电影，都是一种人生，感悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每周五是我的电影之夜，以后有了自己小窝之后一定要搞个影院&lt;/p&gt;
&lt;p&gt;会记录一些看过的，个人喜欢的电影&lt;/p&gt;
&lt;p&gt;每部电影，都能看到什么，获得些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;无人区&lt;/p&gt;
&lt;p&gt;饥饿游戏1 饥饿游戏2&lt;/p&gt;
&lt;p&gt;地心引力&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;时空恋旅人&lt;/p&gt;
&lt;p&gt;意外的恋爱时光&lt;/p&gt;
&lt;p&gt;一座城池&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;和summer的500天/好好先生&lt;/p&gt;
&lt;p&gt;黄铜茶壶&lt;/p&gt;
&lt;p&gt;光的棍&lt;/p&gt;
&lt;p&gt;哈利波特4-7(Luna)&lt;/p&gt;</content><category term="life"></category></entry><entry><title>2013年终总结</title><link href="http://www.wklken.me/posts/2014/01/01/summary-08-2013end-2014begin.html" rel="alternate"></link><published>2014-01-01T00:00:00+08:00</published><updated>2014-01-01T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-01:/posts/2014/01/01/summary-08-2013end-2014begin.html</id><summary type="html">&lt;p&gt;每年写总结，总是一拖在拖，早几天就在想，今年做了些什么&lt;/p&gt;
&lt;p&gt;目测这篇总结要从今年写到明年：）&lt;/p&gt;
&lt;p&gt;好了，开始，依旧很杂，仅供看看......&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="jiao-bu"&gt;脚步&lt;/h3&gt;
&lt;p&gt;今年，去过两次海南（一次骑行一次公司旅游），一趟厦门（离老家一两小时的地方第一次去竟然是——从深圳杀过去的）.&lt;/p&gt;
&lt;p&gt;去海南，不在计划内的，突然想去，就去了......一路上都是大家在等我，胃出问题了，体能又不行。一路经历蛮多的，行走路上，看到异地，那里的人们是怎么生活的，感受一下。话说看海看到审美疲劳.......&lt;/p&gt;
&lt;p&gt;不记得太多，最深刻，莫过于最后一天到三亚，找青旅的路上，一个人，手机没电了，买了张地图，误打误撞骑到了鹿回头岭上，半山顶的一个平台，骑不动了把车停了躺在台阶上，看日落，对面是大海，有小岛，有轮船，夕阳，阳光透过云朵，照到海上，斑驳，海面，灿烂，摇曳 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;每年写总结，总是一拖在拖，早几天就在想，今年做了些什么&lt;/p&gt;
&lt;p&gt;目测这篇总结要从今年写到明年：）&lt;/p&gt;
&lt;p&gt;好了，开始，依旧很杂，仅供看看......&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="jiao-bu"&gt;脚步&lt;/h3&gt;
&lt;p&gt;今年，去过两次海南（一次骑行一次公司旅游），一趟厦门（离老家一两小时的地方第一次去竟然是——从深圳杀过去的）.&lt;/p&gt;
&lt;p&gt;去海南，不在计划内的，突然想去，就去了......一路上都是大家在等我，胃出问题了，体能又不行。一路经历蛮多的，行走路上，看到异地，那里的人们是怎么生活的，感受一下。话说看海看到审美疲劳.......&lt;/p&gt;
&lt;p&gt;不记得太多，最深刻，莫过于最后一天到三亚，找青旅的路上，一个人，手机没电了，买了张地图，误打误撞骑到了鹿回头岭上，半山顶的一个平台，骑不动了把车停了躺在台阶上，看日落，对面是大海，有小岛，有轮船，夕阳，阳光透过云朵，照到海上，斑驳，海面，灿烂，摇曳，很美，很宁静.....&lt;/p&gt;
&lt;p&gt;这一趟，不虚此行&lt;/p&gt;
&lt;p&gt;很遗憾，手机没电，各种没电，这幅场景，只能在脑海了&lt;/p&gt;
&lt;p&gt;五一那趟去海南，晒得很黑，一路行来，不记得多少公里，深圳汽车到海口，骑车到三亚，再高铁回海口飞回深圳.一路行来没去什么景点，没看到什么名胜&lt;/p&gt;
&lt;p&gt;想到一些东西，学到一些东西，有些感受，足以，走了多远，并不是很重要吧&lt;/p&gt;
&lt;p&gt;后来去的那一趟，玉带滩，天涯海角，非诚勿扰拍摄地等等，该看的都看回来了，反而没什么感觉，不过大巴走的路线和骑行有一段重复，想着当初爬那坡爬到要挂的心情......感受颇多，对了，有个地方叫做长坡镇，坡真的很长，真的....&lt;/p&gt;
&lt;p&gt;厦门之旅，太赶，权当回家乡了，鼓浪屿什么的，时间有限，满景点都是人，感觉并不如何&lt;/p&gt;
&lt;p&gt;今年虽然没满万里，勉强七八千里还是有的，额，大部分还是交通工具.&lt;/p&gt;
&lt;p&gt;庆幸的是，高铁开了，以后回家4小时，票价150，幸甚，以后回家不愁了&lt;/p&gt;
&lt;p&gt;行走，并不一定为了什么，不是公里数，不是任何数，带着问题或者不带着问题，拍照或者不拍照，到一个地方，有一些经历，有一些感受，最好再想清楚一两件事，也就足够了吧&lt;/p&gt;
&lt;p&gt;2014，继续行走&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="gong-zuo"&gt;工作&lt;/h3&gt;
&lt;p&gt;去年从杭州离职到深圳，整整一年又两个月。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么从豆瓣离职：作为一个程序员，不加班我感到很空虚....
                            -- 知乎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刨掉前两个月，2013一整年，好像没加过几次班，单手可以数......一方面公司不提倡，提供了好的氛围，另一方面，更高效更懂得时间管理执行力更高了（自夸嫌疑，^_^，工作两年多了，好歹有点进步）&lt;/p&gt;
&lt;p&gt;当然，一方面今年没有涉及到特别赶的项目&lt;/p&gt;
&lt;p&gt;其实，真心觉得，懂得管理好自己，学会规划，时间的安排，足够强大的执行力，足够强的沟通，那么，每天八小时，足够了。&lt;/p&gt;
&lt;p&gt;足够高效代表足够的产出，不需要额外通过加班弥补产出的不足。时间多，可以投入提升产能，良性循环&lt;/p&gt;
&lt;p&gt;加班可能陷入恶性循环，好吧.&lt;/p&gt;
&lt;p&gt;不扯了，今年工作上算是像个“有经验的”工程师了，项目各个流程，时间规划，执行，感觉比一年前的我进步许多，原来可能只知道怎么做，现在趋向于，怎么做的更好。&lt;/p&gt;
&lt;p&gt;年中的时候，需要作为类似“组长”角色的角色，带着大家干活，其实感觉半年多下来，做的并不怎么好，只是做一些日常，提供必要的帮助和协调，跟进和处理。各种不完美，拥抱变化，尝试去学习，去处理。也在慢慢进步吧，虽然挺慢的，逐渐学习很多东西......&lt;/p&gt;
&lt;p&gt;今天还在翻tower，查看今年自己干了什么，发现除了将整体搜索重构，写了个识别程序，其他的项目好像都有打酱油的嫌疑，或许做的不错，感觉不在兴趣点上吧，起码成就感没有爆.今年真没干嘛，更多的是各种需求的支持和处理。&lt;/p&gt;
&lt;p&gt;也要反思一下，自己更喜欢做什么。做的事情如果恰好和兴趣匹配，那么项目绝对可以做到超出期望，匹配度一般的话，满足期望.......不匹配的话，3.25.....&lt;/p&gt;
&lt;p&gt;现在上班，要打卡，虽然是十点上班，但是总觉得打卡对于工程师而言，蛮不对味的，虽然现在习惯了....
还有一个，要绩效，填那些东西对目标感比较强的人来说，浪费太多时间，年底上了个系统，已经很方便客观了。明白一个道理，好的工具，对不需要的人（或者认为自己不需要），再好也是浪费时间，对需要的人，绝对是提升产出产能的利器.&lt;/p&gt;
&lt;p&gt;今年工作，有亮点，有槽点，一年过来，算是蛮顺利的，给自己勉强80优秀，再接再厉，希望明年正正经经做几件自我认同的事情出来&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="du-shu"&gt;读书&lt;/h3&gt;
&lt;p&gt;既然不加班，那么多时间怎么花，这是个问题，尤其哥还单身...&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;还是在保持每月买几本书的节奏，然后当当京东偶尔满400-200的活动手贱忍不住会参加，然后，年第一盘算，加上10来本兑换的，一共90+本&lt;/p&gt;
&lt;p&gt;买书如山倒，读书如抽丝，哎&lt;/p&gt;
&lt;p&gt;仔细算下来，读过的有20+本（我指的读过DONE是指，两遍以上，有笔记总结的，技术类的我会给“它”脱水），看多的应该也有20+本（看过，一遍），总共应该占了50%以上，应该算还行的程度，剩余50%，只能排到2014了&lt;/p&gt;
&lt;p&gt;最近看到码农周刊和知乎的 2013书单，又要下手，不过打算开始电子版了，非技术类的，都电子版，纸质版的搬家绝对是个悲剧......&lt;/p&gt;
&lt;p&gt;没什么事，不知道做什么，就读书吧，总会有收获的，或多或少&lt;/p&gt;
&lt;p&gt;怎么挑书，微博，知乎，别人推荐的，热门的一般都不会差，可以一读（当然，远离大部分成功学的书，只有很少一部分是可读的）&lt;/p&gt;
&lt;p&gt;为什么要读？理由有很多，知识改变命运，这句话很老，但并不可笑.&lt;/p&gt;
&lt;p&gt;怎么读？貌似不需要记住吧？有印象，收获一些观点，一些感悟，对自己有帮助，足够了吧？&lt;/p&gt;
&lt;p&gt;反正，我现在工作中用到的，90%以上，纯属毕业到现在自学.....主要途径还是读书&lt;/p&gt;
&lt;p&gt;知乎上有一个话题，什么东西大大提升你的幸福感，排前有一个:kindle&lt;/p&gt;
&lt;p&gt;总之，今年读书勉强60及格，后续买书走电子版，入手需三思再三思.....&lt;/p&gt;
&lt;p&gt;附，&lt;a href="http://www.wklken.me/pages/books.html"&gt;我的书单&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="bo-ke-xiang-mu"&gt;博客&amp;amp;项目&lt;/h3&gt;
&lt;p&gt;写博客，主要为了积累和分享&lt;/p&gt;
&lt;p&gt;博客年初过来深圳后，就不再csdn上更新了，迁移，期间自己去写了一个博客程序（重复造轮），后来又废弃了（囧），后来终于找到满意的，修改了主题，就是现在这个博客，pelican静态化到美帝digitalocean服务器，然后就可以通过vim直接写，不需要考虑格式啊排版乱七八糟的东西，一键维护到github，自动更新到服务器，刷新文章列表.&lt;/p&gt;
&lt;p&gt;博文，40+篇，不算高产，有一段时间迷上翻译，所以有一部分翻译文章，刚开始发了一些笔记总结，还有很多初稿没更新上来，很多东西，只有感觉了可以，才会发（即使这样，质量和深度也就一般，需要继续修炼）&lt;/p&gt;
&lt;p&gt;有几篇类似读书笔记的东西，大部分笔记还在evernote里存着，后续整理发出&lt;/p&gt;
&lt;p&gt;继续坚持写吧，每每回头看，总会有感受&lt;/p&gt;
&lt;p&gt;关于项目&lt;/p&gt;
&lt;p&gt;今年没搞出什么东西来，哎&lt;/p&gt;
&lt;p&gt;现在自己维护的项目列表  &lt;a href="http://www.wklken.me/pages/projects.html"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个配置，蛮多人用的，打算2014再更新一个版本，让更多pythonista和vim党用起来.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/stackoverflow-py-top-qa"&gt;stackoverflow-py-top-qa&lt;/a&gt;那一两个月，开始翻译，翻译了一百多个问题，你问我怎么搞出来的，我也不知道，一天翻译几个一天翻译几个，就那么多了，还欠着100+问题，2014春节争取搞完，不能再欠了&lt;/p&gt;
&lt;p&gt;其他，真没什么了，写过三个程序，都夭折了，前几天给自己新建了几个，争取2014完成两个，争取也加入一些自己感兴趣的项目&lt;/p&gt;
&lt;p&gt;博客，80分，项目60，都不是很满意，2014希望有改变吧&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="sheng-huo"&gt;生活&lt;/h3&gt;
&lt;p&gt;在地铁站旁边的小区住，现在也一年多了，房间虽小，但是有一个书柜，靠近街道有点吵，但是胜在能晒到太阳。&lt;/p&gt;
&lt;p&gt;上半年把蒸功夫和麦当劳通关N次，终于疲倦了，开始自己DIY，目前会煮面，会煮稀饭，会做个咖喱饭，勉强喂饱自己，不容易啊.......学会做饭使用一个必须的生存技能，饿，没错。成为一个厨子的道路还需要经历一段漫长(并且黑暗)的时间......&lt;/p&gt;
&lt;p&gt;周末，基本睡半天，下午做窗户边晒太阳看书，晚上写代码到深夜，周天早出去溜溜，步行个七八公里，到海边或者绿道公园走走，权当锻炼身体了......没车也就远离骑行了&lt;/p&gt;
&lt;p&gt;蛮充实的，也蛮单调的，真的很单调&lt;/p&gt;
&lt;p&gt;发现我正在从一般宅迈向终极宅的道路上大步踏去，o(╯□╰)o&lt;/p&gt;
&lt;p&gt;生活，40分，哎，这次真的不及格&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;去年还在想，更快的从windows转到ubuntu，今年年初果断皈依mac了......计划赶不上变化&lt;/p&gt;
&lt;p&gt;macbook给我带来的是最最最根本的，提升？额，可以用这个词，直接废弃公司的电脑了，每天上下班背着电脑，虽然不怎么方便，但是一整年下来mac为我节约的时间不是按几个小时算的......今年做的最正确的事之一&lt;/p&gt;
&lt;p&gt;今年的唯一变化是不上网易了，负能量太多，只能刷刷知乎了.....依旧刷微博，只是频率低了很多&lt;/p&gt;
&lt;p&gt;不再读小说，自从上次读完平凡的世界，现在唯一只追一本小说了，现在的小说带来的快乐和花费的时间完全不成比例，干脆戒了&lt;/p&gt;
&lt;p&gt;今年也错过了很多事情，哎&lt;/p&gt;
&lt;p&gt;很多目标没有达到，很多事情没有做成&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="che-dian-qi-ta-de"&gt;扯点其他的&lt;/h3&gt;
&lt;p&gt;几点&lt;/p&gt;
&lt;p&gt;Live your life——过自己真正想要的生活，不是别人的，家人的或者别人眼里的，别人想要的，别人要求的生活，不管世俗不世俗，起码要想清楚，我想要的是什么，我想要过的生活又是什么。我也还没怎么明白，在思考，很容易知道自己不喜欢什么，但是很难搞明白自己想要什么&lt;/p&gt;
&lt;p&gt;做喜欢的事情——很重要，或许要花很长一段时间才能明白.我大体想明白了&lt;/p&gt;
&lt;p&gt;做点事情——要做事情，不管喜不喜欢，不可能所有的事情都是自己喜欢的，生活没有那么完美，不喜欢的，一样要做好，有句话叫做：做好当下你认为正确的事情。我一直在坚守的原则之一&lt;/p&gt;
&lt;p&gt;创造价值——总是要创造一些东西的，生活的意义&lt;/p&gt;
&lt;p&gt;每天进步一点点——哪怕真的只有一点点.例如背单词.....&lt;/p&gt;
&lt;p&gt;有一些事情注定我当下想不明白，性格的缺陷导致容易优柔寡断，哎，奈何，奈何。只能尽力克服了&lt;/p&gt;
&lt;p&gt;好了，鸡汤完了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2013已远去，写到一般（好多错字有木有....）的时候，不知不觉，已经迈入2014了&lt;/p&gt;
&lt;p&gt;从今天开始的很长一段时间，要去纠正时间签名老是签成2013......&lt;/p&gt;
&lt;p&gt;2014，新的开始和起点，也意味着新的计划(去年的计划貌似有一些没实现，具体是什么我也忘了....)&lt;/p&gt;
&lt;p&gt;计划永远赶不上变化的，但是我们依旧要计划，总比没有强:)&lt;/p&gt;
&lt;p&gt;干嘛去？&lt;/p&gt;
&lt;p&gt;做几个自己满意的项目(工作相关)&lt;/p&gt;
&lt;p&gt;继续读书(先清库存，再入新书)&lt;/p&gt;
&lt;p&gt;继续搞一些自己想写的代码(路漫漫)&lt;/p&gt;
&lt;p&gt;到某个地方去旅行（不是旅游）&lt;/p&gt;
&lt;p&gt;回学校一趟&lt;/p&gt;
&lt;p&gt;.........&lt;/p&gt;
&lt;p&gt;暂时没想好,想好了就去做，这就够了吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;all right!&lt;/p&gt;
&lt;p&gt;再见，2013&lt;/p&gt;
&lt;p&gt;你好，2014&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2014-01-01(刚才又签成2013了.....(╯‵□′)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</content><category term="总结"></category></entry><entry><title>[翻译]Python中staticmethod和classmethod的差异</title><link href="http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html" rel="alternate"></link><published>2013-12-22T00:00:00+08:00</published><updated>2013-12-22T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-12-22:/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</id><summary type="html">&lt;p&gt;原文地址 &lt;a href="http://www.pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很短，顺手一翻&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="class-vs-static-methods-in-python"&gt;Class vs static methods in Python&lt;/h3&gt;
&lt;p&gt;这篇文章试图解释：什么事staticmethod/classmethod,并且这两者之间的差异.&lt;/p&gt;
&lt;p&gt;staticmethod和classmethod均被作为装饰器，用作定义一个函数为"staticmethod"还是"classmethod"&lt;/p&gt;
&lt;p&gt;如果想要了解Python装饰器的基础，可以看 &lt;a href="http://www.pythoncentral.io/python-decorators-overview/"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="simple-static-and-class-methods"&gt;Simple, static and class methods&lt;/h3&gt;
&lt;p&gt;类中最常用到的方法是 实例方法(instance methods), 即，实例对象作为第一个参数传递给函数&lt;/p&gt;
&lt;p&gt;例如，下面是一个基本的实例方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;原文地址 &lt;a href="http://www.pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很短，顺手一翻&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="class-vs-static-methods-in-python"&gt;Class vs static methods in Python&lt;/h3&gt;
&lt;p&gt;这篇文章试图解释：什么事staticmethod/classmethod,并且这两者之间的差异.&lt;/p&gt;
&lt;p&gt;staticmethod和classmethod均被作为装饰器，用作定义一个函数为"staticmethod"还是"classmethod"&lt;/p&gt;
&lt;p&gt;如果想要了解Python装饰器的基础，可以看 &lt;a href="http://www.pythoncentral.io/python-decorators-overview/"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="simple-static-and-class-methods"&gt;Simple, static and class methods&lt;/h3&gt;
&lt;p&gt;类中最常用到的方法是 实例方法(instance methods), 即，实例对象作为第一个参数传递给函数&lt;/p&gt;
&lt;p&gt;例如，下面是一个基本的实例方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ik1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'arun'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ik2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'seema'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ik1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ik2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的输出:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arun
seema
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用关系图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="translate1" src="/imgs/translate/trans-classmethod-staticmethod-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;查看代码和图解:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1/2 参数传递给函数
3   self参数指向实例本身 
4   我们不需要显式提供实例，解释器本身会处理
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假如我们想仅实现类之间交互而不是通过实例？我们可以在类之外建立一个简单的函数来实现这个功能，但是将会使代码扩散到类之外，这个可能对未来代码维护带来问题。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_no_of_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cls_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nx"&gt;ik1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;ik2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;get_no_of_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;h3 id="the-python-classmethod"&gt;The Python @classmethod&lt;/h3&gt;
&lt;p&gt;现在我们要做的是在类里创建一个函数，这个函数参数是类对象而不是实例对象.&lt;/p&gt;
&lt;p&gt;在上面那个实现中，如果要实现不获取实例,需要修改如下:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;iget_no_of_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ins_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ins_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nx"&gt;ik1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;ik2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;iget_no_of_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ik1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;结果&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用Python2.2引入的新特性，使用@classmethod在类代码中创建一个函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="kd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_no_of_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cls_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_inst&lt;/span&gt;

&lt;span class="nx"&gt;ik1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;ik2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;ik1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_no_of_instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_no_of_instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get the following output:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2
2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="the-python-staticmethod"&gt;The Python @staticmethod&lt;/h3&gt;
&lt;p&gt;通常，有很多情况下一些函数与类相关，但不需要任何类或实例变量就可以实现一些功能.&lt;/p&gt;
&lt;p&gt;比如设置环境变量，修改另一个类的属性等等.这种情况下，我们也可以使用一个函数，一样会将代码扩散到类之外（难以维护）&lt;/p&gt;
&lt;p&gt;下面是一个例子:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;IND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ON'&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;checkind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;IND&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'ON'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;do_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;checkind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Reset done for:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;set_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;checkind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'new db connection'&lt;/span&gt;
            &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'DB connection made for:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;ik1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ik1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;do_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;ik1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Reset done for: 12
DB connection made for: 12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们使用@staticmethod, 我们可以将所有代码放到类中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;IND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ON'&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;

    &lt;span class="kd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;checkind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;IND&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'ON'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;do_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Reset done for:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;set_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'New db connection'&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'DB connection made for: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;ik1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ik1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;do_reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;ik1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Reset done for: 12
DB connection made for: 12
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="how-staticmethod-and-classmethod-are-different"&gt;How @staticmethod and @classmethod are different&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;smethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Static:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Class:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ik = Kls(23)
&amp;gt;&amp;gt;&amp;gt; ik.printd()
23
&amp;gt;&amp;gt;&amp;gt; ik.smethod()
Static: ()
&amp;gt;&amp;gt;&amp;gt; ik.cmethod()
Class: (&amp;lt;class '__main__.Kls'&amp;gt;,)
&amp;gt;&amp;gt;&amp;gt; Kls.printd()
TypeError: unbound method printd() must be called with Kls instance as first argument (got nothing instead)
&amp;gt;&amp;gt;&amp;gt; Kls.smethod()
Static: ()
&amp;gt;&amp;gt;&amp;gt; Kls.cmethod()
Class: (&amp;lt;class '__main__.Kls'&amp;gt;,)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图解&lt;/p&gt;
&lt;p&gt;&lt;img alt="translate2" src="/imgs/translate/trans-classmethod-staticmethod-2.png"/&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>[翻译]Python中如何使用*args和**kwargs</title><link href="http://www.wklken.me/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html" rel="alternate"></link><published>2013-12-21T00:00:00+08:00</published><updated>2013-12-21T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-12-21:/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</id><summary type="html">&lt;p&gt;不知道有没有人翻译了，看到了，很短，顺手一翻&lt;/p&gt;
&lt;p&gt;原文地址 &lt;a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;或者可以叫做，在Python中如何使用可变长参数列表&lt;/p&gt;
&lt;h3 id="han-shu-ding-yi"&gt;函数定义&lt;/h3&gt;
&lt;p&gt;这是一种特殊的语法，在函数定义中使用*args和&lt;strong&gt;kwargs传递可变长参数.  *args用作传递非命名键值可变长参数列表（位置参数）; &lt;/strong&gt;kwargs用作传递键值可变长参数列表&lt;/p&gt;
&lt;p&gt;下面的例子传递一个位置参数以及两个可变长参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;formal arg: 1
another arg: two
another arg: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个键值的例子，传递一个位置参数和两个键值参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;不知道有没有人翻译了，看到了，很短，顺手一翻&lt;/p&gt;
&lt;p&gt;原文地址 &lt;a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;或者可以叫做，在Python中如何使用可变长参数列表&lt;/p&gt;
&lt;h3 id="han-shu-ding-yi"&gt;函数定义&lt;/h3&gt;
&lt;p&gt;这是一种特殊的语法，在函数定义中使用*args和&lt;strong&gt;kwargs传递可变长参数.  *args用作传递非命名键值可变长参数列表（位置参数）; &lt;/strong&gt;kwargs用作传递键值可变长参数列表&lt;/p&gt;
&lt;p&gt;下面的例子传递一个位置参数以及两个可变长参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;formal arg: 1
another arg: two
another arg: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个键值的例子，传递一个位置参数和两个键值参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_kwargs(farg, **kwargs):
    print "formal arg:", farg
    for key in kwargs:
        print "another keyword arg: %s: %s" % (key, kwargs[key])

test_var_kwargs(farg=1, myarg2="two", myarg3=3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;formal arg: 1
another keyword arg: myarg2: two
another keyword arg: myarg3: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="han-shu-diao-yong"&gt;函数调用&lt;/h3&gt;
&lt;p&gt;这种语法不仅在函数定义中可以使用，在调用函数是也会出现&lt;/p&gt;
&lt;p&gt;(相当于extract package的效果)&lt;/p&gt;
&lt;p&gt;在调用函数时，使用&lt;em&gt;args和&lt;/em&gt;*kwargs&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args_call(arg1, arg2, arg3):
    print "arg1:", arg1
    print "arg2:", arg2
    print "arg3:", arg3

args = ("two", 3)
test_var_args_call(1, *args)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**kwargs&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args_call(arg1, arg2, arg3):
    print "arg1:", arg1
    print "arg2:", arg2
    print "arg3:", arg3

kwargs = {"arg3": 3, "arg2": "two"}
test_var_args_call(1, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>Python招聘需求与技能体系</title><link href="http://www.wklken.me/posts/2013/12/21/python-jd.html" rel="alternate"></link><published>2013-12-21T00:00:00+08:00</published><updated>2013-12-21T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-jd.html</id><summary type="html">&lt;p&gt;目前国内的招聘Python，基本都是偏向web后台开发，偶有高大上的数据挖掘&amp;amp;机器学习&lt;/p&gt;
&lt;p&gt;这是之前(2012年)找工作整理的一些JD，在梳理几年来的笔记，顺带理一理&lt;/p&gt;
&lt;p&gt;可以以此建立自己的技能体系&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-bu-fen-yi-xie-yao-qiu"&gt;第一部分: 一些要求&lt;/h3&gt;
&lt;p&gt;1.学历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式： 计算机及相关专业本科及以上学历.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不解释，不说明&lt;/p&gt;
&lt;p&gt;毕业后很少再看学历了，更多的是看能力吧（我会告诉你第一年周围都是硕士博士海龟么，俺学历最低，自卑啊）&lt;/p&gt;
&lt;p&gt;见过数学系、物理系、信息自动化系的跑过来当码农，唯一遗憾的是还没有见到中文系的.....&lt;/p&gt;
&lt;p&gt;2.经验&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：拥有X年以上经验，至少独立负责过X个项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很蛋疼的东西，见过一年经验用N年的，也见过一年拥有N年经验的&lt;/p&gt;
&lt;p&gt;受环境影响，但更多的是取决于个人&lt;/p&gt;
&lt;p&gt;听过一句话：人和人的唯一区别，就是有木有主观能动性（略有些偏激，但是有道理）&lt;/p&gt;
&lt;p&gt;3.基础素质&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：具有良好的XXXX

编码规范/风格
文档书写习惯
沟通与表达能力 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;目前国内的招聘Python，基本都是偏向web后台开发，偶有高大上的数据挖掘&amp;amp;机器学习&lt;/p&gt;
&lt;p&gt;这是之前(2012年)找工作整理的一些JD，在梳理几年来的笔记，顺带理一理&lt;/p&gt;
&lt;p&gt;可以以此建立自己的技能体系&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-bu-fen-yi-xie-yao-qiu"&gt;第一部分: 一些要求&lt;/h3&gt;
&lt;p&gt;1.学历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式： 计算机及相关专业本科及以上学历.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不解释，不说明&lt;/p&gt;
&lt;p&gt;毕业后很少再看学历了，更多的是看能力吧（我会告诉你第一年周围都是硕士博士海龟么，俺学历最低，自卑啊）&lt;/p&gt;
&lt;p&gt;见过数学系、物理系、信息自动化系的跑过来当码农，唯一遗憾的是还没有见到中文系的.....&lt;/p&gt;
&lt;p&gt;2.经验&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：拥有X年以上经验，至少独立负责过X个项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很蛋疼的东西，见过一年经验用N年的，也见过一年拥有N年经验的&lt;/p&gt;
&lt;p&gt;受环境影响，但更多的是取决于个人&lt;/p&gt;
&lt;p&gt;听过一句话：人和人的唯一区别，就是有木有主观能动性（略有些偏激，但是有道理）&lt;/p&gt;
&lt;p&gt;3.基础素质&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：具有良好的XXXX

编码规范/风格
文档书写习惯
沟通与表达能力，逻辑思维清晰
团队合作
动手能力/独立工作能力
进取心，求知欲，工作热情
善于学习，乐于分享，快速学习能力
能承受较大的工作压力
执行力
责任感
英文阅读能力
创新精神
对新技术敏感
独立分析、设计、解决问题的能力
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些都相对比较“虚”，不怎么好考察，面试+试用可以相对客观了解是否符合&lt;/p&gt;
&lt;p&gt;个人认为，责任感+执行力，这两点足够了，其他一般不会差。&lt;/p&gt;
&lt;p&gt;自我驱动的人，永远会get things done.所以会不断去弥补自己的短板，其他对应能力即使不足，也能很快弥补&lt;/p&gt;
&lt;p&gt;4.加分项&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：XXXX优先

使用*nix系统
vim/Emacs编辑器
对开源技术有强烈兴趣和爱好，参与提交bug/patch
各种技术/经验(前端/hadoop/机器学习/数据挖掘/函数式编程)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为毛不是osx系统(╯‵□′)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;从一些侧面，查看一个人的特质吧&lt;/p&gt;
&lt;p&gt;5.提供&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式: XXXX账号/地址

博客地址
github/bitbucket
stackoverflow
知乎
微博
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搞技术的，很有必要建立自己的领地，搞一些东西&lt;/p&gt;
&lt;p&gt;分享，更重要的是积累&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-er-bu-fen-gan-huo"&gt;第二部分：干货&lt;/h3&gt;
&lt;p&gt;关于Python后端开发要求&lt;/p&gt;
&lt;p&gt;1.对Python有兴趣，熟悉Python(标准库)&lt;/p&gt;
&lt;p&gt;最好阅读过源码&lt;/p&gt;
&lt;p&gt;了解Python的优化(熟悉pypy更佳)&lt;/p&gt;
&lt;p&gt;2.至少至少一门语言（不说“精通”）&lt;/p&gt;
&lt;p&gt;起码熟悉其他基本语言&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C/C++  Lisp Haskell Scheme golang erlang Java R Ruby Node.js PHP Perl Lua

我选了Java(曾经擅长)/Golang/Lisp/Ruby/C/C++
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.数据结构和算法&lt;/p&gt;
&lt;p&gt;数据结构和算法基础扎实&lt;/p&gt;
&lt;p&gt;4.Python框架&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Django/Tornado/Flask/Gevent/Web.py/Bottle/Celery/Twisted/NumPy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.熟悉Linux&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;基本操作和命令
会Shell
版本Git/Svn
部署相关: Nginx/Gunicorn/Fabric/Virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.数据库&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;熟悉Mysql等关系数据库使用
熟悉数据库设计
熟悉数据库调优/优化
有NoSQL使用经验 Redis/MongoDB等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.后端技术相关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Redis
Memcached
RabbitMQ/ZeroMQ
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.网络编程基础&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;熟悉tcp/ip协议，熟悉网络编程
了解常见的网络模型
多线程
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9.前端相关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;熟悉Web开发相关知识
熟悉HTML/CSS/Javascript/JQuery
熟悉AngularJS
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10.其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;数据抓取，爬虫
beautifulsoup/scrapy

机器学习/数据挖掘/自然语言处理（推荐算法）

TDD

高并发系统
大容量存储系统
消息系统

Linux系统编程/网络编程
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基于此，去构建自己的技能体系，然后针对各项逐渐深入&lt;/p&gt;
&lt;p&gt;就这些，骚年，努力练级去吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-12-21&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python模板-Jinja2</title><link href="http://www.wklken.me/posts/2013/12/21/python-template-jinja2.html" rel="alternate"></link><published>2013-12-21T00:00:00+08:00</published><updated>2013-12-21T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-template-jinja2.html</id><summary type="html">&lt;p&gt;&lt;img alt="jinja" src="/imgs/python/jinja.png"/&gt;&lt;/p&gt;
&lt;p&gt;Jinja2的一些使用摘要&lt;/p&gt;
&lt;p&gt;Jinja2作为flask的默认页面模板，感觉蛮强大的，可适用于各种模板类相关的项目&lt;/p&gt;
&lt;p&gt;特别是模板继承，写页面很舒服&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;文档 http://jinja.pocoo.org/docs/&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install jinja2
sudo pip install jinja2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhong-duan-ban-helloworld"&gt;终端版helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello {{ name }}!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="he"&gt;{%和{{&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;navigation&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="jinja" src="/imgs/python/jinja.png"/&gt;&lt;/p&gt;
&lt;p&gt;Jinja2的一些使用摘要&lt;/p&gt;
&lt;p&gt;Jinja2作为flask的默认页面模板，感觉蛮强大的，可适用于各种模板类相关的项目&lt;/p&gt;
&lt;p&gt;特别是模板继承，写页面很舒服&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;文档 http://jinja.pocoo.org/docs/&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install jinja2
sudo pip install jinja2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhong-duan-ban-helloworld"&gt;终端版helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello {{ name }}!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="he"&gt;{%和{{&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;navigation&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.href&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.caption&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My Webpage&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;a_variable&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;{% 用于执行语句&lt;/p&gt;
&lt;p&gt;{{ 输出语句结果到模板&lt;/p&gt;
&lt;p&gt;{{}}中的运算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is 2&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is 4&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; would return 4&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s1"&gt;'='&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bian-liang"&gt;变量&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;变量输出 - 获取属性的方法，都可以&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo.bar&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# 查属性 - 查子元素 - 没有报错&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# 查子元素 - 查属性 - 没有报错&lt;/span&gt;

&lt;span class="x"&gt;变量赋值&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;navigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'index.html'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Index'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'about.html'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'About'&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;call_something&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;


&lt;span class="x"&gt;# set and use it later&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;mybool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;False&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="kp"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;mybool.append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;mybool.pop&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-shi"&gt;注释&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{# note: disabled template because we no longer use this
    {% for user in users %}
        ...
    {% endfor %}
#}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="kong-ge-kong-zhi"&gt;空格控制&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kp"&gt;True&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        yay
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认，会执行 trim_blocks and lstrip_blocks&lt;/p&gt;
&lt;p&gt;移除空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;seq&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;seq = 1 to 9&lt;/span&gt;
&lt;span class="x"&gt;得到 123456789&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="escaping"&gt;Escaping&lt;/h3&gt;
&lt;p&gt;简单的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s1"&gt;'{{'&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;raw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &amp;lt;ul&amp;gt;
    {% for item in seq %}
        &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endraw&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="iffen-zhi-pan-duan"&gt;if分支判断&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="nv"&gt;.index&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;divisibleby&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="nv"&gt;.index&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;divisibleby&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;


&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;kenny.sick&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Kenny is sick.&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;kenny.dead&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    You killed Kenny!  You bastard!!!&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Kenny looks okay --- so far&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可用的条件操作符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;==  Compares two objects for equality.
!=  Compares two objects for inequality.
&amp;gt;   true if the left hand side is greater than the right hand side.
&amp;gt;=  true if the left hand side is greater or equal to the right hand side.
&amp;lt;   true if the left hand side is lower than the right hand side.
&amp;lt;=  true if the left hand side is lower or equal to the right hand side.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑连接符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;and     Return true if the left and the right operand is true.
or      Return true if the left or the right operand is true.
not     negate a statement (see below).
(expr)  group an expression.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内置测试列表 http://jinja.pocoo.org/docs/templates/#builtin-tests&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;callable(object)&lt;/span&gt;
&lt;span class="x"&gt;defined(value)&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;defined&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            value of variable: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;variable&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            variable is not defined&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;divisibleby(value, num)&lt;/span&gt;
&lt;span class="x"&gt;escaped(value)&lt;/span&gt;
&lt;span class="x"&gt;even(value)&lt;/span&gt;
&lt;span class="x"&gt;iterable(value)&lt;/span&gt;
&lt;span class="x"&gt;lower(value)&lt;/span&gt;
&lt;span class="x"&gt;mapping(value)&lt;/span&gt;
&lt;span class="x"&gt;none(value)&lt;/span&gt;
&lt;span class="x"&gt;number(value)&lt;/span&gt;
&lt;span class="x"&gt;odd(value)&lt;/span&gt;
&lt;span class="x"&gt;sameas(value, other)&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;foo.attribute&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nf"&gt;sameas&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        the foo attribute really is the `False` singleton&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;sequence(value)&lt;/span&gt;
&lt;span class="x"&gt;string(value)&lt;/span&gt;
&lt;span class="x"&gt;undefined(value)&lt;/span&gt;
&lt;span class="x"&gt;upper(value)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="forxun-huan"&gt;for循环&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Members&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.username&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.username&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;&lt;/span&gt;no users found&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;循环体中可用变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Variable        Description
loop.index      The current iteration of the loop. (1 indexed)
loop.index0     The current iteration of the loop. (0 indexed)
loop.revindex   The number of iterations from the end of the loop (1 indexed)
loop.revindex0  The number of iterations from the end of the loop (0 indexed)
loop.first      True if first iteration.
loop.last       True if last iteration.
loop.length     The number of items in the sequence.
loop.cycle      A helper function to cycle between a list of sequences. See the explanation below.
loop.depth      Indicates how deep in deep in a recursive loop the rendering currently is. Starts at level 1
loop.depth0     Indicates how deep in deep in a recursive loop the rendering currently is. Starts at level 0
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="filters"&gt;filters&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一系列方法
内置filter列表 http://jinja.pocoo.org/docs/templates/#builtin-filters&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;abs(number)&lt;/span&gt;
&lt;span class="x"&gt;attr(obj, name)   foo|attr("bar") works like foo["bar"]&lt;/span&gt;
&lt;span class="x"&gt;                  just that always an attribute is returned and items are not looked up&lt;/span&gt;
&lt;span class="x"&gt;batch(value, linecount, fill_with=None)&lt;/span&gt;
&lt;span class="x"&gt;capitalize(s)&lt;/span&gt;
&lt;span class="x"&gt;center(value, width=80)&lt;/span&gt;
&lt;span class="x"&gt;default(value, default_value=u'', boolean=False)&lt;/span&gt;
&lt;span class="x"&gt;                &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;my_variable&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'my_variable is not defined'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'the string was empty'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; 当变量false是，用default替换&lt;/span&gt;
&lt;span class="x"&gt;dictsort(value, case_sensitive=False, by='key')&lt;/span&gt;
&lt;span class="x"&gt;escape(s)&lt;/span&gt;
&lt;span class="x"&gt;filesizeformat(value, binary=False)&lt;/span&gt;
&lt;span class="x"&gt;first(seq)  Return the first item&lt;/span&gt;
&lt;span class="x"&gt;float(value, default=0.0)&lt;/span&gt;
&lt;span class="x"&gt;forceescape(value) Enforce HTML escaping&lt;/span&gt;
&lt;span class="x"&gt;format(value, *args, **kwargs)&lt;/span&gt;
&lt;span class="x"&gt;                &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s2"&gt;"%s - %s"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello?"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Foo!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;groupby(value, attribute)&lt;/span&gt;
&lt;span class="x"&gt;indent(s, width=4, indentfirst=False)&lt;/span&gt;
&lt;span class="x"&gt;                &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mytext&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;int(value, default=0)&lt;/span&gt;
&lt;span class="x"&gt;join(value, d=u'', attribute=None)&lt;/span&gt;
&lt;span class="x"&gt;                &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'|'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;last(seq)&lt;/span&gt;
&lt;span class="x"&gt;length(object)&lt;/span&gt;
&lt;span class="x"&gt;list(value)&lt;/span&gt;
&lt;span class="x"&gt;lower(s)&lt;/span&gt;
&lt;span class="x"&gt;map()&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;pprint(value, verbose=False)&lt;/span&gt;
&lt;span class="x"&gt;random(seq)&lt;/span&gt;
&lt;span class="x"&gt;reject() Filters a sequence of objects by appying a test&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"odd"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;rejectattr()&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;rejectattr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"is_active"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;rejectattr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;replace(s, old, new, count=None)&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s2"&gt;"aaaaargh"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"d'oh, "&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;reverse(value)&lt;/span&gt;
&lt;span class="x"&gt;round(value, precision=0, method='common')&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;42.55&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; 43&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;42.55&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'floor'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; 42.5&lt;/span&gt;
&lt;span class="x"&gt;safe(value)&lt;/span&gt;
&lt;span class="x"&gt;        automatic escaping enabled this variable will not be escaped&lt;/span&gt;
&lt;span class="x"&gt;select()&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"odd"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;selectattr()&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;selectattr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"is_active"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;selectattr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;slice(value, slices, fill_with=None)&lt;/span&gt;
&lt;span class="x"&gt;sort(value, reverse=False, case_sensitive=False, attribute=None)&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;iterable&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;iterable&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;string(object)&lt;/span&gt;
&lt;span class="x"&gt;        x|string()&lt;/span&gt;
&lt;span class="x"&gt;striptags(value)&lt;/span&gt;
&lt;span class="x"&gt;sum(iterable, attribute=None, start=0)&lt;/span&gt;
&lt;span class="x"&gt;        Total: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'price'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;title(s)&lt;/span&gt;
&lt;span class="x"&gt;trim(value)&lt;/span&gt;
&lt;span class="x"&gt;truncate(s, length=255, killwords=False, end='...')&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s2"&gt;"foo bar"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;   "foo ..."&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s2"&gt;"foo bar"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;True&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;   "foo b..."&lt;/span&gt;
&lt;span class="x"&gt;upper(s)&lt;/span&gt;
&lt;span class="x"&gt;urlencode(value)&lt;/span&gt;
&lt;span class="x"&gt;urlize(value, trim_url_limit=None, nofollow=False)&lt;/span&gt;
&lt;span class="x"&gt;wordcount(s)&lt;/span&gt;
&lt;span class="x"&gt;wordwrap(s, width=79, break_long_words=True, wrapstring=None)&lt;/span&gt;
&lt;span class="x"&gt;xmlattr(d, autospace=True)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="macroshong"&gt;Macros宏&lt;/h3&gt;
&lt;p&gt;创建&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'text'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;input type="&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;" name="&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;" value="&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;
        &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;" size="&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;"&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以在其他模板使用，需要import&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'text'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;textarea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;rows&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cols&lt;/span&gt;
        &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;'forms.html'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textarea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'comment'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'forms.html'&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;input&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;input_field&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;textarea&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;宏与宏之间的交互&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;macro&lt;/span&gt; &lt;span class="nv"&gt;render_dialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dialog'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; -&lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contents"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endmacro&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;render_dialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    This is a simple dialog rendered by using a macro and
    a call block.
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endcall&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mo-ban-ji-cheng"&gt;模板继承&lt;/h3&gt;
&lt;p&gt;父模板&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; - My Webpage&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; Copyright 2008 by &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://domain.invalid/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;you&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;.
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子模板&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;"base.html"&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;Index&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        .important { color: #336699; }
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Index&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"important"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Welcome on my awesome homepage.
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，可以有更好的可读性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;sidebar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;inner_sidebar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        ...&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;inner_sidebar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;sidebar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mo-ban-bao-han-include"&gt;模板包含include&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% include 'header.html' %}
    Body
{% include 'footer.html' %}

#jinja2.2
{% include "sidebar.html" ignore missing %}
{% include "sidebar.html" ignore missing with context %}
{% include "sidebar.html" ignore missing without context %}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.一些列表方法&lt;/p&gt;
&lt;p&gt;http://jinja.pocoo.org/docs/templates/#list-of-global-functions&lt;/p&gt;
&lt;p&gt;2.其他操作符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;in      Perform sequence / mapping containment test. Returns true if the left operand is contained in the right. &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; would for example return true.&lt;/span&gt;
&lt;span class="x"&gt;is      Performs a test.&lt;/span&gt;
&lt;span class="x"&gt;|       Applies a filter.&lt;/span&gt;
&lt;span class="x"&gt;~       Converts all operands into strings and concatenates them. &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s2"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s2"&gt;"!"&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; would return (assuming name is 'John') Hello John!.&lt;/span&gt;
&lt;span class="x"&gt;()      Call a callable: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;post.render&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;. Inside of the parentheses you can use positional arguments and keyword arguments like in python: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;post.render&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.&lt;/span&gt;
&lt;span class="x"&gt;. / []  Get an attribute of an object. (See Variables)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.range, 可以正常使用range&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end. 未完待续&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;http://www.wklken.me&lt;/p&gt;
&lt;p&gt;2013-12-21&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python模板-Mako</title><link href="http://www.wklken.me/posts/2013/12/14/python-template-mako.html" rel="alternate"></link><published>2013-12-14T00:00:00+08:00</published><updated>2013-12-14T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-12-14:/posts/2013/12/14/python-template-mako.html</id><summary type="html">&lt;p&gt;&lt;img alt="mako" src="/imgs/python/mako.png"/&gt;&lt;/p&gt;
&lt;p&gt;一直使用Jinja2，前段时间听说mako，一试&lt;/p&gt;
&lt;p&gt;大同小异，天下模板都差不多&lt;/p&gt;
&lt;p&gt;要写代码测试，文档先行&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;官网 http://www.makotemplates.org/&lt;/p&gt;
&lt;p&gt;文档 http://docs.makotemplates.org/en/latest/&lt;/p&gt;
&lt;p&gt;文档翻译 Mako模板入门 http://help.42qu.com/code/mako.html&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mako
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;HelloWorld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-------------------------&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="mako" src="/imgs/python/mako.png"/&gt;&lt;/p&gt;
&lt;p&gt;一直使用Jinja2，前段时间听说mako，一试&lt;/p&gt;
&lt;p&gt;大同小异，天下模板都差不多&lt;/p&gt;
&lt;p&gt;要写代码测试，文档先行&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;官网 http://www.makotemplates.org/&lt;/p&gt;
&lt;p&gt;文档 http://docs.makotemplates.org/en/latest/&lt;/p&gt;
&lt;p&gt;文档翻译 Mako模板入门 http://help.42qu.com/code/mako.html&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mako
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;HelloWorld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-------------------------&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello ${data}!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yu-fa"&gt;语法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;输出变量&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;数学计算&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;evaluated&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;directly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt; &lt;span class="n"&gt;expressions&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;

&lt;span class="n"&gt;filter&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;内置&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="err"&gt;列表&lt;/span&gt;
    &lt;span class="nl"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;escaping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provided&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote_plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nl"&gt;h&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;escaping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provided&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;markupsafe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt; &lt;span class="n"&gt;escaping&lt;/span&gt;
    &lt;span class="nl"&gt;trim&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt; &lt;span class="n"&gt;trimming&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;provided&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nl"&gt;entity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;produces&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;references&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;applicable&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;derived&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;htmlentitydefs&lt;/span&gt;
    &lt;span class="n"&gt;unicode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;produces&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;unicode&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;applied&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;unicode&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;
    &lt;span class="nl"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;filtering&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;applied&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;分支&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;abcd&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt;

&lt;span class="err"&gt;循环&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sc"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'1'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;abc&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'2'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;gh&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt;

&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;语法&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;template&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frobnizzle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nl"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt;

&lt;span class="err"&gt;换行&lt;/span&gt;

&lt;span class="err"&gt;加&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;强制不换行&lt;/span&gt;


&lt;span class="err"&gt;设置变量&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;
        &lt;span class="n"&gt;isBanana&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
    &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;
        &lt;span class="n"&gt;isBanana&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;%endif&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nl"&gt;isBanana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Bought&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;banana&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;%endif&lt;/span&gt;
&lt;span class="nf"&gt;%endfor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-shi"&gt;注释&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## 这是一个注释.
...text ...

多行
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%doc&amp;gt;
这里是注释
更多注释
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/%doc&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mo-kuai-ji-bie-yu-ju"&gt;模块级别语句&lt;/h3&gt;
&amp;lt;% %&amp;gt; 的一个变体是 &amp;lt;%! %&amp;gt;，代表模块级别的代码块。其中的代码会在模板的模块级别执行，而不是在模板的 rendering 函数中。

&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mylib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'^@'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="biao-qian"&gt;标签&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;定义了当前模板的总体特性，包括缓存参数，以及模板被调用时期待的参数列表（非必须）&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x, y, z='default'"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"True"&lt;/span&gt; &lt;span class="n"&gt;cache_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"memory"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;


&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"header.html"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"footer.html"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="err"&gt;标签用于定义包含一系列内容的一个&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;函数，此函数在当前模板的其他某个地方被调用到&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"myfunc(x)"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"h"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"header"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;Mako&lt;/span&gt; &lt;span class="err"&gt;中的&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="err"&gt;等价于&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;里的&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;语句。它允许访问其他模板文件的所有&lt;/span&gt; &lt;span class="n"&gt;rendering&lt;/span&gt; &lt;span class="err"&gt;函数和元数据&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"functions.html"&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"base.html"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="err"&gt;处理多行注释：&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;
    &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="err"&gt;该标签使得&lt;/span&gt; &lt;span class="n"&gt;Mako&lt;/span&gt; &lt;span class="err"&gt;的词法器对模板指令的常规解析动作停止，并以纯文本的形式返回其整个内容部分&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"h"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;heres&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="n"&gt;mako&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x()"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有时你想中途停止执行一个模板或者 &amp;lt;%def&amp;gt; 方法，只返回已经收集到的文本信息，可以通过在 Python 代码块中使用 return 语句来完成&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    No records found.&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-jian-template"&gt;文件template&lt;/h3&gt;
&lt;p&gt;为提高性能，从文件中加载的 Template, 可以将它产生的模块的源代码以普通 python 模块文件的形式(.py)，&lt;/p&gt;
&lt;p&gt;缓存到文件系统中。只要加一个参数 module_directory 即可做到这一点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/docs/mytmpl.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module_directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/mako_modules'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当上述代码被 render 的时候，会创建文件 /tmp/mako_modules/docs/mytmpl.txt.py.&lt;/p&gt;
&lt;p&gt;下一次 Template 对象被用同样参数调用的时候，就会直接重用该模块文件。&lt;/p&gt;
&lt;h3 id="wen-jian-templatelookup"&gt;文件TemplateLookup&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#有一个对 header.txt 文件的包含引用。而从何处去查找 header.txt, 则由 TemplateLookup 指明，是 "/docs" 目录&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.lookup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateLookup&lt;/span&gt;

&lt;span class="n"&gt;mylookup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TemplateLookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'/docs'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt;nclude file="header.txt"/&amp;gt; hello world!"""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mylookup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;--------------&lt;/span&gt;

&lt;span class="c1"&gt;#可以直接通过 TemplateLookup 来获取模板对象，利用 TemplateLookup 的 get_template 方法，&lt;/span&gt;
&lt;span class="c1"&gt;#并传递模板的 URI 作为参数&lt;/span&gt;
&lt;span class="n"&gt;mylookup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TemplateLookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'/docs'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;output_encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding_errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mylookup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-------------&lt;/span&gt;
&lt;span class="err"&gt;参数&lt;/span&gt;
&lt;span class="n"&gt;mylookup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TemplateLookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'/docs'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;output_encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding_errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collection_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TemplateLookup&lt;/span&gt; &lt;span class="err"&gt;同时也会在内存中缓存一组模板，所以并不是每一次请求都会导致模板的重新编译和模块重新加载。默认&lt;/span&gt; &lt;span class="n"&gt;TemplateLookup&lt;/span&gt; &lt;span class="err"&gt;的大小没有限制，但你可以通过&lt;/span&gt; &lt;span class="n"&gt;collection_size&lt;/span&gt; &lt;span class="err"&gt;参数来限制它&lt;/span&gt;
&lt;span class="err"&gt;以上的&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="err"&gt;会持续加载模板到内存中，直到达到&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="err"&gt;的时候，它就会清除掉一定比例的模板缓存项，根据“最近最少访问”原则&lt;/span&gt;

&lt;span class="err"&gt;另一个&lt;/span&gt; &lt;span class="n"&gt;TemplateLookup&lt;/span&gt; &lt;span class="err"&gt;相关的标志是&lt;/span&gt;  &lt;span class="n"&gt;filesystem_checks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="err"&gt;默认为&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;每一次&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;方法返回模板后，原始的模板文件的&lt;/span&gt; &lt;span class="n"&gt;revision&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="err"&gt;会和上次加载模板的时间做对比，&lt;/span&gt;
&lt;span class="err"&gt;如果文件更新，则会加载其内容，并重新编译该模板。&lt;/span&gt;
&lt;span class="err"&gt;在生产环境下，设置&lt;/span&gt; &lt;span class="n"&gt;filesystem_checks&lt;/span&gt; &lt;span class="err"&gt;为&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="err"&gt;可以带来一定的性能提升（和具体的文件系统有关）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-ji-chuang-jian-context"&gt;自己创建context&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.runtime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello, ${name}!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"jack"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.解决mako中文乱码问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TemplateLookup(... , output_encoding='utf-8', ...)
Template(..., input_encoding='utf-8')
又在mako的模板文件的首行添加
## -*- encoding:utf8 -*-
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end. 未完待续&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;http://www.wklken.me&lt;/p&gt;
&lt;p&gt;2013-12-14&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Git操作小结</title><link href="http://www.wklken.me/posts/2013/12/01/git-base.html" rel="alternate"></link><published>2013-12-01T00:00:00+08:00</published><updated>2013-12-01T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-12-01:/posts/2013/12/01/git-base.html</id><summary type="html">&lt;p&gt;git操作小结，资料来源于网络&lt;/p&gt;
&lt;h3 id="jiao-cheng-zi-yuan"&gt;教程资源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在线教程(重点推荐)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://try.github.io/levels/1/challenges/1"&gt;TryGit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pcottle.github.io/learnGitBranching/"&gt;LearnGitBranchin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gitbook.io/book/lvwzhen/Git-Tutorial"&gt;廖雪峰git教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Gazler/githug"&gt;githug&lt;/a&gt; (通关游戏，&lt;a href="http://fancyoung.com/blog/githug-cheat-sheet/"&gt;攻略&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorial/git-basics"&gt;Git Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gitimmersion.com/"&gt;Git Immersion&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://gitref.org/zh/basic/"&gt;Git 参考手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/zh"&gt;Pro git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1230000000561/index.html"&gt;Git Pocket Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ikandou.com/io/book/48272048/"&gt;git自下而上方法-爱看豆&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50603/"&gt;写给Git初学者的7个建议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git简易指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html"&gt;图解git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://youngsterxyf.github.io/2013/09/28/learning-git-internals-by-example/"&gt;通过示例学习git构造&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/07/git.html"&gt;git分支管理策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://luolei.org/2013/09/git-config-advanced/"&gt;Git log diff config高级进阶&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oschina.net/translate/10-useful-advanced-git-commands"&gt;10个很有用的高级git命令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ux.etao.com/posts/711"&gt;高富帅们的git技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/43288/"&gt;一些实用的GitHub模式&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="git-config"&gt;git config&lt;/h3&gt;
&lt;p&gt;git配置文件~/.gitconfig&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#查看帮助
git config --help

git config --global user.name …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;git操作小结，资料来源于网络&lt;/p&gt;
&lt;h3 id="jiao-cheng-zi-yuan"&gt;教程资源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在线教程(重点推荐)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://try.github.io/levels/1/challenges/1"&gt;TryGit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pcottle.github.io/learnGitBranching/"&gt;LearnGitBranchin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gitbook.io/book/lvwzhen/Git-Tutorial"&gt;廖雪峰git教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Gazler/githug"&gt;githug&lt;/a&gt; (通关游戏，&lt;a href="http://fancyoung.com/blog/githug-cheat-sheet/"&gt;攻略&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorial/git-basics"&gt;Git Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gitimmersion.com/"&gt;Git Immersion&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://gitref.org/zh/basic/"&gt;Git 参考手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/zh"&gt;Pro git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1230000000561/index.html"&gt;Git Pocket Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ikandou.com/io/book/48272048/"&gt;git自下而上方法-爱看豆&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50603/"&gt;写给Git初学者的7个建议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git简易指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html"&gt;图解git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://youngsterxyf.github.io/2013/09/28/learning-git-internals-by-example/"&gt;通过示例学习git构造&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/07/git.html"&gt;git分支管理策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://luolei.org/2013/09/git-config-advanced/"&gt;Git log diff config高级进阶&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oschina.net/translate/10-useful-advanced-git-commands"&gt;10个很有用的高级git命令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ux.etao.com/posts/711"&gt;高富帅们的git技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/43288/"&gt;一些实用的GitHub模式&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="git-config"&gt;git config&lt;/h3&gt;
&lt;p&gt;git配置文件~/.gitconfig&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#查看帮助
git config --help

git config --global user.name "Your Name Here"

其他常用config
git config --global user.name "robbin"
git config --global user.email "fankai#gmail.com"
git config --global color.ui true

#alias
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch

git config --global core.editor "mate -w"    # 设置Editor使用textmate
git config -1 #列举所有配置
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cang-ku-ji-ben-cao-zuo"&gt;仓库基本操作&lt;/h3&gt;
&lt;p&gt;1.检出一个项目&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone path-to-git-repository
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.更新本地仓库到最新改动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.将现有项目推送到远程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd test   #跳到要提交的目录下
git init  #初始化git
git add . #将所有文件加入到索引
git commit #提交到HEAD
git remote add origin &amp;lt;server&amp;gt; #增加到remote
git push origin master #推送过去! DONE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.丢弃本地所有改动与提交，获取服务器上最新版本并将主干分支指向它&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch origin
git reset --hard origin/master
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ben-cao-zuo"&gt;基本操作&lt;/h3&gt;
&lt;p&gt;&lt;img alt="git-flow-structure" src="/imgs/git-base/git-flow-structure.png"/&gt;&lt;/p&gt;
&lt;p&gt;1.添加(CurrentDir -&amp;gt; Stage)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add file_name
git add *
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.删除(CurrentDir -&amp;gt; Stage)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm file_name  #从版本控制中删除，并删除磁盘上的文件
git rm --cached file_name #不删除磁盘上的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.取消add/rm(Stage -&amp;gt; CurrentDir)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset HEAD file_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.提交(Stage -&amp;gt; HEAD)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit file_name -m '提交信息'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.推送改动(HEAD -&amp;gt; Remote)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.diff&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git diff  #diff CurrentDir Stage, 查看有哪些需要add
git diff --cached/--staged     #哪些需要commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.log&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git log  #查看日志
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.替换掉本地改动(Stage -&amp;gt; CurrentDir)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout -- &amp;lt;filename&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.mv&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git mv old_name new_name #重命名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BEGIN: add -&amp;gt; commit -&amp;gt; push -&amp;gt; DONE&lt;/p&gt;
&lt;p&gt;文件变化状态图&lt;/p&gt;
&lt;p&gt;&lt;img alt="git-file-status-lifecycle" src="/imgs/git-base/git-file-status-lifecycle.png"/&gt;&lt;/p&gt;
&lt;h3 id="fen-zhi-cao-zuo"&gt;分支操作&lt;/h3&gt;
&lt;p&gt;&lt;img alt="git-branch" src="/imgs/git-base/git-branch.png"/&gt;&lt;/p&gt;
&lt;p&gt;1.创建分支&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch new_br_name #创建
git branch             #查看当前有的分支

git checkout new_br_name #切换到新分支

git checkout -b new_br_name #创建并切过去
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.远程分支&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin new_br_name  #推送branch到远端维护起来

#删除
git push origin : &amp;lt;new_br_name&amp;gt;
or
git push origin --delete &amp;lt;new_br_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.合并分支(merge)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch  #查看当前分支
git checkout master #切换回主干
git merge new_br_name  #合并new_br_name分支到主干, 自动合并

1.没冲突(no conflicts) -&amp;gt; fine -&amp;gt; commit -&amp;gt; push to remote

2.有冲突(conflicts)
git diff   #查看当前哪些文件有冲突, 标识 unmerged
vim xxx    #手动编辑解决冲突

    冲突文件中标识
    &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:file.txt
    Hello world  #当前branch的
    =======
    Goodbye      #要合并branch的
    &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 77976da35a11db4580b80ae27e8d65caf5208086:file.txt

git add xxx #加入

-&amp;gt; 解决所有冲突之后 -&amp;gt; commit -&amp;gt; push to remote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.删除无用分支&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch -d new_br_name  #只能删除已经被当前分支合并的分支
git branch -D new_br_name  #强删
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.撤销一个合并&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset --hard HEAD
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tagcao-zuo"&gt;tag操作&lt;/h3&gt;
&lt;p&gt;BP:在发布之前，创建标签&lt;/p&gt;
&lt;p&gt;1.创建删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;创建
git tag tag_name &amp;lt;commit ID&amp;gt; #commit ID可以通过git log来查看

删除
git tag -d tag_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.远程tag&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;推送所有tags
git push --tags

删除
git push origin --delete tag &amp;lt;tag_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hu-lue-mou-xie-wen-jian"&gt;忽略某些文件&lt;/h3&gt;
&lt;p&gt;项目中那些不需要的文件(untracked),可以忽略&lt;/p&gt;
&lt;p&gt;顶层工作目录中添加一个叫".gitignore"的文件 &lt;a href="https://www.kernel.org/pub/software/scm/git/docs/gitignore.html"&gt;语法文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 以'#' 开始的行，被视为注释.
# 忽略掉所有文件名是 foo.txt 的文件.
foo.txt
# 忽略所有生成的 html 文件,
*.html
# foo.html是手工维护的，所以例外.
!foo.html
#  忽略所有.o 和 .a文件.
*.[oa]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chang-jian-wen-ti"&gt;常见问题&lt;/h3&gt;
&lt;p&gt;1.如何让git能处理汉字文件名&lt;/p&gt;
&lt;p&gt;git默认quote任何非ascii文件名字符,想要支持非&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global core.quotepath false

或者在$HOME/.gitconfig 配置
[core]
    quotepath = false
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.git add -A 和 git add .的区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"git add -A"  = "git add .; git add -u".

- git add -A stages All
- git add . stages new and modified, without deleted
- git add -u stages modified and deleted, without new
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.怎么配置git结果显示颜色&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[color]&lt;/span&gt;
&lt;span class="c1"&gt;#开启着色功能&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;auto&lt;/span&gt;
&lt;span class="s"&gt;    diff = auto&lt;/span&gt;
&lt;span class="s"&gt;    branch = auto&lt;/span&gt;
&lt;span class="s"&gt;    interactive = auto&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.获得帮助&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git help &amp;lt;command&amp;gt;  # 显示command的help
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.&lt;a href="http://luolei.org/2013/08/better-git-log/"&gt;更好的git log&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit"
#然后使用 git lg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.自己搭建代码库&lt;/p&gt;
&lt;p&gt;类似github的应用，gitlab(google之)&lt;/p&gt;
&lt;p&gt;3.git-flow&lt;/p&gt;
&lt;p&gt;&lt;a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html"&gt;git-flow备忘清单&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.基于git的wiki&lt;/p&gt;
&lt;p&gt;gollum(google之)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-12-01&lt;/p&gt;</content><category term="git"></category></entry><entry><title>[摘要]Python 最佳实践指南</title><link href="http://www.wklken.me/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html" rel="alternate"></link><published>2013-11-25T00:00:00+08:00</published><updated>2013-11-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-11-25:/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</id><summary type="html">&lt;p&gt;文档地址 &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's Guide to Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份文档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;目标对象：入门后，有一定基础的Pythonista
关键词：最佳实践，Pythonic，各类工具介绍
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;粗粗粗略地过了一遍，大体捞了一些东西出来，大段大段英文太费眼了，回头细读在更新进来&lt;/p&gt;
&lt;p&gt;浓缩版，20分钟可大体过完，然后根据自己需要去看详细的吧&lt;/p&gt;
&lt;p&gt;整体内容还是很不错的，建议细读英文&lt;/p&gt;
&lt;p&gt;PS:文档含有巨量的TODO(没写空白着待补充的)，不过但从目录上来看还是很强大滴，相信完善后，会成为一份很牛逼的指南(难度比官方指南高一点点)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-ling-bu-fen-getting-started"&gt;第零部分 Getting Started&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/#getting-started"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不解释，不翻译，自个看....真的没啥(每本入门书籍第一章...)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-bu-fen-writing-great-code"&gt;第一部分 Writing Great Code&lt;/h1&gt;
&lt;h3 id="structuring-your-project"&gt;Structuring Your Project&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#structuring-your-project"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 最佳实践&lt;/p&gt;
&lt;p&gt;Very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;文档地址 &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's Guide to Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份文档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;目标对象：入门后，有一定基础的Pythonista
关键词：最佳实践，Pythonic，各类工具介绍
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;粗粗粗略地过了一遍，大体捞了一些东西出来，大段大段英文太费眼了，回头细读在更新进来&lt;/p&gt;
&lt;p&gt;浓缩版，20分钟可大体过完，然后根据自己需要去看详细的吧&lt;/p&gt;
&lt;p&gt;整体内容还是很不错的，建议细读英文&lt;/p&gt;
&lt;p&gt;PS:文档含有巨量的TODO(没写空白着待补充的)，不过但从目录上来看还是很强大滴，相信完善后，会成为一份很牛逼的指南(难度比官方指南高一点点)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-ling-bu-fen-getting-started"&gt;第零部分 Getting Started&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/#getting-started"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不解释，不翻译，自个看....真的没啥(每本入门书籍第一章...)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-bu-fen-writing-great-code"&gt;第一部分 Writing Great Code&lt;/h1&gt;
&lt;h3 id="structuring-your-project"&gt;Structuring Your Project&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#structuring-your-project"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 最佳实践&lt;/p&gt;
&lt;p&gt;Very bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[...]&lt;/span&gt;
&lt;span class="na"&gt;from modu import *&lt;/span&gt;
&lt;span class="k"&gt;[...]&lt;/span&gt;
&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sqrt(4)  # Is sqrt part of modu? A builtin? Defined above?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Better&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;modu&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# sqrt may be part of modu, if not redefined in between&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Best&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;modu&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# sqrt is visibly part of modu's namespace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python中关于OOP的 &lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#object-oriented-programming"&gt;观点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decorators&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def foo():
    # do something

def decorator(func):
    # manipulate func
    return func

foo = decorator(foo)  # Manually decorate

@decorator
def bar():
    # Do something
# bar() is decorated
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态类型(Dynamic typing)&lt;/p&gt;
&lt;p&gt;Avoid using the same variable name for different things.&lt;/p&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = 1
a = 'a string'
def a():
    pass  # Do something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;count = 1
msg = 'a string'
def func():
    pass  # Do something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is better to use different names even for things that are related, when they have a different type:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bad

items = 'a b c d'  # This is a string...
items = items.split(' ')  # ...becoming a list
items = set(items)  # ...and then a set
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可变和不可变类型(Mutable and immutable types)&lt;/p&gt;
&lt;p&gt;字符串拼接最佳实践&lt;/p&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# create a concatenated string from 0 to 19 (e.g. "012..1819")
nums = ""
for n in range(20):
  nums += str(n)   # slow and inefficient
print nums
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# create a concatenated string from 0 to 19 (e.g. "012..1819")
nums = []
for n in range(20):
  nums.append(str(n))
print "".join(nums)  # much more efficient
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Best&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# create a concatenated string from 0 to 19 (e.g. "012..1819")
nums = [str(n) for n in range(20)]
print "".join(nums)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;join() is not always best
创建新字符串和修改原有字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo = 'foo'
bar = 'bar'

foobar = foo + bar  # This is good
foo += 'ooo'  # This is bad, instead you should do:
foo = ''.join([foo, 'ooo'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串格式化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo = 'foo'
bar = 'bar'

foobar = '%s%s' % (foo, bar) # It is OK
foobar = '{0}{1}'.format(foo, bar) # It is better
foobar = '{foo}{bar}'.format(foo=foo, bar=bar) # It is best
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="code-style"&gt;Code Style&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/style/#code-style"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="yi-ban-gai-nian-general-concepts"&gt;一般概念(General concepts)&lt;/h4&gt;
&lt;p&gt;明确的代码&lt;/p&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def make_complex(*args):
    x, y = args
    return dict(**locals())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def make_complex(x, y):
    return {'x': x, 'y': y}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每行一个声明&lt;/p&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print 'one'; print 'two'

if x == 1: print 'one'

if &amp;lt;complex comparison&amp;gt; and &amp;lt;other complex comparison&amp;gt;:
    # do something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print 'one'
print 'two'

if x == 1:
    print 'one'

cond1 = &amp;lt;complex comparison&amp;gt;
cond2 = &amp;lt;other complex comparison&amp;gt;
if cond1 and cond2:
    # do something
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#不解释了
位置参数，默认参数，*args, **args
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avoid the magical wand(这个肿么翻...)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;原因：
Python comes with a very rich set of hooks and tools allowing to do almost any kind of tricky tricks

建议：
it is always better to use the most straightforward way to achieve your goal

感受一下:
We consider that a Python developer should know about these nearly infinite possibilities,
because it grows the confidence that no hard-wall will be on the way.
However, knowing how to use them and particularly when not to use them is the most important.

Like a Kungfu master, a Pythonista knows how to kill with a single finger, and never to actually do it.

其实就是告诉你，骚年，这玩意你要去学习去了解去掌握，目的是增强实力保持自信，但是不要去用啊
(说的原子弹吧....)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="fang-yan-idioms"&gt;方言(Idioms)&lt;/h4&gt;
&lt;p&gt;Idiomatic Python code is often referred to as being Pythonic.&lt;/p&gt;
&lt;p&gt;列举了一些：&lt;/p&gt;
&lt;p&gt;Unpacking&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for index, item in enumerate(some_list):
    # do something with index and item

a, b = b, a

a, (b, c) = 1, (2, 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忽略接收变量,这里用的是两个下划线，原因
http://docs.python-guide.org/en/latest/writing/style/#create-an-ignored-variable&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;filename = 'foobar.txt'
basename, __, ext = filename.rpartition('.')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同一个元素创建一个长度为N的列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;four_nones = [None] * 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建一个长度N的嵌套列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;four_lists = [[] for __ in xrange(4)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由列表拼接字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;letters = ['s', 'p', 'a', 'm']
word = ''.join(letters)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速查找&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = {'s': [], 'p': [], 'a': [], 'm': []}
l = ['s', 'p', 'a', 'm']

def lookup_dict(d): #O(1)
    return 's' in d

def lookup_list(l): #O(n)
    return 's' in l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zen of Python&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PEP8&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pep8
$ pep8 optparse.py
optparse.py:69:11: E401 multiple imports on one line
optparse.py:77:1: E302 expected &lt;span class="m"&gt;2&lt;/span&gt; blank lines, found &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="guan-li-conventions_1"&gt;惯例(Conventions)&lt;/h3&gt;
&lt;p&gt;判断值是否等于常量&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if attr == True:
    print 'True!'

if attr == None:
    print 'attr is None!'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Just check the value
if attr:
    print 'attr is truthy!'

# or check for the opposite
if not attr:
    print 'attr is falsey!'

# or, since None is considered false, explicitly check for it
if attr is None:
    print 'attr is None!'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取字典元素&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = {'hello': 'world'}
if d.has_key('hello'):
    print d['hello']    # prints 'world'
else:
    print 'default_value'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = {'hello': 'world'}

print d.get('hello', 'default_value') # prints 'world'
print d.get('thingy', 'default_value') # prints 'default_value'

# Or:
if 'hello' in d:
    print d['hello']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷列表操作&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Filter elements greater than 4
a = [3, 4, 5]
b = []
for i in a:
    if i &amp;gt; 4:
        b.append(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = [3, 4, 5]
b = [i for i in a if i &amp;gt; 4]
b = filter(lambda x: x &amp;gt; 4, a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Add three to all list members.
a = [3, 4, 5]
for i in range(len(a)):
    a[i] += 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = [3, 4, 5]
a = [i + 3 for i in a]
# Or:
a = map(lambda i: i + 3, a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用enumerate&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i, item in enumerate(a):
    print i, item
# prints
# 0 3
# 1 4
# 2 5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读文件&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f = open('file.txt')
a = f.read()
print a
f.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open('file.txt') as f:
    for line in f:
        print line
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;超长的行&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_very_big_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""For a long time I used to go to bed early. Sometimes, &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;    when I had put out my candle, my eyes would close so quickly that I had not even &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;    time to say “I’m going to sleep.”"""&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;some.deep.module.inside.a.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;a_nice_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;another_nice_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
    &lt;span class="n"&gt;yet_another_nice_function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#受教了....&lt;/span&gt;
&lt;span class="n"&gt;my_very_big_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"For a long time I used to go to bed early. Sometimes, "&lt;/span&gt;
    &lt;span class="s2"&gt;"when I had put out my candle, my eyes would close so quickly "&lt;/span&gt;
    &lt;span class="s2"&gt;"that I had not even time to say “I’m going to sleep.”"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;some.deep.module.inside.a.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;a_nice_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;another_nice_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yet_another_nice_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reading-great-code"&gt;Reading Great Code&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/reading/#reading-great-code"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感受下：The number one thing that Python programmers do is read code.&lt;/p&gt;
&lt;p&gt;再感受一把：One of the secrets of becoming a great Python programmer is to read, understand, and comprehend excellent code.&lt;/p&gt;
&lt;p&gt;几个推荐阅读源代码项目&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gleitz/howdoi"&gt;Howdoi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mitsuhiko/werkzeug"&gt;Werkzeug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kennethreitz/requests"&gt;Requests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kennethreitz/tablib"&gt;Tablib&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="wen-dang-documentation"&gt;文档(Documentation)&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/documentation/#documentation"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感受一下：Readability is a primary focus for Python developers, in both project and code documentation.&lt;/p&gt;
&lt;p&gt;具体还是读原文吧&lt;/p&gt;
&lt;p&gt;项目文档组成&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.A README file
  at the root directory should give general information to the users and the maintainers.

  reStructuredText 或 Markdown
2.An INSTALL file
  is less necessary with python

  setup.py

3.A LICENSE file
  should always be present and specify the license under which the software is made available to the public
4.A TODO file or a TODO section in README
  should list the planned development for the code.
5.A CHANGELOG file or section in README
  should compile a short overview of the changes in the code base for the latest versions.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几种文档工具&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sphinx(听说最强大....)
reStructuredText
Markdown(俺的最爱...)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码文档建议&lt;/p&gt;
&lt;p&gt;Comments clarify code and begin with a hash (#).&lt;/p&gt;
&lt;p&gt;In Python, docstrings describe modules, classes, and functions:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def square_and_rooter(x):
    """Returns the square root of self times self."""
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注解代码块&lt;/p&gt;
&lt;p&gt;Do not use triple-quote strings to comment code.&lt;/p&gt;
&lt;p&gt;This is not a good practice, because line-oriented command-line tools such as grep will not be aware that the commented code is inactive.&lt;/p&gt;
&lt;p&gt;It is better to add hashes at the proper indentation level for every commented line.&lt;/p&gt;
&lt;p&gt;最佳实践:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不用三引号注解代码块
每一行加#来注释
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ce-shi-ni-de-dai-ma-testing-your-code"&gt;测试你的代码(Testing Your Code)&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/tests/#testing-your-code"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测试一些通用原则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.A testing unit should focus on one tiny bit of functionality and prove it correct.
2.Each test unit must be fully independent
3.Try hard to make tests that run fast
4.Learn your tools and learn how to run a single test or a test case
5.Always run the full test suite before a coding session, and run it again after.
6.It is a good idea to implement a hook that runs all tests before pushing code to a shared repository.
7.If you are in the middle of a development session and have to interrupt your work,
  it is a good idea to write a broken unit test about what you want to develop next.
8.The first step when you are debugging your code is to write a new test pinpointing the bug.
9.Use long and descriptive names for testing functions
10.When something goes wrong or has to be changed, and if your code has a good set of tests,
  you or other maintainers will rely largely on the testing suite to fix the problem or modify a given behavior.
11.Another use of the testing code is as an introduction to new developers.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单元测试(Unittest)&lt;/p&gt;
&lt;p&gt;Python内置模块, &lt;a href="http://docs.python.org/library/unittest.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文档测试(Doctest)&lt;/p&gt;
&lt;p&gt;非精细case，只验证主体功能可用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Squares x.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; square(2)&lt;/span&gt;
&lt;span class="sd"&gt;    4&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; square(-2)&lt;/span&gt;
&lt;span class="sd"&gt;    4&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testmod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关工具&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pytest.org/latest/"&gt;py.text&lt;/a&gt;
    $ pip install pytest&lt;/p&gt;
&lt;p&gt;&lt;a href="http://readthedocs.org/docs/nose/en/latest/"&gt;Nose&lt;/a&gt; unittest的扩展
    $ pip install nose&lt;/p&gt;
&lt;p&gt;&lt;a href="http://testrun.org/tox/latest/"&gt;tox&lt;/a&gt;
    $ pip install tox&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/unittest2"&gt;Unittest2&lt;/a&gt;
    $ pip install unittest2&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;mock&lt;/a&gt;
    $ pip install mock&lt;/p&gt;
&lt;h3 id="common-gotchasbu-dong-zen-yao-fan-v"&gt;Common Gotchas(不懂怎么翻...╮(╯▽╰)╭ )&lt;/h3&gt;
&lt;p&gt;一些新手可能疑惑的例子&lt;/p&gt;
&lt;p&gt;两个例子&lt;/p&gt;
&lt;p&gt;1.可变默认参数&lt;/p&gt;
&lt;p&gt;What You Wrote&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def append_to(element, to=[]):
    to.append(element)
    return to
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What You Might Have Expected to Happen&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_list = append_to(12)
print my_list

my_other_list = append_to(42)
print my_other_list

[12]
[42]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What Does Happen&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[12]&lt;/span&gt;
&lt;span class="k"&gt;[12, 42]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What You Should Do Instead&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def append_to(element, to=None):
    if to is None:
        to = []
    to.append(element)
    return to
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python默认参数在函数定义处执行一次，而不是每次函数调用时执行。&lt;/p&gt;
&lt;p&gt;2.Late Binding Closures(又一个，延迟绑定闭包?)&lt;/p&gt;
&lt;p&gt;What You Wrote&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_multipliers():
    return [lambda x : i * x for i in range(5)] #
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What You Might Have Expected to Happen&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for multiplier in create_multipliers():
    print multiplier(2) # 任意一个返回的函数被调用时，内部循环i=4

0
2
4
6
8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What Does Happen&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;8
8
8
8
8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What You Should Do Instead&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_multipliers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python的闭包是延时绑定&lt;/p&gt;
&lt;h3 id="xuan-ze-zheng-shu-choosing-a-license"&gt;选择证书(Choosing a License)&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/license/#choosing-a-license"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开源证书 &lt;a href="http://opensource.org/licenses/alphabetical"&gt;列表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;证书选择器 &lt;a href="http://three.org/openart/license_chooser/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-er-bu-fen-scenario-guide_1"&gt;第二部分 Scenario Guide&lt;/h1&gt;
&lt;p&gt;都是介绍性质的，类似工具目录,而且大部分是空的，目前没详细信息&lt;/p&gt;
&lt;p&gt;要了解具体，goole相关关键词吧&lt;/p&gt;
&lt;p&gt;具体自己翻吧 &lt;a href="http://docs.python-guide.org/en/latest/#scenario-guide"&gt;位置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;h3 id="network-applications"&gt;Network Applications&lt;/h3&gt;
&lt;p&gt;Http:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Requests
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Distributed Systems&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ZeroMQ
RabbitMQ
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="web-applications"&gt;Web Applications&lt;/h3&gt;
&lt;p&gt;Context&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WSGI
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Frameworks&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Django
Flask
Werkzeug
Tornado
Pyramid
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Web Servers&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WSGI Servers&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Gunicorn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hosting&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PasS (Platform as a service)
Heroku
DotCloud
Gondor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Templating&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Jinja2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="html-scraping"&gt;HTML Scraping&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lxml
Requests
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="command-line-applications"&gt;Command Line Applications&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Clint
docopt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gui-applications"&gt;GUI Applications&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Qt
Cocoa
wxPython
GTk
Tk
Kivy
PyjamasDesktop (pyjs Desktop)
Camelot
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="databases"&gt;Databases&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DB-API
SQLAlchemy
Django ORM
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="networking"&gt;Networking&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Twisted
PyZMQ
gevent
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="systems-administration"&gt;Systems Administration&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Fabric
Salt
Psutil
Chef
Puppet
Blueprint
Buildout
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="continuous-integration"&gt;Continuous Integration&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Jenkins
Buildbot
Mule?
Tox
Travis-CI
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="speed"&gt;Speed&lt;/h3&gt;
&lt;p&gt;C Extensions&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GIL
Cython
Pyrex
Shedskin
Numba
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Threading&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Threading
Multiprocessing
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="scientific-applications"&gt;Scientific Applications&lt;/h3&gt;
&lt;p&gt;Tools&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IPython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Libraries&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NumPy
Numba
SciPy
Matplotlib
Pandas
Rpy2
PsychoPy
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="image-manipulation"&gt;Image Manipulation&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python Imaging Library(PIL)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xml-parsing"&gt;XML parsing&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;untangle
xmltodict
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;有需要自取.....&lt;/p&gt;
&lt;h1 id="di-san-bu-fen-shipping-great-code_1"&gt;第三部分 Shipping Great Code&lt;/h1&gt;
&lt;p&gt;http://docs.python-guide.org/en/latest/#shipping-great-code&lt;/p&gt;
&lt;h1 id="di-si-bu-fen-development-environment"&gt;第四部分 Development Environment&lt;/h1&gt;
&lt;p&gt;http://docs.python-guide.org/en/latest/#development-environment&lt;/p&gt;
&lt;h1 id="di-wu-bu-fen-additional-notes"&gt;第五部分 Additional Notes&lt;/h1&gt;
&lt;p&gt;http://docs.python-guide.org/en/latest/#additional-notes&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;2013-11-25&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="python"></category></entry><entry><title>读书笔记-程序员的职业素养</title><link href="http://www.wklken.me/posts/2013/11/24/the-clean-coder.html" rel="alternate"></link><published>2013-11-24T00:00:00+08:00</published><updated>2013-11-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-11-24:/posts/2013/11/24/the-clean-coder.html</id><summary type="html">&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xu"&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3 id="qian-yan"&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3 id="yin-yan"&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨, note about that)&lt;/p&gt;
&lt;h3 id="di-yi-zhang-zhuan-ye-zhu-yi"&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xu"&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3 id="qian-yan"&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3 id="yin-yan"&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨, note about that)&lt;/p&gt;
&lt;h3 id="di-yi-zhang-zhuan-ye-zhu-yi"&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务&lt;/p&gt;
&lt;p&gt;"专业主义"就意味着担当责任&lt;/p&gt;
&lt;p&gt;1.2 担当责任&lt;/p&gt;
&lt;p&gt;尽职尽责&lt;/p&gt;
&lt;p&gt;1.3 首先，不行损害之事&lt;/p&gt;
&lt;p&gt;1.3.1 不要破坏软件的功能&lt;/p&gt;
&lt;p&gt;要做得专业，就不能留下bug&lt;/p&gt;
&lt;p&gt;要对自己的不完美负责&lt;/p&gt;
&lt;p&gt;所谓专业人士，就是能对自己犯下的错误负责的人，哪怕那些错误实际上是在所难免的&lt;/p&gt;
&lt;p&gt;你有责任让失误率无限接近0&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.让QA找不出任何问题(每次 QA 找出问题时, 更糟糕的是用户找出问题时, 你都该震惊羞愧, 并决心以此为戒)
2.要确信代码正常运行:
  如何确保-测试，一遍遍测试.自动化测试
  要求: 你写的每一行代码都要测试，完毕
3.自动化QA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.3.2 不要破坏结构&lt;/p&gt;
&lt;p&gt;聪明人不会为了发布新功能而破坏结构&lt;/p&gt;
&lt;p&gt;所有软件项目的根本指导原则是，软件要易于修改&lt;/p&gt;
&lt;p&gt;如果你希望自己的软件灵活可变，那就应该时常修改它: 要证明易于修改，唯一办法就是做些实际的修改&lt;/p&gt;
&lt;p&gt;"无情重构"，每次读、修改代码，就要比原来更简洁&lt;/p&gt;
&lt;p&gt;不要害怕修改代码，（有一套完整测试，你就根本不会害怕）&lt;/p&gt;
&lt;p&gt;1.4 职业道德&lt;/p&gt;
&lt;p&gt;职业发展是你自己的事(雇主没有义务确保你在职场能够立于不败之地, 也没有义务培训你)&lt;/p&gt;
&lt;p&gt;将自己的职业发展寄希望于雇主的软件开发人员将会很惨&lt;/p&gt;
&lt;p&gt;"术业有专攻",需要投入时间去追求&lt;/p&gt;
&lt;p&gt;1.4.1 了解你的领域&lt;/p&gt;
&lt;p&gt;每个专业软件开发人员必须精通的事项(感觉有些可借鉴，并非全部)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.设计模式
2.设计原则。必须了解SOLID原则，而且要深刻理解组件设计原则
3.方法。必须了解XP/Scrum/精益/看板/瀑布/结构化分析/结构化设计
4.实践。TDD、OOP、结构化编程、持续集成和结对编程
5.工件、UML/DFD/结构图/Petri网络图/状态迁移图表、流程图和决策表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.4.2 坚持学习&lt;/p&gt;
&lt;p&gt;读书，看相关文章，关注博客和微博，参加技术大会，访问用户群，多参与读书与学习小组&lt;/p&gt;
&lt;p&gt;不懂就学，不要畏难&lt;/p&gt;
&lt;p&gt;1.4.2 练习&lt;/p&gt;
&lt;p&gt;练习，指的是在日常工作之余专门练习技能，以期自我提升&lt;/p&gt;
&lt;p&gt;解决一些简单的编程问题, 把它当做热身练习或静心过程&lt;/p&gt;
&lt;p&gt;1.4.4 合作&lt;/p&gt;
&lt;p&gt;学习的第二个最佳方法是与他人合作.&lt;/p&gt;
&lt;p&gt;1.4.5 辅导&lt;/p&gt;
&lt;p&gt;教学相长, 传道授业的同时, 导师也会从中受益&lt;/p&gt;
&lt;p&gt;1.4.6 了解业务领域&lt;/p&gt;
&lt;p&gt;对新领域有所了解, 未必需要成为该领域的专家, 但是仍然需要勤勉, 付出相当的努力来仍是业务领域.&lt;/p&gt;
&lt;p&gt;1.4.7 与雇主/客户保持一致&lt;/p&gt;
&lt;p&gt;必需弄明白雇主的真正问题, 站在其角度思考.&lt;/p&gt;
&lt;p&gt;1.4.8 谦逊&lt;/p&gt;
&lt;p&gt;专业人士都清楚自己的自负，不会故作谦逊&lt;/p&gt;
&lt;h3 id="di-er-zhang-shuo-bu"&gt;第二章 说不&lt;/h3&gt;
&lt;p&gt;专业人士敢于说明真相而不屈从于权势。专业人士有勇气对他们的经理说“不”&lt;/p&gt;
&lt;p&gt;2.1 对抗角色&lt;/p&gt;
&lt;p&gt;不靠谱的承诺是失职&lt;/p&gt;
&lt;p&gt;说不，然后找到双方都能接受的解决方案&lt;/p&gt;
&lt;p&gt;有时候需要提供必要细节, 解释说服, 但有时候提供太多细节会导致更多的微观管理&lt;/p&gt;
&lt;p&gt;2.2 高风险时刻&lt;/p&gt;
&lt;p&gt;最要说“不”的时那些高风险的关键时刻&lt;/p&gt;
&lt;p&gt;2.3 要有团队精神&lt;/p&gt;
&lt;p&gt;恪尽职守，关心队友，提供帮助，最大可能做到尽职尽责&lt;/p&gt;
&lt;p&gt;有团队精神的人不会总是说“是”&lt;/p&gt;
&lt;p&gt;2.3.1 试试看&lt;/p&gt;
&lt;p&gt;没有“试试看”这回事&lt;/p&gt;
&lt;p&gt;许诺“尝试”，就意味着你承认自己之前未尽全力，承认自己还有余力可施，意味着你只要再加把劲还是可以达成目标的&lt;/p&gt;
&lt;p&gt;本质上，承诺“尝试”是一种不诚实的表现&lt;/p&gt;
&lt;p&gt;2.3.2 消极对抗&lt;/p&gt;
&lt;p&gt;直接交流沟通，而不是消极对抗&lt;/p&gt;
&lt;p&gt;2.4 说“是”的成本&lt;/p&gt;
&lt;p&gt;运作良好的团队的经理和开发人员, 会相互协商, 直至达成共同认可的行动方案.&lt;/p&gt;
&lt;p&gt;有时候，获取正确决策的唯一途径，便是勇敢无畏的说出“不”字。&lt;/p&gt;
&lt;p&gt;2.5 如何写出好代码&lt;/p&gt;
&lt;p&gt;"客户所要的任何一项功能, 一旦写起来, 总是远比它开始时所说的药复杂许多...."&lt;/p&gt;
&lt;p&gt;专业人士常常成为英雄，但这样的荣誉并非他们所刻意追求的&lt;/p&gt;
&lt;p&gt;成为英雄与“解决问题”的诱惑诚然巨大，只是我们要明白，委屈专业原则以求全，并非问题的解决之道。舍弃这些原则，只会制造出更多的麻烦&lt;/p&gt;
&lt;p&gt;坚守专业原则(问题: 哪些是专业原则?)&lt;/p&gt;
&lt;p&gt;要学会说"不"&lt;/p&gt;
&lt;h3 id="di-san-zhang-shuo-shi"&gt;第三章 说“是”&lt;/h3&gt;
&lt;p&gt;3.1 承诺用语&lt;/p&gt;
&lt;p&gt;做出承诺，包含三个步骤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;口头上说自己将会去做
心里认真对待做出的承诺
真正付诸行动
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们承诺某事时，必须认证对待承诺&lt;/p&gt;
&lt;p&gt;3.1.1 识别“缺乏承诺”的征兆&lt;/p&gt;
&lt;p&gt;一类词语&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;需要、应当
希望、但愿
让我们（不是让我）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.1.2 真正的承诺听起来是怎样的&lt;/p&gt;
&lt;p&gt;你，你自己，始终能掌控某些事情，也就是说，总有些事是你可以承诺做到的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我将在....之前...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你对自己将会做某件事做了清晰的事实陈述，而且明确了完成期限&lt;/p&gt;
&lt;p&gt;之所以没成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.是因为我寄希望于某某去做这件事
你只能承诺自己能完全掌控的事
最终目标依赖与他人，那么就应该采取些具体行动，接近最终目标

2.是因为我不大确信是否真能完成得了
即使目标无法完成，你仍能全力前进，离目标更近些3

3.是因为有些时候我真的无能为力
如果你无法兑现承诺，最重要的就是，尽早向你的承诺对象发出预警，越快越好，越早越好
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.2  学习如何说“是”&lt;/p&gt;
&lt;p&gt;3.2.1 “试试”的另一面&lt;/p&gt;
&lt;p&gt;试试尽力xxxx&lt;/p&gt;
&lt;p&gt;3.2.2 坚守原则&lt;/p&gt;
&lt;p&gt;如果是专业人员，就不会放弃底线。&lt;/p&gt;
&lt;p&gt;写测试/重构/回归....打破这些纪律和原则, 必然会拖慢进度&lt;/p&gt;
&lt;p&gt;专业人士对自己的能力极限了如指掌, 他们十分清楚自己还能保持效率加班多长时间, 也非常明白要付出的代价.&lt;/p&gt;
&lt;h3 id="di-si-zhang-bian-ma"&gt;第四章 编码&lt;/h3&gt;
&lt;p&gt;具备"出错感知力", 说明你已经能够非常迅速地获得反馈, 能够更为快速地从错误中学习.&lt;/p&gt;
&lt;p&gt;要精熟掌握每项技艺, 关键都是要具备"信心"和"出错感知"能力&lt;/p&gt;
&lt;p&gt;4.1 做好准备&lt;/p&gt;
&lt;p&gt;编码是一项智力活动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.代码必须能够正常工作
2.代码必须能够帮你解决客户提出的问题
3.代码必须能和现有系统结合得天衣无缝
4.其他程序员必须能读懂你的代码
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果感到疲劳或者心烦意乱, 千万不要写代码. 要找到一种方法来消除干扰, 让心绪平静下来.&lt;/p&gt;
&lt;p&gt;4.1.1 凌晨3点写出的代码&lt;/p&gt;
&lt;p&gt;疲劳的时候，千万不要写代码&lt;/p&gt;
&lt;p&gt;要确保自己已经将睡眠、健康和生活方式调整到最佳状况，这样才能在每天的8个小时里全力以赴&lt;/p&gt;
&lt;p&gt;4.1.2 焦虑时写下的代码&lt;/p&gt;
&lt;p&gt;专业开发人员善于合理分配个人时间，以确保工作时间段中尽可能富有成效。&lt;/p&gt;
&lt;p&gt;在家中时，应该专门安排时间解决焦虑，这样就不会把焦虑情绪带到办公室里&lt;/p&gt;
&lt;p&gt;4.2 流态区&lt;/p&gt;
&lt;p&gt;意识高度专注，但思维视野收拢到狭窄的状态&lt;/p&gt;
&lt;p&gt;避免进入流态区！并非真的极为高效，也绝非毫无错误&lt;/p&gt;
&lt;p&gt;流态区写的代码可能会快些，但是后面你将不得不更多的回头重新审视这些代码&lt;/p&gt;
&lt;p&gt;切换思维、结对编程等&lt;/p&gt;
&lt;p&gt;ps: 为何我反而喜欢这种流态&lt;/p&gt;
&lt;p&gt;4.2.1 音乐&lt;/p&gt;
&lt;p&gt;对不同人，音乐帮助不一样，不一定有助于编码&lt;/p&gt;
&lt;p&gt;4.2.2 中断&lt;/p&gt;
&lt;p&gt;礼貌地回应中断&lt;/p&gt;
&lt;p&gt;当然，要想办法减少中断&lt;/p&gt;
&lt;p&gt;4.2.3 阻塞&lt;/p&gt;
&lt;p&gt;不要干坐，找一些其他事情干&lt;/p&gt;
&lt;p&gt;或者，结对编程&lt;/p&gt;
&lt;p&gt;另一种方法：创造性输出依赖于创造性输入，增加自己知识体系的广度&lt;/p&gt;
&lt;p&gt;4.4 调试&lt;/p&gt;
&lt;p&gt;TDD?&lt;/p&gt;
&lt;p&gt;衡量你是否是一个专业人士的重要方面，能否将调试时间尽量降到最低!&lt;/p&gt;
&lt;p&gt;绝对的零调试时间是一个理想化的目标, 无法达到, 但要将之作为努力方向&lt;/p&gt;
&lt;p&gt;4.5 保持节奏&lt;/p&gt;
&lt;p&gt;软件开发是一场马拉松, 而不是短跑冲刺&lt;/p&gt;
&lt;p&gt;4.5.1 知道何时应该离开一会&lt;/p&gt;
&lt;p&gt;阻塞，疲倦等，让自己保持好节奏&lt;/p&gt;
&lt;p&gt;当碰到困难而受阻时, 当你感到疲倦时, 就离开一会儿, 让富有创造力的潜意识接管问题.&lt;/p&gt;
&lt;p&gt;4.6 进度延迟&lt;/p&gt;
&lt;p&gt;管理延迟的秘诀, 便是早期检测和保持透明.&lt;/p&gt;
&lt;p&gt;三个考虑到多种因素的期限：乐观预估，标称预估，悲观预估&lt;/p&gt;
&lt;p&gt;尽量严守这三个时间点.&lt;/p&gt;
&lt;p&gt;4.6.1 期望&lt;/p&gt;
&lt;p&gt;调整和确认期望&lt;/p&gt;
&lt;p&gt;除非另有后背元, 否则不要轻易松口退步, 不要让其他任何人对此抱有期望.&lt;/p&gt;
&lt;p&gt;(自身承诺, 个人信誉)&lt;/p&gt;
&lt;p&gt;4.6.2 盲目冲刺&lt;/p&gt;
&lt;p&gt;坚持维持你的估算&lt;/p&gt;
&lt;p&gt;不要经受不住诱惑盲目冲刺&lt;/p&gt;
&lt;p&gt;不要让其他人抱有不实际的期望.&lt;/p&gt;
&lt;p&gt;4.6.3 加班加点&lt;/p&gt;
&lt;p&gt;不应该采用额外加班加点工作的方案，除非以下三个条件都能满足：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.你个人能挤出时间
2.短期加班，最多加班两周
3.你的老板要有后备预案，以防止万一加班措施失败了(最为关键)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.6.4 交付失误&lt;/p&gt;
&lt;p&gt;最糟糕：明知道没有完成任务却宣称已经完成&lt;/p&gt;
&lt;p&gt;4.6.5 定义完成&lt;/p&gt;
&lt;p&gt;创建一个确切定义的“完成”标准&lt;/p&gt;
&lt;p&gt;4.7 帮助&lt;/p&gt;
&lt;p&gt;4.7.1 帮助他人&lt;/p&gt;
&lt;p&gt;清楚状态，腾出时间&lt;/p&gt;
&lt;p&gt;作为专业人士，要以能够随时帮助别人为荣&lt;/p&gt;
&lt;p&gt;4.7.2 接受他人的帮助&lt;/p&gt;
&lt;p&gt;要以乐于接受别人的帮助为荣&lt;/p&gt;
&lt;p&gt;同时要学会如何请求帮助&lt;/p&gt;
&lt;p&gt;4.7.3 辅导&lt;/p&gt;
&lt;h3 id="di-wu-zhang-ce-shi-qu-dong-kai-fa"&gt;第五章 测试驱动开发&lt;/h3&gt;
&lt;p&gt;TDD,测试驱动开发，先写测试的编程&lt;/p&gt;
&lt;p&gt;5.1 此事已有定论&lt;/p&gt;
&lt;p&gt;TDD绝不仅仅是一种用于缩短编码周期的简单技巧&lt;/p&gt;
&lt;p&gt;此事已有定论：TDD是确切可行，并且，每个开发者都要适应和掌握TDD&lt;/p&gt;
&lt;p&gt;5.2 TDD的三项法则(似乎有些过了)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.在编写好失败单元测试之前，不要编写任何产品代码
2.只要有一个单元测试失败了，就不要再写测试代码；无法通过编译也是一种失败情况
3.产品代码恰好能够让当前失败的单元测试成功通过即可，不要多写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.3 TDD的优势&lt;/p&gt;
&lt;p&gt;5.3.1 确定性&lt;/p&gt;
&lt;p&gt;代码有任何修改，都必须运行手头有的全部测试&lt;/p&gt;
&lt;p&gt;确定状态&lt;/p&gt;
&lt;p&gt;5.3.2 缺陷注入率&lt;/p&gt;
&lt;p&gt;TDD能够显著降低缺陷&lt;/p&gt;
&lt;p&gt;5.3.3 勇气&lt;/p&gt;
&lt;p&gt;拥有一套值得信赖的测试，便可完全打消对修改代码的全部恐惧。&lt;/p&gt;
&lt;p&gt;放手整理，代码变得更具有可塑性，可以安全地将之雕琢为简单而满意的结构&lt;/p&gt;
&lt;p&gt;5.3.4 文档&lt;/p&gt;
&lt;p&gt;单元测试即文档&lt;/p&gt;
&lt;p&gt;5.3.5 设计&lt;/p&gt;
&lt;p&gt;测试先行，会迫使你去考虑什么是好的设计&lt;/p&gt;
&lt;p&gt;事后测试只是一种防守，而先行测试是一种进攻&lt;/p&gt;
&lt;p&gt;5.3.6 专业人士的选择&lt;/p&gt;
&lt;p&gt;TDD是专业人士的选择&lt;/p&gt;
&lt;p&gt;它是一项能够提升代码确定性, 给程序员孤立, 降低代码缺陷率, 优化文档和设计的原则.&lt;/p&gt;
&lt;p&gt;5.4 TDD的局限&lt;/p&gt;
&lt;p&gt;TDD并非万能&lt;/p&gt;
&lt;p&gt;某些场合显得不切实际或不合适&lt;/p&gt;
&lt;h3 id="di-liu-zhang-lian-xi"&gt;第六章 练习&lt;/h3&gt;
&lt;p&gt;专业人士都需要借助专门的训练提升自己的技能&lt;/p&gt;
&lt;p&gt;6.1 引子&lt;/p&gt;
&lt;p&gt;6.1.1 10的22次方&lt;/p&gt;
&lt;p&gt;现在我们有更好的工具，更好的语言，但是，语句的本质并没有随时间而改变&lt;/p&gt;
&lt;p&gt;6.1.2 转变&lt;/p&gt;
&lt;p&gt;工作方式已经截然不同&lt;/p&gt;
&lt;p&gt;任何事情，要做得快，都离不开练习&lt;/p&gt;
&lt;p&gt;无论搏斗还是编程, 速度都来源于练习.&lt;/p&gt;
&lt;p&gt;6.2 编程柔道场&lt;/p&gt;
&lt;p&gt;需要找一些东西，来做实际的练习&lt;/p&gt;
&lt;p&gt;6.3 自身经验的扩展&lt;/p&gt;
&lt;p&gt;会受限，即所解决问题的种类比较单一&lt;/p&gt;
&lt;p&gt;所以，要自己扩展&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.开源，提升技能的最好方式
2.自己规划，不要局限在公司的语言和平台
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.4 结论&lt;/p&gt;
&lt;p&gt;无论如何，专业人士都需要练习&lt;/p&gt;
&lt;p&gt;保持自己的技能不落伍是自己的责任, 而不是雇主的责任&lt;/p&gt;
&lt;p&gt;联系的时候你是赚不到钱的, 但是联系之后, 你会获得回报, 而且是丰厚的回报.&lt;/p&gt;
&lt;h3 id="di-qi-zhang-yan-shou-ce-shi"&gt;第七章 验收测试&lt;/h3&gt;
&lt;p&gt;专业开发人员既要做好开发, 也要做好沟通.&lt;/p&gt;
&lt;p&gt;7.1 需求的沟通&lt;/p&gt;
&lt;p&gt;7.1.1 过早精细化&lt;/p&gt;
&lt;p&gt;陷阱：过早精细化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不确定原则
需求完成得越精细，就越容易被忽视, 系统因此也谈不上完工
观察者效应/不确定原则：每次你想业务方提供一个功能，他们获取比之前更多的信息，反过来影响他们对整个系统的看法
2.预估焦虑
所谓的预估，预估整个系统，对需求进行精确评估
其实：即便拥有全面准确的信息，评估通常也会存在很大的变数
     不确定原则，需求是一定会变化的，追求的那种精确是徒劳的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.1.2 迟来的模糊性&lt;/p&gt;
&lt;p&gt;推迟过早精细化的另一个问题，迟来的模糊性&lt;/p&gt;
&lt;p&gt;需求的模糊，带来分歧或争论&lt;/p&gt;
&lt;p&gt;寻找各方都同意的关于需求的表述, 而不是去解决争端&lt;/p&gt;
&lt;p&gt;7.2 验收测试&lt;/p&gt;
&lt;p&gt;业务方与开发方合作编写的测试，其目的在于确定需求已经完成&lt;/p&gt;
&lt;p&gt;7.2.1 “完成”的定义&lt;/p&gt;
&lt;p&gt;完成，就是完成&lt;/p&gt;
&lt;p&gt;完成意味着，所有代码都写完了，所有测试都通过了，QA和需求方已经认可。这，才是完成&lt;/p&gt;
&lt;p&gt;7.2.2 沟通&lt;/p&gt;
&lt;p&gt;验收测试的目的是沟通，澄清，精确化&lt;/p&gt;
&lt;p&gt;7.2.3 自动化&lt;/p&gt;
&lt;p&gt;手工测试成本太高，相比手动测试，自动化测试的成本非常低&lt;/p&gt;
&lt;p&gt;7.2.4 额外工作&lt;/p&gt;
&lt;p&gt;不要把测试看做额外工作，而应当看成节省时间和金钱的办法&lt;/p&gt;
&lt;p&gt;7.2.5 验收测试什么时候写，由谁来写&lt;/p&gt;
&lt;p&gt;理想状态下：业务方和QA协作编写，程序员检查是否有矛盾和冲突&lt;/p&gt;
&lt;p&gt;只需要确保测试者和开发者不是同一人&lt;/p&gt;
&lt;p&gt;7.2.6 开发人员的角色&lt;/p&gt;
&lt;p&gt;开发人员有责任把验收测试与系统联系起来，然后让这些测试通过&lt;/p&gt;
&lt;p&gt;7.2.7 测试的协商与被动推进&lt;/p&gt;
&lt;p&gt;身为专业的开发人员，与编写测试的人协商并改进测试是你的职责，绝不能被动接受测试&lt;/p&gt;
&lt;p&gt;请记住, 身为专业开发人员, 你的职责是协助团队开发出最棒的软件. 也就是说, 每个人都需要关心错误和疏忽, 并协力改正.&lt;/p&gt;
&lt;p&gt;7.2.8 验收测试和单元测试&lt;/p&gt;
&lt;p&gt;单元测试是程序员写给程序员的&lt;/p&gt;
&lt;p&gt;验收测试是业务方写给业务方的&lt;/p&gt;
&lt;p&gt;7.2.9 图形界面及其他复杂因素&lt;/p&gt;
&lt;p&gt;恰当地测试&lt;/p&gt;
&lt;p&gt;尽可能减少GUI测试&lt;/p&gt;
&lt;p&gt;7.2.10 持续集成&lt;/p&gt;
&lt;p&gt;保持持续集成系统的时刻运行&lt;/p&gt;
&lt;p&gt;7.3 结论&lt;/p&gt;
&lt;p&gt;要解决开发方和业务方沟通问题，有效的办法就是，编写自动化的验收测试&lt;/p&gt;
&lt;h3 id="di-ba-zhang-ce-shi-ce-lue"&gt;第八章 测试策略&lt;/h3&gt;
&lt;p&gt;每个专业的开发团队都需要一套好的测试策略&lt;/p&gt;
&lt;p&gt;8.1 QA应该找不到任何错误&lt;/p&gt;
&lt;p&gt;QA在团队中扮演需求规约定义者和特性描述者&lt;/p&gt;
&lt;p&gt;8.2 自动化测试金字塔&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5%   人工探索式测试
10%  系统测试
20%  集成测试
50%  组件测试
100% 单元测试
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.2.1 单元测试&lt;/p&gt;
&lt;p&gt;在最低层次上定义系统&lt;/p&gt;
&lt;p&gt;单元测试是可行的&lt;/p&gt;
&lt;p&gt;单元测试可以做到90%以上的覆盖率&lt;/p&gt;
&lt;p&gt;开发人员&lt;/p&gt;
&lt;p&gt;8.2.2 组件测试&lt;/p&gt;
&lt;p&gt;验收测试的一种，针对系统的各个组件编写的&lt;/p&gt;
&lt;p&gt;QA和业务人员&lt;/p&gt;
&lt;p&gt;8.2.3 集成测试&lt;/p&gt;
&lt;p&gt;只能对那些组件很多的较大型系统才有意义&lt;/p&gt;
&lt;p&gt;测试组件装配到一起是否协调,是装配测试&lt;/p&gt;
&lt;p&gt;系统架构师或者主设计师&lt;/p&gt;
&lt;p&gt;8.2.4 系统测试&lt;/p&gt;
&lt;p&gt;针对真个击沉完毕的系统来运行的自动化测试,是最终的集成测试&lt;/p&gt;
&lt;p&gt;测试系统是否正确组装完毕，以及系统各个组件之间是否能正常交互&lt;/p&gt;
&lt;p&gt;系统架构师和技术负责人来编写.&lt;/p&gt;
&lt;p&gt;8.2.5 人工探索性测试&lt;/p&gt;
&lt;p&gt;人工，对系统进行深入研究和探索&lt;/p&gt;
&lt;p&gt;8.3 结论&lt;/p&gt;
&lt;p&gt;开发团队要和QA紧密配合，创建有单元测试，组件测试，集成测试，系统测试和探索式测试构成的测试体系&lt;/p&gt;
&lt;h3 id="di-jiu-zhang-shi-jian-guan-li"&gt;第九章 时间管理&lt;/h3&gt;
&lt;p&gt;9.1 会议&lt;/p&gt;
&lt;p&gt;关于会议，有两条真理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.会议是必须的
2.会议浪费了大量的时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;专业开发人员同样清楚会议额的高昂成本。所以，如果会议没有现实且显著的成效，他们会主动拒绝&lt;/p&gt;
&lt;p&gt;9.1.1 拒绝&lt;/p&gt;
&lt;p&gt;邀请你参加会议的人并不负责管理你的时间，为时间负责的人只有你&lt;/p&gt;
&lt;p&gt;理智地使用时间，谨慎选择，应当参加哪些会议，礼貌拒绝哪些会议&lt;/p&gt;
&lt;p&gt;领导的最重要责任之一, 就是帮你从某些会议脱身. 好的领导一定会主动维护你拒绝出席的决定, 因为她和你一样关心你的时间.&lt;/p&gt;
&lt;p&gt;9.1.2 离席&lt;/p&gt;
&lt;p&gt;会议并不总按计划进行的&lt;/p&gt;
&lt;p&gt;如果会议然人厌烦，就离席(想个办法礼貌地退出来)&lt;/p&gt;
&lt;p&gt;9.1.3 确定议程与目标&lt;/p&gt;
&lt;p&gt;会议应当有清晰的议程，确定每个议题所花的时间，以及明确的目标&lt;/p&gt;
&lt;p&gt;9.1.4 立会&lt;/p&gt;
&lt;p&gt;站立会议&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我昨天做了什么
2.今天打算做什么
3.我遇到了什么问题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个人发言不超过1分钟&lt;/p&gt;
&lt;p&gt;9.1.5 迭代计划会议&lt;/p&gt;
&lt;p&gt;会议的节奏应该很快，简明扼要地讨论各个候选人物，然后决定是选择还是放弃&lt;/p&gt;
&lt;p&gt;会议是每轮迭代时间的5%以内&lt;/p&gt;
&lt;p&gt;9.1.6 迭代回顾和DEMO展示&lt;/p&gt;
&lt;p&gt;在迭代的末尾召开&lt;/p&gt;
&lt;p&gt;9.1.7 争论/反对&lt;/p&gt;
&lt;p&gt;凡事不能再5分钟内解决的争论，都不能靠辩说解决&lt;/p&gt;
&lt;p&gt;用数据说话&lt;/p&gt;
&lt;p&gt;如果你同意了, 就必须拿出行动来.&lt;/p&gt;
&lt;p&gt;9.2 注意力点数&lt;/p&gt;
&lt;p&gt;编程是需要持续投入精力和注意力的智力活动&lt;/p&gt;
&lt;p&gt;注意力点数会随时间流逝而减少.&lt;/p&gt;
&lt;p&gt;9.2.1 睡眠&lt;/p&gt;
&lt;p&gt;保证睡眠，好好睡上7小时&lt;/p&gt;
&lt;p&gt;9.2.2 咖啡因&lt;/p&gt;
&lt;p&gt;适度&lt;/p&gt;
&lt;p&gt;9.2.3 恢复&lt;/p&gt;
&lt;p&gt;在注意力不集中的时候，无法控制注意力，可以想办法花30到60分钟恢复&lt;/p&gt;
&lt;p&gt;9.2.4 肌肉注意力&lt;/p&gt;
&lt;p&gt;肌肉注意力有助于改善心智注意力&lt;/p&gt;
&lt;p&gt;定期训练肌肉注意力&lt;/p&gt;
&lt;p&gt;9.2.5 输入与输出&lt;/p&gt;
&lt;p&gt;平衡输入与输出&lt;/p&gt;
&lt;p&gt;9.3 时间拆分和番茄工作法&lt;/p&gt;
&lt;p&gt;25分钟高效工作+5分钟休息，每4个番茄钟休息30分钟&lt;/p&gt;
&lt;p&gt;25分钟内，可以拒绝任何干扰&lt;/p&gt;
&lt;p&gt;9.4 要避免的行为&lt;/p&gt;
&lt;p&gt;优先级错乱：提高某个任务优先级来借口推迟真正急迫的任务&lt;/p&gt;
&lt;p&gt;专业开发人员会评估每个人物的优先级，排除个人喜好和需求，按照真实的紧急程度来执行任务&lt;/p&gt;
&lt;p&gt;9.5 死胡同&lt;/p&gt;
&lt;p&gt;慎重的态度和积累的经验可以帮你避免某些死胡同，但无法避免所有&lt;/p&gt;
&lt;p&gt;在走入死胡同时，要迅速意识到，并有足够的勇气走回头路&lt;/p&gt;
&lt;p&gt;坑法则，The Rule of Holes：如果你掉进坑里，别挖&lt;/p&gt;
&lt;p&gt;9.6 泥潭&lt;/p&gt;
&lt;p&gt;泥潭会减慢你的速度，但不会让你彻底停下来&lt;/p&gt;
&lt;p&gt;泥潭不容易被发现&lt;/p&gt;
&lt;p&gt;发现自己深处泥潭还要固执前进，是最严重的优先级错乱&lt;/p&gt;
&lt;p&gt;9.7 结论&lt;/p&gt;
&lt;p&gt;专业的开发人员会用心管理自己的时间和注意力&lt;/p&gt;
&lt;h3 id="di-shi-zhang-yu-gu"&gt;第十章 预估&lt;/h3&gt;
&lt;p&gt;预估是软件开发人员面对的最简单、也是最可怕的活动之一&lt;/p&gt;
&lt;p&gt;10.1 什么是预估&lt;/p&gt;
&lt;p&gt;问题在于，不同人不同看法，业务方认为是承诺，开发方认为是猜测. 两者相差迥异&lt;/p&gt;
&lt;p&gt;10.1.1 承诺&lt;/p&gt;
&lt;p&gt;承诺是必须做到的。&lt;/p&gt;
&lt;p&gt;如果你承诺在某天做成某事, 就必须按时完成.&lt;/p&gt;
&lt;p&gt;专业开发人员不随便承诺，除非他们确切知道可以完成&lt;/p&gt;
&lt;p&gt;如果被要求承诺做自己不确定的事情, 那么就应当坚决拒绝.&lt;/p&gt;
&lt;p&gt;10.1.2 预估&lt;/p&gt;
&lt;p&gt;预估是一种猜测。它不包含任何承诺的色彩，他不需要做任何约定&lt;/p&gt;
&lt;p&gt;大多数软件开发人员不擅长预估。&lt;/p&gt;
&lt;p&gt;预估不是个定数，预估的结果是一种概率分布&lt;/p&gt;
&lt;p&gt;10.1.3 暗示性承诺&lt;/p&gt;
&lt;p&gt;专业开发人员能够清楚区分预估和承诺，只有在确切知道可以完成的情况下，他们才会给出承诺&lt;/p&gt;
&lt;p&gt;另外，需要小心避免给出暗示性的承诺&lt;/p&gt;
&lt;p&gt;10.2 PERT&lt;/p&gt;
&lt;p&gt;计划评审技术&lt;/p&gt;
&lt;p&gt;三元分析法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;O，乐观估计
N，标称估计 
P，悲观估计

u = (O+4N+P)/6
u是任务期望完成时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10.3 预估任务 &lt;/p&gt;
&lt;p&gt;德尔菲法：一组人集合起来，讨论某项任务，预估完成时间，然后重复“讨论-预估”的过程，直到意见统一&lt;/p&gt;
&lt;p&gt;10.4 大数定理&lt;/p&gt;
&lt;p&gt;把大任务切分成许多小任务，分开预估再加总，结果会比单独平谷大人物要准确很多&lt;/p&gt;
&lt;p&gt;10.5 结论&lt;/p&gt;
&lt;p&gt;懂得如何为业务人员提供可信的预估结果，以便做出计划&lt;/p&gt;
&lt;p&gt;如果做不到, 或者不确定能做到, 专业开发人员不会给出承诺.&lt;/p&gt;
&lt;h3 id="di-shi-yi-zhang-ya-li"&gt;第十一章 压力&lt;/h3&gt;
&lt;p&gt;即使有压力，专业开发人员也会冷静果断。尽管压力不断增大，他依然会坚守所受的训练和纪律，他知道这是他赖以战胜有最后期限和承诺所带来压力感的最好方法&lt;/p&gt;
&lt;p&gt;11.1 避免压力&lt;/p&gt;
&lt;p&gt;在压力下保持冷静的最好方式，便是规避会导致压力的处境&lt;/p&gt;
&lt;p&gt;规避的方式也许无法完全减除压力, 但是可以大大降低压力并缩短高压力期的时间.&lt;/p&gt;
&lt;p&gt;11.1.1 承诺&lt;/p&gt;
&lt;p&gt;我们要做的就是使风险定量化并将他们陈述给业务方, 这样他们就能做好相应的准备.&lt;/p&gt;
&lt;p&gt;避免不切实际的承诺&lt;/p&gt;
&lt;p&gt;11.1.2 保持整洁 &lt;/p&gt;
&lt;p&gt;快速前进确保最后期限的方法，便是保持整洁&lt;/p&gt;
&lt;p&gt;让系统、代码和设计尽可能简洁，就可以避免压力&lt;/p&gt;
&lt;p&gt;要尽力保持输出成功整洁干净&lt;/p&gt;
&lt;p&gt;11.1.3 危机中的纪律&lt;/p&gt;
&lt;p&gt;选择那些你在危急时刻依然会遵循的纪律原则，并且在所有工作中都遵守这些纪律。&lt;/p&gt;
&lt;p&gt;遵守这些纪律原则是避免陷入危机的最好途径&lt;/p&gt;
&lt;p&gt;11.2 应对压力&lt;/p&gt;
&lt;p&gt;11.2.1 不要惊慌失措&lt;/p&gt;
&lt;p&gt;放松下来，对问题深思熟虑&lt;/p&gt;
&lt;p&gt;努力寻找可以带来最好结果的路径，然后沿着那条路径以合理稳定的节奏前进&lt;/p&gt;
&lt;p&gt;11.2.2 沟通&lt;/p&gt;
&lt;p&gt;让你的团队和主管知道你正深陷困境之中&lt;/p&gt;
&lt;p&gt;11.2.3 依靠你的纪律原则&lt;/p&gt;
&lt;p&gt;当事情十分困难时，要坚信你的纪律原则&lt;/p&gt;
&lt;p&gt;11.2.4 寻求帮助&lt;/p&gt;
&lt;p&gt;11.3 总结&lt;/p&gt;
&lt;p&gt;应对压力的诀窍在于, 能回避压力时尽可能地回避, 当无法回避时则勇敢直面压力.&lt;/p&gt;
&lt;h3 id="di-shi-er-zhang-xie-zuo"&gt;第十二章 协作&lt;/h3&gt;
&lt;p&gt;大多数软件都是有团队开发出来的&lt;/p&gt;
&lt;p&gt;单打独斗与有利于团队之外都是不专业的表现.&lt;/p&gt;
&lt;p&gt;12.1 程序员与人&lt;/p&gt;
&lt;p&gt;12.1.1 程序员与雇主&lt;/p&gt;
&lt;p&gt;专业程序员的首要职责是满足雇主的需求&lt;/p&gt;
&lt;p&gt;专业程序员会花时间去理解业务&lt;/p&gt;
&lt;p&gt;12.1.2 程序员与程序员&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.代码个体所有
不正常团队的糟糕症状
2.协作性的代码共有权
共有, 每个人都可以做出合适的修改
3.结对
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12.2 小脑&lt;/p&gt;
&lt;p&gt;专业人士会共同工作&lt;/p&gt;
&lt;p&gt;有些时候，单独工作是正确的。但是一般来说，和他人紧密协作，在大部分时间段中结对工作，是最好的做法&lt;/p&gt;
&lt;p&gt;12.3 结论&lt;/p&gt;
&lt;p&gt;一定要学会交流，和人们交流&lt;/p&gt;
&lt;h3 id="di-shi-san-zhang-tuan-dui-yu-xiang-mu"&gt;第十三章 团队与项目&lt;/h3&gt;
&lt;p&gt;13.1 只是简单混合吗？&lt;/p&gt;
&lt;p&gt;13.1.1 有凝聚力的团队&lt;/p&gt;
&lt;p&gt;形成团队是需要时间的.&lt;/p&gt;
&lt;p&gt;团队成员首先需要建立关系。需要学习如何写作，需要了解彼此的批号，强项，弱项，最终，才能凝聚成团队&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.发酵期 
成员克服个体差异，默契配合，彼此信任，形成真正有凝聚力的团队，是需要一定时间的

2.团队和项目，何者为先
把项目分配给形成凝聚力的团队，而不是围绕项目来组件团队
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有凝聚力的团队确实有些神奇之处, 他们能够一起创造奇迹.&lt;/p&gt;
&lt;p&gt;13.1.2 如何管理有凝聚力的团队&lt;/p&gt;
&lt;p&gt;每个团队都有自己的速度。团队的速度，即是在一定时间段内团队能够完成的工作量&lt;/p&gt;
&lt;p&gt;13.1.3 项目承包人的困境&lt;/p&gt;
&lt;p&gt;13.2 结论&lt;/p&gt;
&lt;p&gt;团队比项目更难构建. 因此, 组建稳健的团队, 让团队在一个有一个项目中整体移动共同工作是较好的做法.&lt;/p&gt;
&lt;h3 id="di-shi-si-zhang-fu-dao-xue-tu-qi-yu-ji-yi"&gt;第十四章 辅导、学徒期与技艺&lt;/h3&gt;
&lt;p&gt;14.1 失败的学位教育&lt;/p&gt;
&lt;p&gt;14.2 辅导&lt;/p&gt;
&lt;p&gt;14.3 学徒期&lt;/p&gt;
&lt;p&gt;14.3.1 软件学徒期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.大师
2.熟练工
3.学徒、实习生
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14.3.2 现实情况&lt;/p&gt;
&lt;p&gt;程序员的水平是否能够提升和最终是否能够得到职位晋升，全视乎程序员自己的表现&lt;/p&gt;
&lt;p&gt;14.4 技艺&lt;/p&gt;
&lt;p&gt;技艺是工匠所持的精神状态&lt;/p&gt;
&lt;hr/&gt;</content><category term="books"></category></entry><entry><title>Nginx基础笔记</title><link href="http://www.wklken.me/posts/2013/11/23/nginx-base.html" rel="alternate"></link><published>2013-11-23T00:00:00+08:00</published><updated>2013-11-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-11-23:/posts/2013/11/23/nginx-base.html</id><summary type="html">&lt;p&gt;nginx小结&lt;/p&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx &lt;a href="http://nginx.org/"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx &lt;a href="http://nginx.org/en/download.html"&gt;官方下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx最佳实践配置项目 &lt;a href="https://github.com/Umkus/nginx-boilerplate"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx Configuration &lt;a href="http://wiki.nginx.org/Configuration"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;教程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;agentzh的Nginx教程 &lt;a href="http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx开发从入门到精通 &lt;a href="http://tengine.taobao.org/book/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx战斗准备-优化指南 &lt;a href="http://www.oschina.net/translate/nginx-setup"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx模块开发入门 &lt;a href="http://blog.codinglabs.org/articles/intro-of-nginx-module-development.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解析Nginx负载均衡 &lt;a href="http://stblog.baidu-tech.com/?p=2027"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx Rewrite研究笔记 &lt;a href="http://blog.cafeneko.info/2010/10/nginx_rewrite_note/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang_1"&gt;安装&lt;/h2&gt;
&lt;h3 id="ubuntuxia"&gt;ubuntu下&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx

启动
sudo /etc/init.d/nginx start       #通过init.d下的启动文件启动。
sudo service nginx start#通过ubuntu的服务管理器启动

配置文件位置
/etc/nginx …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;nginx小结&lt;/p&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx &lt;a href="http://nginx.org/"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx &lt;a href="http://nginx.org/en/download.html"&gt;官方下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx最佳实践配置项目 &lt;a href="https://github.com/Umkus/nginx-boilerplate"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx Configuration &lt;a href="http://wiki.nginx.org/Configuration"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;教程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;agentzh的Nginx教程 &lt;a href="http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx开发从入门到精通 &lt;a href="http://tengine.taobao.org/book/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx战斗准备-优化指南 &lt;a href="http://www.oschina.net/translate/nginx-setup"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx模块开发入门 &lt;a href="http://blog.codinglabs.org/articles/intro-of-nginx-module-development.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解析Nginx负载均衡 &lt;a href="http://stblog.baidu-tech.com/?p=2027"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx Rewrite研究笔记 &lt;a href="http://blog.cafeneko.info/2010/10/nginx_rewrite_note/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang_1"&gt;安装&lt;/h2&gt;
&lt;h3 id="ubuntuxia"&gt;ubuntu下&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx

启动
sudo /etc/init.d/nginx start       #通过init.d下的启动文件启动。
sudo service nginx start#通过ubuntu的服务管理器启动

配置文件位置
/etc/nginx/nginx.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bian-yi-an-zhuang"&gt;编译安装&lt;/h3&gt;
&lt;p&gt;1.先决条件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.gcc
apt-get install gcc
2.pcre(Perl Compatible Regular Expression)
apt-get install libpcre3 libpcre3-dev
3.zlib
apt-get install zliblg zliblg-dev
4.openssl
apt-get install openssl opensll-dev

#如果非apt，可以使用下载包手动编译安装的方式处理
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.下载包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;www.nginx.net 下载稳定版
wget http://nginx.org/download/nginx-1.4.4.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.解压安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xzvf nginx-1.4.4.tar.gz
#默认，安装目录/usr/local/nginx
./configure
make
make install

#配置
./configure --conf-path=/etc/nginx/nginx.conf

可以配置一些其他选项

安装后查看下目录下的Configuration summary
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.init脚本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;需要给nginx建立一个init脚本
从网上捞一个，放入/etc/init.d/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;推荐编译配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.使用不同prefix，方便指定不同版本,也便于升级
./configure --prefix=/usr/local/nginx-1.4.4
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ji-ben-cao-zuo_1"&gt;基本操作&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;查看帮助
/usr/local/nginx/sbin/nginx -h

立即停止进程(TERM信号)
/usr/local/nginx/sbin/nginx -s stop

温和停止进程(QUIT信号)
/usr/local/nginx/sbin/nginx -s quit

重加载
/etc/init.d/nginx reload #有init脚本情况下
/usr/local/nginx/sbin/nginx -s reload #原生

检测配置文件是否正确
/usr/local/nginx/sbin/nginx -t #生产路径下的
/usr/local/nginx/sbin/nginx -t -c /home/ken/tmp/test.conf #可以测试某个临时文件
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="httpji-ben-pei-zhi"&gt;HTTP基本配置&lt;/h2&gt;
&lt;h3 id="pei-zhi-shuo-ming"&gt;配置说明&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;注释，#
每条指令总是以分好结束(;)
配置继承：在一个区块中嵌套其他区段，那么被嵌套的区段会继承其父区段的设置
字符串，可以没有引号，但是如果存在特殊字符（空格，分号，花括号）需要用引号引起
单位：大小(k/K m/M) 时间值(ms/s/m/h/d/w/M/y 默认s)
模块提供各种变量值，可以进行读取和赋值（每个模块提供变量列表需要自己去查）
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pei-zhi-wen-jian-mu-lu-jie-gou"&gt;配置文件目录结构&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/local/nginx/conf/

- mime.types 一个文件扩展列表，它们与MIME类型关联
- fastcgi.conf 与FastCGI相关的配置文件
- proxy.conf 与Proxy相关的配置文件
- nginx.conf 应用程序的基本配置文件
- sites/
    |- a.conf #允许给每个单独网站建立一个配置文件
    |- b.conf
    |- dir/
        |- c.conf

需要在nginx.conf中使用包含命令
include sites/*.conf;
include sites/*/*.conf;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pei-zhi-wen-jian-jie-gou"&gt;配置文件结构&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http { #嵌入配置文件的根部， 一个http里可以配置多个server

    server { #声明一个站点
        server_name www.website.com; #监听的主机名
        listen 80; #监听套接字所使用的ip地址和端口号

        error_page 404 /not_found.html;
        error_page 500 501 502 503 504 /server_error.html;

        index index.html;

        root /var/www/website/com/html; #定义文档的根目录

        #location, 通过制定的模式与客户端请求的URI相匹配
        location / { #网站的特定位置
        }
        location /admin/ { #网站的特定位置 #
            alias /var/www/locked/; #只能放在 location区段中，为指定路径提供别名
        }

        #操作符,匹配时跟定义顺序无关
        location = /abcd { #精确匹配，不能用正则
        }
        location /abc/ { #url必须以指定模式开始，不能用正则
        }
        location ^~ /abcd$ { #吴标致行为，URI定位必须以指定模式开始，如果匹配，停止搜索其他模式
        }
        location ~ ^/abcd$ { #正则匹配，区分大小写
        }
        location ~* ^/abcd$ { #正则匹配，不区分大小写
        }
        location @test  { #定义location区段名，客户端不能访问，内部产生的请求可以,例如try_files或error_page
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mo-kuai_1"&gt;模块&lt;/h2&gt;
&lt;h3 id="mo-kuai-hua"&gt;模块化&lt;/h3&gt;
&lt;p&gt;nginx真正的魅力在于它的模块，整个应用程序建立在一个模块化系统之上，在编译时，可以对每一个模块进行启用或者禁用&lt;/p&gt;
&lt;h3 id="indexmo-kuai"&gt;index模块&lt;/h3&gt;
&lt;p&gt;定义往回走哪index页&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;index index.php index.html /data/website/index.html;
#可以指定多个，但是ngxin提供第一个找到的文件
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="logmo-kuai"&gt;Log模块&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;access_log /file/path;
error_log /file/path error;  #level: debug/info/notice/warn/error/crit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日志格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;log_format main '$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" $http_x_forwarded_for';

access_log /var/log/test.log main;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="real-ipmo-kuai"&gt;Real IP模块&lt;/h3&gt;
&lt;p&gt;默认编译nginx不包含这个模块&lt;/p&gt;
&lt;p&gt;当通过nginx将用户请求进行转发时，接收请求的应用要拿到用户的真实IP(经转发拿到的是服务器的IP)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;real_ip_header X-Forwarded-For;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="accessmo-kuai"&gt;Access模块&lt;/h3&gt;
&lt;p&gt;可以禁用ip段&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#如果规则之间有冲突，会以最前面匹配的规则为准
deny IP;
deny subnet;
allow IP;
allow subnet;
# block all ips
deny    all;
# allow all ips
allow    all;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置一个blockips.conf,然后在nginx.conf中include&lt;/p&gt;
&lt;p&gt;e.g&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location {
    allow 127.0.0.1; #允许本地ip 注意顺序，allow要放在前面
    deny all; #禁止其他ip
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rewritemo-kuai"&gt;Rewrite模块&lt;/h3&gt;
&lt;p&gt;作用：执行URL重定向,允许你去掉带有恶意的URL，包含多个参数（修改）&lt;/p&gt;
&lt;p&gt;利用正则的匹配，分组和引用，达到目的&lt;/p&gt;
&lt;p&gt;break/return/set等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (-f $uri) {
    break
}
if ($uri ~ ^/admin/){
    return 403;
}
if ($uri ~ ^/search/(.*)$) {
    set $query $1;
    rewrite ^ /search.php?q=$query?;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/search/s&lt;/span&gt;&lt;span class="n"&gt;ome&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;
&lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="sr"&gt;/(.*)$ /s&lt;/span&gt;&lt;span class="n"&gt;earch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;?;&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/user/31/&lt;/span&gt;&lt;span class="n"&gt;James&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;James&lt;/span&gt;
&lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="sr"&gt;/([0-9]+)/(.+)$ /&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;?;&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/index.php/param1/param2/&lt;/span&gt;&lt;span class="n"&gt;param3&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/index.php/&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param3&lt;/span&gt;
&lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="sr"&gt;/(.*)/(.*)/(.*)$ /i&lt;/span&gt;&lt;span class="n"&gt;ndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="o"&gt;?;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rewrite语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rewrite A B option;
options:
        last :表示完成rewrite
        break:本规则匹配完成后，终止匹配，不再匹配后面的规则
        redirect:返回302临时重定向，地址栏会显示跳转后的地址
        permanent:返回301永久重定向，地址栏会显示跳转后的地址
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="proxymo-kuai"&gt;Proxy模块&lt;/h3&gt;
&lt;p&gt;默认模块，允许你讲客户端的HTTP请求转到后端服务器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;proxy_pass_header&lt;/span&gt; &lt;span class="err"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="err"&gt;#该指令强制一些被忽略的头传递到客户端&lt;/span&gt;
    &lt;span class="err"&gt;proxy_redirect&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#允许改写出现在HTTP头却被后端服务器触发重定向的URL,对相应本身不做任何处理&lt;/span&gt;
    &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Host&lt;/span&gt; &lt;span class="err"&gt;$http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#允许你重新定义代理header值再转到后端服务器.目标服务器可以看到客户端的原始主机名&lt;/span&gt;
    &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Real-IP&lt;/span&gt; &lt;span class="err"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#目标服务器可以看到客户端的真实ip，而不是转发服务器的ip&lt;/span&gt;
    &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Scheme&lt;/span&gt; &lt;span class="err"&gt;$scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="upstreammo-kuai"&gt;upstream模块&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;up_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;192.168.0.1:9000&lt;/span&gt; &lt;span class="err"&gt;weight=5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#权重&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;192.168.0.2:9000&lt;/span&gt; &lt;span class="err"&gt;weight=5&lt;/span&gt; &lt;span class="err"&gt;max_fails=5&lt;/span&gt; &lt;span class="err"&gt;fail_timeout=60s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#在60s内，其错误通信超过5次,认为该服务失效&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;192.168.0.3:9000&lt;/span&gt; &lt;span class="err"&gt;down&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#服务标记为离线，不再使用&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;192.168.0.4:9000&lt;/span&gt; &lt;span class="err"&gt;backup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#备份服务器，其他全部宕机了才启用&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="qi-ta_1"&gt;其他&lt;/h2&gt;
&lt;h3 id="pei-zhi-jing-tai-hua-mu-lu"&gt;配置静态化目录&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    location /static/
    {
        root /var/www/app/;
        autoindex off;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fu-zai-jun-heng"&gt;负载均衡&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;default_type&lt;/span&gt; &lt;span class="err"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="err"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;upstream&lt;/span&gt; &lt;span class="err"&gt;up_localhost&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:8000&lt;/span&gt; &lt;span class="err"&gt;weight=5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:8001&lt;/span&gt; &lt;span class="err"&gt;weight=10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/{&lt;/span&gt;
            &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;up_localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;Host&lt;/span&gt; &lt;span class="err"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Real_IP&lt;/span&gt; &lt;span class="err"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;proxy_set_header&lt;/span&gt; &lt;span class="err"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="err"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="kong-zhi-ye-mian-huan-cun"&gt;控制页面缓存&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.(&lt;/span&gt;&lt;span class="nt"&gt;htm&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;gif&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;jpg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;jpeg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;png&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;bmp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;ico&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;js&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;)$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;root&lt;/span&gt; &lt;span class="err"&gt;/opt/webapp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;expires&lt;/span&gt; &lt;span class="err"&gt;24h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;January&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;1970&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;01&lt;/span&gt; &lt;span class="nt"&gt;GMT&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;60s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;30m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;24h&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;1d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;max&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;expires&lt;/span&gt; &lt;span class="nt"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nginxde-nei-zhi-bian-liang"&gt;nginx的内置变量&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;arg_PARAMETER&lt;/span&gt; &lt;span class="err"&gt;这个变量包含在查询字符串时&lt;/span&gt;&lt;span class="nt"&gt;GET&lt;/span&gt;&lt;span class="err"&gt;请求&lt;/span&gt;&lt;span class="nt"&gt;PARAMETER&lt;/span&gt;&lt;span class="err"&gt;的值。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt; &lt;span class="err"&gt;这个变量等于请求行中的参数。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;binary_remote_addr&lt;/span&gt; &lt;span class="err"&gt;二进制码形式的客户端地址。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;body_bytes_sent&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;content_length&lt;/span&gt; &lt;span class="err"&gt;请求头中的&lt;/span&gt;&lt;span class="nt"&gt;Content-length&lt;/span&gt;&lt;span class="err"&gt;字段。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;content_type&lt;/span&gt; &lt;span class="err"&gt;请求头中的&lt;/span&gt;&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="err"&gt;字段。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;cookie_COOKIE&lt;/span&gt; &lt;span class="nt"&gt;cookie&lt;/span&gt; &lt;span class="nt"&gt;COOKIE&lt;/span&gt;&lt;span class="err"&gt;的值。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;document_root&lt;/span&gt; &lt;span class="err"&gt;当前请求在&lt;/span&gt;&lt;span class="nt"&gt;root&lt;/span&gt;&lt;span class="err"&gt;指令中指定的值。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;document_uri&lt;/span&gt; &lt;span class="err"&gt;与&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="err"&gt;相同。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="err"&gt;请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;is_args&lt;/span&gt; &lt;span class="err"&gt;如果&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="err"&gt;设置，值为&lt;/span&gt;&lt;span class="s2"&gt;"?"&lt;/span&gt;&lt;span class="err"&gt;，否则为&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;limit_rate&lt;/span&gt; &lt;span class="err"&gt;这个变量可以限制连接速率。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;nginx_version&lt;/span&gt; &lt;span class="err"&gt;当前运行的&lt;/span&gt;&lt;span class="nt"&gt;nginx&lt;/span&gt;&lt;span class="err"&gt;版本号。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;query_string&lt;/span&gt; &lt;span class="err"&gt;与&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="err"&gt;相同。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;remote_addr&lt;/span&gt; &lt;span class="err"&gt;客户端的&lt;/span&gt;&lt;span class="nt"&gt;IP&lt;/span&gt;&lt;span class="err"&gt;地址。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;remote_port&lt;/span&gt; &lt;span class="err"&gt;客户端的端口。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;remote_user&lt;/span&gt; &lt;span class="err"&gt;已经经过&lt;/span&gt;&lt;span class="nt"&gt;Auth&lt;/span&gt; &lt;span class="nt"&gt;Basic&lt;/span&gt; &lt;span class="nt"&gt;Module&lt;/span&gt;&lt;span class="err"&gt;验证的用户名。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_filename&lt;/span&gt; &lt;span class="err"&gt;当前连接请求的文件路径，由&lt;/span&gt;&lt;span class="nt"&gt;root&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="nt"&gt;alias&lt;/span&gt;&lt;span class="err"&gt;指令与&lt;/span&gt;&lt;span class="nt"&gt;URI&lt;/span&gt;&lt;span class="err"&gt;请求生成。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_body&lt;/span&gt; &lt;span class="err"&gt;这个变量（&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;58&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;）包含请求的主要信息。在使用&lt;/span&gt;&lt;span class="nt"&gt;proxy_pass&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="nt"&gt;fastcgi_pass&lt;/span&gt;&lt;span class="err"&gt;指令的&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt;&lt;span class="err"&gt;中比较有意义。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_body_file&lt;/span&gt; &lt;span class="err"&gt;客户端请求主体信息的临时文件名。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_completion&lt;/span&gt; &lt;span class="err"&gt;请求完成&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_method&lt;/span&gt; &lt;span class="err"&gt;这个变量是客户端请求的动作，通常为&lt;/span&gt;&lt;span class="nt"&gt;GET&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="nt"&gt;POST&lt;/span&gt;&lt;span class="err"&gt;。包括&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;20&lt;/span&gt;&lt;span class="err"&gt;及之前的版本中，这个变量总为&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;request&lt;/span&gt;&lt;span class="err"&gt;中的动作，如果当前请求是一个子请求，并不使用这个当前请求的动作。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_uri&lt;/span&gt; &lt;span class="err"&gt;这个变量等于包含一些客户端请求参数的原始&lt;/span&gt;&lt;span class="nt"&gt;URI&lt;/span&gt;&lt;span class="err"&gt;，它无法修改，请查看&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="err"&gt;更改或重写&lt;/span&gt;&lt;span class="nt"&gt;URI&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;schemeHTTP&lt;/span&gt; &lt;span class="err"&gt;方法（如&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="err"&gt;）。按需使用，例：&lt;/span&gt;
&lt;span class="nt"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^(.+)$&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;server_addr&lt;/span&gt; &lt;span class="err"&gt;服务器地址，在完成一次系统调用后可以确定这个值，如果要绕开系统调用，则必须在&lt;/span&gt;&lt;span class="nt"&gt;listen&lt;/span&gt;&lt;span class="err"&gt;中指定地址并且使用&lt;/span&gt;&lt;span class="nt"&gt;bind&lt;/span&gt;&lt;span class="err"&gt;参数。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;服务器名称。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;server_port&lt;/span&gt; &lt;span class="err"&gt;请求到达服务器的端口号。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;server_protocol&lt;/span&gt; &lt;span class="err"&gt;请求使用的协议，通常是&lt;/span&gt;&lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt; &lt;span class="err"&gt;请求中的当前&lt;/span&gt;&lt;span class="nt"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;不带请求参数，参数位于&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;，可以不同于浏览器传递的&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;request_uri&lt;/span&gt;&lt;span class="err"&gt;的值，它可以通过内部重定向，或者使用&lt;/span&gt;&lt;span class="nt"&gt;index&lt;/span&gt;&lt;span class="err"&gt;指令进行修改。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pei-zhi-shtmlfang-wen"&gt;配置shtml访问&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_ssi_module.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location  ~ ^/static {
    ....
    ssi on;
    ssi_client_errors on;
    ssi_types text/shtml;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="auth-basicpei-zhi"&gt;auth basic配置&lt;/h3&gt;
&lt;p&gt;首先, 安装&lt;code&gt;htpasswd&lt;/code&gt;, 生成密码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;htpasswd -c paas_admin username
password: password
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成文件后, 拷贝到nginx目录下&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location / {
    auth_basic "Restricted";
    auth_basic_user_file /usr/local/nginx/conf/kibana.htpasswd;
    root  /data/BKLogTool/kibana;
    index  index.html  index.htm;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reload nginx&lt;/p&gt;</content><category term="linux"></category><category term="nginx"></category></entry><entry><title>读书笔记-拖拉一点也无妨</title><link href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html" rel="alternate"></link><published>2013-11-17T00:00:00+08:00</published><updated>2013-11-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-11-17:/posts/2013/11/17/the-art-of-procrastination.html</id><summary type="html">&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;facebook效应&amp;gt;&amp;gt;和这本 &amp;lt;&amp;lt;拖拉一点也无妨&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="procrastination" src="/imgs/books/the-art-of-procrastination.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后天能做的事情，就别赶着明天做了——马克吐温 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——结构化拖延法则正是一门关于如何利用这一消极特性、让它为你服务的艺术&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情(拖延，并不等于什么都不做)&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;利用这种心态，给必须完成的任务梳理一个结构
将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面,将另外一些重要的值得做的事情排在后面

于是，完成这些任务，就会变成避免去做清单最上方任务的一种手段

-&amp;gt; 拖延的人变成有用的人
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要的是，一个排序得当的任务结构&lt;/p&gt;
&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;facebook效应&amp;gt;&amp;gt;和这本 &amp;lt;&amp;lt;拖拉一点也无妨&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="procrastination" src="/imgs/books/the-art-of-procrastination.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后天能做的事情，就别赶着明天做了——马克吐温 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——结构化拖延法则正是一门关于如何利用这一消极特性、让它为你服务的艺术&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情(拖延，并不等于什么都不做)&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;利用这种心态，给必须完成的任务梳理一个结构
将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面,将另外一些重要的值得做的事情排在后面

于是，完成这些任务，就会变成避免去做清单最上方任务的一种手段

-&amp;gt; 拖延的人变成有用的人
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要的是，一个排序得当的任务结构&lt;/p&gt;
&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有），2）它看似重要得不得了（实际上不是）&lt;/p&gt;
&lt;p&gt;实际上是一种自我欺骗，但是有用：用一种性格缺陷去抵消另一种性格缺陷&lt;/p&gt;
&lt;p&gt;最终由于没有做某些事，从而做成了不少别的事&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;减少承诺？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拖延者常常错误的做法——尽量少想别人做出承诺，以为事情越少就能改掉拖延的毛病&lt;/p&gt;
&lt;p&gt;错误的，即使再少，也会拖延&lt;/p&gt;
&lt;p&gt;所以，勇于去做承诺&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拖延与完美主义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完美主义导致了拖延: 为何会导致拖延？因为做到完美不容易！&lt;/p&gt;
&lt;p&gt;要接受一个事实：没有完美，我们从来没有干过完美的事情，就连接近完美的事情也没有(停留在脑海里的幻想层面的东西,而非真实的状况,是自我的幻想)&lt;/p&gt;
&lt;p&gt;观点：对于一件无需做到完美的任务，就不去苛求完美（关于完美主义的幻想，浪费时间，影响情绪）。烂的开始是成功的一半，不要过于苛求完美&lt;/p&gt;
&lt;p&gt;验伤选择:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;根据紧急程度进行分类排列
对于大多数事情，要做的时候，心里有数：做到“蛮好”就可以了，或许比“蛮好”再好一点，但是犯不着追求完美
养成习惯，做事之前逼自己分析一下，看看“不那么完美”的代价有多大，做到“完美无缺”有多大意义

很多事情，没那么完美也就足够了，不要等到任务过期,现在就开始做
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚刚好才是真的好&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;待办事项清单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当日待办事项清单，列好，大任务拆分成小任务，每完成一个鼓励自己一下&lt;/p&gt;
&lt;p&gt;宏大的令人望而却步的大任务拆分成小的，没有那么吓人的任务&lt;/p&gt;
&lt;p&gt;把令人分心的事情也写下来，提醒自己不要去做&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;放点音乐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;音乐和情绪之间存在着直接的关联&lt;/p&gt;
&lt;p&gt;找到合适自己节奏的音乐(轻快的歌,极富感染力欢乐的歌)&lt;/p&gt;
&lt;p&gt;可以选择合适长短的音乐，开始做事，直到音乐结束&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑与拖延&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从某些方面，电脑是拖延者们的恩物,也是个祸害，因为人们太容易把时间浪费在毫无价值，又与手边任务毫不相干的事情上&lt;/p&gt;
&lt;p&gt;找到最好的方法，使用电脑——处理邮件(分类，标记，存档)的方式，处理IM，处理社交网络等等,学会如何控制，防止上网迷路&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“平摊型“人士的呼吁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把手上所做的事情平摊在眼前，根据当前情境决定处理哪件，轮转地处理问题&lt;/p&gt;
&lt;p&gt;叠放起来，或许也就意味着，不会再次打开查看&lt;/p&gt;
&lt;p&gt;好吧，我是“叠放型”人士&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与敌人合作？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和非拖延人士合作，去做一大堆相对没那么重要的事情，非拖延人士绝对不会抽时间做的&lt;/p&gt;
&lt;p&gt;学会如何与非拖延人士合作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;额外福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构化拖延者的额外福利：有时候，排在清单项顶头的重要事项会自动消失&lt;/p&gt;
&lt;p&gt;有些事情放一放，到最后可能就不需要去做了, 切勿把那些在明天到来之前可能会消失不见的事情在今天就做掉&lt;/p&gt;
&lt;p&gt;拖延是缺点，但并非是最糟糕的缺点，有时候，缺点也有额外福利&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你看拖延不顺眼？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最让人讨厌的拖延行为，往往是那些为了证明你不受他人控制的举动&lt;/p&gt;
&lt;p&gt;结构化拖延是一码事，故意做给其他人看，让他知道你不受他辖制又是另一回事&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从哲学的角度替拖延说两句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nothing&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-11-17 create
2014-02-16 update&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</content><category term="books"></category></entry><entry><title>Redis基础笔记</title><link href="http://www.wklken.me/posts/2013/10/19/redis-base.html" rel="alternate"></link><published>2013-10-19T00:00:00+08:00</published><updated>2013-10-19T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-10-19:/posts/2013/10/19/redis-base.html</id><summary type="html">&lt;h2 id="zi-yuan-lian-jie"&gt;资源链接&lt;/h2&gt;
&lt;p&gt;推荐书籍:《Redis入门指南》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源列表:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis命令速查&lt;a href="http://redis.io/commands"&gt;command&lt;/a&gt; |
             &lt;a href="http://redis.cn/commands.html"&gt;CMD索引-中文&lt;/a&gt; |
             &lt;a href="http://redis.readthedocs.org/en/latest/"&gt;CMD树-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码&lt;a href="https://github.com/antirez/redis"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href="http://redis.io/download"&gt;redis.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Little Redis book &lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料概要 @江南白衣 &lt;a href="https://github.com/springside/springside4/wiki/redis"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料汇总专题 &lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;nosqlfan&lt;/a&gt; (这个站有很多文章)&lt;/p&gt;
&lt;p&gt;redis的设计与实现 &lt;a href="http://www.redisbook.com/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis2.6带注释源码 &lt;a href="https://github.com/huangz1990/annotated_redis_source"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis 各种语言clients&lt;a href="http://redis.io/clients"&gt;clients&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python redis cli &lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络文章汇总 &lt;a href="http://www.redis.cn/article.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十五分钟介绍Redis数据结构  &lt;a href="http://blog.nosqlfan.com/html/3202.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis的订阅与发布 &lt;a href="http://www.redisbook.com/en/latest/feature/pubsub.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis之七种武器 &lt;a href="http://blog.nosqlfan.com/html/2942.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Redis的五个注意事项 &lt;a href="http://blog.nosqlfan.com/html/3705.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码分析系列文章 &lt;a href="http://blog.nosqlfan.com/html/2949.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Largest …&lt;/p&gt;</summary><content type="html">&lt;h2 id="zi-yuan-lian-jie"&gt;资源链接&lt;/h2&gt;
&lt;p&gt;推荐书籍:《Redis入门指南》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源列表:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis命令速查&lt;a href="http://redis.io/commands"&gt;command&lt;/a&gt; |
             &lt;a href="http://redis.cn/commands.html"&gt;CMD索引-中文&lt;/a&gt; |
             &lt;a href="http://redis.readthedocs.org/en/latest/"&gt;CMD树-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码&lt;a href="https://github.com/antirez/redis"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href="http://redis.io/download"&gt;redis.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Little Redis book &lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料概要 @江南白衣 &lt;a href="https://github.com/springside/springside4/wiki/redis"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料汇总专题 &lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;nosqlfan&lt;/a&gt; (这个站有很多文章)&lt;/p&gt;
&lt;p&gt;redis的设计与实现 &lt;a href="http://www.redisbook.com/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis2.6带注释源码 &lt;a href="https://github.com/huangz1990/annotated_redis_source"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis 各种语言clients&lt;a href="http://redis.io/clients"&gt;clients&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python redis cli &lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络文章汇总 &lt;a href="http://www.redis.cn/article.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十五分钟介绍Redis数据结构  &lt;a href="http://blog.nosqlfan.com/html/3202.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis的订阅与发布 &lt;a href="http://www.redisbook.com/en/latest/feature/pubsub.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis之七种武器 &lt;a href="http://blog.nosqlfan.com/html/2942.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Redis的五个注意事项 &lt;a href="http://blog.nosqlfan.com/html/3705.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码分析系列文章 &lt;a href="http://blog.nosqlfan.com/html/2949.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Largest Redis Clusters Ever &lt;a href="http://www.xdata.me/?p=301"&gt;入口&lt;/a&gt; (使用场景)&lt;/p&gt;
&lt;p&gt;成人网站YouPorn使用Redis之经验谈 &lt;a href="http://blog.jobbole.com/44629/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis监控web工具 &lt;a href="https://github.com/steelThread/redmon"&gt;redmon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="jian-jie"&gt;简介&lt;/h2&gt;
&lt;h3 id="jian-jie_1"&gt;简介&lt;/h3&gt;
&lt;p&gt;Redis(REmote DIctionary Server),远程字典服务器，以字典结构存储数据，允许通过TCP协议读取字典中内容. 高性能键值对数据库&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.缓存系统： 可以为每个键设置TTL(Time To Live),生存时间到期后键会自动被删除
             可限定数据占用最大内存空间，数据大道空间限制后自动按照一定规则淘汰不需要键
2.任务队列： redis列表类型可以用来实现队列, 支持阻塞式读取，很容易用作高性能队列，还支持“发布/订阅“消息的模式
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.Redis中, 所有数据都存储在内存中, 但提供了持久化支持, 内存中数据可以异步写入硬盘, 不影响现有服务
2.与memcached对比, redis单线程模型, memcached支持多线程. 但redis支持高级数据类型和持久化
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.wget http://download.redis.io/releases/redis-2.6.16.tar.gz
2.tar -xzvf redis-2.6.16.tar.gz
3.cd redis-2.6.16
4.make
5.make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;osx&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装后，在/usr/local/bin下面有&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server     服务器, 重点
redis-cli        命令行客户端, 重点

redis-benchmark  性能测试工具
redis-check-aof  AOF文件修复工具
redis-check-dump RDB文件检查工具
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;p&gt;直接启动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-server #默认6379
redis-server --port 6380
# 启动命令中配置将覆盖配置文件中同名参数
redis-server /path/to/redis.conf --loglevel warning
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过初始化脚本运行(生产环境)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在安装包目录redis-2.6.16/utils/redis_init_script

1.将脚本复制到/etc/init.d目录下，文件名为 redis_端口号, 修改文件第六行 REDISPORT为相同端口号
2.建立目录
    /etc/redis           存放配置文件
    /var/redis/端口号    存放持久化文件
3.修改配置文件
    将配置文件redis-2.6.16/redis.conf 复制到/etc/redis目录下，以端口号命名 e.g.  6379.conf
    修改配置文件中部分参数
        daemonize   yes                         使redis以守护进程模式运行
        pidfile     /var/run/redis_端口号.pid   设置redis的PID文件按位置
        port        端口号                      设置监听的端口号
        dir         /var/redis/端口号           设置持久化文件存放位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;停止&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-cli SHUTDOWN
//server断开所有客户端连接, 根据配置执行持久化, 最后退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis命令行客户端&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;发送命令：
    redis-cli -h 127.0.0.1 -p 6379
    redis-cli PING
    redis-cli
命令返回值
    状态回复，e.g.  &amp;gt;PING
    错误恢复, e.g.  &amp;gt;ECMD
    整数回复, e.g.  &amp;gt;INCR foo
    字符串回复，e.g. &amp;gt;GET foo   &amp;gt;GET notexists`
    多行字符串回复，e.g. &amp;gt;KEYS *
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wu-chong-shu-ju-lei-xing-ji-xiang-ying-ming-ling_1"&gt;五种数据类型及相应命令&lt;/h2&gt;
&lt;p&gt;基础命令(redis-cli)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回符合规则的键名列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pattern支持通配符, ? * [] 等, 会遍历所有键, 当键的数量较多时影响性能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;KEYS pattern
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET bar 1
&amp;gt;KEYS *
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;判断一个键是否存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回，0不存在，1存在&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;EXISTS key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; EXISTS bar
(integer) 1
127.0.0.1:6379&amp;gt; EXISTS foo
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;删除键&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以删除多个键, 返回删除的个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DEL key [key ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; DEL bar
(integer) 1
127.0.0.1:6379&amp;gt; DEL bar
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取键值的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回string,hash(散列),list(列表),set(集合),zset(有序集合)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;TYPE key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SET bar 1
OK
127.0.0.1:6379&amp;gt; TYPE bar
string
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="1-zi-fu-chuan-lei-xing"&gt;1. 字符串类型&lt;/h3&gt;
&lt;p&gt;最基本类型, 能存储任何形式/编码字符串, 包括二进制. 允许存储最大容量是512M&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赋值和取值命令&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET key value
&amp;gt;GET key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SET hi "hello world"
OK
127.0.0.1:6379&amp;gt; GET hi
"hello world"
127.0.0.1:6379&amp;gt; GET abc
(nil)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;递增数字(当存储的字符串是整数形式时)&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;当操作键不存在时，默认值0，第一次递增后结果1，当键值不是整数时，报错
&amp;gt;INCR key
原子操作，可用于类似访问量统计, 自增id

&amp;gt;INCRBY key increment
&amp;gt;INCRBY bar 2
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; INCR abc
(integer) 1
127.0.0.1:6379&amp;gt; GET abc
"1"
127.0.0.1:6379&amp;gt; INCRBY abc 2
(integer) 3
127.0.0.1:6379&amp;gt; GET abc
"3"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;减少数字&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DECR key
&amp;gt;DECRBY key decrement
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; DECR abc
(integer) 2
127.0.0.1:6379&amp;gt; DECRBY abc 2
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;浮点数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INCRBYFLOAT key increment
&amp;gt;INCRBYFLOAT bar 2.7
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; GET bar
"1"
127.0.0.1:6379&amp;gt; INCRBYFLOAT bar 1.5
"2.5"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;向尾部追加&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;返回追加字符串长度

&amp;gt;APPEND key value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET key hello
&amp;gt;APPEND key "world"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取字符串长度&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;STRLEN key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; GET hi
"hello world"
127.0.0.1:6379&amp;gt; STRLEN hi
(integer) 11
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;同时设置，获取多个键值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;MGET key [key ...]
&amp;gt;MSET key value [key value ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; MSET k1 v1 k2 v2
OK
127.0.0.1:6379&amp;gt; GET k1
"v1"
127.0.0.1:6379&amp;gt; MGET k1 k2
1) "v1"
2) "v2"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;位操作&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;GETBIT key offset
&amp;gt;SETBIT key offset value

&amp;gt;BITCOUNT key [start] [end] #获取值为1的二进制位个数

&amp;gt;BITOP operation destkey key [key ...] #对多个字符串类型键进行位运算, 并将结果存储到destkey
e.g. BITOP OR res fol fo2
    GET res
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a  97 01100001

127.0.0.1:6379&amp;gt; SET k 'a'
OK
127.0.0.1:6379&amp;gt; GET k
"a"

127.0.0.1:6379&amp;gt; GETBIT k 0
(integer) 0
127.0.0.1:6379&amp;gt; GETBIT k 1
(integer) 1

127.0.0.1:6379&amp;gt; BITCOUNT k
(integer) 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BP: redis对键的命名，  对象类型:对象id:对象属性&lt;/p&gt;
&lt;h3 id="2-san-lie-lei-xing"&gt;2. 散列类型&lt;/h3&gt;
&lt;p&gt;一种字典结构，其存储了字段(field)和字段值映射，但字段值只能是字符串，不支持其他数据类型(即散列类型不支持数据类型嵌套)&lt;/p&gt;
&lt;p&gt;散列类型适合存储对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;对象类型:id - 对象属性 - 对象属性值
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;基本命令&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HSET key field value
&amp;gt;HGET key field
#HSET不区分插入更新

&amp;gt;HMSET key field value [field value ...]
&amp;gt;HMGET key field [field ...]

&amp;gt;HGETALL key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HSET car name bmw
(integer) 1
127.0.0.1:6379&amp;gt; HGET car name
"bmw"

127.0.0.1:6379&amp;gt; HMSET car price 100 score 50
OK
127.0.0.1:6379&amp;gt; HMGET car name price score
1) "bmw"
2) "100"
3) "50"

127.0.0.1:6379&amp;gt; HGETALL car
1) "name"
2) "bmw"
3) "price"
4) "100"
5) "score"
6) "50"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;判断字段是否存在&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#存在返回1，否则返回0
&amp;gt;HEXISTS key field
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HEXISTS car name
(integer) 1
127.0.0.1:6379&amp;gt; HEXISTS car model
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;当字段不存在时赋值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#已存在不进行任何操作, 不存在赋值
&amp;gt;HSETNX key field value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HSETNX car name  abc
(integer) 0
127.0.0.1:6379&amp;gt; HGET car name
"bmw"

127.0.0.1:6379&amp;gt; HEXISTS car model
(integer) 0
127.0.0.1:6379&amp;gt; HSETNX car model 1
(integer) 1
127.0.0.1:6379&amp;gt; HGET car model
"1"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;增加数字&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HINCRBY key field increment
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HINCRBY person score 60
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;删除字段&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HDEL key field [field ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HDEL car price
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;只获取字段名或字段值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HKEYS key
&amp;gt;HVALS key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HKEYS car
1) "name"
2) "price"
3) "score"
4) "model"
127.0.0.1:6379&amp;gt; HVALS car
1) "bmw"
2) "100"
3) "50"
4) "1"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取字段数量&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;HLEN key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; HLEN car
(integer) 4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-lie-biao-lei-xing"&gt;3. 列表类型&lt;/h3&gt;
&lt;p&gt;List, 可以存储一个有序的字符串列表, 列表内元素非唯一性，可以向两端加入元素，或者获得列表的某一个片段&lt;/p&gt;
&lt;p&gt;内部使用双向链表实现,两端添加元素复杂度O(1), 通过索引访问的速度较慢&lt;/p&gt;
&lt;p&gt;可以用在分页, 新鲜事, 记录日志等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向列表两端增加元素(可同时增加多个)&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LPUSH key value [value ...]
&amp;gt;RPUSH key value [value ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH num 1 2 3
(integer) 3
127.0.0.1:6379&amp;gt; RPUSH num 0
(integer) 4
# 3 2 1 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;从列表两端弹出元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先移除一个元素，然后返回之&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LPOP key
&amp;gt;RPOP key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPOP num
"3"
127.0.0.1:6379&amp;gt; RPOP num
"0"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取元素个数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LLEN key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LLEN num
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取片段(同python切片，-1表最后一个, stop超出返回最右边元素, start大于stop返回空)&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LRANGE key start stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH test a b c d e f g
(integer) 7
127.0.0.1:6379&amp;gt; LRANGE test 0 2
1) "g"
2) "f"
3) "e"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;删除列表中指定值的元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LREM key count value

删除列表中前count个值为value的元素，返回值为实际删除元素的个数
            count = 0 所有
                  &amp;gt; 0 从左边开始删count个
                  &amp;lt; 0 从右边开始删|count|个
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LRANGE test 0 2
1) "g"
2) "f"
3) "e"
127.0.0.1:6379&amp;gt; LREM test 0 f
(integer) 1
127.0.0.1:6379&amp;gt; LRANGE test 0 2
1) "g"
2) "e"
3) "d"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;设置指定索引元素值&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LINDEX key index
&amp;gt;LSET key index value
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH lt 3 2 1
(integer) 3
127.0.0.1:6379&amp;gt; LINDEX lt 0
"1"

127.0.0.1:6379&amp;gt; LSET lt 0 -1
OK
127.0.0.1:6379&amp;gt; LINDEX lt 0
"-1"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;只保留列表指定片段&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;删除指定索引范围之外的所有元素
&amp;gt;LTRIM key start end
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "4"
4) "3"
5) "2"
6) "1"
127.0.0.1:6379&amp;gt; LTRIM la 0 2
OK
127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "4"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;向列表中插入元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;LINSERT key BEFORE|AFTER pivot value
从左到右查找值为pivot的元素，然后根据BEFORE/AFTER决定将value插入该元素前面还是后面
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "4"
127.0.0.1:6379&amp;gt; LINSERT la AFTER 5 3
(integer) 4
127.0.0.1:6379&amp;gt; LRANGE la 0 99
1) "6"
2) "5"
3) "3"
4) "4"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将元素从一个列表转到另一个列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RPOPLPUSH source destination
#RPOP，然后LPUSH，返回每个元素值，e.g.循环测试网址的可用性
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-ji-he-lei-xing"&gt;4. 集合类型&lt;/h3&gt;
&lt;p&gt;无序，无重复(唯一)，可以存储最多2^32 - 1 个字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回操作成功的个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt;SADD key member [member ...]
    &amp;gt;SREM key member [member ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SADD letters a
(integer) 1
127.0.0.1:6379&amp;gt; SADD letters a b c
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获得集合中的所有元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SMEMBERS key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SMEMBERS letters
1) "c"
2) "a"
3) "b"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;判断元素是否在集合中(复杂度O(1))&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SISMEMBER key member
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SISMEMBER letters a
(integer) 1
127.0.0.1:6379&amp;gt; SISMEMBER letters d
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集合间运算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 差集
&amp;gt;SDIFF key [key ...]
# 交集
&amp;gt;SINTER key [key ...]
# 并集
&amp;gt;SUNION key [key ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行集合运算并将结果存储&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SDIFFSTORE destination_key key [key ...]
&amp;gt;SINTERSTORE destination_key key [key ...]
&amp;gt;SUNIONSTORE destination_key key [key ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得集合中元素个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SCARD key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SCARD letters
(integer) 3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;随机获取集合中元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SRANDMEMBER key [count]
count，正数，获取count个不重复的元素
count, 负数，获取|count|个，可能重复
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SRANDMEMBER letters
"b"
127.0.0.1:6379&amp;gt; SRANDMEMBER letters 2
1) "a"
2) "c"

127.0.0.1:6379&amp;gt; SRANDMEMBER letters -2
1) "b"
2) "b"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;弹出一个元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SPOP key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SPOP letters
"c"
127.0.0.1:6379&amp;gt; SCARD letters
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-you-xu-ji-he"&gt;5. 有序集合&lt;/h3&gt;
&lt;p&gt;sorted set,集合中每个元素都关联一个分数(不同元素分数可以相同)，可以根据分数进行排序(最高/最低N个)，进行有序相关的操作(分数可以相同)&lt;/p&gt;
&lt;p&gt;有序集合使用散列表和跳跃表实现, 读取复杂度更低, 更耗费内存&lt;/p&gt;
&lt;p&gt;按点击量排序，按时间排序等等，时间轴操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ZADD&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZADD scoreboard 89 tom 67 peter 100 david
(integer) 3
127.0.0.1:6379&amp;gt; ZADD scoreboard 70 peter
(integer) 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取元素分数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZSCORE key member
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZSCORE scoreboard peter
"70"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取排名在某个范围内的元素列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分数相同，按字典序排,中文的话，取决于编码方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#分数从小到大排，返回索引从 start-stop之间的所有元素，包含两端元素, WITHSCORES同时获得元素分数
&amp;gt;ZRANGE key start stop [WITHSCORES]
&amp;gt;ZREVRANGE key start stop [WITHSCORES]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANGE scoreboard 0 2
1) "peter"
2) "tom"
3) "david"
127.0.0.1:6379&amp;gt; ZRANGE scoreboard 0 2 WITHSCORES
1) "peter"
2) "70"
3) "tom"
4) "89"
5) "david"
6) "100"

127.0.0.1:6379&amp;gt; ZREVRANGE scoreboard 0 2 WITHSCORES
1) "david"
2) "100"
3) "tom"
4) "89"
5) "peter"
6) "70"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获取指定分数范围的元素&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 100 WITHSCORES
1) "tom"
2) "89"
3) "david"
4) "100"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;希望不包含端点值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZRANGEBYSCORE scoreboard 80 (100
正负无穷大 +inf -inf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 (100 WITHSCORES
1) "tom"
2) "89"

127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 +inf WITHSCORES
1) "tom"
2) "89"
3) "david"
4) "100"

127.0.0.1:6379&amp;gt; ZRANGEBYSCORE scoreboard 80 +inf WITHSCORES LIMIT 0 1
1) "tom"
2) "89"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;增加某个元素分数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZINCRBY key increment member
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZSCORE scoreboard tom
"89"
127.0.0.1:6379&amp;gt; ZINCRBY scoreboard 2 tom
"91"
127.0.0.1:6379&amp;gt; ZSCORE scoreboard tom
"91"
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获得集合中元素数量&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZCARD key
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZCARD scoreboard
(integer) 3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;获得指定分数范围内的元素个数&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZCOUNT key min max
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZCOUNT scoreboard 80 100
(integer) 2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除一个或多个元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZREM key member [member ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照排名范围删除元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZREMRANGEBYRANK key start stop
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照分数范围删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZREMRANGEBYSCORE key min max
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得元素排名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZRANK key member #从小到大
&amp;gt;ZREVRANK key member #相反
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; ZRANK scoreboard tom
(integer) 1
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;计算有序集合的交集&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]

#返回值为destination中元素个数
#AGGREGATE sum默认值，destination键中元素分数是每个参与计算的集合中该元素分数的和
        min取最小值
        max取最大值
#WEIGHTS 设置每个集合的权重，每个集合在参与计算时分数会被乘以权重
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta_1"&gt;其他&lt;/h2&gt;
&lt;h3 id="shi-wu"&gt;事务&lt;/h3&gt;
&lt;p&gt;Redis中事务是一组命令的集合, 一个事务中的命令要么都执行, 要么都不执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; MULTI
&amp;gt; SADD k1 v1
&amp;gt; SADD k2 v2
&amp;gt; EXEC
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 不支持回滚功能&lt;/p&gt;
&lt;h3 id="sort"&gt;SORT&lt;/h3&gt;
&lt;p&gt;可以对列表/集合/有序集合进行排序&lt;/p&gt;
&lt;p&gt;最强大最复杂, 用不好可能成为性能瓶颈 O(n + mlogm) n为排序个数, m为返回个数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SORT key #从小到大
&amp;gt;SORT key DESC #从大到小
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SORTBY&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; LPUSH sortbylist  2 1 3
(integer) 3
127.0.0.1:6379&amp;gt; SET itemscore:1 50
OK
127.0.0.1:6379&amp;gt; SET itemscore:2 100
OK
127.0.0.1:6379&amp;gt; SET itemscore:3 -10
OK
127.0.0.1:6379&amp;gt; SORT sortbylist BY itemscore:* DESC
1) "2"
2) "1"
3) "3"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SORTBY GET&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SORT sortbylist BY itemscore:* DESC GET POST:*-&amp;gt;title GET POST:*-&amp;gt;time
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SOTRBY GET STORE&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1:6379&amp;gt; SORT sortbylist BY itemscore:* DESC GET POST:*-&amp;gt;title GET POST:*-&amp;gt;time STORE new_key
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sheng-cun-shi-jian"&gt;生存时间&lt;/h3&gt;
&lt;p&gt;TTL, time to live&lt;/p&gt;
&lt;p&gt;时效数据，过一定时间删除这些数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#设置
&amp;gt;EXPIRE key seconds
1表示设置成功, 0表键不存在或设置失败

#查询
&amp;gt;TTL key
键不存在返回-1 or 没有设置生存时间

#去除时效
&amp;gt;PERSIST key

#SET/GETSET为键赋值会同时清除键的生存时间
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ren-wu-dui-lie"&gt;任务队列&lt;/h3&gt;
&lt;p&gt;一般队列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;生产者 LPUSH
消费者 RPOP

BRPOP 和RPOP类似，但是当列表中没有元素时，BRPOP会一直阻塞住链接，直到有新元素加入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优先队列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BLPOP key [key ...] timeout,同时检测多个键，如果所有键都没有元素则阻塞，如果其中有一个键有元素，则从该键中弹出元素
如果都有，则从左到右的顺序取第一个键中的一个元素

BLPOP queue:1 queue:2 queue:3 0
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fa-bu-ding-yue-mo-shi"&gt;发布/订阅模式&lt;/h3&gt;
&lt;p&gt;进程间消息传递&lt;/p&gt;
&lt;p&gt;订阅者：订阅者可以订阅一个或多个频道&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SUBSCRIBE channel1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发布者：可以向指定的频道发送消息，所有订阅此频道的订阅者都会受到此消息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;PUBLISH channel1 helloworld
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-shi-yong-redis"&gt;Python中使用Redis&lt;/h3&gt;
&lt;p&gt;官方推荐&lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install redis
sudo easy_install redis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="err"&gt;提供两个类&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="err"&gt;用于实现&lt;/span&gt;&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="err"&gt;的命令，&lt;/span&gt;
&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="err"&gt;用于实现大部分官方的命令，并使用官方的语法和命令（比如，&lt;/span&gt;&lt;span class="n"&gt;SET&lt;/span&gt;&lt;span class="err"&gt;命令对应与&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="err"&gt;方法）&lt;/span&gt;
&lt;span class="n"&gt;Redis&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="err"&gt;的子类，用于向后兼容旧版本的&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'bar'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;connection pool&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;管理对一个redis server的所有连接，避免每次建立、释放连接的开销。
默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。

pool = redis.ConnectionPool(host='127.0.0.1', port=6379)
r = redis.Redis(connection_pool=pool)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pipeline机制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;可以在一次请求中执行多个命令，这样避免了多次的往返时延
当一组命令中每条命令都不依赖于之前的执行结果, 可以使用

pipe = r.pipeline()
pipe.set('one', 'first')
pipe.set('two', 'second')
pipe.execute()

pipeline中的操作是原子的，要改变这种方式，可以传入transaction=False

pipe = r.pipeline(transaction=False)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-ji-shi-li"&gt;实际实例&lt;/h3&gt;
&lt;p&gt;什么应用，都用什么方式处理的&lt;/p&gt;
&lt;p&gt;1.一般的缓存&lt;/p&gt;
&lt;p&gt;用字符串类型足矣,
e.g.注册时得用户名冲突,在线用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SET key value
&amp;gt;GET
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一些缓存场景&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;存储会话缓存(Session Cache), 利用持久化, 保存一些信息, 例如购物车
全页缓存(FPC)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.计数,访问量统计，自增id等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INCR key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.存储对象实例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用散列
&amp;gt;HSET key field value
&amp;gt;HGET key field
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.存列表，队列相关&lt;/p&gt;
&lt;p&gt;作为队列使用&lt;/p&gt;
&lt;p&gt;文章分类列表，评论列表等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用列表
&amp;gt;LPUSH key value
&amp;gt;RPUSH key value

&amp;gt;LPOP key
&amp;gt;RPOP key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.集合相关的&lt;/p&gt;
&lt;p&gt;标签云等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SADD key member
&amp;gt;SREM key member
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.排序相关&lt;/p&gt;
&lt;p&gt;排行榜&lt;/p&gt;
&lt;p&gt;访问量排序,点击量等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用有序结合
&amp;gt;ZADD key score member
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.访问频率控制&lt;/p&gt;
&lt;p&gt;设置key的失效时间
用 INCR
访问时检查次数, 若超过阈值, 走限制逻辑&lt;/p&gt;
&lt;p&gt;or 记录次数, 超过阈值, 检查与最早一个相差是不是1分钟, 是, 走限制逻辑, 不是, 现有时间加入列表, 同时删除最早元素&lt;/p&gt;
&lt;p&gt;8.发布/订阅&lt;/p&gt;
&lt;p&gt;会用到的&lt;/p&gt;
&lt;h3 id="guan-li"&gt;管理&lt;/h3&gt;
&lt;p&gt;重启后数据不丢失, 两种方式, 可单独使用或者结合使用&lt;/p&gt;
&lt;p&gt;持久化：&lt;/p&gt;
&lt;p&gt;RDB&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;快照,符合一定条件时，将内存中的所有数据进行快照并存储到硬盘上
快照的条件可以在配置文件中配置, 两个参数: 时间和改动的键的个数
Redis默认采用的持久化方式

过程
1. Redis使用fork函数复制一份当前进程(父进程)的副本(子进程) (存的是fork时刻的数据)
   写时复制copy-on-write 开始时父子共享同一内存数据, 当父进程修改某片数据, 操作系统复制一份以保证子进程数据不受影响
2. 父进程继续接收命令, 子进程开始将内存中数据写入硬盘中临时文件
3. 写入结束后, 替换旧的RDB文件

任意时刻rdb文件都是完整地, 可以用于备份

可以手动发SAVE / BGSAVE 让redis执行快照(前者由主进程进行快照操作,阻塞其他请求, 后者fork子进程)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AOF&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;每次执行一条会修改Redis中数据的命令，Redis会将该命令写到硬盘中的AOF文件
开启, 设置 appendonly yes
默认文件名 appendonly.aof 可以通过appendfilename设置

纯文本文件, 每当达到一定条件时可以进行重写
auto-aof-rewrite-percentage 100 #超过上一次百分比
auto-aof-rewrite-min-size 64mb #允许重写的最小aof文件大小

默认30s, 执行的命令同步到aof
可以配置
appendfsync everysec # 每秒一次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis可以配置主从数据库&lt;/p&gt;
&lt;p&gt;redis-server --port 6380 --slaveof 127.0.0.1 6379&lt;/p&gt;
&lt;p&gt;复制原理: 从数据库启动, 向主库发SYNC, 主库后台开始保存快照(RDB), 并将保存期间的命令缓存起来. 快照完成后, 将快照文件和缓存的命令发送给从库,
从库收到后载入快照文件并执行命令. 不支持断点续传&lt;/p&gt;
&lt;p&gt;读写分离: 主库禁用持久化, 从库启用. 从库崩溃, 重启自动更新. 主库崩溃, 从库提升为主库再修复&lt;/p&gt;
&lt;p&gt;常用查看命令&lt;/p&gt;
&lt;p&gt;telnet连接&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;telnet 127.0.0.1 6379
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定最大可用内存&lt;/p&gt;
&lt;p&gt;如果服务器内存有限, 大量使用缓存且生存时间设置过长会导致Redis占满内存. or 为了防止占用内存过大而将生存时间设太短导致命中率过低&lt;/p&gt;
&lt;p&gt;可以限制redis使用的最大内存, 按照一定规则淘汰不需要的键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;配置文件 
maxmemory 限制最大可用内存大小(单位字节)
maxmemory-policy 超过限制时的删除策略，一直删除直到小于指定内存

volatile-lru  使用LRU算法删除一个键，只对设置了生存时间的
allkeys-lru   使用LRU算法删除一个键
volatile-random 随机，只对设置了生存时间的
allkeys-random
volatile-ttl    删除生存时间最近的
noeviction      不删除键，返回错误
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;耗时命令日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; SLOWLOG GET
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta_2"&gt;其他&lt;/h3&gt;
&lt;p&gt;批量删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#删除 /test/*开始的
./redis-cli -a password -n 0 keys "/test/*" | xargs ./redis-cli -a password -n 0 del
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;精简键名和键值, 最直观的减少内存占用的方式&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The end! To be continue ....&lt;/p&gt;</content><category term="redis"></category><category term="python"></category></entry><entry><title>博客程序TODO列表</title><link href="http://www.wklken.me/posts/2013/10/15/blog-todo-list.html" rel="alternate"></link><published>2013-10-15T00:00:00+08:00</published><updated>2013-10-15T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-10-15:/posts/2013/10/15/blog-todo-list.html</id><summary type="html">&lt;p&gt;blog使用的是pelican，主题是拿开源的进行自己修改的，具体见底部&lt;/p&gt;
&lt;p&gt;之前做的时候，列了一份修改的计划，种种原因，只完成了部分&lt;/p&gt;
&lt;p&gt;记下来，后续抽空修改吧&lt;/p&gt;
&lt;p&gt;需要学习html/css/js基础知识&lt;/p&gt;
&lt;p&gt;==================================&lt;/p&gt;
&lt;p&gt;update: 2014-05-11&lt;/p&gt;
&lt;p&gt;新增主题,取名luna, 类似iawrite专注模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 文章系列
2. markdown nav 侧边栏
3. 更漂亮的翻页
4. 分类页
5. archive页   区分年份, 加timeline
6. aboutme页面,使用imporess.js
7. tags标签展示
8. 分享到?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在更倾向于,极简, 阅读和用户体验更好,需要背景色和字体选择更好&lt;/p&gt;
&lt;p&gt;==================================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TODO List&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.分类页，优化展示
2.专题页 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;blog使用的是pelican，主题是拿开源的进行自己修改的，具体见底部&lt;/p&gt;
&lt;p&gt;之前做的时候，列了一份修改的计划，种种原因，只完成了部分&lt;/p&gt;
&lt;p&gt;记下来，后续抽空修改吧&lt;/p&gt;
&lt;p&gt;需要学习html/css/js基础知识&lt;/p&gt;
&lt;p&gt;==================================&lt;/p&gt;
&lt;p&gt;update: 2014-05-11&lt;/p&gt;
&lt;p&gt;新增主题,取名luna, 类似iawrite专注模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 文章系列
2. markdown nav 侧边栏
3. 更漂亮的翻页
4. 分类页
5. archive页   区分年份, 加timeline
6. aboutme页面,使用imporess.js
7. tags标签展示
8. 分享到?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在更倾向于,极简, 阅读和用户体验更好,需要背景色和字体选择更好&lt;/p&gt;
&lt;p&gt;==================================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TODO List&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.分类页，优化展示
2.专题页，优化展示
3.首页，文章列表的展示，方式上的修改
4.风格，更喜欢蓝色水晶
5.markdown超长不换行的处理
6.代码高亮: python/shell及其他 [DONE 20131021]
7.markdown标签浮动图层导航
8.csdn剩余博文迁移和优化
9.原有个人blog文章整理，修改
10.SEO入口，变成唯一入口，优化之，其他的下掉
11.整体风格统一，优化阅读体验 [DONE 20140601]
12.加入微博
13.书单的处理，要有图片
14.个人页的处理，个人简历，图
15.上一篇，下一篇 [DONE]
16.友链
17.近期文章
18,查看更多
19.资源页面 某些系列的入口
20.时间线
21.分享 [DONE 2014-11-09]
22.搜索入口 [DONE 2014-11-09]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要困难还是审美不行啊，修改前端对我来说是蛮大的挑战&lt;/p&gt;
&lt;p&gt;尝试处理下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;update 20140617&lt;/p&gt;
&lt;p&gt;修改使用新主题, 编程focus模式, 极简主义&lt;/p&gt;
&lt;p&gt;the end&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-10-15&lt;/p&gt;</content><category term="blog"></category><category term="todo"></category></entry><entry><title>搜索下拉提示框实现(python/golang)</title><link href="http://www.wklken.me/posts/2013/10/13/search-suggestion.html" rel="alternate"></link><published>2013-10-13T00:00:00+08:00</published><updated>2013-10-13T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-10-13:/posts/2013/10/13/search-suggestion.html</id><summary type="html">&lt;p&gt;在百度，google，taobao.com的搜索框，输入某个关键字时，会存在下拉提示，提示关键字列表&lt;/p&gt;
&lt;p&gt;国庆的时候，想了下如何实现这个功能&lt;/p&gt;
&lt;p&gt;用python和golang搞了个基本版本，国庆后直接上到线上了&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://github.com/wklken/suggestion
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo地址：(30w关键字，每天约三百万次请求)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://s.kuaiwan.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本机制：离线给出关键字和权重，用trie数据结构，逐一加入，建立一棵树，请求进来时，遍历树，获取节点，排序返回&lt;/p&gt;
&lt;p&gt;2013-10-13&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</summary><content type="html">&lt;p&gt;在百度，google，taobao.com的搜索框，输入某个关键字时，会存在下拉提示，提示关键字列表&lt;/p&gt;
&lt;p&gt;国庆的时候，想了下如何实现这个功能&lt;/p&gt;
&lt;p&gt;用python和golang搞了个基本版本，国庆后直接上到线上了&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://github.com/wklken/suggestion
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo地址：(30w关键字，每天约三百万次请求)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://s.kuaiwan.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本机制：离线给出关键字和权重，用trie数据结构，逐一加入，建立一棵树，请求进来时，遍历树，获取节点，排序返回&lt;/p&gt;
&lt;p&gt;2013-10-13&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="python"></category><category term="golang"></category></entry><entry><title>小记-搭建discourse</title><link href="http://www.wklken.me/posts/2013/09/14/discourse.html" rel="alternate"></link><published>2013-09-14T00:00:00+08:00</published><updated>2013-09-14T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-09-14:/posts/2013/09/14/discourse.html</id><summary type="html">&lt;p&gt;早上，花了点时间，在刚买的digital ocean vps上尝试搭建了下&lt;a href="http://www.discourse.org/"&gt;discourse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上的教程N多，最终决定使用官方的搭建 &lt;a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-ubuntu.md"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对我这个ruby盲来说，第一次接触ruby环境，第一个感觉，这安装流程也太TM多了吧，要配的东西老多了，但另一方面，
也发现，python的环境配置相关的东西，体验上和ruby比起来还是有差距的,&lt;/p&gt;
&lt;p&gt;一个半小时，轻轻松松，也有点莫名其妙，搭建完了&lt;/p&gt;
&lt;p&gt;后端ruby resultful API，我在思考，貌似用Python也可以实现，就是不知道迁移这玩意儿耗时几何，&lt;/p&gt;
&lt;p&gt;研究研究，可以的话用python+flask实现一把&lt;/p&gt;
&lt;p&gt;好了，哥的博客有了discourse，地址 &lt;a href="http://bbs.wklken.me/"&gt;http://bbs.wklken.me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后续捣鼓下，研究下ruby&lt;/p&gt;
&lt;p&gt;2013-09-14&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</summary><content type="html">&lt;p&gt;早上，花了点时间，在刚买的digital ocean vps上尝试搭建了下&lt;a href="http://www.discourse.org/"&gt;discourse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上的教程N多，最终决定使用官方的搭建 &lt;a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-ubuntu.md"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对我这个ruby盲来说，第一次接触ruby环境，第一个感觉，这安装流程也太TM多了吧，要配的东西老多了，但另一方面，
也发现，python的环境配置相关的东西，体验上和ruby比起来还是有差距的,&lt;/p&gt;
&lt;p&gt;一个半小时，轻轻松松，也有点莫名其妙，搭建完了&lt;/p&gt;
&lt;p&gt;后端ruby resultful API，我在思考，貌似用Python也可以实现，就是不知道迁移这玩意儿耗时几何，&lt;/p&gt;
&lt;p&gt;研究研究，可以的话用python+flask实现一把&lt;/p&gt;
&lt;p&gt;好了，哥的博客有了discourse，地址 &lt;a href="http://bbs.wklken.me/"&gt;http://bbs.wklken.me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后续捣鼓下，研究下ruby&lt;/p&gt;
&lt;p&gt;2013-09-14&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="discourse"></category></entry><entry><title>Flask使用小结</title><link href="http://www.wklken.me/posts/2013/09/09/python-framework-flask.html" rel="alternate"></link><published>2013-09-09T00:00:00+08:00</published><updated>2013-09-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-09-09:/posts/2013/09/09/python-framework-flask.html</id><summary type="html">&lt;p&gt;&lt;img alt="flask" src="/imgs/python/flask.png"/&gt;&lt;/p&gt;
&lt;p&gt;flask 使用的一些整理&lt;/p&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;Flask  &lt;a href="https://dormousehole.readthedocs.org/en/latest/"&gt;文档&lt;/a&gt;|&lt;a href="http://flask.pocoo.org/docs/"&gt;英文&lt;/a&gt;|
       &lt;a href="http://exploreflask.com/"&gt;expore flask&lt;/a&gt;|
       &lt;a href="http://www.oschina.net/translate/the-flask-mega-tutorial-part-i-hello-world"&gt;快速教材&lt;/a&gt;|
       &lt;a href="http://flask-admin.readthedocs.org/en/latest/"&gt;flask-admin&lt;/a&gt;|
       &lt;a href="http://flask-debugtoolbar.readthedocs.org/en/latest/"&gt;Flask-DebugToolbar&lt;/a&gt;|
       &lt;a href="http://flask-login.readthedocs.org/en/latest/"&gt;Flask-Login&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Cache/"&gt;Flask-Cache&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-SQLAlchemy/"&gt;flask-sqlalchemy&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Security/"&gt;flask-security&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Mako/"&gt;Flask-mako&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Genshi/"&gt;Flask-Genshi&lt;/a&gt;|
       &lt;a href="http://wtforms.simplecodes.com/docs/1.0.1/index.html"&gt;WTForms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/extensions/"&gt;Flask Extensions&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zui-jian-dan-de-hello-world"&gt;最简单的hello world&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#app …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="flask" src="/imgs/python/flask.png"/&gt;&lt;/p&gt;
&lt;p&gt;flask 使用的一些整理&lt;/p&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;Flask  &lt;a href="https://dormousehole.readthedocs.org/en/latest/"&gt;文档&lt;/a&gt;|&lt;a href="http://flask.pocoo.org/docs/"&gt;英文&lt;/a&gt;|
       &lt;a href="http://exploreflask.com/"&gt;expore flask&lt;/a&gt;|
       &lt;a href="http://www.oschina.net/translate/the-flask-mega-tutorial-part-i-hello-world"&gt;快速教材&lt;/a&gt;|
       &lt;a href="http://flask-admin.readthedocs.org/en/latest/"&gt;flask-admin&lt;/a&gt;|
       &lt;a href="http://flask-debugtoolbar.readthedocs.org/en/latest/"&gt;Flask-DebugToolbar&lt;/a&gt;|
       &lt;a href="http://flask-login.readthedocs.org/en/latest/"&gt;Flask-Login&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Cache/"&gt;Flask-Cache&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-SQLAlchemy/"&gt;flask-sqlalchemy&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Security/"&gt;flask-security&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Mako/"&gt;Flask-mako&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Genshi/"&gt;Flask-Genshi&lt;/a&gt;|
       &lt;a href="http://wtforms.simplecodes.com/docs/1.0.1/index.html"&gt;WTForms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/extensions/"&gt;Flask Extensions&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zui-jian-dan-de-hello-world"&gt;最简单的hello world&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#app.run(host='127.0.0.1', port=8000)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后，访问http://localhost:5000&lt;/p&gt;
&lt;h3 id="zhi-chi-postgetti-jiao"&gt;支持post/get提交&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="duo-ge-urlzhi-xiang"&gt;多个url指向&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/index'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bu-guan-postgetshi-yong-tong-yi-de-jie-shou"&gt;不管post/get使用统一的接收&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'GET'&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chu-li-jsonqing-qiu"&gt;处理json请求&lt;/h3&gt;
&lt;p&gt;request的header中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"Content-Type": "application/json"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理时:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = request.get_json(silent=False)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huo-qu-postti-jiao-zhong-de-checkbox"&gt;获取post提交中的checkbox&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pages&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;checkbox&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;do_delete&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;&lt;span class="k"&gt;endfor&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;

page_ids = request.form.getlist("do_delete")
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-urlzhong-de-can-shu"&gt;使用url中的参数&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/query/&amp;lt;qid&amp;gt;/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zai-requestkai-shi-jie-shu-dosomething"&gt;在request开始结束dosomething&lt;/h3&gt;
&lt;p&gt;一般可以处理数据库连接等等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.....&lt;/span&gt;

&lt;span class="nd"&gt;@app.before_request&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.teardown_request&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-ce-jinja2mo-ban-zhong-shi-yong-de-guo-lu-qi"&gt;注册Jinja2模板中使用的过滤器&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.template_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'reverse'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'reverse'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_filter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以这么用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;FIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FIL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-ce-jinja2mo-ban-zhong-shi-yong-de-quan-ju-bian-liang"&gt;注册Jinja2模板中使用的全局变量&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JINJA2_GLOBALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'MEDIA_PREFIX'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'/media/'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JINJA2_GLOBALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-yi-ying-yong-shi-yong-de-templatehe-staticmu-lu"&gt;定义应用使用的template和static目录&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_FOLDER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-blueprint"&gt;使用Blueprint&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;
&lt;span class="n"&gt;bp_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#bp_test = Blueprint('test', __name__, url_prefix='/abc')&lt;/span&gt;

&lt;span class="nd"&gt;@bp_test.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xxx&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bp_test&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bp_video = Blueprint('video', __name__, url_prefix='/kw_news/video')
@bp_video.route('/search/category/', methods=['POST', 'GET'])
#注意这种情况下Blueprint中url_prefix不能以 '/' 结尾, 否则404
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-session"&gt;使用session&lt;/h3&gt;
&lt;p&gt;包装cookie实现的，没有session id&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PS#yio`%_!((f_or(%)))s'&lt;/span&gt;

&lt;span class="err"&gt;然后&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'somekey'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logged_in'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#过期时间,通过cookie实现的&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permanent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permanent_session_lifetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fan-xiang-lu-you"&gt;反向路由&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;login_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"home"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"home.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shang-chuan-wen-jian"&gt;上传文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/image/upload/"&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;enctype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接收&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'upload'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-jie-fan-hui-mou-ge-wen-jian"&gt;直接返回某个文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_FOLDER&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'tweet/tweet_list.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qing-qiu-zhong-ding-xiang"&gt;请求重定向&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/docs/api/#flask.redirect"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;flask.redirect(location, code=302)
 the redirect status code. defaults to 302.Supported codes are 301, 302, 303, 305, and 307. 300 is not supported.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="s1"&gt;'Hello Foo!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huo-qu-yong-hu-zhen-shi-ip"&gt;获取用户真实ip&lt;/h3&gt;
&lt;p&gt;从request.headers获取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;real_ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'X-Real-Ip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者, 使用werkzeug的middleware &lt;a href="http://werkzeug.pocoo.org/docs/0.9/contrib/fixers/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.contrib.fixers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="return-json-jsonp"&gt;return json &amp;amp; jsonp&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# or others&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;jsonp_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'callback'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;jsonp_callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;);"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonp_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'ok'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;})),&lt;/span&gt;
            &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text/javascript"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ok_jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pei-zhi-du-qu-fang-fa"&gt;配置读取方法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# create our little application :)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load default config and override config from an environment variable&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/tmp/flaskr.db'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'development key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_envvar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FLASKR_SETTINGS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;------------------&lt;/span&gt;
&lt;span class="c1"&gt;# configuration&lt;/span&gt;
&lt;span class="n"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/minitwit.db'&lt;/span&gt;
&lt;span class="n"&gt;PER_PAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'development key'&lt;/span&gt;

&lt;span class="c1"&gt;# create our little application :)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_envvar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MINITWIT_SETTINGS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ge-bu-chang-yong-de-fang-fa"&gt;几个不常用的方法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;

&lt;span class="n"&gt;abort&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logged_in'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;flash&lt;/span&gt;
&lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'New entry was successfully posted'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yi-bu-diao-yong"&gt;异步调用&lt;/h3&gt;
&lt;p&gt;想在flask的一个请求中处理异步, 除了使用消息系统, 可以用简单的线程处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;thr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;thr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@async&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;call_args&lt;/span&gt;


&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="sb"&gt;`dosomething`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="error-handler"&gt;error handler&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('500.html'), 500
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xiang-mu-pei-zhi"&gt;项目配置&lt;/h3&gt;
&lt;p&gt;1.直接&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.config['HOST']='xxx.a.com'
print app.config.get('HOST')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export MyAppConfig=/path/to/settings.cfg
app.config.from_envvar('MyAppConfig')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
     &lt;span class="n"&gt;DEBUG&lt;/span&gt; = &lt;span class="nb"&gt;False&lt;/span&gt;
     &lt;span class="n"&gt;TESTING&lt;/span&gt; = &lt;span class="nb"&gt;False&lt;/span&gt;
     &lt;span class="n"&gt;DATABASE_URI&lt;/span&gt; = &lt;span class="s"&gt;'sqlite://:memory:'&lt;/span&gt;

 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ProductionConfig&lt;/span&gt;(&lt;span class="n"&gt;Config&lt;/span&gt;):
     &lt;span class="n"&gt;DATABASE_URI&lt;/span&gt; = &lt;span class="s"&gt;'mysql://user@localhost/foo'&lt;/span&gt;

 &lt;span class="n"&gt;app&lt;/span&gt;.&lt;span class="n"&gt;config&lt;/span&gt;.&lt;span class="n"&gt;from_object&lt;/span&gt;(&lt;span class="n"&gt;ProductionConfig&lt;/span&gt;)
 &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;.&lt;span class="n"&gt;config&lt;/span&gt;.&lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="s"&gt;'DATABASE_URI'&lt;/span&gt;) &lt;span class="c c-Singleline"&gt;# mysql://user@localhost/foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# default_config.py
HOST = 'localhost'
PORT = 5000
DEBUG = True

app.config.from_pyfile('default_config.py')
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="eg-yi-ge-create_appfang-fa"&gt;EG. 一个create_app方法&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_FOLDER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_FOLDER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JINJA2_GLOBALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JINJA2_FILTERS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PO+_)(*&amp;amp;678OUIJKKO#%_!(((%)))'&lt;/span&gt;

    &lt;span class="nd"&gt;@app.before_request&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="c1"&gt;#do some thing&lt;/span&gt;

    &lt;span class="nd"&gt;@app.teardown_request&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="c1"&gt;#do some thing&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SERVER_IP&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;change log:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2013-09-09 create
2014-10-25 update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-09-09&lt;/p&gt;</content><category term="flask"></category></entry><entry><title>[翻译]快速Python性能优化要点</title><link href="http://www.wklken.me/posts/2013/09/07/quick-python-performance-optimization.html" rel="alternate"></link><published>2013-09-07T00:00:00+08:00</published><updated>2013-09-07T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-09-07:/posts/2013/09/07/quick-python-performance-optimization.html</id><summary type="html">&lt;p&gt;翻译，两篇博文 Quick Python Performance Optimization&lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-i/"&gt;一&lt;/a&gt; &lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-ii/"&gt;二&lt;/a&gt;, 很短&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仅是解释,如何用正确并且高效的方式完成在日常Python编码中简单的事情&lt;/p&gt;
&lt;p&gt;1.在ipython交互shell中使用%timeit (per line) 和 %prun (cProfile)&lt;/p&gt;
&lt;p&gt;测量你的代码，并且找到性能的瓶颈.这和"过早优化是一切罪恶的根源"并不矛盾.这是第一级的性能优化，而不是重量级的性能优化序列.&lt;/p&gt;
&lt;p&gt;更多的测量Python代码性能，可参考 &lt;a href="http://www.huyng.com/posts/python-performance-analysis/"&gt;http://www.huyng.com/posts/python-performance-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一个有趣的库，line_profiler,逐行的性能测量&lt;a href="https://bitbucket.org/robertkern/line_profiler"&gt;https://bitbucket.org/robertkern/line_profiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.减少函数调用次数.如果你需要处理一个列表，传递整个列表，而不是遍历列表，调用函数传递每个元素并获取返回值&lt;/p&gt;
&lt;p&gt;3 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;翻译，两篇博文 Quick Python Performance Optimization&lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-i/"&gt;一&lt;/a&gt; &lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-ii/"&gt;二&lt;/a&gt;, 很短&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仅是解释,如何用正确并且高效的方式完成在日常Python编码中简单的事情&lt;/p&gt;
&lt;p&gt;1.在ipython交互shell中使用%timeit (per line) 和 %prun (cProfile)&lt;/p&gt;
&lt;p&gt;测量你的代码，并且找到性能的瓶颈.这和"过早优化是一切罪恶的根源"并不矛盾.这是第一级的性能优化，而不是重量级的性能优化序列.&lt;/p&gt;
&lt;p&gt;更多的测量Python代码性能，可参考 &lt;a href="http://www.huyng.com/posts/python-performance-analysis/"&gt;http://www.huyng.com/posts/python-performance-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一个有趣的库，line_profiler,逐行的性能测量&lt;a href="https://bitbucket.org/robertkern/line_profiler"&gt;https://bitbucket.org/robertkern/line_profiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.减少函数调用次数.如果你需要处理一个列表，传递整个列表，而不是遍历列表，调用函数传递每个元素并获取返回值&lt;/p&gt;
&lt;p&gt;3.使用xrange代替range&lt;/p&gt;
&lt;p&gt;xrange是range的C语言实现--更高效的内存使用.&lt;/p&gt;
&lt;p&gt;4.对于大数据,使用numpy, 性能优于标准数据结构&lt;/p&gt;
&lt;p&gt;5.使用"".join(string) 代替字符串 + 或 +=&lt;/p&gt;
&lt;p&gt;6.while 1 比 while True 快&lt;/p&gt;
&lt;p&gt;7.性能: 列表解析 &amp;gt; for 循环 &amp;gt; while 循环&lt;/p&gt;
&lt;p&gt;遍历list时，列表解析性能最优，while循环最差(需要一个外部计数器)&lt;/p&gt;
&lt;p&gt;8.使用 cProfile, cStringIO 和 cPickle&lt;/p&gt;
&lt;p&gt;总是使用模块可用的C版本&lt;/p&gt;
&lt;p&gt;9.使用局部变量&lt;/p&gt;
&lt;p&gt;局部变量性能优于全局变量，内建变量及属性查找&lt;/p&gt;
&lt;p&gt;10.存在序列和对待器版本- 迭代对象内存更优. 使用 itertools&lt;/p&gt;
&lt;p&gt;尽可能的创建生成器和使用yield.相对于常规序列实现方式，性能更优&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wklken.me/posts/2013/07/18/python-translate-yield.html"&gt;http://www.diveinto.org/python3/iterators.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained"&gt;http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained&lt;/a&gt; &lt;a href="http://wklken.me/posts/2013/07/18/python-translate-yield.html"&gt;中文翻译&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;11.在适用的场景中尽可能地使用map,reduce,filter替代for循环&lt;/p&gt;
&lt;p&gt;12.检查元素归属 'a in b', dict或set 优于list/tuple.&lt;/p&gt;
&lt;p&gt;13.处理大数据时，尽可能使用不可变数据类型，更快 - tuples &amp;gt; list&lt;/p&gt;
&lt;p&gt;14.插入list的复杂度是O(n)&lt;/p&gt;
&lt;p&gt;15.如果你需要操作序列的开始和结束，使用deque&lt;/p&gt;
&lt;p&gt;16.del - 使用后删除无用对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python自身可以执行，通过gc模块，或者
在对象的魔术方法中写入__del__方法，或者
最简单的方式，使用后del删除
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;17.使用time.clock()&lt;/p&gt;
&lt;p&gt;18.GIL(http://wiki.python.org/moin/GlobalInterpreterLock) - GIL is a demon. &lt;/p&gt;
&lt;p&gt;GIL允许每个进程中运行一个python本地线程,防止CPU级别的并行.  尝试使用ctypes和原生c库来解决这个问题.  当你无法用Python进一步进行优化的时候.记住，你还有一种选择，使用原生C实现性能糟糕的函数，并且通过Python c绑定调用.  其他库，例如gevent,同样可以解决这个问题，并且某些扩展非常成功&lt;/p&gt;
&lt;p&gt;TL,DR: 在写代码时，考虑一圈：数据结构，构造迭代，内建函数和必要情况下使用GIL构造C扩展&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-进阶-编码处理小结</title><link href="http://www.wklken.me/posts/2013/08/31/python-extra-coding-intro.html" rel="alternate"></link><published>2013-08-31T00:00:00+08:00</published><updated>2013-08-31T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-31:/posts/2013/08/31/python-extra-coding-intro.html</id><summary type="html">&lt;p&gt;整理下python编码相关的内容&lt;/p&gt;
&lt;p&gt;注意: 以下讨论为Python2.x版本, Py3k的待尝试&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="kai-shi"&gt;开始&lt;/h2&gt;
&lt;p&gt;用python处理中文时，读取文件或消息，http参数等等&lt;/p&gt;
&lt;p&gt;一运行，发现乱码(字符串处理，读写文件，print)&lt;/p&gt;
&lt;p&gt;然后，大多数人的做法是，调用encode/decode进行调试，并没有明确思考为何出现乱码&lt;/p&gt;
&lt;p&gt;所以调试时最常出现的错误&lt;/p&gt;
&lt;p&gt;错误1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;错误2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;整理下python编码相关的内容&lt;/p&gt;
&lt;p&gt;注意: 以下讨论为Python2.x版本, Py3k的待尝试&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="kai-shi"&gt;开始&lt;/h2&gt;
&lt;p&gt;用python处理中文时，读取文件或消息，http参数等等&lt;/p&gt;
&lt;p&gt;一运行，发现乱码(字符串处理，读写文件，print)&lt;/p&gt;
&lt;p&gt;然后，大多数人的做法是，调用encode/decode进行调试，并没有明确思考为何出现乱码&lt;/p&gt;
&lt;p&gt;所以调试时最常出现的错误&lt;/p&gt;
&lt;p&gt;错误1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;错误2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="shou-xian"&gt;首先&lt;/h2&gt;
&lt;p&gt;必须有大体概念，了解下字符集，&lt;a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"&gt;字符编码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://zh.wikipedia.org/zh/ASCII"&gt;ASCII&lt;/a&gt; | &lt;a href="http://zh.wikipedia.org/zh/Unicode"&gt;Unicode&lt;/a&gt; | &lt;a href="http://zh.wikipedia.org/zh/UTF-8"&gt;UTF-8&lt;/a&gt; | 等等&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"&gt; 字符编码笔记：ASCII，Unicode和UTF-8 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.searchtb.com/2012/04/chinese_encode.html"&gt;淘宝搜索技术博客-中文编码杂谈&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="str-he-unicode"&gt;str 和 unicode&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;str和unicode都是basestring的子类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以有判断是否是字符串的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;str和unicode 转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;decode &lt;a href="http://www.tutorialspoint.com/python/string_decode.htm"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;encode &lt;a href="http://www.tutorialspoint.com/python/string_encode.htm"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;str  -&amp;gt; decode('the_coding_of_str') -&amp;gt; unicode
unicode -&amp;gt; encode('the_coding_you_want') -&amp;gt; str
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;str是字节串，由unicode经过编码(encode)后的字节组成的&lt;/p&gt;
&lt;p&gt;声明方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = '中文'
s = u'中文'.encode('utf-8')

&amp;gt;&amp;gt;&amp;gt; type('中文')
&amp;lt;type 'str'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;求长度(返回字节数)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; u'中文'.encode('utf-8')
'\xe4\xb8\xad\xe6\x96\x87'
&amp;gt;&amp;gt;&amp;gt; len(u'中文'.encode('utf-8'))
6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;unicode才是真正意义上的字符串，由字符组成&lt;/p&gt;
&lt;p&gt;声明方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = u'中文'
s = '中文'.decode('utf-8')
s = unicode('中文', 'utf-8')

&amp;gt;&amp;gt;&amp;gt; type(u'中文')
&amp;lt;type 'unicode'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;求长度(返回字符数),在逻辑中真正想要用的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; u'中文'
u'\u4e2d\u6587'
&amp;gt;&amp;gt;&amp;gt; len(u'中文')
2
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;搞明白要处理的是str还是unicode, 使用对的处理方法(str.decode/unicode.encode)&lt;/p&gt;
&lt;p&gt;下面是判断是否为unicode/str的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(u'中文', unicode)
True
&amp;gt;&amp;gt;&amp;gt; isinstance('中文', unicode)
False

&amp;gt;&amp;gt;&amp;gt; isinstance('中文', str)
True
&amp;gt;&amp;gt;&amp;gt; isinstance(u'中文', str)
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单原则：不要对str使用encode，不要对unicode使用decode (事实上可以对str进行encode的，具体见最后，为了保证简单，不建议)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; '中文'.encode('utf-8')
Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)

&amp;gt;&amp;gt;&amp;gt; u'中文'.decode('utf-8')
Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不同编码转换,使用unicode作为中间编码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#s是code_A的str&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'code_A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'code_B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="wen-jian-chu-li-idehe-kong-zhi-tai"&gt;文件处理,IDE和控制台&lt;/h2&gt;
&lt;p&gt;处理流程，可以这么使用，把python看做一个水池，一个入口，一个出口&lt;/p&gt;
&lt;p&gt;入口处，全部转成unicode, 池里全部使用unicode处理，出口处，再转成目标编码(当然，有例外，处理逻辑中要用到具体编码的情况)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;读文件

外部输入编码，decode转成unicode

处理(内部编码，统一unicode)

encode转成需要的目标编码

写到目标输出(文件或控制台)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IDE和控制台报错，原因是print时，编码和IDE自身编码不一致导致&lt;/p&gt;
&lt;p&gt;输出时将编码转换成一致的就可以正常输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print u'中文'.encode('gbk')
����
&amp;gt;&amp;gt;&amp;gt; print u'中文'.encode('utf-8')
中文
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;规范编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;统一编码，防止由于某个环节产生的乱码&lt;/p&gt;
&lt;p&gt;环境编码，IDE/文本编辑器, 文件编码，数据库数据表编码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;保证代码源文件编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个很重要&lt;/p&gt;
&lt;p&gt;py文件默认编码是ASCII, 在源代码文件中，如果用到非ASCII字符，需要在文件头部进行编码声明 &lt;a href="http://www.python.org/dev/peps/pep-0263/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不声明的话，输入非ASCII会遇到的错误,必须放在文件第一行或第二行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"XXX.py"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;
&lt;span class="nt"&gt;SyntaxError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Non-ASCII&lt;/span&gt; &lt;span class="nt"&gt;character&lt;/span&gt; &lt;span class="s1"&gt;'\xd6'&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;py&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;no&lt;/span&gt; &lt;span class="nt"&gt;encoding&lt;/span&gt; &lt;span class="nt"&gt;declared&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;see&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;peps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;pep-0263&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;html&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;声明方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# -*- coding: utf-8 -*-
或者
#coding=utf-8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若头部声明coding=utf-8, a = '中文' 其编码为utf-8&lt;/p&gt;
&lt;p&gt;若头部声明coding=gb2312, a = '中文' 其编码为gbk&lt;/p&gt;
&lt;p&gt;so, 同一项目中所有源文件头部统一一个编码,并且声明的编码要和源文件保存的编码一致(编辑器相关)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在源代码用作处理的硬编码字符串，统一用unicode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将其类型和源文件本身的编码隔离开, 独立无依赖方便流程中各个位置处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'中文'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;#而不是 s == '中文'&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c1"&gt;#注意这里 s到这里时，确保转为unicode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上几步搞定后，你只需要关注两个 unicode和 你设定的编码(一般使用utf-8)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;处理顺序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. Decode early
2. Unicode everywhere
3. Encode later
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="xiang-guan-mo-kuai-ji-yi-xie-fang-fa"&gt;相关模块及一些方法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;获得和设置系统默认编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'ascii'&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;'sys'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;str.encode('other_coding')&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在python中，直接将某种编码的str进行encode成另一种编码str&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#str_A为utf-8&lt;/span&gt;
&lt;span class="n"&gt;str_A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gbk'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;执行的操作是&lt;/span&gt;
&lt;span class="n"&gt;str_A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sys_codec'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gbk'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;这里&lt;/span&gt;&lt;span class="n"&gt;sys_codec&lt;/span&gt;&lt;span class="err"&gt;即为上一步&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;的编码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;'获得和设置系统默认编码'和这里的str.encode是相关的，但我一般很少这么用，主要是觉得复杂不可控,还是输入明确decode，输出明确encode来得简单些(个人观点)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;chardet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文件编码检测，&lt;a href="https://pypi.python.org/pypi/chardet"&gt;下载&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;chardet&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chardet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'confidence'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'encoding'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;\u字符串转对应unicode字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; u'中'
u'\u4e2d'

&amp;gt;&amp;gt;&amp;gt; s = '\u4e2d'
&amp;gt;&amp;gt;&amp;gt; print s.decode('unicode_escape')
中

&amp;gt;&amp;gt;&amp;gt; a = '\\u4fee\\u6539\\u8282\\u70b9\\u72b6\\u6001\\u6210\\u529f'
&amp;gt;&amp;gt;&amp;gt; a.decode('unicode_escape')
u'\u4fee\u6539\u8282\u70b9\u72b6\u6001\u6210\u529f'
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;python unicode文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/tutorial/introduction.html#unicode-strings"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好了，暂时就这么多，希望讲清楚了&lt;/p&gt;
&lt;p&gt;thx&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-08-31 于深圳&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python资源入口汇总</title><link href="http://www.wklken.me/posts/2013/08/27/python-sources.html" rel="alternate"></link><published>2013-08-27T00:00:00+08:00</published><updated>2013-08-27T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-27:/posts/2013/08/27/python-sources.html</id><summary type="html">&lt;p&gt;整理中，进度30%&lt;/p&gt;
&lt;h3 id="guan-wang"&gt;官网&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.python.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="guan-fang-wen-dang"&gt;官方文档&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;英文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;document 2.7.6  &lt;a href="http://docs.python.org/2/index.html"&gt;入口&lt;/a&gt;|
                &lt;a href="http://docs.python.org/2/library/"&gt;标准库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;document 3.x    &lt;a href="http://docs.python.org/3/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Hitchhiker’s Guide to Python  &lt;a href="http://docs.python-guide.org/en/latest/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python Monk &lt;a href="https://pythonmonk.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;document 2.7 &lt;a href="http://www.pythondoc.com/pythontutorial27/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非官方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;google的python文档 &lt;a href="https://developers.google.com/edu/python/"&gt;Google's Python Class入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pep8 &lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;zetcode &lt;a href="http://zetcode.com/lang/python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;building skills in Python &lt;a href="http://www.itmaybeahack.com/book/python-2.6/html/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;风格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google Python 风格指南 &lt;a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/"&gt;入口 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;整理中，进度30%&lt;/p&gt;
&lt;h3 id="guan-wang"&gt;官网&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.python.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="guan-fang-wen-dang"&gt;官方文档&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;英文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;document 2.7.6  &lt;a href="http://docs.python.org/2/index.html"&gt;入口&lt;/a&gt;|
                &lt;a href="http://docs.python.org/2/library/"&gt;标准库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;document 3.x    &lt;a href="http://docs.python.org/3/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Hitchhiker’s Guide to Python  &lt;a href="http://docs.python-guide.org/en/latest/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python Monk &lt;a href="https://pythonmonk.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;document 2.7 &lt;a href="http://www.pythondoc.com/pythontutorial27/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非官方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;google的python文档 &lt;a href="https://developers.google.com/edu/python/"&gt;Google's Python Class入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pep8 &lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;zetcode &lt;a href="http://zetcode.com/lang/python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;building skills in Python &lt;a href="http://www.itmaybeahack.com/book/python-2.6/html/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;风格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google Python 风格指南 &lt;a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模块学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python Module of the Week &lt;a href="http://pymotw.com/2/contents.html"&gt;入口&lt;/a&gt;|&lt;a href="https://code.google.com/p/pymotwcn/"&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进阶必读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;英文版汇总 &lt;a href="http://jessenoller.com/good-to-great-python-reads/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文版(准备翻译) &lt;a href=""&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="jiao-cheng-he-shu-ji"&gt;教程和书籍&lt;/h3&gt;
&lt;p&gt;python简明教程(A Byte of Python) &lt;a href="http://woodpecker.org.cn/abyteofpython_cn/chinese/"&gt;入口&lt;/a&gt; | &lt;a href="http://lovejiani.com/python/"&gt;另一个入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Think Python &lt;a href="http://www.greenteapress.com/thinkpython/html/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Data Structures and Algorithms with Object-Oriented Design Patterns in Python &lt;a href="http://www.brpreiss.com/books/opus7/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Test-Driven Web Development with Python &lt;a href="http://chimera.labs.oreilly.com/books/1234000000754/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How To Package Your Python Code &lt;a href="http://www.scotttorborg.com/python-packaging/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="kuang-jia"&gt;框架&lt;/h3&gt;
&lt;p&gt;Django &lt;a href="https://www.djangoproject.com/"&gt;官网&lt;/a&gt;|
       &lt;a href="https://docs.djangoproject.com/en/1.5/"&gt;文档&lt;/a&gt;|
       &lt;a href="http://djangobook.py3k.cn/2.0/"&gt;The Django book&lt;/a&gt;|
       &lt;a href="http://www.tangowithdjango.com/"&gt;Tango With Django&lt;/a&gt;|
       &lt;a href="http://lincolnloop.com/django-best-practices/index.html"&gt;Django Best Practices&lt;/a&gt;|
       &lt;a href="http://effectivedjango.com/"&gt;Effective Django&lt;/a&gt;|
       &lt;a href="http://django-china.cn/"&gt;Django china&lt;/a&gt;|
       &lt;a href="http://haoluobo.com/trac/wiki/Django"&gt;Django资源汇总&lt;/a&gt;|
       &lt;a href="http://blog.jobbole.com/15555/"&gt;10个实用Django建议&lt;/a&gt;|
       &lt;a href="http://www.mercurytide.co.uk/about/news/article/django-15-cheat-sheet/"&gt;cheat sheet&lt;/a&gt;|
       &lt;a href="http://www.the5fire.com/django-database-access-optimization.html"&gt;Djangof访问数据库优化&lt;/a&gt;|
       &lt;a href="https://code.djangoproject.com/wiki/UsingVimWithDjango"&gt;配置vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flask  &lt;a href="https://dormousehole.readthedocs.org/en/latest/"&gt;文档&lt;/a&gt;|&lt;a href="http://flask.pocoo.org/docs/"&gt;英文&lt;/a&gt;
&lt;a href="http://www.oschina.net/translate/the-flask-mega-tutorial-part-i-hello-world"&gt;快速教材&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-SQLAlchemy/"&gt;flask-sqlalchemy&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Security/"&gt;flask-security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bottle &lt;a href="http://bottlepy.org/docs/dev/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tornado &lt;a href="http://www.tornadoweb.cn/documentation"&gt;文档&lt;/a&gt;|
        &lt;a href="http://demo.pythoner.com/itt2zh/index.html"&gt;Introduction to Tornado&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Celery &lt;a href="http://docs.celeryproject.org/en/latest/index.html"&gt;文档&lt;/a&gt;|
       &lt;a href="https://github.com/celery/celery"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scrapy &lt;a href="http://scrapy.org/"&gt;入口&lt;/a&gt;|&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pyramid &lt;a href="http://docs.pylonsproject.org/projects/pyramid_tutorials/en/latest/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shu-ju-ku"&gt;数据库&lt;/h3&gt;
&lt;p&gt;sqlalchemy &lt;a href="http://docs.sqlalchemy.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;alembic(sqlalchemy辅助) &lt;a href="https://alembic.readthedocs.org/en/latest/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;couchDB &lt;a href="http://pythonhosted.org/CouchDB/index.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mongoDB &lt;a href="http://docs.mongodb.org/ecosystem/drivers/python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mo-ban"&gt;模板&lt;/h3&gt;
&lt;p&gt;jinja2 &lt;a href="http://jinja.pocoo.org/docs/api/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mako &lt;a href="http://www.makotemplates.org/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="gong-ju-ji-di-san-fang-bao"&gt;工具及第三方包&lt;/h3&gt;
&lt;p&gt;virtualenv &lt;a href="https://virtualenv-chinese-docs.readthedocs.org/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;requests &lt;a href="http://docs.python-requests.org/en/latest/"&gt;文档&lt;/a&gt;
&lt;a href="http://cn.python-requests.org/en/latest/"&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;fabric [文档](http://docs.fabfile.org/en/1.7/6&lt;/p&gt;
&lt;p&gt;beautifulsoup &lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gunicorn &lt;a href="http://gunicorn.org/"&gt;入口&lt;/a&gt;|
         &lt;a href="http://docs.gunicorn.org/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;twisted &lt;a href="http://twistedmatrix.com/trac/"&gt;入口&lt;/a&gt;|
        &lt;a href="http://twistedmatrix.com/documents/10.0.0/core/howto/index.html"&gt;文档&lt;/a&gt;|
        &lt;a href="http://turtlerbender007.appspot.com/twisted/index.html"&gt;入门-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gevent &lt;a href="http://www.gevent.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wtforms &lt;a href="http://wtforms.simplecodes.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Routes &lt;a href="http://routes.readthedocs.org/en/latest/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kombu &lt;a href="http://kombu.readthedocs.org/en/latest/introduction.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pil &lt;a href="http://www.pythonware.com/products/pil/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shi-pin"&gt;视频&lt;/h3&gt;
&lt;p&gt;疯狂地Python: 快速入门精讲 &lt;a href="http://study.163.com/course/introduction.htm?courseId=302001#/courseDetail"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shu-ji"&gt;书籍&lt;/h3&gt;
&lt;p&gt;一个网站 &lt;a href="http://www.ifindbook.net/recommend/subcat/Python"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;深入Python3 &lt;a href="http://woodpecker.org.cn/diveintopython3/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bo-ke"&gt;博客&lt;/h3&gt;
&lt;p&gt;Python入门及进阶笔记(我的) &lt;a href="http://wklken.me/category/pythonru-men-ji-jin-jie-bi-ji.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python源码剖析 &lt;a href="http://blog.csdn.net/balabalamerobert/article/category/168910"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python自然语言处理学习笔记 &lt;a href="http://www.cnblogs.com/yuxc/category/307122.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dabeaz &lt;a href="http://www.dabeaz.com/talks.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="jing-dian-bo-wen-ji-he"&gt;经典博文集合&lt;/h3&gt;
&lt;p&gt;*github上一个文章集合 &lt;a href="https://github.com/kirang89/pycrumbs/blob/master/pycrumbs.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python十分钟入门 &lt;a href="http://blog.jobbole.com/23425/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么Python对程序员重要 &lt;a href="http://blog.jobbole.com/13153/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每个程序员都应该学习使用Python或Ruby &lt;a href="http://blog.jobbole.com/1141/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给Python初学者的一些技巧 &lt;a href="http://blog.jobbole.com/32748/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python新手常犯错误  &lt;a href="http://blog.jobbole.com/42706/"&gt;第一部分&lt;/a&gt; &lt;a href="http://blog.jobbole.com/43826/"&gt;第二部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python编程中需要注意的一些事 &lt;a href="http://blog.jobbole.com/19835/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python性能鸡汤 &lt;a href="http://www.oschina.net/question/1579_45822"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python代码性能优化技巧 &lt;a href="http://blog.jobbole.com/24197/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;加速你的Python代码 &lt;a href="http://blog.jobbole.com/36701/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何成为Python高手 &lt;a href="http://www.aqee.net/how-to-become-a-proficient-python-programmer/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你真的会Python吗 &lt;a href="http://www.dongwm.com/archives/ni-zhen-de-hui-pythonma/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;深刻理解Python中的metaclass &lt;a href="http://blog.jobbole.com/21351/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建成功的Python项目 &lt;a href="http://blog.jobbole.com/12649/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python打包入门指南 &lt;a href="http://www.ibm.com/developerworks/opensource/library/os-pythonpackaging/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python yield 使用浅析 &lt;a href="http://blog.jobbole.com/32876/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python关键字yield详解 &lt;a href="http://blog.jobbole.com/28506/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python中的默认参数 &lt;a href="http://blog.jobbole.com/40088/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可爱的Python Python中的函数式编程  &lt;a href="http://blog.jobbole.com/35028/"&gt;第一部分&lt;/a&gt; &lt;a href="http://blog.jobbole.com/35042/"&gt;第二部分&lt;/a&gt; &lt;a href="http://blog.jobbole.com/35045/"&gt;第三部分&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="she-qu"&gt;社区&lt;/h3&gt;
&lt;p&gt;为毛没有给力的.... (╯‵□′)╯︵┻━┻zi&lt;/p&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;一个python正则在线工具 &lt;a href="http://www.pyregex.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态语言设计模式 &lt;a href="http://norvig.com/design-patterns/ppframe.htm"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python challenge &lt;a href="http://www.pythonchallenge.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python 初学者 &lt;a href="https://github.com/Yixiaohan/codeparkshare"&gt;PythonShare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pythonista的vim编辑器 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;国内pypi镜像 &lt;a href="http://pypi.sdutlinux.org/"&gt;pypi&lt;/a&gt;|
             &lt;a href="http://pypi.douban.com/simple/"&gt;douban&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install -i http://pypi.douban.com/simple/ saltTesting
sudo pip install -i http://pypi.douban.com/simple/ saltTesting
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经典代码片段 &lt;a href="http://code.activestate.com/recipes/langs/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;windows下各种python第三方exe下载 &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 视频站 &lt;a href="http://pyvideo.org/"&gt;pyvideo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 源码搜索引擎 &lt;a href="http://nullege.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python for beginners &lt;a href="http://www.pythonforbeginners.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;</content><category term="sources"></category></entry><entry><title>Python-进阶-itertools模块小结</title><link href="http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html" rel="alternate"></link><published>2013-08-20T00:00:00+08:00</published><updated>2013-08-20T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-20:/posts/2013/08/20/python-extra-itertools.html</id><summary type="html">&lt;p&gt;这货很强大, 必须掌握&lt;/p&gt;
&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pymotw &lt;a href="http://pymotw.com/2/itertools/"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本是基于文档的翻译和补充，相当于翻译了&lt;/p&gt;
&lt;p&gt;itertools用于高效循环的迭代函数集合&lt;/p&gt;
&lt;h2 id="zu-cheng"&gt;组成&lt;/h2&gt;
&lt;p&gt;总体，整体了解&lt;/p&gt;
&lt;p&gt;无限迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器         参数         结果                                                例子
count()     start, [step]   start, start+step, start+2*step, ...                count(10) --&amp;gt; 10 11 12 13 14 ...
cycle()     p               p0, p1, ... plast, p0, p1, ...                      cycle('ABCD') --&amp;gt; A B C D A B C D …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;这货很强大, 必须掌握&lt;/p&gt;
&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pymotw &lt;a href="http://pymotw.com/2/itertools/"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本是基于文档的翻译和补充，相当于翻译了&lt;/p&gt;
&lt;p&gt;itertools用于高效循环的迭代函数集合&lt;/p&gt;
&lt;h2 id="zu-cheng"&gt;组成&lt;/h2&gt;
&lt;p&gt;总体，整体了解&lt;/p&gt;
&lt;p&gt;无限迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器         参数         结果                                                例子
count()     start, [step]   start, start+step, start+2*step, ...                count(10) --&amp;gt; 10 11 12 13 14 ...
cycle()     p               p0, p1, ... plast, p0, p1, ...                      cycle('ABCD') --&amp;gt; A B C D A B C D ...
repeat()    elem [,n]       elem, elem, elem, ... endlessly or up to n times    repeat(10, 3) --&amp;gt; 10 10 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理输入序列迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器          参数            结果                                        例子
chain()     p, q, ...           p0, p1, ... plast, q0, q1, ...              chain('ABC', 'DEF') --&amp;gt; A B C D E F
compress()  data, selectors     (d[0] if s[0]), (d[1] if s[1]), ...         compress('ABCDEF', [1,0,1,0,1,1]) --&amp;gt; A C E F
dropwhile() pred, seq           seq[n], seq[n+1], starting when pred fails  dropwhile(lambda x: x&amp;lt;5, [1,4,6,4,1]) --&amp;gt; 6 4 1
groupby()   iterable[, keyfunc] sub-iterators grouped by value of keyfunc(v)
ifilter()   pred, seq           elements of seq where pred(elem) is True    ifilter(lambda x: x%2, range(10)) --&amp;gt; 1 3 5 7 9
ifilterfalse()  pred, seq       elements of seq where pred(elem) is False   ifilterfalse(lambda x: x%2, range(10)) --&amp;gt; 0 2 4 6 8
islice()    seq, [start,] stop [, step] elements from seq[start:stop:step]  islice('ABCDEFG', 2, None) --&amp;gt; C D E F G
imap()      func, p, q, ...     func(p0, q0), func(p1, q1), ...             imap(pow, (2,3,10), (5,2,3)) --&amp;gt; 32 9 1000
starmap()   func, seq           func(*seq[0]), func(*seq[1]), ...           starmap(pow, [(2,5), (3,2), (10,3)]) --&amp;gt; 32 9 1000
tee()       it, n               it1, it2 , ... itn splits one iterator into n
takewhile() pred, seq           seq[0], seq[1], until pred fails            takewhile(lambda x: x&amp;lt;5, [1,4,6,4,1]) --&amp;gt; 1 4
izip()      p, q, ...           (p[0], q[0]), (p[1], q[1]), ...             izip('ABCD', 'xy') --&amp;gt; Ax By
izip_longest()  p, q, ...       (p[0], q[0]), (p[1], q[1]), ...             izip_longest('ABCD', 'xy', fillvalue='-') --&amp;gt; Ax By C- D-
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组合生成器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器          参数                        结果
product()       p, q, ... [repeat=1]        cartesian product, equivalent to a nested for-loop
permutations()  p[, r]                      r-length tuples, all possible orderings, no repeated elements
combinations()  p, r                        r-length tuples, in sorted order, no repeated elements
combinations_with_replacement() p, r        r-length tuples, in sorted order, with repeated elements
product('ABCD', repeat=2)                   AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD
permutations('ABCD', 2)                     AB AC AD BA BC BD CA CB CD DA DB DC
combinations('ABCD', 2)                     AB AC AD BC BD CD
combinations_with_replacement('ABCD', 2)    AA AB AC AD BB BC BD CC CD DD
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-yi-bu-fen"&gt;第一部分&lt;/h2&gt;
&lt;h3 id="itertoolscountstart0-step1"&gt;itertools.count(start=0, step=1)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，生成从n开始的连续整数，如果忽略n，则从0开始计算（注意：此迭代器不支持长整数）&lt;/p&gt;
&lt;p&gt;如果超出了sys.maxint，计数器将溢出并继续从-sys.maxint-1开始计算。&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def count(start=0, step=1):
    # count(10) --&amp;gt; 10 11 12 13 14 ...
    # count(2.5, 0.5) -&amp;gt; 2.5 3.0 3.5 ...
    n = start
    while True:
        yield n
        n += step

等同于(start + step * i for i in count())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolscycleiterable"&gt;itertools.cycle(iterable)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，对iterable中的元素反复执行循环操作，内部会生成iterable中的元素的一个副本，此副本用于返回循环中的重复项。&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def cycle(iterable):
    # cycle('ABCD') --&amp;gt; A B C D A B C D A B C D ...
    saved = []
    for element in iterable:
        yield element
        saved.append(element)
    while saved:
        for element in saved:
            yield element
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsrepeatobject-times"&gt;itertools.repeat(object[, times])&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，重复生成object，times（如果已提供）指定重复计数，如果未提供times，将无止尽返回该对象。&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def repeat(object, times=None):
    # repeat(10, 3) --&amp;gt; 10 10 10
    if times is None:
        while True:
            yield object
    else:
        for i in xrange(times):
            yield object
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'over-and-over'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;over&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;over&lt;/span&gt;
&lt;span class="n"&gt;over&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;over&lt;/span&gt;
&lt;span class="n"&gt;over&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;over&lt;/span&gt;
&lt;span class="n"&gt;over&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;over&lt;/span&gt;
&lt;span class="n"&gt;over&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;over&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-er-bu-fen_1"&gt;第二部分&lt;/h2&gt;
&lt;h3 id="itertoolschainiterables"&gt;itertools.chain(*iterables)&lt;/h3&gt;
&lt;p&gt;将多个迭代器作为参数, 但只返回单个迭代器, 它产生所有参数迭代器的内容, 就好像他们是来自于一个单一的序列.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def chain(*iterables):
    # chain('ABC', 'DEF') --&amp;gt; A B C D E F
    for it in iterables:
        for element in it:
            yield element
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;


&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flatmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flatmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'settings.py'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wsgi.py'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'app.py'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'index.html, '&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="s1"&gt;']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolscompressdata-selectors"&gt;itertools.compress(data, selectors)&lt;/h3&gt;
&lt;p&gt;提供一个选择列表，对原始数据进行筛选&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def compress(data, selectors):
    # compress('ABCDEF', [1,0,1,0,1,1]) --&amp;gt; A C E F
    return (d for d, s in izip(data, selectors) if s)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsdropwhilepredicate-iterable"&gt;itertools.dropwhile(predicate, iterable)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，只要函数predicate(item)为True，就丢弃iterable中的项，如果predicate返回False，就会生成iterable中的项和所有后续项。&lt;/p&gt;
&lt;p&gt;即：在条件为false之后的第一次, 返回迭代器中剩下来的项.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def dropwhile(predicate, iterable):
    # dropwhile(lambda x: x&amp;lt;5, [1,4,6,4,1]) --&amp;gt; 6 4 1
    iterable = iter(iterable)
    for x in iterable:
        if not predicate(x):
            yield x
            break
    for x in iterable:
        yield x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;should_drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Testing:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dropwhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;should_drop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Yielding:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsgroupbyiterable-key"&gt;itertools.groupby(iterable[, key])&lt;/h3&gt;
&lt;p&gt;返回一个产生按照key进行分组后的值集合的迭代器.&lt;/p&gt;
&lt;p&gt;如果iterable在多次连续迭代中生成了同一项，则会定义一个组，如果将此函数应用一个分类列表，那么分组将定义该列表中的所有唯一项，key（如果已提供）是一个函数，应用于每一项，如果此函数存在返回值，该值将用于后续项而不是该项本身进行比较，此函数返回的迭代器生成元素(key, group)，其中key是分组的键值，group是迭代器，生成组成该组的所有项。&lt;/p&gt;
&lt;p&gt;即：按照keyfunc函数对序列每个元素执行后的结果分组(每个分组是一个迭代器), 返回这些分组的迭代器&lt;/p&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AAAABBBCCDAABBB'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="nx"&gt;D&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AAAABBBCCD'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;AAAA&lt;/span&gt; &lt;span class="nx"&gt;BBB&lt;/span&gt; &lt;span class="nx"&gt;CC&lt;/span&gt; &lt;span class="nx"&gt;D&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;:
            &lt;span class="kt"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;x&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyfunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tgtkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;self.tgtkey&lt;/span&gt;:
            &lt;span class="kt"&gt;self.currvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Exit&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tgtkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_grouper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tgtkey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;_grouper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tgtkey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;tgtkey&lt;/span&gt;:
            &lt;span class="kt"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currvalue&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Exit&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;
&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;

&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}]),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}])]&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'aa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ab'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'abc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bcd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'abcde'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'aa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ab'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'abc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bcd'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'abcde'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一个例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;di&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsifilterpredicate-iterable"&gt;itertools.ifilter(predicate, iterable)&lt;/h3&gt;
&lt;p&gt;返回的是迭代器类似于针对列表的内置函数 filter() , 它只包括当测试函数返回true时的项. 它不同于 dropwhile()&lt;/p&gt;
&lt;p&gt;创建一个迭代器，仅生成iterable中predicate(item)为True的项，如果predicate为None，将返回iterable中所有计算为True的项&lt;/p&gt;
&lt;p&gt;对函数func执行返回真的元素的迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def ifilter(predicate, iterable):
    # ifilter(lambda x: x%2, range(10)) --&amp;gt; 1 3 5 7 9
    if predicate is None:
        predicate = bool
    for x in iterable:
        if predicate(x):
            yield x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Testing:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ifilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Yielding:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsifilterfalsepredicate-iterable"&gt;itertools.ifilterfalse(predicate, iterable)&lt;/h3&gt;
&lt;p&gt;和ifilter(函数相反 ， 返回一个包含那些测试函数返回false的项的迭代器)&lt;/p&gt;
&lt;p&gt;创建一个迭代器，仅生成iterable中predicate(item)为False的项，如果predicate为None，则返回iterable中所有计算为False的项
对函数func执行返回假的元素的迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def ifilterfalse(predicate, iterable):
    # ifilterfalse(lambda x: x%2, range(10)) --&amp;gt; 0 2 4 6 8
    if predicate is None:
        predicate = bool
    for x in iterable:
        if not predicate(x):
            yield x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Testing:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ifilterfalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Yielding:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsisliceiterable-stop"&gt;itertools.islice(iterable, stop)&lt;/h3&gt;
&lt;p&gt;itertools.islice(iterable, start, stop[, step])&lt;/p&gt;
&lt;p&gt;返回的迭代器是返回了输入迭代器根据索引来选取的项&lt;/p&gt;
&lt;p&gt;创建一个迭代器，生成项的方式类似于切片返回值： iterable[start : stop : step]，将跳过前start个项，迭代在stop所指定的位置停止，step指定用于跳过项的步幅。 
与切片不同，负值不会用于任何start，stop和step， 
如果省略了start，迭代将从0开始，如果省略了step，步幅将采用1.&lt;/p&gt;
&lt;p&gt;返回序列seq的从start开始到stop结束的步长为step的元素的迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def islice(iterable, *args):
    # islice('ABCDEFG', 2) --&amp;gt; A B
    # islice('ABCDEFG', 2, 4) --&amp;gt; C D
    # islice('ABCDEFG', 2, None) --&amp;gt; C D E F G
    # islice('ABCDEFG', 0, None, 2) --&amp;gt; A C E G
    s = slice(*args)
    it = iter(xrange(s.start or 0, s.stop or sys.maxint, s.step or 1))
    nexti = next(it)
    for i, element in enumerate(iterable):
        if i == nexti:
            yield element
            nexti = next(it)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Stop at 5:'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Start at 5, Stop at 10:'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'By tens to 100:'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;By&lt;/span&gt; &lt;span class="n"&gt;tens&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="mi"&gt;70&lt;/span&gt;
&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;span class="mi"&gt;90&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsimapfunction-iterables"&gt;itertools.imap(function, *iterables)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，生成项function(i1, i2, ..., iN)，其中i1，i2...iN分别来自迭代器iter1，iter2 ... iterN，如果function为None，则返回(i1, i2, ..., iN)形式的元组，只要提供的一个迭代器不再生成值，迭代就会停止。&lt;/p&gt;
&lt;p&gt;即：返回一个迭代器, 它是调用了一个其值在输入迭代器上的函数, 返回结果. 它类似于内置函数 map() , 只是前者在任意输入迭代器结束后就停止(而不是插入None值来补全所有的输入).&lt;/p&gt;
&lt;p&gt;返回序列每个元素被func执行后返回值的序列的迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def imap(function, *iterables):
    # imap(pow, (2,3,10), (5,2,3)) --&amp;gt; 32 9 1000
    iterables = map(iter, iterables)
    while True:
        args = [next(it) for it in iterables]
        if function is None:
            yield tuple(args)
        else:
            yield function(*args)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Doubles:'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Multiples:'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;imap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; * &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;Doubles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;Multiples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsstarmapfunction-iterable"&gt;itertools.starmap(function, iterable)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，生成值func(*item),其中item来自iterable，只有当iterable生成的项适用于这种调用函数的方式时，此函数才有效。&lt;/p&gt;
&lt;p&gt;对序列seq的每个元素作为func的参数列表执行, 返回执行结果的迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def starmap(function, iterable):
    # starmap(pow, [(2,5), (3,2), (10,3)]) --&amp;gt; 32 9 1000
    for args in iterable:
        yield function(*args)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;starmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; * &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsteeiterable-n2"&gt;itertools.tee(iterable[, n=2])&lt;/h3&gt;
&lt;p&gt;返回一些基于单个原始输入的独立迭代器(默认为2). 它和Unix上的tee工具有点语义相似, 也就是说它们都重复读取输入设备中的值并将值写入到一个命名文件和标准输出中&lt;/p&gt;
&lt;p&gt;从iterable创建n个独立的迭代器，创建的迭代器以n元组的形式返回，n的默认值为2，此函数适用于任何可迭代的对象，但是，为了克隆原始迭代器，生成的项会被缓存，并在所有新创建的迭代器中使用，一定要注意，不要在调用tee()之后使用原始迭代器iterable，否则缓存机制可能无法正确工作。&lt;/p&gt;
&lt;p&gt;把一个迭代器分为n个迭代器, 返回一个元组.默认是两个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tee(iterable, n=2):
    it = iter(iterable)
    deques = [collections.deque() for i in range(n)]
    def gen(mydeque):
        while True:
            if not mydeque:             # when the local deque is empty
                newval = next(it)       # fetch a new value and
                for d in deques:        # load it to all the deques
                    d.append(newval)
            yield mydeque.popleft()
    return tuple(gen(d) for d in deques)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'i1:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'i2:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolstakewhilepredicate-iterable"&gt;itertools.takewhile(predicate, iterable)&lt;/h3&gt;
&lt;p&gt;和dropwhile相反&lt;/p&gt;
&lt;p&gt;创建一个迭代器，生成iterable中predicate(item)为True的项，只要predicate计算为False，迭代就会立即停止。&lt;/p&gt;
&lt;p&gt;即：从序列的头开始, 直到执行函数func失败.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def takewhile(predicate, iterable):
    # takewhile(lambda x: x&amp;lt;5, [1,4,6,4,1]) --&amp;gt; 1 4
    for x in iterable:
        if predicate(x):
            yield x
        else:
            break
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;should_take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Testing:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;takewhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;should_take&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Yielding:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Yielding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsizipiterables"&gt;itertools.izip(*iterables)&lt;/h3&gt;
&lt;p&gt;返回一个合并了多个迭代器为一个元组的迭代器. 它类似于内置函数zip(), 只是它返回的是一个迭代器而不是一个列表&lt;/p&gt;
&lt;p&gt;创建一个迭代器，生成元组(i1, i2, ... iN)，其中i1，i2 ... iN 分别来自迭代器iter1，iter2 ... iterN，只要提供的某个迭代器不再生成值，迭代就会停止，此函数生成的值与内置的zip()函数相同。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;izip(iter1, iter2, ... iterN):
返回:(it1[0],it2 [0], it3[0], ..), (it1[1], it2[1], it3[1], ..)...

def izip(*iterables):
    # izip('ABCD', 'xy') --&amp;gt; Ax By
    iterators = map(iter, iterables)
    while iterators:
        yield tuple(map(next, iterators))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolsizip_longestiterables-fillvalue"&gt;itertools.izip_longest(*iterables[, fillvalue])&lt;/h3&gt;
&lt;p&gt;与izip()相同，但是迭代过程会持续到所有输入迭代变量iter1,iter2等都耗尽为止，如果没有使用fillvalue关键字参数指定不同的值，则使用None来填充已经使用的迭代变量的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ZipExhausted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;pass&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;izip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;izip_longest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ABCD'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'xy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fillvalue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Ax&lt;/span&gt; &lt;span class="nx"&gt;By&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;
    &lt;span class="nx"&gt;fillvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fillvalue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;sentinel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;ZipExhausted&lt;/span&gt;
        &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nx"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;fillvalue&lt;/span&gt;
    &lt;span class="nx"&gt;fillers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fillvalue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;iterators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sentinel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;fillers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;iterators&lt;/span&gt;:
            &lt;span class="kt"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;iterators&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;ZipExhausted&lt;/span&gt;:
        &lt;span class="kt"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-san-bu-fen_1"&gt;第三部分&lt;/h2&gt;
&lt;h3 id="itertoolsproductiterables-repeat"&gt;itertools.product(*iterables[, repeat])&lt;/h3&gt;
&lt;p&gt;笛卡尔积&lt;/p&gt;
&lt;p&gt;创建一个迭代器，生成表示item1，item2等中的项目的笛卡尔积的元组，repeat是一个关键字参数，指定重复生成序列的次数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def product(*args, **kwds):
    # product('ABCD', 'xy') --&amp;gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&amp;gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolspermutationsiterable-r"&gt;itertools.permutations(iterable[, r])&lt;/h3&gt;
&lt;p&gt;排列&lt;/p&gt;
&lt;p&gt;创建一个迭代器，返回iterable中所有长度为r的项目序列，如果省略了r，那么序列的长度与iterable中的项目数量相同：
返回p中任意取r个元素做排列的元组的迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&amp;gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&amp;gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &amp;gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
也可以用product实现

def permutations(iterable, r=None):
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    for indices in product(range(n), repeat=r):
        if len(set(indices)) == r:
            yield tuple(pool[i] for i in indices)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolscombinationsiterable-r"&gt;itertools.combinations(iterable, r)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (不带重复)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def combinations(iterable, r):
    # combinations('ABCD', 2) --&amp;gt; AB AC AD BC BD CD
    # combinations(range(4), 3) --&amp;gt; 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r &amp;gt; n:
        return
    indices = range(r)
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)

#或者
def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    for indices in permutations(range(n), r):
        if sorted(indices) == list(indices):
            yield tuple(pool[i] for i in indices)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="itertoolscombinations_with_replacementiterable-r"&gt;itertools.combinations_with_replacement(iterable, r)&lt;/h3&gt;
&lt;p&gt;创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (带重复)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def combinations_with_replacement(iterable, r):
    # combinations_with_replacement('ABC', 2) --&amp;gt; AA AB AC BB BC CC
    pool = tuple(iterable)
    n = len(pool)
    if not n and r:
        return
    indices = [0] * r
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != n - 1:
                break
        else:
            return
        indices[i:] = [indices[i] + 1] * (r - i)
        yield tuple(pool[i] for i in indices)
或者
def combinations_with_replacement(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    for indices in product(range(n), repeat=r):
        if sorted(indices) == list(indices):
            yield tuple(pool[i] for i in indices)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-si-bu-fen_1"&gt;第四部分&lt;/h2&gt;
&lt;h3 id="kuo-zhan"&gt;扩展&lt;/h3&gt;
&lt;p&gt;使用现有扩展功能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))

def tabulate(function, start=0):
    "Return function(0), function(1), ..."
    return imap(function, count(start))

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)

def nth(iterable, n, default=None):
    "Returns the nth item or a default value"
    return next(islice(iterable, n, None), default)

def quantify(iterable, pred=bool):
    "Count how many times the predicate is true"
    return sum(imap(pred, iterable))

def padnone(iterable):
    """Returns the sequence elements and then returns None indefinitely.

    Useful for emulating the behavior of the built-in map() function.
    """
    return chain(iterable, repeat(None))

def ncycles(iterable, n):
    "Returns the sequence elements n times"
    return chain.from_iterable(repeat(tuple(iterable), n))

def dotproduct(vec1, vec2):
    return sum(imap(operator.mul, vec1, vec2))

def flatten(listOfLists):
    "Flatten one level of nesting"
    return chain.from_iterable(listOfLists)

def repeatfunc(func, times=None, *args):
    """Repeat calls to func with specified arguments.

    Example:  repeatfunc(random.random)
    """
    if times is None:
        return starmap(func, repeat(args))
    return starmap(func, repeat(args, times))

def pairwise(iterable):
    "s -&amp;gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&amp;gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&amp;gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))

def powerset(iterable):
    "powerset([1,2,3]) --&amp;gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&amp;gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&amp;gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

def unique_justseen(iterable, key=None):
    "List unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') --&amp;gt; A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --&amp;gt; A B C A D
    return imap(next, imap(itemgetter(1), groupby(iterable, key)))

def iter_except(func, exception, first=None):
    """ Call a function repeatedly until an exception is raised.

    Converts a call-until-exception interface to an iterator interface.
    Like __builtin__.iter(func, sentinel) but uses an exception instead
    of a sentinel to end the loop.

    Examples:
        bsddbiter = iter_except(db.next, bsddb.error, db.first)
        heapiter = iter_except(functools.partial(heappop, h), IndexError)
        dictiter = iter_except(d.popitem, KeyError)
        dequeiter = iter_except(d.popleft, IndexError)
        queueiter = iter_except(q.get_nowait, Queue.Empty)
        setiter = iter_except(s.pop, KeyError)

    """
    try:
        if first is not None:
            yield first()
        while 1:
            yield func()
    except exception:
        pass

def random_product(*args, **kwds):
    "Random selection from itertools.product(*args, **kwds)"
    pools = map(tuple, args) * kwds.get('repeat', 1)
    return tuple(random.choice(pool) for pool in pools)

def random_permutation(iterable, r=None):
    "Random selection from itertools.permutations(iterable, r)"
    pool = tuple(iterable)
    r = len(pool) if r is None else r
    return tuple(random.sample(pool, r))

def random_combination(iterable, r):
    "Random selection from itertools.combinations(iterable, r)"
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.sample(xrange(n), r))
    return tuple(pool[i] for i in indices)

def random_combination_with_replacement(iterable, r):
    "Random selection from itertools.combinations_with_replacement(iterable, r)"
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.randrange(n) for i in xrange(r))
    return tuple(pool[i] for i in indices)

def tee_lookahead(t, i):
    """Inspect the i-th upcomping value from a tee object
    while leaving the tee object at its current position.

    Raise an IndexError if the underlying iterator doesn't
    have enough values.

    """
    for value in islice(t.__copy__(), i, None):
        return value
    raise IndexError(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-ding-yi-kuo-zhan"&gt;自定义扩展&lt;/h3&gt;
&lt;p&gt;将序列按大小切分,更好的性能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(),),&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bu-chong"&gt;补充&lt;/h3&gt;
&lt;p&gt;迭代工具，你最好的朋友&lt;/p&gt;
&lt;p&gt;迭代工具模块包含了操做指定的函数用于操作迭代器。想复制一个迭代器出来？链接两个迭代器？以one liner（这里的one-liner只需一行代码能搞定的任务)用内嵌的列表组合一组值？不使用list创建Map/Zip？···，你要做的就是 import itertools，举个例子吧：&lt;/p&gt;
&lt;p&gt;四匹马赛跑到达终点排名的所有可能性：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; horses = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; races = itertools.permutations(horses)
&amp;gt;&amp;gt;&amp;gt; print(races)
&amp;lt;itertools.permutations object at 0xb754f1dc]]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理解迭代的内部机制：
迭代(iteration）就是对可迭代对象（iterables，实现了__iter__()方法）和迭代器（iterators，实现了__next__()方法）的一个操作过程。可迭代对象是任何可返回一个迭代器的对象，迭代器是应用在迭代对象中迭代的对象，换一种方式说的话就是：iterable对象的__iter__()方法可以返回iterator对象，iterator通过调用next()方法获取其中的每一个值(译者注)，读者可以结合Java API中的 Iterable接口和Iterator接口进行类比。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-11-30&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-进阶-functools模块小结</title><link href="http://www.wklken.me/posts/2013/08/18/python-extra-functools.html" rel="alternate"></link><published>2013-08-18T00:00:00+08:00</published><updated>2013-08-18T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-18:/posts/2013/08/18/python-extra-functools.html</id><summary type="html">&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/functools.html"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="functoolspartial"&gt;functools.partial&lt;/h3&gt;
&lt;p&gt;作用:&lt;/p&gt;
&lt;p&gt;functools.partial 通过包装手法，允许我们 "重新定义" 函数签名&lt;/p&gt;
&lt;p&gt;用一些默认参数包装一个可调用对象,返回结果是可调用对象，并且可以像原始对象一样对待&lt;/p&gt;
&lt;p&gt;冻结部分函数位置函数或关键字参数，简化函数,更少更灵活的函数参数调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#args/keywords 调用partial时参数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#合并，调用原始函数，此时用了partial的参数&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;newfunc …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/functools.html"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="functoolspartial"&gt;functools.partial&lt;/h3&gt;
&lt;p&gt;作用:&lt;/p&gt;
&lt;p&gt;functools.partial 通过包装手法，允许我们 "重新定义" 函数签名&lt;/p&gt;
&lt;p&gt;用一些默认参数包装一个可调用对象,返回结果是可调用对象，并且可以像原始对象一样对待&lt;/p&gt;
&lt;p&gt;冻结部分函数位置函数或关键字参数，简化函数,更少更灵活的函数参数调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#args/keywords 调用partial时参数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#合并，调用原始函数，此时用了partial的参数&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newfunc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlunquote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlunquote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'latin1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当调用 urlunquote(&lt;em&gt;args, &lt;/em&gt;*kargs)&lt;/p&gt;
&lt;p&gt;相当于 urlunquote(&lt;em&gt;args, &lt;/em&gt;*kargs, encoding='latin1')&lt;/p&gt;
&lt;p&gt;E.g:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="n"&gt;plus3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plus5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plus3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;plus3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;plus5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用:&lt;/p&gt;
&lt;p&gt;典型的，函数在执行时，要带上所有必要的参数进行调用。&lt;/p&gt;
&lt;p&gt;然后，有时参数可以在函数被调用之前提前获知。&lt;/p&gt;
&lt;p&gt;这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。&lt;/p&gt;
&lt;h3 id="functoolupdate_wrapper"&gt;functool.update_wrapper&lt;/h3&gt;
&lt;p&gt;默认partial对象没有__name__和__doc__, 这种情况下，对于装饰器函数非常难以debug.使用update_wrapper(),从原始对象拷贝或加入现有partial对象&lt;/p&gt;
&lt;p&gt;它可以把被封装函数的__name__、&lt;strong&gt;module&lt;/strong&gt;、__doc__和 __dict__都复制到封装函数去(模块级别常量WRAPPER_ASSIGNMENTS, WRAPPER_UPDATES)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; functools.WRAPPER_ASSIGNMENTS
('__module__', '__name__', '__doc__')
&amp;gt;&amp;gt;&amp;gt; functools.WRAPPER_UPDATES
('__dict__',)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数主要用在装饰器函数中，装饰器返回函数反射得到的是包装函数的函数定义而不是原始函数定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""wrap func: call_it"""&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'before call'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call_it&lt;/span&gt;

&lt;span class="nd"&gt;@wrap&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""say hello"""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;update_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""wrap func: call_it2"""&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'before call'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@wrap2&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""test hello"""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world2'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;
    &lt;span class="n"&gt;hello2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hello2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hello2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;before call
hello world
call_it
wrap func: call_it

before call
hello world2
hello2
test hello
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="functoolwraps"&gt;functool.wraps&lt;/h3&gt;
&lt;p&gt;调用函数装饰器partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)的简写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""wrap func: call_it2"""&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'before call'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call_it&lt;/span&gt;

&lt;span class="nd"&gt;@wrap3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""test hello 3"""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world3'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;before call
hello world3
hello3
test hello 3
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="functoolsreduce"&gt;functools.reduce&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等同于内置函数reduce()&lt;/p&gt;
&lt;p&gt;用这个的原因是使代码更兼容(python3)&lt;/p&gt;
&lt;h3 id="functoolscmp_to_key"&gt;functools.cmp_to_key&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp_to_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将老式鼻尖函数转换成key函数，用在接受key函数的方法中(such as sorted(), min(), max(), heapq.nlargest(), heapq.nsmallest(), itertools.groupby())&lt;/p&gt;
&lt;p&gt;一个比较函数，接收两个参数，小于，返回负数，等于，返回0，大于返回整数&lt;/p&gt;
&lt;p&gt;key函数，接收一个参数，返回一个表明该参数在期望序列中的位置&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cmp_to_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strcoll&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# locale-aware sort order&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="functoolstotal_ordering"&gt;functools.total_ordering&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_ordering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个装饰器是在python2.7的时候加上的，它是针对某个类如果定义了__lt__、&lt;strong&gt;le&lt;/strong&gt;、&lt;strong&gt;gt&lt;/strong&gt;、__ge__这些方法中的至少一个，使用该装饰器，则会自动的把其他几个比较函数也实现在该类中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@total_ordering&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;['__doc__', '__eq__', '__ge__', '__gt__', '__le__', '__lt__', '__module__']
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category></entry><entry><title>[翻译]130+vim基本命令</title><link href="http://www.wklken.me/posts/2013/08/17/130-essential-vim-commands.html" rel="alternate"></link><published>2013-08-17T00:00:00+08:00</published><updated>2013-08-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-17:/posts/2013/08/17/130-essential-vim-commands.html</id><summary type="html">&lt;p&gt;文章  &lt;a href="http://www.catswhocode.com/blog/130-essential-vim-commands"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从八十年代起，vi和vim在程序员中十分流行.5年前，我写了《程序员必须知道的100个vim命令》，这是重写更新版本，希望你喜欢!&lt;/p&gt;
&lt;h3 id="ji-chu"&gt;基础&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e filename     在编辑器中打开一个文件
:w              保存文件
:q              退出vim
:q!             退出但不保存
:x              写文件(如果有做修改)并退出
:sav filename   保存为
.               在正常模式中重复执行上一个变更
5.              重复五次
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yi-dong"&gt;移动&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;k or Up Arrow   上移一行
j or Down Arrow 下移一行
e               移动到单词末尾
b               移动到单词开头
0               移动到行首
G               移动到文件末尾
gg              移动到文件开头 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;文章  &lt;a href="http://www.catswhocode.com/blog/130-essential-vim-commands"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从八十年代起，vi和vim在程序员中十分流行.5年前，我写了《程序员必须知道的100个vim命令》，这是重写更新版本，希望你喜欢!&lt;/p&gt;
&lt;h3 id="ji-chu"&gt;基础&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e filename     在编辑器中打开一个文件
:w              保存文件
:q              退出vim
:q!             退出但不保存
:x              写文件(如果有做修改)并退出
:sav filename   保存为
.               在正常模式中重复执行上一个变更
5.              重复五次
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yi-dong"&gt;移动&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;k or Up Arrow   上移一行
j or Down Arrow 下移一行
e               移动到单词末尾
b               移动到单词开头
0               移动到行首
G               移动到文件末尾
gg              移动到文件开头
L               移动到屏幕底
:59             移动到59行
20|             移动到第20列
%               移动到匹配的括号
[[              到函数头
[{              到块开始位置
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-qie-fu-zhi-he-nian-tie"&gt;剪切，复制和粘贴&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;y   拷贝选中部分到剪贴板
p   粘贴剪贴板中内容
dd  剪切当前行
yy  拷贝当前行
y$  拷贝到行尾
D   剪切到行尾
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sou-suo"&gt;搜索&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/word           从开头到结尾搜索单词word
?word           从结尾到卡头
*               搜索光标下单词
/\cstring       搜索string或STRING, 大小写不敏感
/jo[ha]n        搜索john 或 joan
/\&amp;lt; the         搜索以the开头的，the, theatre 或 then
/the\&amp;gt;          搜索以the结尾的，the 或 breathe
/\&amp;lt; the\&amp;gt;       搜索the
/\&amp;lt; ¦.\&amp;gt;        搜索所有含有四个字母的
/\/             搜索fred 但不是alfred 或 frederick
/fred\|joe      搜索fred 或 joe
/\&amp;lt;\d\d\d\d\&amp;gt;   搜索仅有四个数字的
/^\n\{3}        搜索连续3个空行的
:bufdo /searchstr/  在所有打开buf中搜索
bufdo %s/something/somethingelse/g  在所有打开buf中搜索并替换
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ti-huan"&gt;替换&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:%s/old/new/g           将所有出现的old替换为new
:%s/onward/forward/gi   将所有onward替换为forward，大小写不敏感
:%s/old/new/gc          替换前确认
:2,35s/old/new/g        将第2行到第35行之间的old替换为new
:5,$s/old/new/g         将第5行到文件结尾的old替换为new
:%s/^/hello/g           在每一行开头加入hello
:%s/$/Harry/g           在每一行结尾加入Harry
:%s/ *$//g              删除每行末尾无用空格
:g/string/d             删除所有包含string的行
:v/string/d             删除所有不包含string的行
:s/Bill/Steve/          替换当前行第一个Bill为Steve
:s/Bill/Steve/g         替换当前行中所有Bill
:%s/Bill/Steve/g        替换文件中所有Bill
:%s/^M//g               删掉DOS保存文件中(^M)
:%s/\r/\r/g             Transform DOS carriage returns in returns
:%s#&amp;lt;[^&amp;gt;]\+&amp;gt;##g         删除html标签但是保留文本
:%s/^\(.*\)\n\1$/\1/    删除所有连续出现过两次的行，保留一行
Ctrl+a                  递增光标下的数字
Ctrl+x                  递减光标下的数字
ggVGg?                  文本转换为 Rot13
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="da-xiao-xie"&gt;大小写&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Vu                  整行小写
VU                  整行大写
g~~                 整行大小写反转
vEU                 单词转为大写
vE~                 单词大小写反转
ggguG               所有文本小写
gggUG               所有文本大写
:set ignorecase     搜索中忽略大小写
:set smartcase      搜索中忽略大小写，除非搜索词中存在大小写字母
:%s/\&amp;lt;./\u&amp;amp;/g       将所有单词首字母大写
:%s/\&amp;lt;./\l&amp;amp;/g       将所有单词首字母小写
:%s/.*/\u&amp;amp;          将每行第一个字母大写
:%s/.*/\l&amp;amp;          将每行第一个字母小写
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="du-xie-wen-jian"&gt;读写文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:1,10 w outfile     1到10行内容写到outfile
:1,10 w &amp;gt;&amp;gt; outfile  1到10行内容追加到outfile
:r infile           插入文件内容
:23r infile         插入文件23行的内容
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-jian-liu-lan-qi"&gt;文件浏览器&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e .                打开完整文件浏览器
:Sex                切分窗口，打开文件浏览器
:Sex!               同上，垂直切分
:browse e           图像化文件浏览器
:ls                 列出buffers
:cd ..              移到上一层目录
:args               列出文件
:args *.php         打开文件列表
:grep expression *.php  返回包含expression的php文件列表
gf                  打开光标下文件名对应的文件
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="he-unixjiao-hu"&gt;和Unix交互&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:!pwd               执行pwd命令，返回结果
!!pwd               执行命令并插入结果到文件中
:sh                 临时返回unix
$exit               从unix中返回vim
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dui-qi"&gt;对齐&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:%!fmt              所有行对齐
!}fmt               当前位置所有行对齐
5!!fmt              后五行对齐
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tabshe-windows"&gt;Tabs和Windows&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:tabnew             创建一个新的tab
gt                  展示下一个tab
:tabfirst           展示第一个tab
:tablast            展示最后一个tag
:tabm n(position)   重排tab
:tabdo %s/foo/bar/g 在所有tab中执行一个命令
:tab ball           将所有打开文件放入tab中
:new abc.txt        在新window中编辑abc.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chuang-kou-fen-ping"&gt;窗口分屏&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e filename         在当前窗口中编辑文件
:split filename     切分当前窗口并打开文件(缩写 :sp filename)
ctrl-w up arrow     移到上一个文件
ctrl-w ctrl-w       移到下一个窗口
ctrl-w_             当前窗口垂直最大化
ctrl-w|             当前窗口水平最大化
ctrl-w=             所有窗口等大小
10 ctrl-w+          当前窗口增加10行
:vsplit file        竖直切分窗口
:sview file         同:split, 只读模式
:hide               关闭当前窗口
:­nly               关闭出了当前窗口之外的所有窗口
:b 2                打开2号窗口
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-dong-bu-quan"&gt;自动补全&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ctrl+n Ctrl+p (插入模式)  补全单词
Ctrl+x Ctrl+l           补全行
:set dictionary=dict    定义dict为dictionnary
Ctrl+x Ctrl+k           用字典中内容补全
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="biao-qian"&gt;标签&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m {a-z}                 在当前位置做标签{a-z}
' {a-z}                 移动到标签位置
''                      移动到上一个位置
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="suo-xie"&gt;缩写&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:ab mail mail@provider.org      定义mail 作为 mail@provider.org的缩写
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-ben-suo-jin"&gt;文本缩进&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set autoindent         打开自动缩进
:set smartindent        打开自动智能缩进
:set shiftwidth=4       缩进设为4个空格
ctrl-t, ctrl-d          插入模式中缩进/去缩进
&amp;gt;&amp;gt;                      缩进
&amp;lt;&amp;lt;                      去缩进
=%                      缩进括号中的代码
1GVG=                   缩进整个文件
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yu-fa-gao-liang"&gt;语法高亮&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:syntax on              打开语法高亮
:syntax off             关闭语法高亮
:set syntax=perl        强制语法高亮
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category></entry><entry><title>Mysql基础笔记</title><link href="http://www.wklken.me/posts/2013/08/11/mysql-base.html" rel="alternate"></link><published>2013-08-11T00:00:00+08:00</published><updated>2013-08-11T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-11:/posts/2013/08/11/mysql-base.html</id><summary type="html">&lt;p&gt;update: 2013-08-11, 笔记录了一半不到，还没码完....&amp;gt;&amp;lt;
update: 2013-11-23, DONE&lt;/p&gt;
&lt;p&gt;mysql速查&lt;/p&gt;
&lt;p&gt;参考： Mysql必知必会,网络blog, stackoverflow&lt;/p&gt;
&lt;p&gt;注； 基础部分sql参考 《mysql必知必会》, 还不错的一本书，菜鸟入门级，需要的话可以入手&lt;/p&gt;
&lt;p&gt;在浏览器中使用查找&lt;/p&gt;
&lt;p&gt;寻找一个好的mysql开源gui工具&lt;/p&gt;
&lt;h2 id="huan-jing-pei-zhi"&gt;环境配置&lt;/h2&gt;
&lt;p&gt;ubuntu安装mysql&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server mysql-client
netstat -nltp | grep mysql
配置文件 /etc/mysql/my.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;数据库基础：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InnoDB是一个可靠地事务处理引擎，不支持全文本搜索
MyISAM是一个性能极高的引擎，支持全文本搜索，不支持事务处理
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据库-database&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;保存有组织的数据的容器（通常是一个文件或一组文件）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表-table&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;某种特定类型数据的结构化清单
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式-schema&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;关于数据库和表的布局及特性的信息 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;update: 2013-08-11, 笔记录了一半不到，还没码完....&amp;gt;&amp;lt;
update: 2013-11-23, DONE&lt;/p&gt;
&lt;p&gt;mysql速查&lt;/p&gt;
&lt;p&gt;参考： Mysql必知必会,网络blog, stackoverflow&lt;/p&gt;
&lt;p&gt;注； 基础部分sql参考 《mysql必知必会》, 还不错的一本书，菜鸟入门级，需要的话可以入手&lt;/p&gt;
&lt;p&gt;在浏览器中使用查找&lt;/p&gt;
&lt;p&gt;寻找一个好的mysql开源gui工具&lt;/p&gt;
&lt;h2 id="huan-jing-pei-zhi"&gt;环境配置&lt;/h2&gt;
&lt;p&gt;ubuntu安装mysql&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server mysql-client
netstat -nltp | grep mysql
配置文件 /etc/mysql/my.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;数据库基础：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InnoDB是一个可靠地事务处理引擎，不支持全文本搜索
MyISAM是一个性能极高的引擎，支持全文本搜索，不支持事务处理
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据库-database&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;保存有组织的数据的容器（通常是一个文件或一组文件）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表-table&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;某种特定类型数据的结构化清单
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式-schema&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;关于数据库和表的布局及特性的信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列-column&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;表中的一个字段，所有表都是由一个或多个列组成的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据类型-datatype&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行-row&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;表中的一个记录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主键-primary key&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;一列或一组列，其值能够唯一区分表中的每个行
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mysqlming-ling-xing"&gt;mysql命令行&lt;/h2&gt;
&lt;h3 id="jin-ru"&gt;进入&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;输入： mysql
或者   mysql -u ken
       mysql -u ken -p -h myserver -P 9999 【给出用户名，主机名，端口】

获取帮助: mysql --help
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令格式和说明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.命令必须；或\g结束，仅Enter不执行明林
2.help 或\h获得帮助
3.quit或exit退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用GUI工具&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MySQL Administrator
MySQL Query Browser
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="use"&gt;use&lt;/h3&gt;
&lt;p&gt;创建库:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE DATABASE MYSQLDATA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用某个库&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;use db_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="show"&gt;show&lt;/h3&gt;
&lt;p&gt;查看所有数据库&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;show databases;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出库中所有表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;use db_name;
show tables;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出表的所有列信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;show columns from table_name;
or
desc table_name;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示创建的sql语句&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;show create database db_name;
show create table table_name;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;show status  服务器状态信息
show grants  显示授权用户
show errors/show warnings 显示服务器错误或警告信息
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cha-xun_1"&gt;查询&lt;/h2&gt;
&lt;p&gt;SELECT子句顺序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY
LIMIT
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="select"&gt;select&lt;/h3&gt;
&lt;p&gt;检索单个列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col FROM tb_name;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多个列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1, col2
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检索所有列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT *
 FROM tb_name;
#除非确认要用到所有列
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检索去重&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT DISTINCT col
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限制结果数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 LIMIT 5;
返回不多于五行

&amp;gt;SELECT col1
 FROM tb_name
 LIMIT 5, 5
 第一个为开始位置，初始为0.第二个为显示个数
等价于LIMIT 5 OFFSET 5
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="order-by"&gt;order by&lt;/h3&gt;
&lt;p&gt;按某个字段排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 ORDER BY col1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按多列排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1, col2, col3
 FROM tb_name
 ORDER BY col1, col2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定排序方向（升序降序）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1, col2
 FROM tb_name
 ORDER BY col1 DESC;【默认ASC】
注意：如果想在多个列上排序，必须对每个列使用DESC
注意：ORDER BY必须放在LIMIT之前
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="where"&gt;where&lt;/h3&gt;
&lt;p&gt;过滤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1, col2
 FROM tb_name
 WHERE col1 = 2.5;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;过滤不匹配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1, col2
 FROM tb_name
 WHERE col1 &amp;lt;&amp;gt; 1000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;范围检查&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1, col2
 FROM tb_name
 WHERE col1 BETWEEN 5 AND 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;空值检查&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col2 IS NULL
NULL, 无值，它与字段包含0，空字符串或仅仅包含空格不同
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多条件，组合and&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1=100 AND col2 &amp;lt;= 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多条件, 组合or&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1=100 OR col2 &amp;lt;= 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优先级 and 大于 or, 先处理的and,所以应该适当使用括号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select prod_id from products where (prod_price &amp;lt; 2.5 or vend_id = 1000) and prod_price &amp;gt; 1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定查询范围, in操作符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1 IN (1001,1002)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取反，not操作符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1 NOT IN (1001,1002)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=
&amp;lt;&amp;gt;
!=
&amp;lt;
&amp;lt;=
&amp;gt;
&amp;gt;=
between A and B
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="like"&gt;like&lt;/h3&gt;
&lt;p&gt;通配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1 LIKE ‘jet%’

%匹配0个或多个字符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单个字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1 LIKE ‘_ ton anvil’
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu-ju-guo-lu-regexp"&gt;数据过滤regexp&lt;/h3&gt;
&lt;p&gt;正则搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
FROM tb_name
WHERE col1 REGEXP ‘1000’

REGEXP ‘.000’
REGEXP对列值匹配
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行or匹配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1 REGEXP ‘1000|2000’
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几个之一&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select prod_id from products where prod_name regexp '[1|2]000';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匹配范围&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select prod_id from products where prod_name regexp '[1-5]000';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匹配特殊字符，\ 进行转义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;必须使用\\为前导。 \\-
&amp;gt;SELECT col1
 FROM tb_name
 WHERE col1 REGEXP ‘\\.’
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;like和 regexp&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;like整列匹配
regexp 列值内匹配
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="concat"&gt;concat&lt;/h3&gt;
&lt;p&gt;拼接字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT Concat(name, ‘ ----‘, age)
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;去除空白&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT Rtrim(name)
 FROM tb_name

Ltrim() Trim()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用列名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT Concat(name, ‘---‘, age) AS info
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算术计算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT quantity * item_price AS total_price
 FROM tb_name

支持+ - * /
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-ben-han-shu"&gt;文本函数&lt;/h3&gt;
&lt;p&gt;文本处理函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;left()  串左边字符
length() 串长度
locate() 找出串的一个子串
lower() 转为小写
ltrim() 去掉左边空格
right() 返回串右边字符
rtrim() 去掉串右边空格
soundex() 返回字符串soundex值
upper() 大写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;eg&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT Upper(name)
FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ri-qi-han-shu"&gt;日期函数&lt;/h3&gt;
&lt;p&gt;日期和时间处理函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adddate() 增加一个日期-天或周
addtime() 增加一个时间
curdate() 返回当前日期
curtime() 返回当前时间
date() 返回日期时间的日期部分
datediff() 计算两个日期差
date_add() 高度灵活的日期运算函数
date_format() 返回一个格式化的日期或时间串
day() 返回一个日期的天数部分
dayofweek() 对于一个日期，返回对应的星期几
hour()
minute()
month()
now() 当前日期和时间
second()
time() 当前日期时间的时间部分
year()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;eg&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT col1
 FROM tb_name
 WHERE Date(order_date) = ‘2005-09-01’
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用日期和时间函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Date()返回日期时间的日期部分
Day()返回日期的天数部分
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu-zhi-han-shu"&gt;数值函数&lt;/h3&gt;
&lt;p&gt;数值处理函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abs()
cos()
exp() 指数
mod()
pi() 返回圆周率
rand() 随机数
sin()
sqrt()
tan()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ju-ji-han-shu"&gt;聚集函数&lt;/h3&gt;
&lt;p&gt;avg 平均&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT AVG(price) AS avg_price
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;count 计数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select count(*) from products; #无论Null还是非空，均纳入计数
select count(prod_id) from products; #计数有值记录，忽略NULL值
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;max 最大&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT MAX(price) AS max_price
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;min 最小&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT MIN(price) AS min_price
 FROM tb_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sum 求和&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT SUM(quantity) AS total
 FROM tb_name
#sum函数忽略值为NULL的行
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="group"&gt;group&lt;/h3&gt;
&lt;p&gt;group&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT id, COUNT(*) AS num_prods
 FROM tb_name
 GROUP BY id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.group by 可以包含任意数目的列
2.group by 中每个列都必须是检索列或有效的表达式（但不能使聚集函数）
3.除聚集函数外，select语句中的每个列都必须在group by子句中出现
4.如果分组列有Null值，Null将作为一个分组返回
5.group by 子句必须出现在where子句之后, order by 之前
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;过滤分组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT cust_id, COUNT(*) AS orders
 FROM orders
 GROUP BY cust_id
 HAVING COUNT(*) &amp;gt; 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where和having区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;where在分组前过滤，having在分组后过滤
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-cha-xun"&gt;子查询&lt;/h3&gt;
&lt;p&gt;1.用于过滤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT cust_id
 FROM orders
 WHERE order_num IN (SELECT order_num
                    FROM orderitems)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.作为字段&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT cust_name,
       cust_state,
       (SELECT COUNT(*)
        FROM orders
        WHERE orders.cust_id = customers.cust_id) AS orders
 FROM customers
 ORDER BY cust_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lian-jie-biao"&gt;联结表&lt;/h3&gt;
&lt;p&gt;1.创建联结&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT vend_name, prod_name, prod_price
 FROM vendors, products
 WHERE vendors.vend_id = products.vend_id
 ORDER BY vend_name, prod_name;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可进行联结多个表&lt;/p&gt;
&lt;p&gt;2.内部联结&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT vend_name,prod_name,prod_price
 FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gao-ji-lian-jie-biao"&gt;高级联结表&lt;/h3&gt;
&lt;p&gt;1.自联结&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT prod_id, prod_name
 FROM products
 WHERE vend_id = (SELECT vend_id FROM products
                WHERE prod_id = ‘DTNTR’)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT p1.prod_id, p1.prod_name
 FROM products AS p1, products AS p2
 WHERE p1.vend_id = p2.vend_id
        AND p2.prod_id = ‘DTNTR’
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.外部联结&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT customers.cust_id, orders.order_num
 FROM customers LEFT OUTER JOIN orders
      ON customers.cust_id = orders.cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zu-he-cha-xun"&gt;组合查询&lt;/h3&gt;
&lt;p&gt;1.UNION&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT vend_id, prod_id, prod_price
 FROM products
 WHERE prod_price &amp;lt;=5
 UNION
 SELECT vend_id, prod_id, prod_price
 FROM products
 WHERE vend_id IN (1001,1002)

UNION自动去除重复行
UNION ALL 保留
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.放在UNION后的排序语句&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;对所有SELECT生效
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="quan-wen-ben-sou-suo"&gt;全文本搜索&lt;/h3&gt;
&lt;p&gt;MyISAM 支持全文本搜索&lt;/p&gt;
&lt;p&gt;InnoDB不支持全文本搜索&lt;/p&gt;
&lt;p&gt;1.启用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE TABLE productnotes(
 note_id int NOT NULL AUT_INCREMENT,
 note_text text NULL,
 FULLTEXT(note_text)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.进行全文本搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT note_text
 FROM tb_name
 WHERE Match(note_text) Against(‘rabbit’)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.布尔文本搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT note_text
 FROM productontes
 WHERE Match(note_text) Against(‘heavy’ IN BOOLEAN MODE)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cha-ru-shu-ju_1"&gt;插入数据&lt;/h2&gt;
&lt;p&gt;1.基本插入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INSERT INTO customers(cust_name,
                     cust_address)
 VALUES(‘Pep’, ‘100 main street’)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.插入多行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INSERT INTO customers(cust_name,
                     cust_address)
 VALUES(‘Pep’, ‘100 main street’),
       (‘Tim’, ‘200 main Street’);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.插入检索出来的数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;INSERT INTO customers(cust_name,
                     cust_address)
 SELECT cust_name, custaddress
 FROM custnew;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="geng-xin"&gt;更新&lt;/h2&gt;
&lt;p&gt;1.更新行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;UPDATE customers
 SET cust_email = ‘a@fudd.com’
 WHERE cust_id = 10005
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.即使发生错误也继续进行而不是退出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;UPDATE IGNORE customers
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shan-chu"&gt;删除&lt;/h2&gt;
&lt;p&gt;1.删除数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DELETE FROM customers
 WHERE cust_id = 10006
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="biao-cao-zuo"&gt;表操作&lt;/h2&gt;
&lt;p&gt;1.创建表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE TABLE customers(
   cust_id int NOT NULL AUTO_INCREMENT,
   cust_name char(50) NOT NULL,
   vend_city char(50) NULL,
   quantity int NOT NULL DEFAULT 1,
   PRIMARY KEY(cust_id)
)ENGINE=InnoDB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.更新表&lt;/p&gt;
&lt;p&gt;加字段&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ALTER TABLE vendors
 ADD vend_phone CHAR(20)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除某个字段&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ALTER TABLE tb1 DROP COLUMN names;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变列类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ALTER TABLE infos CHANGE list list tinyint NOT NULL DEFAULT '0'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加主键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ALTER TABLE tb1 ADD primary key(id)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除一个字段&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;ALTER TABLE tb1 DROP field_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加自增长主键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alter table customers change id id not null auto_increment primary key;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加新字段并设置为主键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Alter TABLE tablename ADD new_field_id int(5) default 0 not null auto_increment ADD primary key(new_field_id)

ALTER TABLE example ADD ID INT NOT NULL;
ALTER TABLE example ADD UNIQUE(url)

&amp;gt;ALTER TABLE vendors
 DROP COLUMN vend_phone
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;alter table syntax:
http://dev.mysql.com/doc/refman/5.1/en/alter-table.html&lt;/p&gt;
&lt;p&gt;3.删除表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DROP TABLE customers2;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.清空表数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DELETE FROM mytable;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.重命名表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;RENAME TABLE customers2 TO customers;
 ALTER TABLE 'oldname' RENAME TO 'newname'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-tu-cao-zuo"&gt;视图操作&lt;/h2&gt;
&lt;p&gt;1.创建视图&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE VIEW productcustomers AS
 SELECT cust_name, cust_contact
 FROM customers, orders, orderitems
 WHERE customers.cust_id = orders.cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.使用视图&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SELECT cust_name, cust_contact
 FROM productcustomers
 WHERE prod_id = ‘TNT2’
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cun-chu-guo-cheng"&gt;存储过程&lt;/h2&gt;
&lt;p&gt;1.创建简单存储过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE PROCEDURE productpricing()
 BEGIN
SELECT Avg(price) AS priceavg
FROM products;
 END;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用:CALL productpricing()&lt;/p&gt;
&lt;p&gt;2.删除存储过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DROP PROCEDURE productpricing
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.使用参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE PROCEDURE ordertotal(
IN onumber INT,
OUT ototal DECIMAL(8,2)
)
BEGIN
SELECT Sum(item_price*quality)
FROM orderitems
WHERE order_num = onumber
INTO ototal;
END;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CALL ordertotal(200005, @total;
&amp;gt;SELECT @total;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.检查存储过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SHOW CREATE PROCEDURE ordertotal;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="you-biao"&gt;游标&lt;/h2&gt;
&lt;p&gt;1.创建游标&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE PROCEDURE processorders()
 BEGIN
DECLARE ordernumbers CURSOR
FOR
SELECT order_number FROM orders;

BEGIN ordernumbers;

FETCH ordernumbers INTO o;

CLOSE ordernumbers;
 END;

DECLARE CONTINUE HANDLER FOR SQLSTATE ‘02000’ SET done=1;
REPEAT
    FETCH ordernumbers INTO o;
END;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="hong-fa-qi"&gt;触发器&lt;/h2&gt;
&lt;p&gt;1.创建触发器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE TRIGGER newproduct AFTER INSERT ON products
 FOR EACH ROW SELECT ‘Product added’
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.删除触发器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;DROP TRIGGER newproduct;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.INSERT触发器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE TRIGGER neworder AFTER INSERT ON orders
 FOR EACH ROW SELECT NEW.order_num
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.DELETE触发器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE TRIGGER deleteorder BEFORE DELETE ON orders
 FOR EACH ROW
 BEGIN
INSERT INTO archive_orders(order_num, order_date, cust_id)
VALUES(OLD.order_num, OLD.order_date, OLD.cust_id);
 END;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.UPDATE触发器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors
 FOR EACH ROW SET NEW.vend_state = Upper(NEW.vend_state);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-wu"&gt;事务&lt;/h2&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ACID
A,原子性，食物是一个原子操作单元，其对数据的修改，要么全执行，要么全不执行
C.一致性，事务开始和完成的时候，数据必须都保持一致状态（所有相关数据规则和内部数据结构）
I.隔离性，保证事务不受外部并发操作影响，即事务处理中间过程状态对外不可见
D.持久性，事务完成后，对数据修改时永久性的，及时出现系统故障也能够保持
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.事务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;START TRANSACTION
 DELETE FROM ordertotals;
 SELECT * FROM ordertotals;

&amp;gt;ROLLBACK
回退

&amp;gt;COMMIT
提交
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.设立保留点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;SAVEPOINT delete1;

&amp;gt;ROLLBACK TO delete1;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dao-ru-dao-chu"&gt;导入导出&lt;/h2&gt;
&lt;p&gt;1.导入&lt;/p&gt;
&lt;p&gt;用文本形式插入数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;LOAD&lt;/span&gt; &lt;span class="nt"&gt;DATA&lt;/span&gt; &lt;span class="nt"&gt;LOCAL&lt;/span&gt; &lt;span class="nt"&gt;INFILE&lt;/span&gt; &lt;span class="s1"&gt;'d:/mysql.txt'&lt;/span&gt; &lt;span class="nt"&gt;INTO&lt;/span&gt; &lt;span class="nt"&gt;TABLE&lt;/span&gt; &lt;span class="nt"&gt;mytable&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入.sql&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;use database;
&amp;gt;source d:/mysql.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从另外一张表往这张表插入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO tab1(f1,f2)
SELECT a.f1, a.f2
FROM a WHERE a.f1='a'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.备份&lt;/p&gt;
&lt;p&gt;导出要用到MySQL的mysqldump工具，基本用法是：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump [OPTIONS] database [tables]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份MySQL数据库的命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -hhostname -uusername -ppassword databasename &amp;gt; backupfile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -–add-drop-table -uusername -ppassword databasename &amp;gt; backupfile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接将MySQL数据库压缩备份&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -hhostname -uusername -ppassword databasename | gzip &amp;gt; backupfile.sql.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份MySQL数据库某个(些)表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -hhostname -uusername -ppassword databasename specific_table1 specific_table2 &amp;gt; backupfile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时备份多个MySQL数据库&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -hhostname -uusername -ppassword –databases databasename1 databasename2 databasename3 &amp;gt; multibackupfile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;仅仅备份数据库结构&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump –no-data –databases databasename1 databasename2 databasename3 &amp;gt; structurebackupfile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份服务器上所有数据库&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump –all-databases &amp;gt; allbackupfile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还原&lt;/p&gt;
&lt;p&gt;还原MySQL数据库的命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -hhostname -uusername -ppassword databasename &amp;lt; backupfile.sql
mysql -hhostname -ppassword databasename tablename &amp;lt; backuptablefile.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还原压缩的MySQL数据库&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunzip &amp;lt; backupfile.sql.gz | mysql -uusername -ppassword databasename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将数据库转移到新服务器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -uusername -ppassword databasename | mysql –host=*.*.*.* -C databasename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将查询结果导入外部文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT a,b,a+b 
FROM test_table
INTO OUTFILE '/tmp/result.txt'
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'

或者

mysql -u you -p -e "SELECT ..." &amp;gt;  file_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="xing-neng-yan-jiu"&gt;性能研究&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.什么情况下无法使用索引？
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-shi-jian-kong"&gt;实时监控&lt;/h2&gt;
&lt;p&gt;查看mysql数据库的当前连接数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令： show processlist;
或者 # mysqladmin -uroot -p密码 processlist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当前状态&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令： show status;
或者 # mysqladmin -uroot -p密码 status
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="mysql"></category></entry><entry><title>[翻译]vim入门指南</title><link href="http://www.wklken.me/posts/2013/08/04/translation-vim-introduction-and-tutorial.html" rel="alternate"></link><published>2013-08-04T00:00:00+08:00</published><updated>2013-08-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-04:/posts/2013/08/04/translation-vim-introduction-and-tutorial.html</id><summary type="html">&lt;p&gt;今天稍微整理了下vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文链接 &lt;a href="http://blog.interlinked.org/tutorials/vim_tutorial.html"&gt;Vim Introduction and Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜了下没发现中文版,顺手翻译下, 建议读原版&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="vimjian-jie-ji-ru-men-zhi-nan"&gt;vim简介及入门指南&lt;/h1&gt;
&lt;p&gt;我经常试图去学习Emac编辑器/IDE/OS. 我最后一次尝试时，我花了一些时间去适应，直到我想去配置一个自己的.emacs文件&lt;/p&gt;
&lt;p&gt;在我用vi打开.emacs文件那一刻，我意识到我做了什么，vim早已经赢得了我的青睐.&lt;/p&gt;
&lt;p&gt;所以，我将vim作为我的首选编辑器[注1]&lt;/p&gt;
&lt;p&gt;另一个动机是，我发现我最喜欢的shell(&lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;)有很酷的 vi-mode 包含命令模式(使得，你可以在命令和插入模式之间切换)&lt;/p&gt;
&lt;p&gt;Vim有一系列给力的特性，并且学习它们需要花费一些时间.当然，现在有很多在线指南和技巧文章，但是帮助文档同样很优秀！有概览页面，总结页面和一些注释&lt;/p&gt;
&lt;p&gt;我开始使用官网的指南和帮助系统学习(输入 :help &lt;command&gt; 可以从命令模式获取帮助)， 我喜欢在测试文件中测试命令，并且对重要的命令写下简短的说明&lt;/command&gt;&lt;/p&gt;
&lt;p&gt;另一个我使用Vim的原因是，使用Vim比Emacs更加健康(使用默认键映射).健康 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天稍微整理了下vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文链接 &lt;a href="http://blog.interlinked.org/tutorials/vim_tutorial.html"&gt;Vim Introduction and Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜了下没发现中文版,顺手翻译下, 建议读原版&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="vimjian-jie-ji-ru-men-zhi-nan"&gt;vim简介及入门指南&lt;/h1&gt;
&lt;p&gt;我经常试图去学习Emac编辑器/IDE/OS. 我最后一次尝试时，我花了一些时间去适应，直到我想去配置一个自己的.emacs文件&lt;/p&gt;
&lt;p&gt;在我用vi打开.emacs文件那一刻，我意识到我做了什么，vim早已经赢得了我的青睐.&lt;/p&gt;
&lt;p&gt;所以，我将vim作为我的首选编辑器[注1]&lt;/p&gt;
&lt;p&gt;另一个动机是，我发现我最喜欢的shell(&lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;)有很酷的 vi-mode 包含命令模式(使得，你可以在命令和插入模式之间切换)&lt;/p&gt;
&lt;p&gt;Vim有一系列给力的特性，并且学习它们需要花费一些时间.当然，现在有很多在线指南和技巧文章，但是帮助文档同样很优秀！有概览页面，总结页面和一些注释&lt;/p&gt;
&lt;p&gt;我开始使用官网的指南和帮助系统学习(输入 :help &lt;command&gt; 可以从命令模式获取帮助)， 我喜欢在测试文件中测试命令，并且对重要的命令写下简短的说明&lt;/command&gt;&lt;/p&gt;
&lt;p&gt;另一个我使用Vim的原因是，使用Vim比Emacs更加健康(使用默认键映射).健康?很多命令可以简单地通过一次敲击完成 - 模式编辑器的优点，不需要使用由很多修改关键字组成的长命令串.即使你有一个正常的键盘，敲击Ctrl，Alt等键很显然不是那么正常&lt;/p&gt;
&lt;p&gt;只需要记住:Vim的命令都非常简单，但是简单命令组合起来将变得十分强大&lt;/p&gt;
&lt;h2 id="mo-shi"&gt;模式&lt;/h2&gt;
&lt;p&gt;Vim有3种模式：&lt;/p&gt;
&lt;p&gt;1.命令行模式：所有键盘输入都是命令&lt;/p&gt;
&lt;p&gt;2.插入模式:大部分键盘输入作为文本插入(出了少部分特殊键)&lt;/p&gt;
&lt;p&gt;3.可视模式：用于帮助选中文本，可以看做是命令行模式的子模式&lt;/p&gt;
&lt;p&gt;&lt;img alt="模式转换图" src="https://github.com/wklken/gallery/blob/master/vim/vim-modes.png?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;从插入模式或可视模式切换到命令模式,按&lt;esc&gt;&lt;/esc&gt;&lt;/p&gt;
&lt;p&gt;从命令模式切换到插入模式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* i  在当前位置之前插入
* a  在当前位置之后插入(追加)
* I  调到当前行第一个非空白字符之前插入
* A  调到当前行最后一个字符之后插入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从命令模式到可视模式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* v  切换到可视模式(字符级别)
* V  切换到可视模式(行级别)
* ctrl-v  切换到块可视模式(块级别的)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有操作，比如替换，删除，拷贝或排版，在可视模式下同样适用&lt;/p&gt;
&lt;h2 id="yi-dong"&gt;移动&lt;/h2&gt;
&lt;p&gt;简单的移动命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* h 左移
* l 右移
* k 上移
* j 下移
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很显然，这几个命令只在命令模式下可用，当然，你可以用方向键(在所有模式下适用)&lt;/p&gt;
&lt;p&gt;Vim有很多移动命令，我只是学习了一部分，但是如果你需要一些特殊的移动方式，可以看看帮助，我确定你会找到有用的方法&lt;/p&gt;
&lt;p&gt;&lt;img alt="移动说明图" src="https://github.com/wklken/gallery/blob/master/vim/vim-movement.png?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;Vim distinguishes between screen-lines (those shown on the monitor) and real lines (those ended with a new-line).
Vim区分逻辑行(频幕上展示的)和物理行(实际以\n结尾的)&lt;/p&gt;
&lt;p&gt;以下是一些重要的命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 当前行第一列
^ 当前行第一个非空白字符
w 移到下一个单词
W 移到下一个单词，忽略标点
e 移动到单词尾部
E 移动到单词尾部，忽略标点
b 移动到单词开头
B 移动到单词开头，忽略标点
ge 移动到前一个词尾部
gE 移动到前一个词尾部，忽略标点
g_ 移动到最后一个非空白字符
$  移动到最后一列
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你记住一部分，你将学会如何快速从A移动到B！另一个重要的事实是，这些命令说明了基本命令的定义方式&lt;/p&gt;
&lt;h2 id="bian-ji"&gt;编辑&lt;/h2&gt;
&lt;p&gt;在Vim中，插入文本是很简单的事情，只需要敲i并且开始输入.但是vim提供了相当丰富的文本编辑命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d 删除当前光标位置到下一个命令哪个提供位置之间的字符(例如: d$删除当前行光标位置到最后一列的所有字符)
c 修改
x 删除光标位置字符
X 删除光标之前的字符(相当于回退)
y 拷贝
p 在当前光标之后黏贴拷贝的内容
P 在当前光标之前黏贴拷贝的内容
r 替换当前字符
s 用输入替换当前位置到下一个命令给出位置的字符
. 重复上一个命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dd, cc 或yy 将操作整行，例如yy拷贝当前行&lt;/p&gt;
&lt;p&gt;需要注意的是，很多命令比我在这里描述的额更为强大.例如你可以 输入"ayy 拷贝当前行道一个寄存器a,可以使用 "ap 黏贴a中的内容. Vim自动保存最后几个复制或删除的内容,要查看寄存器的内容，输入:registers, 你可以使用它们去黏贴一些老的文本&lt;/p&gt;
&lt;h2 id="ke-shi-kuai"&gt;可视块&lt;/h2&gt;
&lt;p&gt;可视块使得能够在选中文本每一行某个位置插入一个字符&lt;/p&gt;
&lt;p&gt;假设你选中了一块代码(Ctrl-v),你可以键入I，在代码块之前插入文本(切换到插入模式).当你离开插入模式时，输入的文本将作用于选中的每一行.使用A在代码块之后进行插入&lt;/p&gt;
&lt;p&gt;另一个有用的特性是，你可以用新文本替换整个代码块.选中代码块，输入s，vim进入插入模式，然后输入内容.离开插入模式时，vim将输入的内容插入到剩余行&lt;/p&gt;
&lt;p&gt;如果你想追加文本到某些行后边，使用Ctrl-v$选中需要修改的行选中需要修改的行. 这个和上一个命令不同的是，$表示"行尾",ctrl-v选中行的行尾，忽略文本&lt;/p&gt;
&lt;p&gt;使用 Ctrl-v:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a testNEWLY INSERTED
This is a     NEWLY INSERTED
This is       NEWLY INSERTED
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 Ctrl-v$:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a testNEWLY INSERTED
This is aNEWLY INSERTED
This isNEWLY INSERTED
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen-ben-dui-xiang"&gt;文本对象&lt;/h2&gt;
&lt;p&gt;Vim命令操作文本对象(字符，单词，括号分割的字符，句子等等)&lt;/p&gt;
&lt;p&gt;对我来说，最重要的一个是 在单词中: iw. 要选中当前的单词，只需要键入 viw (v可视模式，iw选中光标所在词),同样的，删除: diw&lt;/p&gt;
&lt;p&gt;inner-word/block和a-word/block的区别在于，前者只选中单词的字符(不包括空白字符) 或者括号中的内容(不包括括号本身).后者包括括号本身或者单词后的空白字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iw 单词
aw 单词+后面空白
iW …inner WORD
aW …a WORD
is 句子
as 句子+后面空白
ip 段落
ap 段落+段落后空白
i( or i) 括号中
a( or a) 括号中+括号
i&amp;lt; or i&amp;gt;
a&amp;lt; or i&amp;gt;
i{ or i}
a{ or a}
i" 引号中
a" 引号中+引号
i`
a`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是命令命令的展示，[]表示选中的文本:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iw&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;aw&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;iW&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;aW&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;is&lt;/span&gt;   &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;as&lt;/span&gt;   &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;ip&lt;/span&gt;   &lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;

     &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;ap&lt;/span&gt;   &lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

     &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;     &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;     &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="s"&gt;"   The "&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;"   The[ “best”]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;   &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;   &lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以尝试使用，熟悉并记住(对我而言，iw和i() 真正地节省了时间)&lt;/p&gt;
&lt;h2 id="undohe-redo"&gt;Undo和Redo&lt;/h2&gt;
&lt;p&gt;不要害怕使用一系列命令，你可以在命令模式下撤销，用u - 甚至用ctrl-r撤销刚才的撤销操作&lt;/p&gt;
&lt;p&gt;Vim7.0 介绍了撤销分支，但我没有时间去深入了解&lt;/p&gt;
&lt;h2 id="wai-bu-ming-ling"&gt;外部命令&lt;/h2&gt;
&lt;p&gt;Vim很容易加入外部命令的输出,或者通过外部过滤器过滤整行或部分&lt;/p&gt;
&lt;p&gt;使用外部命令 :!command    输出将会展现出来&lt;/p&gt;
&lt;p&gt;通过外部命令过滤文本，可以使用  :!sort %&lt;/p&gt;
&lt;p&gt;将外部命令的输出插入到当前文件  :r!command (例如 :r!which ls)&lt;/p&gt;
&lt;p&gt;查看更多关于filter的信息 :h filter&lt;/p&gt;
&lt;h2 id="sou-suo-he-ti-huan"&gt;搜索和替换&lt;/h2&gt;
&lt;p&gt;在Vim中搜索非常简单，在命令模式下输入 / ，然后填入你要搜索的词，然后vim会搜索这个文件(当前位置向前)&lt;/p&gt;
&lt;p&gt;使用? 进行向后搜索&lt;/p&gt;
&lt;p&gt;在搜索结果中，使用n或N进行重复搜索(和前一个搜索同一个方向)&lt;/p&gt;
&lt;p&gt;如果设置了"incsearch", Vim会立刻跳到匹配文本位置，如果设置了"hlsearch", 将会高亮所有匹配文本. 要去除高亮，:nohl&lt;/p&gt;
&lt;p&gt;替换同样不是很难，但是你需要对正则表达式有所了解&lt;/p&gt;
&lt;p&gt;使用正则替换某些文本，输入 :%s/old/new/gc 这个命令将会遍历整个文件%, 用单词"new"替换所有"old". g代表替换行中所有匹配文本，c代表替换前询问&lt;/p&gt;
&lt;p&gt;如果只需要替换选中区域中的某些文本，选中区域，输入 :s/old/new/g.&lt;/p&gt;
&lt;p&gt;这个就像&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:'&amp;lt;,'&amp;gt;s/old/new/g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在标签一节之后，你将会知道 '&amp;lt;'和'&amp;gt;'的意思&lt;/p&gt;
&lt;h2 id="bu-quan"&gt;补全&lt;/h2&gt;
&lt;p&gt;在你输入时，反复输入同一个词是很正常的事情. 使用Ctrl-p，vim会反向搜索最近输入过的拥有相同开头的词, ctrl-x ctrl-l补全整个词&lt;/p&gt;
&lt;p&gt;如果你不确定如何拼写某个词，并且你设置了拼写检查(:set spell),你可以使用 Ctrl-x Ctrl-k 到字典中查询已经输入的词.Vim自动补全系统在7.0后得到了很大的改善.&lt;/p&gt;
&lt;p&gt;注意，自动补全命令仅在插入模式下有效，在命令模式有其他的作用&lt;/p&gt;
&lt;h2 id="biao-qian"&gt;标签&lt;/h2&gt;
&lt;p&gt;你可以在文档中设置标签，实现在文档中不同位置的快速跳转&lt;/p&gt;
&lt;p&gt;vim自动设置的标签&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{0-9} 关闭文件的最近10个位置(0 最后一个, 1 倒数第二个)
&amp;lt; and &amp;gt; 标记文本左边/右边的位置
( and ) 当前句子的开始/结束
{ and } 当前段落的开始/结束
[ and ] 拷贝或修改文本的第一/最后一个字符的位置
. 最后修改点位置
' or ` 上次跳转点位置
" 退出文件前的最后一个位置
^ 最后插入/修改位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要设置自定义标签，使用 m{a-zA-Z} (例如 ma ), 如果要跳转到某个标签(自定义或预定义),可以使用 ' 和 `&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;' 将光标移到标记行首个非空字符位置
` 移到设置标签时得准确位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大写和小写标记之间有些区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{a-z} 文件维度
{A-Z} 会话维度，和文件关联，可以跨文件跳转
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，可以使用 L 标记work-log 使用T标记time-table ,然后进行快速跳转&lt;/p&gt;
&lt;p&gt;例如，你可以键入 '" 跳转到文件关闭前光标所在位置(Vim可以通过配置实现)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;列出标签列表 :marks

删除 :delmarks a b c

删除所有  :delmarks!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="biao-qian-ye-tab-huan-chong-buffer-he-chuang-kou-window"&gt;标签页(tab) ，缓冲(buffer) 和 窗口(window)&lt;/h2&gt;
&lt;p&gt;Vim 7.0介绍过tabs. 我们都知道并喜欢tabs,所以这里不多提. (注意: vim中的tabs和其他程序中的tabs略有不同.不同点在于，每个tab页可以拥有自己的布局, 例如我可以在第一个tab中切分窗口，在第二个tab中不切分)&lt;/p&gt;
&lt;p&gt;命令行中用vim一次性打开多个tab  vim -p *.txt&lt;/p&gt;
&lt;p&gt;切换tab, 可以使用鼠标(gVim) 或者输入 gt&lt;/p&gt;
&lt;p&gt;创建一个新的空tab,输入 :tabnew&lt;/p&gt;
&lt;p&gt;或者在一个新tab中打开文件  :tabe xyz&lt;/p&gt;
&lt;p&gt;buffer和window有些不好理解，window是打开vim时你看到的，当你打开帮助(:help bufers), 你将会得到两个window.并非真正的窗口，是vim提供的展示视图&lt;/p&gt;
&lt;p&gt;你可以打开一个window,切分成水平两个 :sp 或者竖直两个 :vsp. 通过这个方法，vim将同一个buffer放在两个不同的window. 你可以打开文件, :sp filea  或者 :vsp fileb. 在窗口之间跳转，命令模式下使用 Ctrl-w {hjkl}&lt;/p&gt;
&lt;p&gt;buffer大多数情况下是一个文件，但是不要求可见. 所以通常一个window中有多个buffer, 要在当前window中展现不同的buffer , 使用 :b NUMBER, 可以使用 :buffers查看对应buffer的编号，通常情况下，vim要求你在切换到另一个buffer之前，保存当前buffer, 所以切换报错时不要太过惊讶(可以 :set hidden 使未保存buffer生效，但需谨慎使用)&lt;/p&gt;
&lt;p&gt;下面是我的笔记:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:b N 切换到buffer N
:buffers 展示buffer列表, 字符含义
    % 当前window
    # 替换buffer (使用 :e# or :b#切换)
    a 活动的(加载并可见)
    h 隐藏的(加载但不可见)
    + 修改的
:bd 关闭buffer并从buffer列表移除(不关闭vim,即使最后一个buffer关闭)
:bun 关闭buffer但留存在bufferlist
:sp #N 分屏并编辑buffer N
:w 保存当前buffer
:e 重新加载当前文件
:q 退出
:new 新的空window
:on 关闭除当前活动window之外的所有window(Ctrl-W o)
Ctrl-W {h,j,k,l} 窗口之间切换
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置'hidden'后，允许修改未保存的buffer隐藏，buffer会自动保存如果未设置'hidden'，设置了'autowrite'&lt;/p&gt;
&lt;h2 id="hong"&gt;宏&lt;/h2&gt;
&lt;p&gt;Vim允许使用点. 重复某些命令，当存在多个命令时，使用宏&lt;/p&gt;
&lt;p&gt;你可以开始 录制宏， 使用 q和{0-9a-zA-Z}， 例如 qq  录制用于buffer"q"的宏，完成录制后，键入q退出&lt;/p&gt;
&lt;p&gt;现在你可以使用 @q 在任何时候调用宏&lt;/p&gt;
&lt;h2 id="zui-hou"&gt;最后&lt;/h2&gt;
&lt;p&gt;我希望可以帮助你开始学习vim. 我可以做的最后一件事是，提供我的vim配置文件.  使用 :help ... 去学习vim更强大的功能并在后续写一篇指南&lt;/p&gt;
&lt;p&gt;可以将&lt;a href="http://blog.interlinked.org/static/files/vimrc"&gt;vimrc&lt;/a&gt;文件放入你的home目录(~/.vimrc),但是要先确定这个目录下还没有这个文件&lt;/p&gt;
&lt;p&gt;注解1： Vim是一个编辑器，不是IDE 或者操作系统. 不要通过其试图创建一个IDE,如果你喜欢IDE,挑一个来用！当然，vim可以将很多任务自动化,例如编译，跳转到编译错误处，要实现这些，关注下vim的插件&lt;/p&gt;
&lt;p&gt;Emacs is a good operating system, but it lacks a good editor.
— Old saying.&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>[翻译整理]stackoverflow python 百问</title><link href="http://www.wklken.me/posts/2013/07/20/python-stackoverflow-vote-top.html" rel="alternate"></link><published>2013-07-20T00:00:00+08:00</published><updated>2013-07-20T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-07-20:/posts/2013/07/20/python-stackoverflow-vote-top.html</id><summary type="html">&lt;p&gt;更新到github了，地址：https://github.com/wklken/stackoverflow-py-top-qa &lt;/p&gt;
&lt;p&gt;后续这里不更新了哈&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;进度40%，最近有点犯懒&lt;/p&gt;
&lt;p&gt;刚刚注册，好东西&lt;/p&gt;
&lt;p&gt;查看了下前面(vote前15页,挑了下,vote都是100+的样子,大概120个)的问题，&lt;a href="http://stackoverflow.com/questions/tagged/python?page=1&amp;amp;sort=votes&amp;amp;pagesize=15"&gt;链接&lt;/a&gt;, 大体梳理了下,本来想放一页搞定，奈何排版太乱，按类型分了下&lt;/p&gt;
&lt;p&gt;第一页的前几个比较长，目测都有中文翻译版本，大家可以网上搜下&lt;/p&gt;
&lt;p&gt;其他问题相对比较杂，有些简单，有些复杂，拉过来参考参考也不错&lt;/p&gt;
&lt;p&gt;总结整理，复习印证(注意，合并了每个问题的多个答案，但是时间仓促，疏漏难免，感兴趣问题直接点链接看原文吧)&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-shu-ju-jie-gou-lie-biao-yuan-zu-zi-dian-deng"&gt;基本数据结构(列表，元组，字典等)&lt;/h2&gt;
&lt;h3 id="pan-duan-yi-ge-lie-biao-wei-kong-de-zui-jia-shi-jian"&gt;判断一个列表为空得最佳实践&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/53513/python-what-is-the-best-way-to-check-if-a-list-is-empty"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答案:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not a:
    print …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;更新到github了，地址：https://github.com/wklken/stackoverflow-py-top-qa &lt;/p&gt;
&lt;p&gt;后续这里不更新了哈&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;进度40%，最近有点犯懒&lt;/p&gt;
&lt;p&gt;刚刚注册，好东西&lt;/p&gt;
&lt;p&gt;查看了下前面(vote前15页,挑了下,vote都是100+的样子,大概120个)的问题，&lt;a href="http://stackoverflow.com/questions/tagged/python?page=1&amp;amp;sort=votes&amp;amp;pagesize=15"&gt;链接&lt;/a&gt;, 大体梳理了下,本来想放一页搞定，奈何排版太乱，按类型分了下&lt;/p&gt;
&lt;p&gt;第一页的前几个比较长，目测都有中文翻译版本，大家可以网上搜下&lt;/p&gt;
&lt;p&gt;其他问题相对比较杂，有些简单，有些复杂，拉过来参考参考也不错&lt;/p&gt;
&lt;p&gt;总结整理，复习印证(注意，合并了每个问题的多个答案，但是时间仓促，疏漏难免，感兴趣问题直接点链接看原文吧)&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-shu-ju-jie-gou-lie-biao-yuan-zu-zi-dian-deng"&gt;基本数据结构(列表，元组，字典等)&lt;/h2&gt;
&lt;h3 id="pan-duan-yi-ge-lie-biao-wei-kong-de-zui-jia-shi-jian"&gt;判断一个列表为空得最佳实践&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/53513/python-what-is-the-best-way-to-check-if-a-list-is-empty"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答案:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not a:
    print "List is empty"
#不要用len(a)来判断
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wei-shi-yao-shi-stringjoinlister-bu-shi-listjoinstring"&gt;为什么是string.join(list)而不是list.join(string)&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/493819/python-join-why-is-it-string-joinlist-instead-of-list-joinstring"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_list = ["Hello", "world"]
print "-".join(my_list)
#为什么不是 my_list.join("-") 。。。。这个....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;p&gt;因为所有可迭代对象都可以被连接，但是连接者总是字符串&lt;/p&gt;
&lt;h3 id="ru-he-he-bing-liang-ge-lie-biao"&gt;如何合并两个列表&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1720421/merge-two-lists-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;listone = [1,2,3]
listtwo = [4,5,6]
#outcome we expect: mergedlist == [1, 2, 3, 4, 5, 6]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.不考虑顺序（原来问题不是很明确）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;listone + listtwo
#linstone.extend(listtwo)也行，就是会修改listone
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.考虑顺序做些处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listtwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listtwo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-bian-ping-yi-ge-er-wei-shu-zu"&gt;如何扁平一个二维数组&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l = [[1,2,3],[4,5,6], [7], [8,9]]
变为[1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表解析&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[item for sublist in l for item in sublist]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;itertools&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list2d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# python &amp;gt;= 2.6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list2d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sum&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum(l, [])
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-yi-ge-lie-biao-de-chang-du"&gt;如何获取一个列表的长度&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/518021/getting-the-length-of-an-array-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python中是不是只有这种方法可以获取长度？语法很奇怪&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arr.__len__()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应该使用这种方式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mylist = [1,2,3,4,5]
len(mylist)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做法，不需要对每个容器都定义一个.length()方法，你可以使用len()检查所有实现了__len__()方法的对象&lt;/p&gt;
&lt;h3 id="pythonzhong-ru-he-fu-zhi-yi-ge-lie-biao"&gt;Python中如何复制一个列表&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/2612802/how-to-clone-a-list-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以用切片的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new_list = old_list[:]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用list()函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new_list = list(old_list)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用copy.copy(),比list()稍慢，因为它首先去查询old_list的数据类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果列表中包含对象，可以使用copy.deepcopy(), 所有方法中最慢，但有时候无法避免&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# edit orignal list and instance&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'baz'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"original: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt; slice: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt; list(): &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt; copy: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt; deepcopy: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; \
       &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;original: ['foo', 5, 'baz']
slice: ['foo', 5]
list(): ['foo', 5]
copy: ['foo', 5]
deepcopy: ['foo', 1]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效率简单比较&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10.59 - copy.deepcopy(old_list)
10.16 - pure python Copy() method copying classes with deepcopy
1.488 - pure python Copy() method not copying classes (only dicts/lists/tuples)
0.325 - for item in old_list: new_list.append(item)
0.217 - [i for i in old_list] (a list comprehension)
0.186 - copy.copy(old_list)
0.075 - list(old_list)
0.053 - new_list = []; new_list.extend(old_list)
0.039 - old_list[:] (list slicing)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lie-biao-de-appendhe-extendde-qu-bie"&gt;列表的append和extend的区别&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/252703/python-append-vs-extend"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; x = [1, 2]
&amp;gt;&amp;gt;&amp;gt; x.append(3)
&amp;gt;&amp;gt;&amp;gt; x
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; x.append([4,5])
&amp;gt;&amp;gt;&amp;gt; x
[1, 2, 3, [4, 5]]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; x = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; x.extend([4, 5])
&amp;gt;&amp;gt;&amp;gt; x
[1, 2, 3, 4, 5]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-sui-ji-di-cong-lie-biao-zhong-chou-qu-bian-liang"&gt;如何随机地从列表中抽取变量&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/306400/how-do-i-randomly-select-an-item-from-a-list-using-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-li-yong-xia-biao-cong-lie-biao-zhong-shan-chu-yi-ge-yuan-su"&gt;如何利用下标从列表中删除一个元素&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/627435/how-to-remove-an-element-from-a-list-by-index-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.del&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [9]: a = range(10)
In [10]: a
Out[10]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
In [11]: del a[-1]
In [12]: a
Out[12]: [0, 1, 2, 3, 4, 5, 6, 7, 8]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.pop&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = ['a', 'b', 'c', 'd']
a.pop(1)
# now a is ['a', 'c', 'd']

a = ['a', 'b', 'c', 'd']
a.pop()
# now a is ['a', 'b', 'c']
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huo-qu-lie-biao-de-zui-hou-yi-ge-yuan-su"&gt;获取列表的最后一个元素&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/930397/how-to-get-the-last-element-of-a-list"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;囧&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result = l[-1]
result = l.pop()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xu-lie-de-qie-pian-cao-zuo"&gt;序列的切片操作&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/509211/the-python-slice-notation"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's pretty simple really:
很简单:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a[start:end] # start 到 end-1
a[start:]    # start 到 末尾
a[:end]      # 0 到 end-1
a[:]         # 整个列表的拷贝
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一个step变量，控制步长,可在上面语法中使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a[start:end:step] # start through not past end, by step
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，左闭右开&lt;/p&gt;
&lt;p&gt;其他特点，开始或结束下标可能是负数，表示从序列末尾开始计算而非从头开始计算,所以&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;最后一个元素&lt;/span&gt;
&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;最后两个元素&lt;/span&gt;
&lt;span class="s s-Atom"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;除了最后两个元素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python对程序员很友好，如果序列中存在的元素数量少于你要的，例如，你请求 a[:-2] 但是a只有一个元素，你会得到一个空列表，而不是一个错误.有时候你或许希望返回的是一个错误，所以你必须知道这点&lt;/p&gt;
&lt;h3 id="ru-he-jiang-yi-ge-lie-biao-qie-fen-cheng-ruo-gan-ge-chang-du-xiang-tong-de-zi-xu-lie"&gt;如何将一个列表切分成若干个长度相同的子序列&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想要得到这样的效果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l = range(1, 1000)
print chunks(l, 10) -&amp;gt; [ [ 1..10 ], [ 11..20 ], .., [ 991..999 ] ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用yield:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in xrange(0, len(l), n):
        yield l[i:i+n]
list(chunks(range(10, 75), 10))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def chunks(l, n):
    return [l[i:i+n] for i in range(0, len(l), n)]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-lie-biao-jie-xi-chuang-jian-yi-ge-zi-dian"&gt;使用列表解析创建一个字典&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1747817/python-create-a-dictionary-with-list-comprehension"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 2.6&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = dict((key, value) for (key, value) in sequence)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;python 2.7+ or 3, 使用 &lt;a href="http://www.python.org/dev/peps/pep-0274/"&gt;字典解析语法&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = {key: value for (key, value) in sequence}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-inhuan-shi-has_key"&gt;使用"in"还是"has_key()"&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1323410/has-key-or-in"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = {'a': 1, 'b': 2}
'a' in d
True
or:

d = {'a': 1, 'b': 2}
d.has_key('a')
True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哪种更好&lt;/p&gt;
&lt;p&gt;in更pythonic, 另外 has_key()在Python3.x中已经被移除&lt;/p&gt;
&lt;h3 id="zi-dian-mo-ren-zhi"&gt;字典默认值&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和问题有点偏&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#获取时,如不存在，得到默认值&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#设置时，若key不存在，设置默认值，已存在，返回已存在value&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#初始即默认值&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#or d = defaultdict(int)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-gei-zi-dian-tian-jia-yi-ge-zhi"&gt;如何给字典添加一个值&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1024847/add-to-a-dictionary-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#### Making a dictionary ####
data = {}
# OR #
data = dict()

#### Initially adding values ####
data = {'a':1,'b':2,'c':3}
# OR #
data = dict(a=1, b=2, c=3)

#### Inserting/Updating value ####
data['a']=1  # updates if 'a' exists, else adds 'a'
# OR #
data.update({'a':1})
# OR #
data.update(dict(a=1))

#### Merging 2 dictionaries ####
data.update(data2)  # Where data2 is also a dict.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-jiang-zi-duan-zhuan-huan-cheng-yi-ge-objectran-hou-shi-yong-dui-xiang-shu-xing-de-fang-shi-du-qu"&gt;如何将字段转换成一个object，然后使用对象-属性的方式读取&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1305532/convert-python-dict-to-object"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有dict&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; d = {'a': 1, 'b': {'c': 2}, 'd': ["hi", {'foo': "bar"}]}}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;想用这种方式访问&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; x = dict2obj(d)
&amp;gt;&amp;gt;&amp;gt; x.a
1
&amp;gt;&amp;gt;&amp;gt; x.b.c
2
&amp;gt;&amp;gt;&amp;gt; x.d[1].foo
bar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用namedtuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MyStruct'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a b d'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用类&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Struct&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Struct&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x01D6A738&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zi-fu-chuan-wen-jian_1"&gt;字符串，文件&lt;/h2&gt;
&lt;h3 id="zi-fu-ru-he-zhuan-wei-xiao-xie"&gt;字符如何转为小写&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/6797984/how-to-convert-string-to-lowercase-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = "Kilometer"
print(s.lower())
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-chuang-jian-bu-cun-zai-de-mu-lu-jie-gou"&gt;如何创建不存在的目录结构&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/273192/python-best-way-to-create-directory-if-it-doesnt-exist-for-file-write"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not os.path.exists(directory):
    os.makedirs(directory)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，当目录在exists和makedirs两个函数调用之间被创建时，makedirs将抛出OSError&lt;/p&gt;
&lt;h3 id="ru-he-kao-bei-yi-ge-wen-jian"&gt;如何拷贝一个文件&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/123198/how-do-i-copy-a-file-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/library/shutil.html"&gt;shutil&lt;/a&gt;模块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;copyfile(src, dst)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将src文件内容拷贝到dst，目标文件夹必须可写，否则将抛出IOError异常&lt;/p&gt;
&lt;p&gt;如果目标文件已存在，将被覆盖&lt;/p&gt;
&lt;p&gt;另外特殊文件，想字符文件，块设备文件，无法用这个方法进行拷贝&lt;/p&gt;
&lt;p&gt;src/dst是字符串&lt;/p&gt;
&lt;h3 id="zi-fu-chuan-zhuan-wei-floatint"&gt;字符串转为float/int&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = "545.2222"
&amp;gt;&amp;gt;&amp;gt; float(a)
545.2222
&amp;gt;&amp;gt;&amp;gt; int(a)
Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
ValueError: invalid literal for int() with base 10: '545.2222'
&amp;gt;&amp;gt;&amp;gt; int(float(a))
545
&amp;gt;&amp;gt;&amp;gt; int('544')
544
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一种，用 &lt;a href="http://docs.python.org/2/library/ast.html#ast.literal_eval"&gt;ast&lt;/a&gt;模块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;literal_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"545.2222"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;545.2222&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;literal_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"31"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-fan-xiang-shu-chu-yi-ge-zi-fu-chuan"&gt;如何反向输出一个字符串&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/931092/reverse-a-string-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;'hello world'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;'dlrow olleh'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-sui-ji-sheng-cheng-da-xie-zi-mu-he-shu-zi-zu-cheng-de-zi-fu-chuan"&gt;如何随机生成大写字母和数字组成的字符串&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;6U1S75
4Z4UKK
U911K4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhu-xing-du-wen-jian-qu-chu-huan-xing-fu-perl-chomp-line"&gt;逐行读文件去除换行符(perl chomp line)&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/275018/how-can-i-remove-chomp-a-newline-in-python"&gt;链接&lt;/a&gt;
类似问题 &lt;a href="http://stackoverflow.com/questions/761804/trimming-a-string-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读一个文件，如何获取每一行内容（不包括换行符）&lt;/p&gt;
&lt;p&gt;比较pythonic的做法:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text = "line 1\nline 2\r\nline 3\nline 4"
&amp;gt;&amp;gt;&amp;gt; text.splitlines()
['line 1', 'line 2', 'line 3', 'line 4']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用rstrip,(rstrip/lstrip/strip)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#去除了空白+换行&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'test string &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'test string'&lt;/span&gt;
&lt;span class="c1"&gt;#只去换行&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'test string &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'test string '&lt;/span&gt;
&lt;span class="c1"&gt;#更通用的做法，系统相关&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;
&lt;span class="s1"&gt;'linux2'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"foo&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linesep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'foo&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-zi-fu-chuan-de-contains"&gt;python中字符串的contains&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/3437059/does-python-have-a-string-contains-method"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python中字符串判断contains&lt;/p&gt;
&lt;p&gt;使用in关键字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not "blah" in somestring: continue
if "blah" not in somestring: continue
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用字符串的find/index  (注意index查找失败抛异常)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = "This be a string"
if s.find("is") == -1:
    print "No 'is' here!"
else:
    print "Found 'is' in the string."
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-pan-duan-yi-ge-zi-fu-chuan-shi-shu-zi"&gt;如何判断一个字符串是数字&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/354038/how-do-i-check-if-a-string-is-a-number-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用这种方法会不会十分丑陋和低效&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用这种方法并不丑陋和低效&lt;/p&gt;
&lt;p&gt;使用isdigit(缺点，对非整数无能为力)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = "03523"
a.isdigit()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-tian-chong-0dao-shu-zi-zi-fu-chuan-zhong-bao-zheng-tong-yi-chang-du"&gt;如何填充0到数字字符串中保证统一长度&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/339007/python-nicest-way-to-pad-zeroes-to-string"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; n = '4'
&amp;gt;&amp;gt;&amp;gt; print n.zfill(3)
&amp;gt;&amp;gt;&amp;gt; '004'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于数字,&lt;a href="http://docs.python.org/2/library/string.html#formatexamples"&gt;相关文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; n = 4
&amp;gt;&amp;gt;&amp;gt; print '%03d' % n
&amp;gt;&amp;gt;&amp;gt; 004
&amp;gt;&amp;gt;&amp;gt; print "{0:03d}".format(4)  # python &amp;gt;= 2.6
&amp;gt;&amp;gt;&amp;gt; 004
&amp;gt;&amp;gt;&amp;gt; print("{0:03d}".format(4))  # python 3
&amp;gt;&amp;gt;&amp;gt; 004
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kong-zhi-jie-gou-tiao-jian-xun-huan_1"&gt;控制结构（条件、循环）&lt;/h2&gt;
&lt;h3 id="ru-he-zai-xun-huan-zhong-huo-qu-xia-biao"&gt;如何在循环中获取下标&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/522563/accessing-the-index-in-python-for-loops"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用enumerate&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for idx, val in enumerate(ints):
    print idx, val
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-pan-duan-yi-ge-bian-liang-de-lei-xing"&gt;如何判断一个变量的类型&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/402504/how-to-determine-the-variable-type-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用type&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; i = 123
&amp;gt;&amp;gt;&amp;gt; type(i)
&amp;lt;type 'int'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(i) is int
True
&amp;gt;&amp;gt;&amp;gt; i = 123456789L
&amp;gt;&amp;gt;&amp;gt; type(i)
&amp;lt;type 'long'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(i) is long
True
&amp;gt;&amp;gt;&amp;gt; i = 123.456
&amp;gt;&amp;gt;&amp;gt; type(i)
&amp;lt;type 'float'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(i) is float
True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外一个相同的问题  &lt;a href="http://stackoverflow.com/questions/2225038/python-determine-the-type-of-an-object"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; type( [] ) == list
True
&amp;gt;&amp;gt;&amp;gt; type( {} ) == dict
True
&amp;gt;&amp;gt;&amp;gt; type( "" ) == str
True
&amp;gt;&amp;gt;&amp;gt; type( 0 ) == int
True

&amp;gt;&amp;gt;&amp;gt; class Test1 ( object ):
    pass
&amp;gt;&amp;gt;&amp;gt; class Test2 ( Test1 ):
    pass
&amp;gt;&amp;gt;&amp;gt; a = Test1()
&amp;gt;&amp;gt;&amp;gt; b = Test2()
&amp;gt;&amp;gt;&amp;gt; type( a ) == Test1
True
&amp;gt;&amp;gt;&amp;gt; type( b ) == Test2
True
&amp;gt;&amp;gt;&amp;gt; type( b ) == Test1
False
&amp;gt;&amp;gt;&amp;gt; isinstance( b, Test1 )
True
&amp;gt;&amp;gt;&amp;gt; isinstance( b, Test2 )
True
&amp;gt;&amp;gt;&amp;gt; isinstance( a, Test1 )
True
&amp;gt;&amp;gt;&amp;gt; isinstance( a, Test2 )
False
&amp;gt;&amp;gt;&amp;gt; isinstance( [], list )
True
&amp;gt;&amp;gt;&amp;gt; isinstance( {}, dict )
True
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="lei_1"&gt;类&lt;/h2&gt;
&lt;h3 id="ru-he-pan-duan-yi-ge-dui-xiang-shi-fou-yong-you-mou-ge-shu-xing"&gt;如何判断一个对象是否拥有某个属性&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if hasattr(a, 'property'):
    a.property
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两种风格&lt;/p&gt;
&lt;p&gt;EAFP(easier to ask for forgiveness than permission)&lt;/p&gt;
&lt;p&gt;LBYL(look before you leap)&lt;/p&gt;
&lt;p&gt;相关内容
&lt;a href="http://web.archive.org/web/20070929122422/http://mail.python.org/pipermail/python-list/2003-May/205182.html"&gt;EAFP vs LBYL (was Re: A little disappointed so far)&lt;/a&gt;
&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#eafp-vs-lbyl"&gt;EAFP vs. LBYL @Code Like a Pythonista: Idiomatic Python&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;doStuff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;AttributeError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;otherStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;or&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'property'&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;doStuff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;otherStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-de-lei-bian-liang-huan-jing-bian-liang"&gt;Python中的类变量(环境变量)&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/68645/static-class-variables-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在类中定义的变量，不在方法定义中，成为类变量或静态变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class MyClass:
...     i = 3
...
&amp;gt;&amp;gt;&amp;gt; MyClass.i
3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;i是类级别的变量，但这里要和实例级别的变量i区分开&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m = MyClass()
&amp;gt;&amp;gt;&amp;gt; m.i = 4
&amp;gt;&amp;gt;&amp;gt; MyClass.i, m.i
&amp;gt;&amp;gt;&amp;gt; (3, 4)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这和C++/java完全不同，但和C#区别不大，C#不允许类实例获取静态变量&lt;/p&gt;
&lt;p&gt;具体见 &lt;a href="http://docs.python.org/2/tutorial/classes.html#SECTION0011320000000000000000"&gt;what the Python tutorial has to say on the subject of classes and class objects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，静态方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-ding-yi-jing-tai-fang-fa-static-method"&gt;如何定义静态方法(static method)&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/735975/static-methods-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;a href="http://docs.python.org/2/library/functions.html#staticmethod"&gt;staticmethod&lt;/a&gt;装饰器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;the_static_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;the_static_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="staticmethodhe-classmethodde-qu-bie"&gt;@staticmethod和@classmethod的区别&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;staticmethod，静态方法在调用时，对类及实例一无所知&lt;/p&gt;
&lt;p&gt;仅仅是获取传递过来的参数，没有隐含的第一个参数，在Python里基本上用处不大，你完全可以用一个模块函数替换它&lt;/p&gt;
&lt;p&gt;classmethod, 在调用时，将会获取到其所在的类，或者类实例，作为其第一个参数&lt;/p&gt;
&lt;p&gt;当你想将函数作为一个类工厂时，这非常有用: 第一个参数是类，你可以实例化出对应实例对象，甚至子类对象。&lt;/p&gt;
&lt;p&gt;可以观察下 dict.fromkey(),是一个类方法，当子类调用时，返回子类的实例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class DictSubclass(dict):
...     def __repr__(self):
...         return "DictSubclass"
...
&amp;gt;&amp;gt;&amp;gt; dict.fromkeys("abc")
{'a': None, 'c': None, 'b': None}
&amp;gt;&amp;gt;&amp;gt; DictSubclass.fromkeys("abc")
DictSubclass
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-yi-ge-shi-li-de-lei-ming"&gt;如何获取一个实例的类名&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/510972/getting-the-class-name-of-an-instance-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x.__class__.__name__
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mo-kuai_1"&gt;模块&lt;/h2&gt;
&lt;h3 id="ru-he-lie-chu-yi-ge-mu-lu-de-suo-you-wen-jian"&gt;如何列出一个目录的所有文件&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/3207219/how-to-list-all-files-of-a-directory-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.使用os.listdir(),得到目录下的所有文件和文件夹&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#只需要文件&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;
&lt;span class="n"&gt;onlyfiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mypath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.os.walk()&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;walk&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mypath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.glob&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/home/adam/*.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重复问题 &lt;a href="http://stackoverflow.com/questions/120656/directory-listing-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import os&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        print os.path.join(dirname, subdirname)

    # print path to all filenames.
    for filename in filenames:
        print os.path.join(dirname, filename)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jsonhe-simplejsonde-qu-bie"&gt;json和simplejson的区别&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/712791/json-and-simplejson-module-differences-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;json就是simple，加入到标准库. json在2.6加入，simplejson在2.4+,2.6+,更有优势&lt;/p&gt;
&lt;p&gt;另外，simplejson更新频率更高，如果你想使用最新版本，建议用simplejson&lt;/p&gt;
&lt;p&gt;好的做法是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplejson&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外,可以关注二者性能上的比较&lt;/p&gt;
&lt;h3 id="pythonzhong-ru-he-huo-qu-dang-qian-shi-jian"&gt;python中如何获取当前时间&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/415511/how-to-get-current-time-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;时间日期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78915&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果仅获取时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; datetime.datetime.time(datetime.datetime.now())
datetime.time(15, 8, 24, 78915))
#等价
&amp;gt;&amp;gt;&amp;gt; datetime.datetime.now().time()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以从文档中获取更多 &lt;a href="http://docs.python.org/2/library/datetime.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果想避免额外的datetime.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="qi-ta_1"&gt;其他&lt;/h2&gt;
&lt;h3 id="ru-he-cong-biao-zhun-shu-ru-du-qu-nei-rong-stdin"&gt;如何从标准输入读取内容stdin&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1450393/how-do-you-read-from-stdin-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href="http://docs.python.org/2/library/fileinput.html"&gt;fileinput&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fileinput&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileinput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="foo-is-none-he-foo-nonede-qu-bie"&gt;foo is None 和 foo == None的区别&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if foo is None: pass
if foo == None: pass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果比较相同的对象实例，is总是返回True
而 == 最终取决于 "&lt;strong&gt;eq&lt;/strong&gt;()"&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class foo(object):
    def __eq__(self, other):
        return True

&amp;gt;&amp;gt;&amp;gt; f = foo()
&amp;gt;&amp;gt;&amp;gt; f == None
True
&amp;gt;&amp;gt;&amp;gt; f is None
False

&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; list2 = [1, 2, 3]]
&amp;gt;&amp;gt;&amp;gt; list1==list2
True
&amp;gt;&amp;gt;&amp;gt; list1 is list2
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(ob1 is ob2) 等价于 (id(ob1) == id(ob2))
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="__init__pyshi-zuo-shi-yao-yong-de"&gt;__init__.py是做什么用的&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/448271/what-is-init-py-for"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是包的一部分，&lt;a href="http://docs.python.org/2/tutorial/modules.html#packages"&gt;具体文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;__init__.py让Python把目录当成包，&lt;/p&gt;
&lt;p&gt;最简单的例子，__init__.py仅是一个空文件，但它可以一样执行包初始化代码或者设置__all__变量，后续说明&lt;/p&gt;
&lt;h3 id="ru-he-huo-qu-an-zhuang-de-pythonmo-kuai-lie-biao"&gt;如何获取安装的python模块列表&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/739993/get-a-list-of-installed-python-modules"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help('modules')
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="huan-jing-xiang-guan_1"&gt;环境相关&lt;/h2&gt;
&lt;h3 id="setuppyan-zhuang-hou-ru-he-xie-zai"&gt;setup.py安装后如何卸载&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1550226/python-setup-py-uninstall"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用下面命令安装的包如何卸载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手工删除的话&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py install --record files.txt
cat files.txt | xargs rm -rf
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yi-chang_1"&gt;异常&lt;/h2&gt;
&lt;h3 id="ru-he-yi-xing-nei-chu-li-duo-ge-yi-chang"&gt;如何一行内处理多个异常&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我知道可以这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;try:
    # do something that may fail
except:
    # do this if ANYTHING goes wrong
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;try:
    # do something that may fail
except IDontLikeYourFaceException:
    # put on makeup or smile
except YouAreTooShortException:
    # stand on a ladder
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想在一行里处理多个异常的话&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;try:
    # do something that may fail
except IDontLIkeYouException, YouAreBeingMeanException: #没生效
except Exception, e: #捕获了所有
    # say please
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;答案&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# as在python2.6,python2.7中仍然可以使用
except (IDontLIkeYouException, YouAreBeingMeanException) as e:
    pass
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-flush-pythonde-printshu-chu"&gt;如何flush Python的print输出&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print"&gt;链接&lt;/a&gt;
重复问题 &lt;a href="http://stackoverflow.com/questions/107705/python-output-buffering"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;默认print输出到sys.stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考
&lt;a href="http://docs.python.org/2/reference/simple_stmts.html#the-print-statement"&gt;http://docs.python.org/reference/simple_stmts.html#the-print-statement&lt;/a&gt;
&lt;a href="http://docs.python.org/2/library/sys.html"&gt;http://docs.python.org/library/sys.html&lt;/a&gt;
&lt;a href="http://docs.python.org/2/library/stdtypes.html#file-objects"&gt;http://docs.python.org/library/stdtypes.html#file-objects&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-huo-qu-yi-ge-han-shu-de-han-shu-ming-zi-fu-chuan"&gt;如何获取一个函数的函数名字符串&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/251464/how-to-get-the-function-name-as-string-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;span class="s1"&gt;'time'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ying-gai-zai-xue-xi-python3zhi-qian-xue-xi-python2huan-shi-zhi-jie-xue-xi-python3"&gt;应该在学习Python3之前学习Python2，还是直接学习Python3&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/170921/should-i-learn-python-2-before-3-or-start-directly-from-python-3"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可以从python2开始，2和3主要的语法格式和风格相同&lt;/p&gt;
&lt;p&gt;3要替代2不是短时间内能完成的，将会是一个很长的过程，所以学习Python2并没有什么坏处&lt;/p&gt;
&lt;p&gt;我建议你关注下2和3的不同之处  &lt;a href="http://stackoverflow.com/questions/170921/should-i-learn-python-2-before-3-or-start-directly-from-python-3"&gt;This slides gives you a quick introduction of the changes in Python 2 and 3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pythonzhong-yong-bi-jiao-zi-fu-chuan-isyou-shi-hou-hui-fan-hui-cuo-wu-pan-duan"&gt;python中用==比较字符串，is有时候会返回错误判断&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1504717/python-vs-is-comparing-strings-is-fails-sometimes-why"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is是身份测试，==是相等测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 'pub'
&amp;gt;&amp;gt;&amp;gt; b = ''.join(['p', 'u', 'b'])
&amp;gt;&amp;gt;&amp;gt; a == b
True
&amp;gt;&amp;gt;&amp;gt; a is b
False'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is 等价于 id(a) == id(b)&lt;/p&gt;
&lt;h3 id="ru-he-jie-qu-yi-ge-zi-fu-chuan-huo-de-zi-chuan"&gt;如何截取一个字符串获得子串&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/663171/is-there-a-way-to-substring-a-string-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;'llo World!'&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;'He'&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;'Hello Worl'&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;'d!'&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;'llo Worl'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;python将这类操作称为切片，可以作用于序列类型，不仅仅是字符串&lt;/p&gt;
&lt;h3 id="yong-han-shu-ming-zi-fu-chuan-diao-yong-yi-ge-han-shu"&gt;用函数名字符串调用一个函数&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/3061/calling-a-function-from-a-string-with-the-functions-name-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设模块foo有函数bar:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;methodToCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;methodToCall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者一行搞定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result = getattr(foo, 'bar')()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-wen-jian-kuo-zhan-ming"&gt;如何获取文件扩展名&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/541390/extracting-extension-from-filename-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用os.path.splitext方法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileExtension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/path/to/somefile.ext'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;
&lt;span class="s1"&gt;'/path/to/somefile'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fileExtension&lt;/span&gt;
&lt;span class="s1"&gt;'.ext'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-listzhong-bao-han-mou-ge-yuan-su-suo-zai-de-xia-biao"&gt;如何获取list中包含某个元素所在的下标&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/176918/in-python-how-do-i-find-the-index-of-an-item-given-a-list-containing-it"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ["foo","bar","baz"].index('bar')
1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参照 &lt;a href="http://docs.python.org/2/tutorial/datastructures.html#more-on-lists"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-jie-diao-kong-ge-bao-gua-tab"&gt;如何截掉空格（包括tab)&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1185524/how-to-trim-whitespace-including-tabs"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;空白在字符串左右两边&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = "  \t a string example\t  "
s = s.strip()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;空白在字符串右边&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = s.rstrip()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;左边&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = s.lstrip()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外你可以指定要截掉的字符作为参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = s.strip(' \t\n\r')
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-jiang-yi-ge-shi-liu-jin-zhi-zi-fu-chuan-zhuan-wei-zheng-shu"&gt;如何将一个十六进制字符串转为整数&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/209513/convert-hex-string-to-int-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; int("a", 16)
10
&amp;gt;&amp;gt;&amp;gt; int("0xa",16)
10
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-jie-shu-tui-chu-yi-ge-pythonjiao-ben"&gt;如何结束退出一个python脚本&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/73663/terminating-a-python-script"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;详细 &lt;a href="http://docs.python.org/2/library/sys.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-wang-wen-jian-zhong-zhui-jia-wen-ben"&gt;如何往文件中追加文本&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/4706499/how-do-you-append-to-file-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open("test.txt", "a") as myfile:
    myfile.write("appended text")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用'a'或'a+b' mode打开文件，见 &lt;a href="http://docs.python.org/2/library/functions.html#open"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-shi-yong-bu-tong-fen-ge-fu-qie-fen-zi-fu-chuan"&gt;如何使用不同分隔符切分字符串&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1059559/python-strings-split-with-multiple-separators"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用re.split  &lt;a href="http://docs.python.org/2/library/re.html#re.split"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.split('\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
&amp;gt;&amp;gt;&amp;gt; re.split('(\W+)', 'Words, words, words.')
['Words', ', ', 'words', ', ', 'words', '.', '']
&amp;gt;&amp;gt;&amp;gt; re.split('\W+', 'Words, words, words.', 1)
['Words', 'words, words.'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者匹配获取正确的 re.findall&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hey, you - what are you doing here!?"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"[\w']+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-yi-ge-zi-fu-de-asciima"&gt;如何获取一个字符的ASCII码&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/227459/ascii-value-of-a-character-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ord('a')
97
&amp;gt;&amp;gt;&amp;gt; chr(97)
'a'
&amp;gt;&amp;gt;&amp;gt; chr(ord('a') + 3)
'd'
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外对于unicode&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; unichr(97)
u'a'
&amp;gt;&amp;gt;&amp;gt; unichr(1234)
u'\u04d2'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pai-xu-yi-ge-lie-biao-zhong-de-suo-you-dictgen-ju-dictnei-zhi"&gt;排序一个列表中的所有dict，根据dict内值&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/72899/in-python-how-do-i-sort-a-list-of-dictionaries-by-values-of-the-dictionary"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何排序如下列表，根据name或age&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单的做法；&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;高效的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="n"&gt;newlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_to_be_sorted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="du-wen-jian-dao-lie-biao-zhong"&gt;读文件到列表中&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/3277503/python-read-file-line-by-line-into-array"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f = open('filename')
lines = f.readlines()
f.close()
等价
with open(fname) as f:
    content = f.readlines()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-yong-httpxia-zai-yi-ge-wen-jian"&gt;如何用http下载一个文件&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/22676/how-do-i-download-a-file-over-http-using-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接使用urllib&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http://www.example.com/songs/mp3.mp3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"mp3.mp3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用urllib2,并提供一个进度条&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://download.thinkbroadband.com/10MB.zip"&lt;/span&gt;

&lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getheaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Content-Length"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Downloading: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; Bytes: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;file_size_dl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;block_sz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block_sz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;file_size_dl&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%10d&lt;/span&gt;&lt;span class="s2"&gt;  [&lt;/span&gt;&lt;span class="si"&gt;%3.2f%%&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_size_dl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_size_dl&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;100.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用第三方&lt;a href="http://docs.python-requests.org/en/latest/index.html"&gt;requests&lt;/a&gt;包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://download.thinkbroadband.com/10MB.zip"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10485760&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zai-virtualenvzhong-ru-he-shi-yong-bu-tong-de-pythonban-ben"&gt;在virtualenv中如何使用不同的python版本&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在创建virtualenv实例时，使用-p选项&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv -p /usr/bin/python2.6 &amp;lt;path/to/new/virtualenv/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-ru-he-jiang-yi-xing-chang-dai-ma-qie-cheng-duo-xing"&gt;python中如何将一行长代码切成多行&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/53162/how-can-i-do-a-line-break-line-continuation-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e = 'a' + 'b' + 'c' + 'd'
变成
e = 'a' + 'b' +
    'c' + 'd'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;括号中，可以直接换行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5,
            blahblah6, blahblah7)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非括号你可以这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = '1' + '2' + '3' + \
    '4' + '5'
或者
a = ('1' + '2' + '3' +
    '4' + '5')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以查看下代码风格： &lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;style guide&lt;/a&gt;
推荐是后一种，但某些个别情况下，加入括号会导致错误&lt;/p&gt;
&lt;h3 id="ru-he-zhao-dao-yi-ge-mu-lu-xia-suo-you-txtwen-jian"&gt;如何找到一个目录下所有.txt文件&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/3964681/find-all-files-in-directory-with-extension-txt-with-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href="http://docs.python.org/2/library/glob.html"&gt;glob&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/mydir"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*.txt"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用os.listdir&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/mydir"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者遍历目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/mydir"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-shi-yong-jue-dui-lu-jing-importyi-ge-mo-kuai"&gt;如何使用绝对路径import一个模块&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'module.name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/path/to/file.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-zai-bian-li-yi-ge-listshi-shan-chu-mou-xie-xuan-su"&gt;如何在遍历一个list时删除某些玄素&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用列表解析&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;somelist = [x for x in somelist if determine(x)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面那个操作将产生一个全新的somelist对象，而失去了对原有somelist对象的引用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#在原有对象上进行修改
somelist[:] = [x for x in somelist if determine(x)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用itertools&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ifilterfalse&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifilterfalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;determine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-qiang-zhi-shi-yong-fu-dian-shu-chu-fa"&gt;如何强制使用浮点数除法&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1267869/how-can-i-force-division-to-be-floating-point-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何强制使除法结果c是浮点数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c = a / b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用__future__&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="mf"&gt;0.66666666666666663&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者转换,如果除数或被除数是浮点数，那么结果也是浮点数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c = a / float(b)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-ying-she-liang-ge-lie-biao-cheng-wei-yi-ge-zi-dian"&gt;如何映射两个列表成为一个字典&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两个列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keys = ('name', 'age', 'food')
values = ('Monty', 42, 'spam')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何得到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dict = {'name' : 'Monty', 'age' : 42, 'food' : 'spam'}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用zip&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; keys = ['a', 'b', 'c']
&amp;gt;&amp;gt;&amp;gt; values = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; dictionary = dict(zip(keys, values))
&amp;gt;&amp;gt;&amp;gt; print dictionary
{'a': 1, 'b': 2, 'c': 3}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhao-dao-dang-qian-mu-lu-ji-wen-jian-suo-zai-mu-lu"&gt;找到当前目录及文件所在目录&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/5137497/find-current-directory-and-files-directory"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查找当前目录使用os.getcwd()&lt;/p&gt;
&lt;p&gt;查找某个文件的目录，使用, &lt;a href="http://docs.python.org/2/library/os.path.html"&gt;os.path&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wei-he-1-in-10-truezhi-xing-jie-guo-shi-false"&gt;为何1 in [1,0] == True执行结果是False&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/9284350/why-does-1-in-1-0-true-evaluate-to-false"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 1 in [1,0]             # This is expected
True
&amp;gt;&amp;gt;&amp;gt; 1 in [1,0] == True     # This is strange
False
&amp;gt;&amp;gt;&amp;gt; (1 in [1,0]) == True   # This is what I wanted it to be
True
&amp;gt;&amp;gt;&amp;gt; 1 in ([1,0] == True)   # But it's not just a precedence issue!
                           # It did not raise an exception on the second example.

Traceback (most recent call last):
  File "&amp;lt;pyshell#4&amp;gt;", line 1, in &amp;lt;module&amp;gt;
      1 in ([1,0] == True)
      TypeError: argument of type 'bool' is not iterable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里python使用了比较运算符链&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1 in [1,0] == True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将被转为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 in [1, 0]) and ([1, 0] == True)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很显然是false的&lt;/p&gt;
&lt;p&gt;同样的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a &amp;lt; b &amp;lt; c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会被转为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(a &amp;lt; b) and (b &amp;lt; c) # b不会被解析两次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/reference/expressions.html#not-in"&gt;具体文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pythonzhong-de-switchti-dai-yu-fa"&gt;Python中的switch替代语法&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python中没有switch，有什么推荐的处理方法么&lt;/p&gt;
&lt;p&gt;使用字典:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f(x):
    return {
        'a': 1,
        'b': 2,
    }.get(x, 9)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python Cookbook中的几种方式&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.activestate.com/recipes/410692/"&gt;Readable switch construction without lambdas or dictionaries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.activestate.com/recipes/410695/"&gt;Exception-based Switch-Case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.activestate.com/recipes/181064/"&gt;Using a Dictionary in place of a 'switch' statement&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-jiang-zi-fu-chuan-zhuan-huan-wei-datetime"&gt;如何将字符串转换为datetime&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/466345/converting-string-into-datetime"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以查看下time模块的&lt;a href="http://docs.python.org/2/library/time.html#time.strptime"&gt;strptime&lt;/a&gt;方法，反向操作是&lt;a href="http://docs.python.org/2/library/time.html#time.strftime"&gt;strftime&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;date_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Jun 1 2005  1:33PM'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'%b &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %Y %I:%M%p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior"&gt;扩展文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pythonzhong-you-mei-you-jian-dan-you-ya-de-fang-shi-ding-yi-dan-li-lei"&gt;Python中有没有简单优雅的方式定义单例类&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/31875/is-there-a-simple-elegant-way-to-define-singletons-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我不认为有必要，一个拥有函数的模块（不是类）可以作为很好的单例使用，它的所有变量被绑定到这个模块，无论如何都不能被重复实例化&lt;/p&gt;
&lt;p&gt;如果你确实想用一个类来实现，在python中不能创建私有类或私有构造函数,所以你不能隔离多个实例而仅仅通过自己的API来访问属性&lt;/p&gt;
&lt;p&gt;我还是认为将函数放入模块，并将其作为一个单例来使用是最好的办法&lt;/p&gt;
&lt;h3 id="jiang-yi-ge-zi-fu-chuan-zhuan-wei-yi-ge-zi-dian"&gt;将一个字符串转为一个字典&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/988228/converting-a-string-to-dictionary"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何将字符串转成字典，不适用eval&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = "{'muffin' : 'lolz', 'foo' : 'kitty'}"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从python2.6开始，你可以使用内建模块 ast.literal_eval&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;literal_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{'muffin' : 'lolz', 'foo' : 'kitty'}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'muffin'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'lolz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'kitty'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个做法比直接eval更安全
帮助文档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(ast.literal_eval)
Help on function literal_eval in module ast:

literal_eval(node_or_string)
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; eval("shutil.rmtree('mongo')")
Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
File "&amp;lt;string&amp;gt;", line 1, in &amp;lt;module&amp;gt;
File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
&amp;gt;&amp;gt;&amp;gt; ast.literal_eval("shutil.rmtree('mongo')")
Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 68, in literal_eval
    return _convert(node_or_string)
File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonru-he-jian-cha-yi-ge-dui-xiang-shi-listhuo-zhe-tupledan-shi-bu-shi-yi-ge-zi-fu-chuan"&gt;Python如何检查一个对象是list或者tuple，但是不是一个字符串&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1835018/python-check-if-an-object-is-a-list-or-tuple-but-not-string"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原来的做法是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert isinstance(lst, (list, tuple))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有没有更好的做法&lt;/p&gt;
&lt;p&gt;我认为下面的方式是你需要的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert not isinstance(lst, basestring)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原来的方式，你可能会漏过很多像列表，但并非list/tuple的&lt;/p&gt;
&lt;h3 id="shi-yong-if-x-is-not-none-huan-shi-if-not-x-is-none"&gt;使用 'if x is not None' 还是'if not x is None'&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/2710940/python-if-x-is-not-none-or-if-not-x-is-none"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我总想着使用 'if x is not None' 会更加简明&lt;/p&gt;
&lt;p&gt;但是google的Python风格指南使用的却是 'if x is not None'&lt;/p&gt;
&lt;p&gt;性能上没有什么区别，他们编译成相同的字节码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r262&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;71600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_FAST&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;COMPARE_OP&lt;/span&gt;               &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_FAST&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;COMPARE_OP&lt;/span&gt;               &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在风格上，我尽量避免 'not x is y' 这种形式，虽然编译器会认为和 'not (x is y)'一样，但是读代码的人或许会误解为 '(not x) is y'&lt;/p&gt;
&lt;p&gt;如果写作 'x is not y' 就不会有歧义&lt;/p&gt;
&lt;p&gt;最佳实践&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if x is not None:
    # Do something about x
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-yi-ge-wen-jian-de-chuang-jian-he-xiu-gai-shi-jian"&gt;如何获取一个文件的创建和修改时间&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/237079/how-to-get-file-creation-modification-date-times-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跨平台的获取文件创建及修改时间的方法&lt;/p&gt;
&lt;p&gt;你有很多选择&lt;/p&gt;
&lt;p&gt;使用&lt;a href="http://docs.python.org/release/2.5.2/lib/module-os.path.html#l2h-2177"&gt;os.path.getmtime&lt;/a&gt;或者&lt;a href="http://docs.python.org/release/2.5.2/lib/module-os.path.html#l2h-2178"&gt;os.path.getctime&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"last modified: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"created: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;a href="http://www.python.org/doc/2.5.2/lib/module-stat.html"&gt;os.stat&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ino&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nlink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"last modified: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mtime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，ctime()并非指*nix系统中文件创建时间，而是这个节点数据的最后修改时间&lt;/p&gt;
&lt;h3 id="ru-he-chi-kai-virtualenv"&gt;如何离开virtualenv&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/990754/how-to-leave-a-python-virtualenv"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用virtualenv时&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;me@mymachine:~$ workon env1
(env1)me@mymachine:~$ workon env2
(env2)me@mymachine:~$ workon env1
(env1)me@mymachine:~$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何退出某个环境&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-ren-wei-di-pao-chu-yi-ge-yi-chang"&gt;如何认为地抛出一个异常&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/2052390/how-do-i-manually-throw-raise-an-exception-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pythonic&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;raise Exception("I know python!")
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多可参考 &lt;a href="http://docs.python.org/2/reference/simple_stmts.html#the-raise-statement"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="zai-pythonzhong-ru-he-zhan-shi-er-jin-zhi-zi-mian-zhi"&gt;在Python中如何展示二进制字面值&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1476/how-do-you-express-binary-literals-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;十六进制可以&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 0x12AF
4783
&amp;gt;&amp;gt;&amp;gt; 0x100
256
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;八进制可以&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 01267
695
&amp;gt;&amp;gt;&amp;gt; 0100
64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二进制如何表示？&lt;/p&gt;
&lt;p&gt;Python 2.5 及更早版本: 可以表示为 int('01010101111',2)  但没有字面量&lt;/p&gt;
&lt;p&gt;Python 2.6 beta: 可以使用0b1100111 or 0B1100111 表示&lt;/p&gt;
&lt;p&gt;Python 2.6 beta: 也可以使用 0o27 or 0O27 (第二字字符是字母 O)&lt;/p&gt;
&lt;p&gt;Python 3.0 beta: 同2.6，但不支持027这种语法&lt;/p&gt;
&lt;h3 id="pythonzhong-jian-cha-lei-xing-de-quan-wei-fang-fa"&gt;Python中检查类型的权威方法&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/152580/whats-the-canonical-way-to-check-for-type-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;检查一个对象是否是给定类型或者对象是否继承于给定类型？&lt;/p&gt;
&lt;p&gt;比如给定一个对象o,如何判断是不是一个str&lt;/p&gt;
&lt;p&gt;检查是否是str&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type(o) is str
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查是否是str或者str的子类&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;isinstance(o, str)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的方法在某些情况下有用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;issubclass(type(o), str)
type(o) in ([str] + str.__subclasses__())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，你或许想要的是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;isinstance(o, basestring)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为unicode字符串可以满足判定(unicode 不是str的子类，但是str和unicode都是basestring的子类)&lt;/p&gt;
&lt;p&gt;可选的，isinstance可以接收多个类型参数，只要满足其中一个即True&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;isinstance(o, (str, unicode))
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-huo-qu-pythonde-site-packagesmu-lu-wei-zhi"&gt;如何获取Python的site-packages目录位置&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考 &lt;a href="http://docs.djangoproject.com/en/dev/topics/install/#remove-any-old-versions-of-django"&gt;How to Install Django" documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以在shell中执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"from distutils.sysconfig import get_python_lib; print(get_python_lib())"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更好的可读性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.sysconfig&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_python_lib&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_python_lib&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-he-de-zuo-yong"&gt;Python中*&lt;em&gt;和&lt;/em&gt;的作用&lt;/h3&gt;
&lt;p&gt;问题  &lt;a href="http://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;args和&lt;/em&gt;*kwargs允许函数拥有任意数量的参数，具体可以查看 &lt;a href="http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions"&gt;more on defining functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*args将函数所有参数转为序列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: def foo(*args):
...:     for a in args:
...:         print a
...:
...:

In [2]: foo(1)
1


In [4]: foo(1,2,3)
1
2
3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**kwargs 将函数所有关键字参数转为一个字典&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [5]: def bar(**kwargs):
...:     for a in kwargs:
...:         print a, kwargs[a]
...:
...:

In [6]: bar(name="one", age=27)
age 27
name one
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两种用法可以组合使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def foo(kind, *args, **kwargs):
    pass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*l的另一个用法是用于函数调用时的参数列表解包(unpack)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [9]: def foo(bar, lee):
...:     print bar, lee
...:
...:

In [10]: l = [1,2]

In [11]: foo(*l)
1 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Python3.0中，可以将*l放在等号左边用于赋值  &lt;a href="http://www.python.org/dev/peps/pep-3132/"&gt;Extended Iterable Unpacking&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-fu-chuan-ge-shi-hua-vs-format"&gt;字符串格式化 % vs format&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python2.6中引入string.format()方法，语法和原先%操作符的字符串格式化差异较大&lt;/p&gt;
&lt;p&gt;在什么情况下使用哪种更好?&lt;/p&gt;
&lt;p&gt;以下的输出是一致的，有什么区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="n"&gt;sub1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"python string!"&lt;/span&gt;
&lt;span class="n"&gt;sub2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"an arg"&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"i am a &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;sub1&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"i am a {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"with &lt;/span&gt;&lt;span class="si"&gt;%(kwarg)s&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'kwarg'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sub2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"with {kwarg}!"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwarg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.format 看起来更加强大，可以用在很多情况.&lt;/p&gt;
&lt;p&gt;例如你可以在格式化时重用传入的参数,而你用%时无法做到这点&lt;/p&gt;
&lt;p&gt;另一个比较讨厌的是，%只处理 一个变量或一个元组, 你或许会认为下面的语法是正确的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"hi there %s" % name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但当name恰好是(1,2,3)时，会抛出TypeError异常.为了保证总是正确的，你必须这么写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"hi there %s" % (name,)   # supply the single argument as a single-item tuple
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这么写很丑陋， .format没有这些问题&lt;/p&gt;
&lt;p&gt;什么时候不考虑使用.format&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;你对.format知之甚少
使用Python2.5
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-shi-yao-xiang-mu-jie-gou-geng-hao"&gt;Python中什么项目结构更好&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/193161/what-is-the-best-project-structure-for-a-python-application"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设你要开发一个较大的客户端程序(非web端),如何组织项目目录和递归？&lt;/p&gt;
&lt;p&gt;不要太在意这个.按你高兴的方式组织就行.Python项目很简单，所以没有那么多愚蠢的规则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/scripts or /bin  命令行脚本
/tests 测试
/lib C-语言包
/doc 文档
/apidoc api文档
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并且顶层目录包含README和Config&lt;/p&gt;
&lt;p&gt;难以抉择的是，是否使用/src树. /src,/lib,/bin在Python中没有明显的区别，和Java/c不同&lt;/p&gt;
&lt;p&gt;因为顶层/src文件夹显得没有什么实际意义，你的顶层目录可以是程序顶层架构的目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/foo
/bar
/baz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我建议将这些文件放入到"模块名"的目录中，这样，如果你在写一个应用叫做quux, /quux目录将包含所有这些东西&lt;/p&gt;
&lt;p&gt;你可以在PYTHONPATH中加入 /path/to/quux/foo,这样你可以QUUX.foo中重用模块&lt;/p&gt;
&lt;p&gt;另一个回答&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Project/
|-- bin/
|   |-- project
|
|-- project/
|   |-- test/
|   |   |-- __init__.py
|   |   |-- test_main.py
|   |
|   |-- __init__.py
|   |-- main.py
|
|-- setup.py
|-- README
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="argparseke-xuan-wei-zhi-can-shu"&gt;argparse可选位置参数&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/4480075/argparse-optional-positional-arguments"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;脚本运行 usage: installer.py dir [-h] [-v]&lt;/p&gt;
&lt;p&gt;dir是一个位置参数，定义如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser.add_argument('dir', default=os.getcwd())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我想让dir变为可选，如果未设置，使用os.getcwd()&lt;/p&gt;
&lt;p&gt;不幸的是，当我不指定dir时，得到错误 "Error: Too few arguments"&lt;/p&gt;
&lt;p&gt;尝试使用 nargs='?'&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser.add_argument('dir', nargs='?', default=os.getcwd())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-v'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'store_true'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_StoreTrueAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;option_strings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'-v'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'v'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dir'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;_StoreAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;option_strings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dir'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/home/vinay'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'somedir -v'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'somedir'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-v'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/home/vinay'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/home/vinay'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'somedir'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'somedir'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'somedir -h -v'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;positional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nb"&gt;dir&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;  &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-new-he-__init__de-yong-fa"&gt;Python中 &lt;strong&gt;new&lt;/strong&gt; 和 __init__的用法&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我很疑惑，为何__init__总是在__new__之后调用&lt;/p&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'key'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;A._dict&lt;/span&gt;:
            &lt;span class="kt"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"EXISTS"&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"NEW"&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"INIT"&lt;/span&gt;
        &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;a3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NEW
INIT

EXISTS
INIT

EXISTS
INIT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有木有人可以解释一下&lt;/p&gt;
&lt;p&gt;来自 &lt;a href="http://mail.python.org/pipermail/tutor/2008-April/061426.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用__new__,当你需要控制一个实例的生成&lt;/p&gt;
&lt;p&gt;使用__init__,当你需要控制一个实例的初始化&lt;/p&gt;
&lt;p&gt;__new__是实例创建的第一步.最先被调用，并且负责返回类的一个新实例.&lt;/p&gt;
&lt;p&gt;相反的,__init__不返回任何东西，只是负责在实例创建后进行初始化&lt;/p&gt;
&lt;p&gt;通常情况下，你不必重写__new__除非你写一个子类继承不可变类型，例如str,int,unicode或tuple&lt;/p&gt;
&lt;p&gt;你必须了解到，你尝试去做的用&lt;a href="http://en.wikipedia.org/wiki/Factory_object"&gt;Factory&lt;/a&gt;可以很好地解决，并且是最好的解决方式.使用__new__不是一个简洁的处理方式,一个&lt;a href="http://code.activestate.com/recipes/86900/"&gt;factory例子&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="python-self-jie-shi"&gt;Python 'self' 解释&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/2709821/python-self-explained"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;self关键字的作用是什么？
我理解他用户在创建class时具体化实例，但我无法理解为何需要给每个方法加入self作为参数.&lt;/p&gt;
&lt;p&gt;举例，在ruby中，我这么做:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;myClass&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;
&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我可以很好地理解，非常简单.但是在Python中，我需要去加入self:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;myClass&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有谁能解释下么？&lt;/p&gt;
&lt;p&gt;使用self关键字的原因是，Python没有@语法用于引用实例属性.Python决定用一种方式声明方法:实例对象自动传递给属于它的方法,但不是接收自动化：方法的第一个参数是调用这个方法的实例对象本身.这使得方法整个同函数一致,并且由你自己决定真实的名（虽然self是约定，但当你使用其他名的时候，通常人们并不乐意接受）.self对于代码不是特殊的，只是另一个对象.&lt;/p&gt;
&lt;p&gt;Python本来可以做一些用来区分真实的名字和属性的区别 —— 像Ruby有的特殊语法，或者像C++/Java的命令声明,或者其他可能的的语法 —— 但是Python没有这么做.Python致力于使事情变得明确简单，让事情是其本身，虽然并不是全部地方都这么做，但是实例属性石这么做的！这就是为什么给一个实例属性赋值时需要知道是给哪个实例赋值,并且，这就是为什么需要self&lt;/p&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def length_global(vector):
    return math.sqrt(vector.x ** 2 + vector.y ** 2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v_instance.length()
转为
Vector.length(v_instance)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wei-shi-yao-pythonde-privatefang-fa-bing-bu-shi-zhen-zheng-de-si-you-fang-fa"&gt;为什么Python的'private'方法并不是真正的私有方法&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python允许我们创建'private' 函数：变量以两个下划线开头，像这样： &lt;em&gt;__myPrivateMethod()&lt;/em&gt;.
但是，如何解释：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class MyClass:
...     def myPublicMethod(self):
...             print 'public method'
...     def __myPrivateMethod(self):
...             print 'this is private!!'
...
&amp;gt;&amp;gt;&amp;gt; obj = MyClass()
&amp;gt;&amp;gt;&amp;gt; obj.myPublicMethod()
public method
&amp;gt;&amp;gt;&amp;gt; obj.__myPrivateMethod()
Traceback (most recent call last):
File "", line 1, in
AttributeError: MyClass instance has no attribute '__myPrivateMethod'
&amp;gt;&amp;gt;&amp;gt; dir(obj)
['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']
&amp;gt;&amp;gt;&amp;gt; obj._MyClass__myPrivateMethod()
this is private!!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dir(obj) 和 obj._MyClass__myPrivateMethod()&lt;/p&gt;
&lt;p&gt;回答&lt;/p&gt;
&lt;p&gt;‘private'只是用作，确保子类不会意外覆写父类的私有方法和属性.不是为了保护外部意外访问而设计的！&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class Foo(object):
...     def __init__(self):
...         self.__baz = 42
...     def foo(self):
...         print self.__baz
...
&amp;gt;&amp;gt;&amp;gt; class Bar(Foo):
...     def __init__(self):
...         super(Bar, self).__init__()
...         self.__baz = 21
...     def bar(self):
...         print self.__baz
...
&amp;gt;&amp;gt;&amp;gt; x = Bar()
&amp;gt;&amp;gt;&amp;gt; x.foo()
42
&amp;gt;&amp;gt;&amp;gt; x.bar()
21
&amp;gt;&amp;gt;&amp;gt; print x.__dict__
{'_Bar__baz': 21, '_Foo__baz': 42}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，这对于两个同名的类没有作用&lt;/p&gt;
&lt;p&gt;另外，可以查看diveintopython的解释 &lt;a href="http://www.faqs.org/docs/diveintopython/fileinfo_private.html#d0e11521"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pythonzhong-lei-fang-fa-de-zuo-yong-shi-shi-yao"&gt;Python中类方法的作用是什么&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/38238/what-are-class-methods-in-python-for"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我现在意识到，我不需要像我在使用java的static方法那样使用类方法，但是我不确定什么时候使用&lt;/p&gt;
&lt;p&gt;谁能通过一个好的例子解释下Python中的类方法，至少有人能告诉我什么时候确实需要使用类方法&lt;/p&gt;
&lt;p&gt;类方法用在：当你需要使用不属于任何明确实例的方法,但同时必须涉及类.有趣的是，你可以在子类中覆写，这在Java的static方法和Python的模块级别函数中是不可能做到的&lt;/p&gt;
&lt;p&gt;如果你有一个MyClass, 并且一个模块级别函数操作MyClass(工厂，依赖注入桩等等), 声明一个类方法.然后这个类方法可以在子类中调用&lt;/p&gt;
&lt;h3 id="ru-he-shan-chu-yi-ge-listzhong-zhong-fu-de-zhi-tong-shi-bao-zheng-yuan-you-shun-xu"&gt;如何删除一个list中重复的值同时保证原有顺序&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我是这么做的额&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def uniq(input):
output = []
for x in input:
    if x not in output:
    output.append(x)
return output
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有什么更好的方法？&lt;/p&gt;
&lt;p&gt;你可以在这里找到一些可用的方法 &lt;a href="http://www.peterbe.com/plog/uniqifiers-benchmark"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最快的一个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f7(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你需要在同一个数据集中多次是哦那个这个方法，或许你可以使用ordered set处理 http://code.activestate.com/recipes/528878/&lt;/p&gt;
&lt;p&gt;插入，删除和归属判断复杂度都是O(1)&lt;/p&gt;
&lt;h3 id="you-shi-yao-fang-fa-ke-yi-huo-qu-xi-tong-dang-qian-yong-hu-ming-yao"&gt;有什么方法可以获取系统当前用户名么?&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/842059/is-there-a-portable-way-to-get-the-current-username-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至少在Linux和Windows下都可用.就像 os.getuid&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.getuid()
42
&amp;gt;&amp;gt;&amp;gt; os.getusername()
'slartibartfast'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看看 &lt;a href="http://docs.python.org/2/library/getpass.html"&gt;getpass&lt;/a&gt; 模块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'kostya'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可用: Unix, Windows&lt;/p&gt;
&lt;h3 id="python-assertzui-jia-shi-jian"&gt;Python assert最佳实践&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/944592/best-practice-for-python-assert"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有没有代码实例使用assert作为独立代码，而不是仅用来debug&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert x &amp;gt;= 0, 'x is less than zero'

类似
if x &amp;lt; 0:
    raise Exception, 'x is less than zero'

有什么方法，可以设定一个规则就像 if x \&amp;lt; 0 抛出错误但是不是通过try/except/finally检查的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搞晕了：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;原文 Also, is there any way to set a business rule like if x \&amp;lt; 0 raise error that is always checked without the try/except/finally so, if at anytime throughout the code x is less than 0 an error is raised, like if you set assert x &amp;lt; 0 at the start of a function, anywhere within the function where x becomes less then 0 an exception is raised?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回答&lt;/p&gt;
&lt;p&gt;Assert仅用在，测试那些从不发生的情况！目的是让程序尽早失败&lt;/p&gt;
&lt;p&gt;Exception用在，那些可以明确知道会发生的错误，并且建议总是创建自己的异常类&lt;/p&gt;
&lt;p&gt;例如，你写一个函数从配置文件中读取配置放入字典，文件格式不正确抛出一个ConfigurationSyntaxError,同时你可以assert返回值非None&lt;/p&gt;
&lt;p&gt;在你的例子中，如果x是通过用户接口或外部传递设置的，最好使用exception&lt;/p&gt;
&lt;p&gt;如果x仅是同一个程序的内部代码，使用assert&lt;/p&gt;
&lt;h3 id="zai-fei-chuang-jian-quan-ju-bian-liang-de-di-fang-shi-yong-quan-ju-bian-liang"&gt;在非创建全局变量的地方使用全局变量&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果我在一个函数中创建了全局变量，如何在另一个函数中使用？&lt;/p&gt;
&lt;p&gt;回答：&lt;/p&gt;
&lt;p&gt;你可以在给全局变量赋值的函数中声明 global&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print globvar     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我猜想这么做的原因是，全局变量很危险，Python想要确保你真的知道你要对一个全局的变量进行操作&lt;/p&gt;
&lt;p&gt;如果你想知道如何在模块间使用全局变量，查看其他回答&lt;/p&gt;
&lt;h3 id="ru-he-zai-dan-yi-biao-da-shi-zhong-he-bing-liang-ge-pythonzi-dian"&gt;如何在单一表达式中合并两个Python字典&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/38987/how-can-i-merge-union-two-python-dictionaries-in-a-single-expression"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; x = {'a':1, 'b': 2}
&amp;gt;&amp;gt;&amp;gt; y = {'b':10, 'c': 11}
&amp;gt;&amp;gt;&amp;gt; z = x.update(y)
&amp;gt;&amp;gt;&amp;gt; print z
None
&amp;gt;&amp;gt;&amp;gt; x
{'a': 1, 'b': 10, 'c': 11}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我想要最终合并结果在z中，不是x，我要怎么做？&lt;/p&gt;
&lt;p&gt;回答&lt;/p&gt;
&lt;p&gt;这种情况下，可以使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;z = dict(x.items() + y.items())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个表达式将会实现你想要的，最终结果z，并且相同key的值，将会是y中key对应的值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; x = {'a':1, 'b': 2}
&amp;gt;&amp;gt;&amp;gt; y = {'b':10, 'c': 11}
&amp;gt;&amp;gt;&amp;gt; z = dict(x.items() + y.items())
&amp;gt;&amp;gt;&amp;gt; z
{'a': 1, 'c': 11, 'b': 10}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果在Python3中,会变得有些复杂&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; z = dict(list(x.items()) + list(y.items()))
&amp;gt;&amp;gt;&amp;gt; z
{'a': 1, 'c': 11, 'b': 10}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-shi-yong-pip-geng-xin-suo-you-bao"&gt;如何使用 pip 更新所有包&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何使用pip更新python的所有包&lt;/p&gt;
&lt;p&gt;没有内置的标志可以实现&lt;/p&gt;
&lt;p&gt;但是你可以这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pythonzhong-sheng-ming-exceptionde-fang-fa"&gt;Python中声明exception的方法&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在python2.6中定义异常得到警告&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class MyError(Exception):
...     def __init__(self, message):
...         self.message = message
...
&amp;gt;&amp;gt;&amp;gt; MyError("foo")
_sandbox.py:3: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;问题很长，大意如标题&lt;/p&gt;
&lt;p&gt;回答&lt;/p&gt;
&lt;p&gt;或许我理解错了，但是为什么不这样做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要重写什么，例如传递额外参数，可以这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="kr"&gt;constructor&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;needs&lt;/span&gt;
        &lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;custom&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Errors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以通过第二个参数传递error 字典, 之后通过e.Errors获取&lt;/p&gt;
&lt;h3 id="zai-pythonzhong-shi-yong-countercuo-wu"&gt;在Python中使用Counter错误&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/13311094/counter-in-collections-module-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当使用Counter时，出现异常&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'module'&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;'Counter'&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt; &lt;span class="nn"&gt;Counter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;版本问题，Counter在 python2.7中才被加入到这个模块，你可能使用了Python2.6或更老的版本&lt;/p&gt;
&lt;p&gt;可以看下 &lt;a href="http://docs.python.org/2/library/collections.html#collections.Counter"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果要在 Python2.6或2.5版本使用，可以看 &lt;a href="http://code.activestate.com/recipes/576611-counter-class/"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="ru-he-shan-chu-python-easy_installan-zhuang-de-bao"&gt;如何删除Python easy_install安装的包&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1231688/how-do-i-remove-packages-installed-with-pythons-easy-install"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/pip/"&gt;pip&lt;/a&gt;, setuptools/easy_install的另一种选择，提供uninstall命令&lt;/p&gt;
&lt;p&gt;首先，移除依赖&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install -m &lt;span class="o"&gt;[&lt;/span&gt;PACKAGE&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，手动删除egg文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf .../python2.X/site-packages/&lt;span class="o"&gt;[&lt;/span&gt;PACKAGE&lt;span class="o"&gt;]&lt;/span&gt;.egg
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zai-pythonzhong-ru-he-jie-xi-xml"&gt;在Python中如何解析xml&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1912434/how-do-i-parse-xml-in-python"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;bar&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;type&lt;/span&gt; &lt;span class="na"&gt;foobar=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;type&lt;/span&gt; &lt;span class="na"&gt;foobar=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/bar&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何解析获取xml文件中内容&lt;/p&gt;
&lt;p&gt;我建议使用 &lt;a href="http://docs.python.org/2/library/xml.etree.elementtree.html"&gt;ElementTree&lt;/a&gt; (有其他可用的实现，例如 &lt;a href="http://lxml.de/"&gt;lxml&lt;/a&gt;，他们只是更快, ElementTree提供更简单的编程api)&lt;/p&gt;
&lt;p&gt;在使用XML建立Element实例之后，例如使用 &lt;a href="http://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML"&gt;XML&lt;/a&gt; 函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for atype in e.findall('type')
    print(atype.get('foobar'))
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ru-he-jiang-yi-ge-python-timestruct_timedui-xiang-zhuan-huan-wei-yi-ge-datetimedui-xiang"&gt;如何将一个Python time.struct_time对象转换为一个datetime对象&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/1697815/how-do-you-convert-a-python-time-struct-time-object-into-a-datetime-object"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;a href=""&gt;time.mktime()&lt;/a&gt; 将time元组(本地时间)转成秒， 然后使用 datetime.fromtimestamp() 转成datetime对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mktime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="translation"></category></entry><entry><title>[翻译]理解python中的装饰器</title><link href="http://www.wklken.me/posts/2013/07/19/python-translate-decorator.html" rel="alternate"></link><published>2013-07-19T00:00:00+08:00</published><updated>2013-07-19T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-07-19:/posts/2013/07/19/python-translate-decorator.html</id><summary type="html">&lt;p&gt;有人翻译过了，很多转载，暂时没找到原文，各个地方的排版不一样，排版（代码格式），代码注解等都不怎么好&lt;/p&gt;
&lt;p&gt;练练手，顺手一翻吧，权当加深理解&lt;/p&gt;
&lt;p&gt;来源stackoverflow上的问题  &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很长哦(应该是巨长...分了三次搞完)，要有耐心看完&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-han-shu-shi-dui-xiang"&gt;python的函数是对象&lt;/h2&gt;
&lt;p&gt;要理解装饰器，首先，你必须明白，在python中，函数是对象. 这很重要.&lt;/p&gt;
&lt;p&gt;简单例子来理解为什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def shout(word="yes"):
    return word.capitalize()+"!"

print shout()
# outputs : 'Yes!'

# 作为一个对象，你可以讲函数赋值给另一个对象
scream = shout

# 注意到这里我们并没有使用括号：我们不是调用函数，而是将函数'shout'赋给变量'scream'
# 这意味着，你可以通过'scream'调用'shout'

print scream()
# outputs : 'Yes!'

# 不仅如此，你可以删除老的名称'shout' …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;有人翻译过了，很多转载，暂时没找到原文，各个地方的排版不一样，排版（代码格式），代码注解等都不怎么好&lt;/p&gt;
&lt;p&gt;练练手，顺手一翻吧，权当加深理解&lt;/p&gt;
&lt;p&gt;来源stackoverflow上的问题  &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很长哦(应该是巨长...分了三次搞完)，要有耐心看完&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-han-shu-shi-dui-xiang"&gt;python的函数是对象&lt;/h2&gt;
&lt;p&gt;要理解装饰器，首先，你必须明白，在python中，函数是对象. 这很重要.&lt;/p&gt;
&lt;p&gt;简单例子来理解为什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def shout(word="yes"):
    return word.capitalize()+"!"

print shout()
# outputs : 'Yes!'

# 作为一个对象，你可以讲函数赋值给另一个对象
scream = shout

# 注意到这里我们并没有使用括号：我们不是调用函数，而是将函数'shout'赋给变量'scream'
# 这意味着，你可以通过'scream'调用'shout'

print scream()
# outputs : 'Yes!'

# 不仅如此，你可以删除老的名称'shout'，但是通过'scream'依旧可以访问原有函数

del shout
try:
    print shout()
except NameError, e:
    print e
    #outputs: "name 'shout' is not defined"

print scream()
# outputs: 'Yes!'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，记住这点，我们将会很快用到它.&lt;/p&gt;
&lt;p&gt;Python函数另一个有趣的特性是，函数可以被定义在另一个函数里面&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def talk():
    # 你可以定义一个函数
    def whisper(word="yes"):
        return word.lower()+"..."

    # ... 并且立刻调用
    print whisper()

# 每次当你调用"talk", 都会定义"whisper"
# 并且在"talk"中被调用
talk()
# outputs:
# "yes..."

#但是在"talk"外部，函数"whisper"不存在！
try:
    print whisper()
except NameError, e:
    print e
    #outputs : "name 'whisper' is not defined"*
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="han-shu-yin-yong"&gt;函数引用&lt;/h2&gt;
&lt;p&gt;好了，到这里了，接下来是有意思的部分，我们刚才看到 函数是对象，然后:&lt;/p&gt;
&lt;p&gt;1.函数可以赋值给一个变量&lt;/p&gt;
&lt;p&gt;2.函数可以定义在另一个函数内部&lt;/p&gt;
&lt;p&gt;即，这也意味着一个函数可以返回另一个函数:-）,让我们来看另一段代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def getTalk(type="shout"):

    # 定义函数
    def shout(word="yes"):
        return word.capitalize()+"!"

    def whisper(word="yes") :
        return word.lower()+"...";

    # 返回函数
    if type == "shout":
        # 没有使用"()", 并不是要调用函数，而是要返回函数对象
        return shout
    else:
        return whisper

# 如何使用？

# 将函数返回值赋值给一个变量
talk = getTalk()

# 我们可以打印下这个函数对象
print talk
#outputs : &amp;lt;function shout at 0xb7ea817c&amp;gt;

# 这个对象是函数的返回值
print talk()
#outputs : Yes!

# 不仅如此，你还可以直接使用之
print getTalk("whisper")()
#outputs : yes...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是稍等，如果你可以返回一个函数，那么你也可以将函数作为参数传递&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def doSomethingBefore(func):
    print "I do something before then I call the function you gave me"
    print func()

doSomethingBefore(scream)
#outputs:
#I do something before then I call the function you gave me
#Yes!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，现在你已经了解要理解装饰器的每件事.&lt;/p&gt;
&lt;p&gt;装饰器就是封装器，可以让你在被装饰函数之前或之后执行代码，而不必修改函数本身&lt;/p&gt;
&lt;h2 id="shou-gong-zhuang-shi-qi"&gt;手工装饰器&lt;/h2&gt;
&lt;p&gt;如何书写一个装饰器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 装饰器是一个以另一个函数为参数的函数
def my_shiny_new_decorator(a_function_to_decorate):

    # 在这里，装饰器定义一个函数： 包装器.
    # 这个函数将原始函数进行包装，以达到在原始函数之前、之后执行代码的目的
    def the_wrapper_around_the_original_function():

        # 将你要在原始函数之前执行的代码放到这里
        print "Before the function runs"

        # 调用原始函数(需要带括号)
        a_function_to_decorate()

        # 将你要在原始函数之后执行的代码放到这里
        print "After the function runs"

    # 代码到这里，函数‘a_function_to_decorate’还没有被执行
    # 我们将返回刚才创建的这个包装函数
    # 这个函数包含原始函数及要执行的附加代码，并且可以被使用
    return the_wrapper_around_the_original_function

# 创建一个函数
def a_stand_alone_function():
    print "I am a stand alone function, don't you dare modify me"

a_stand_alone_function()
#outputs: I am a stand alone function, don't you dare modify me

# 好了，在这里你可以装饰这个函数，扩展其行为
# 将函数传递给装饰器，装饰器将动态地将其包装在任何你想执行的代码中，然后返回一个新的函数
a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)

# 调用新函数，可以看到装饰器的效果
a_stand_alone_function_decorated()
#outputs:
#Before the function runs
#I am a stand alone function, don't you dare modify me
#After the function runs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，或许你想每次调用a_stand_alone_function都使用a_stand_alone_function_decorated替代之
很简单，只需要将a_stand_alone_function用my_shiny_new_decorator装饰返回&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function()
#outputs:
#Before the function runs
#I am a stand alone function, don't you dare modify me
#After the function runs

# 这就是装饰器做的事情!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zhuang-shi-qi-chan-shu"&gt;装饰器阐述&lt;/h2&gt;
&lt;p&gt;前面的例子，使用装饰器语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@my_shiny_new_decorator
def another_stand_alone_function():
    print "Leave me alone"

another_stand_alone_function()
#outputs:
#Before the function runs
#Leave me alone
#After the function runs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的，就是这么简单. @decorator是下面代码的简写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nother_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰器只是 &lt;a href="http://en.wikipedia.org/wiki/Decorator_pattern"&gt;装饰器模式&lt;/a&gt;的python实现&lt;/p&gt;
&lt;p&gt;python代码中还存在其他几个经典的设计模式，以方便开发，例如迭代器iterators&lt;/p&gt;
&lt;p&gt;当然，你可以累加装饰器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bread(func):
    def wrapper():
        print "&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/''''''\&amp;gt;"
        func()
        print "&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;\______/&amp;gt;"
    return wrapper

def ingredients(func):
    def wrapper():
        print "#tomatoes#"
        func()
        print "~salad~"
    return wrapper

def sandwich(food="--ham--"):
    print food

sandwich()
#outputs: --ham--

#累加两个装饰器
sandwich = bread(ingredients(sandwich))
sandwich()
#outputs:
#&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;/''''''\&amp;gt;
# #tomatoes#
# --ham--
# ~salad~
#&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;\______/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用python装饰器语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@bread
@ingredients
def sandwich(food="--ham--"):
    print food

sandwich()
#outputs:
#&amp;lt;/''''''\&amp;gt;
# #tomatoes#
# --ham--
# ~salad~
#&amp;lt;\______/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰器位置的顺序很重要&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@ingredients
@bread
def strange_sandwich(food="--ham--"):
    print food

    strange_sandwich()
#outputs:
##tomatoes#
#&amp;lt;/''''\&amp;gt;
# --ham--
#&amp;lt;\______/&amp;gt;
# ~salad~'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-hou-hui-da-wen-ti"&gt;最后回答问题&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# bold装饰器
def makebold(fn):
    def wrapper():
        # 在前后加入标签
        return "&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;" + fn() + "&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;"
    return wrapper

# italic装饰器
def makeitalic(fn):
    def wrapper():
        # 加入标签
        return "&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;" + fn() + "&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;"
    return wrapper

@makebold
@makeitalic
def say():
    return "hello"

print say()
#outputs: &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&lt;/span&gt;hello&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;

# 等价的代码
def say():
    return "hello"
say = makebold(makeitalic(say))

print say()
#outputs: &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&lt;/span&gt;hello&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，到这里你可以高兴地离开了，或者来看下一些装饰器高级的用法&lt;/p&gt;
&lt;h3 id="xiang-zhuang-shi-qi-han-shu-chuan-di-can-shu"&gt;向装饰器函数传递参数&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 这不是黑魔法，你只需要让包装传递参数:

def a_decorator_passing_arguments(function_to_decorate):
    def a_wrapper_accepting_arguments(arg1, arg2):
            print "I got args! Look:", arg1, arg2
            function_to_decorate(arg1, arg2)
    return a_wrapper_accepting_arguments

# 当你调用装饰器返回的函数，实际上是调用包装函数，所以给包装函数传递参数即可将参数传给装饰器函数

@a_decorator_passing_arguments
def print_full_name(first_name, last_name):
    print "My name is", first_name, last_name

print_full_name("Peter", "Venkman")
# outputs:
#I got args! Look: Peter Venkman
#My name is Peter Venkman
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhuang-shi-fang-fa"&gt;装饰方法&lt;/h3&gt;
&lt;p&gt;Python中对象的方法和函数是一样的，除了对象的方法首个参数是指向当前对象的引用(self)。这意味着你可以用同样的方法构建一个装饰器，只是必须考虑self&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_friendly_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;method_to_decorate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;lie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;lie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;lie&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;very&lt;/span&gt; &lt;span class="s s-Atom"&gt;friendly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;decrease&lt;/span&gt; &lt;span class="s s-Atom"&gt;age&lt;/span&gt; &lt;span class="s s-Atom"&gt;even&lt;/span&gt; &lt;span class="nf"&gt;more&lt;/span&gt; &lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;method_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;lie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="s s-Atom"&gt;wrapper&lt;/span&gt;

&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Lucy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;@method_friendly_decorator&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayYourAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;lie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"I am %s, what did you think?"&lt;/span&gt; &lt;span class="c1"&gt;% (self.age + lie)&lt;/span&gt;

&lt;span class="s s-Atom"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Lucy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s s-Atom"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sayYourAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#outputs: I am 26, what did you think?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，你可以构造一个更加通用的装饰器，可以作用在任何函数或对象方法上，而不必关系其参数
使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*args, **kwargs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;a_decorator_passing_arbitrary_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;function_to_decorate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;包装函数可以接受任何参数&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;a_wrapper_accepting_arbitrary_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Do I have args?:"&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;kwargs&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;然后你可以解开参数，&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;如果你对此不是很熟悉，可以参考&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/&lt;/span&gt;
        &lt;span class="nx"&gt;function_to_decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a_wrapper_accepting_arbitrary_arguments&lt;/span&gt;

&lt;span class="kd"&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;function_with_no_argument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Python is cool, no argument here."&lt;/span&gt;

&lt;span class="nx"&gt;function_with_no_argument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="o"&gt;?:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;cool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;function_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;

&lt;span class="nx"&gt;function_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="o"&gt;?:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="kd"&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;function_with_named_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platypus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Why not ?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Do %s, %s and %s like platypus? %s"&lt;/span&gt; &lt;span class="o"&gt;%\&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platypus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;function_with_named_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bill"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Linus"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Steve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platypus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Indeed!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Bill'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Linus'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Steve'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'platypus'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Indeed!'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;Bill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Linus&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Steve&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;platypus&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Indeed&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Mary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;

    &lt;span class="kd"&gt;@a_decorator_passing_arbitrary_arguments&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;sayYourAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lie&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"I am %s, what did you think ?"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Mary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayYourAge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="o"&gt;?:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mary&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xb7d303ac&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;did&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;think&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xiang-zhuang-shi-qi-chuan-di-can-shu"&gt;向装饰器传递参数&lt;/h3&gt;
&lt;p&gt;好了，现在你或许会想是否可以向装饰器本身传递参数&lt;/p&gt;
&lt;p&gt;装饰器必须使用函数作为参数，所以这看起来会有些复杂，你不能直接传递参数给装饰器本身&lt;/p&gt;
&lt;p&gt;在开始处理这个问题前，看一点提醒&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 装饰器是普通的方法
def my_decorator(func):
    print "I am a ordinary function"
    def wrapper():
        print "I am function returned by the decorator"
        func()
    return wrapper

# 所以，你可以不通过@调用它

def lazy_function():
    print "zzzzzzzz"

decorated_function = my_decorator(lazy_function)
#outputs: I am a ordinary function

# It outputs "I am a ordinary function", because that's just what you do:

# 调用一个函数，没有什么特别
@my_decorator
def lazy_function():
    print "zzzzzzzz"

#outputs: I am a ordinary function
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面两个形式本质上是相同的， "my_decorator" 被调用.所以当你使用"@my_decorator",告诉python一个函数被变量"my_decorator"标记
这十分重要,因为你提供的标签直接指向装饰器...或者不是，继续&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 声明一个用于创建装饰器的函数
def decorator_maker():

    print "I make decorators! I am executed only once: "+\
          "when you make me create a decorator."

    def my_decorator(func):
        print "I am a decorator! I am executed only when you decorate a function."

        def wrapped():
            print ("I am the wrapper around the decorated function. "
                  "I am called when you call the decorated function. "
                  "As the wrapper, I return the RESULT of the decorated function.")
            return func()

        print "As the decorator, I return the wrapped function."
        return wrapped

    print "As a decorator maker, I return a decorator"
    return my_decorator

# Let's create a decorator. It's just a new function after all.
# 创建一个装饰器，本质上只是一个函数
new_decorator = decorator_maker()
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator

# 使用装饰器装饰函数

def decorated_function():
    print "I am the decorated function."

decorated_function = new_decorator(decorated_function)
#outputs:
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function

# 调用被装饰函数
decorated_function()
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们跳过中间变量，做同样的事情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def decorated_function():
    print "I am the decorated function."
decorated_function = decorator_maker()(decorated_function)
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.

# 最后:
decorated_function()    
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用装饰器语法，更简短&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@decorator_maker()
def decorated_function():
    print "I am the decorated function."
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.

#最终: 
decorated_function()    
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，我们使用@调用一个函数&lt;/p&gt;
&lt;p&gt;回到问题，向装饰器本身传递参数，如果我们可以通过函数去创建装饰器，那么我们可以传递参数给这个函数，对么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):

    print "I make decorators! And I accept arguments:", decorator_arg1, decorator_arg2

    def my_decorator(func):
        # 这里能传递参数的能力，是闭包的特性
        # 更多闭包的内容，参考 http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python
        print "I am the decorator. Somehow you passed me arguments:", decorator_arg1, decorator_arg2

        # 不要搞混了装饰器参数和函数参数
        def wrapped(function_arg1, function_arg2) :
            print ("I am the wrapper around the decorated function.\n"
                  "I can access all the variables\n"
                  "\t- from the decorator: {0} {1}\n"
                  "\t- from the function call: {2} {3}\n"
                  "Then I can pass them to the decorated function"
                  .format(decorator_arg1, decorator_arg2,
                          function_arg1, function_arg2))
            return func(function_arg1, function_arg2)

        return wrapped

    return my_decorator

@decorator_maker_with_arguments("Leonard", "Sheldon")
def decorated_function_with_arguments(function_arg1, function_arg2):
    print ("I am the decorated function and only knows about my arguments: {0}"
           " {1}".format(function_arg1, function_arg2))

decorated_function_with_arguments("Rajesh", "Howard")
#outputs:
#I make decorators! And I accept arguments: Leonard Sheldon
#I am the decorator. Somehow you passed me arguments: Leonard Sheldon
#I am the wrapper around the decorated function. 
#I can access all the variables 
#   - from the decorator: Leonard Sheldon 
#   - from the function call: Rajesh Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Rajesh Howard
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，that's it.参数可以设置为变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c1 = "Penny"
c2 = "Leslie"

@decorator_maker_with_arguments("Leonard", c1)
def decorated_function_with_arguments(function_arg1, function_arg2):
    print ("I am the decorated function and only knows about my arguments:"
           " {0} {1}".format(function_arg1, function_arg2))

decorated_function_with_arguments(c2, "Howard")
#outputs:
#I make decorators! And I accept arguments: Leonard Penny
#I am the decorator. Somehow you passed me arguments: Leonard Penny
#I am the wrapper around the decorated function. 
#I can access all the variables 
#   - from the decorator: Leonard Penny 
#   - from the function call: Leslie Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Leslie Howard
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以看到，你可以使用像其它函数一样使用这个方法向装饰器传递参数.如果你愿意你甚至可以使用 &lt;em&gt;arg &lt;/em&gt;*kwargs.&lt;/p&gt;
&lt;p&gt;但是记住，装饰器仅在Python代码导入时被调用一次,之后你不能动态地改变参数.当你使用"import x",函数已经被装饰，所以你不能改变什么&lt;/p&gt;
&lt;h3 id="lian-xi-yi-ge-zhuang-shi-zhuang-shi-qi-de-zhuang-shi-qi"&gt;练习：一个装饰装饰器的装饰器&lt;/h3&gt;
&lt;p&gt;作为奖励，我将展示创建可以处理任何参数的装饰器代码片段. 毕竟，为了接收参数，必须使用另一个函数来创建装饰器&lt;/p&gt;
&lt;p&gt;让我们来给装饰器写一个装饰器:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 装饰 装饰器 的装饰器 (好绕.....)
def decorator_with_args(decorator_to_enhance):
    """ 
    这个函数将作为装饰器使用
    它必须装饰另一个函数
    它将允许任何接收任意数量参数的装饰器
    方便你每次查询如何实现
    """

    # 同样的技巧传递参数
    def decorator_maker(*args, **kwargs):

        # 创建一个只接收函数的装饰器
        # 但是这里保存了从创建者传递过来的的参数
        def decorator_wrapper(func):

            # 我们返回原始装饰器的结果
            # 这是一个普通的函数，返回值是另一个函数
            # 陷阱：装饰器必须有这个特殊的签名，否则不会生效
            return decorator_to_enhance(func, *args, **kwargs)

        return decorator_wrapper

    return decorator_maker
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 你创建这个函数是作为一个装饰器，但是给它附加了一个装饰器
# 别忘了，函数签名是： "decorator(func, *args, **kwargs)"
@decorator_with_args 
def decorated_decorator(func, *args, **kwargs): 
    def wrapper(function_arg1, function_arg2):
        print "Decorated with", args, kwargs
        return func(function_arg1, function_arg2)
    return wrapper

# 然后，使用这个装饰器(your brand new decorated decorator)

@decorated_decorator(42, 404, 1024)
def decorated_function(function_arg1, function_arg2):
    print "Hello", function_arg1, function_arg2

decorated_function("Universe and", "everything")
#outputs:
#Decorated with (42, 404, 1024) {}
#Hello Universe and everything

# Whoooot!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我知道，到现在你一定会有这种感觉，就像你听一个人说“在理解递归之前，你必须首先了解递归”，但是现在，掌握这儿你有没有觉得很棒？&lt;/p&gt;
&lt;h2 id="zhuang-shi-qi-shi-yong-zui-jia-shi-jian_1"&gt;装饰器使用最佳实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这是Python2.4的新特性，所以确保你的代码在2.4及之上的版本运行&lt;/li&gt;
&lt;li&gt;装饰器降低了函数调用的性能，记住这点&lt;/li&gt;
&lt;li&gt;You can not un-decorate a function. There are hacks to create decorators that can be removed but nobody uses them. So once a function is decorated, it's done. For all the code.&lt;/li&gt;
&lt;li&gt;装饰器包装函数，所以很难debug&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python2.5解决了最后一个问题，它提供functools模块，包含functools.wraps.这个函数会将被装饰函数的名称，模块，文档字符串拷贝给封装函数,有趣的是，functools.wraps是一个装饰器:-)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 调试，打印函数的名字&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;span class="c1"&gt;#outputs: foo&lt;/span&gt;

&lt;span class="c1"&gt;# 但当你使用装饰器，这一切变得混乱&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@bar&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;span class="c1"&gt;#outputs: wrapper&lt;/span&gt;

&lt;span class="c1"&gt;# "functools" 可以改变这点&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 我们所说的 "wrapper", 封装 "func"&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@bar&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;

&lt;span class="c1"&gt;# 得到的是原始的名称, 而不是封装器的名称&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;span class="c1"&gt;#outputs: foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhuang-shi-qi-wei-he-na-yao-you-yong"&gt;装饰器为何那么有用&lt;/h3&gt;
&lt;p&gt;现在的问题是，我们用装饰器来坐什么？看起来很酷很强大，但是如果有实践的例子会更好.好了，有1000种可能。经典的用法是，在函数的外部，扩展一个函数的行为（你不需要改变这个函数），或者，为了调试的目的（我们不修改的原因是这是临时的），你可以使用装饰器扩展一些函数,而不用在这些函数中书写相同的函数实现一样的功能&lt;/p&gt;
&lt;p&gt;DRY原则，例子：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benchmark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    装饰器打印一个函数的执行时间&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    装饰器记录函数日志&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    记录并打印一个函数的执行次数&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"{0} has been used: {1}x"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@counter&lt;/span&gt;
&lt;span class="nd"&gt;@benchmark&lt;/span&gt;
&lt;span class="nd"&gt;@logging&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;reverse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Able was I ere I saw Elba"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;reverse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#outputs:&lt;/span&gt;
&lt;span class="c1"&gt;#reverse_string ('Able was I ere I saw Elba',) {}&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper 0.0&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper has been used: 1x&lt;/span&gt;
&lt;span class="c1"&gt;#ablE was I ere I saw elbA&lt;/span&gt;
&lt;span class="c1"&gt;#reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {}&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper 0.0&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper has been used: 2x&lt;/span&gt;
&lt;span class="c1"&gt;#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰器意味着，你可以用正确的方法实现几乎所有的事情，而不必重写他们&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@counter&lt;/span&gt;
&lt;span class="nd"&gt;@benchmark&lt;/span&gt;
&lt;span class="nd"&gt;@logging&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_random_futurama_quote&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"slashdot.org:80"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"HEAD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getheaders&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x-b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x-f"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"No, I'm ... doesn't!"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_random_futurama_quote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_random_futurama_quote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#outputs:&lt;/span&gt;
&lt;span class="c1"&gt;#get_random_futurama_quote () {}&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper 0.02&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper has been used: 1x&lt;/span&gt;
&lt;span class="c1"&gt;#The laws of science be a harsh mistress.&lt;/span&gt;
&lt;span class="c1"&gt;#get_random_futurama_quote () {}&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper 0.01&lt;/span&gt;
&lt;span class="c1"&gt;#wrapper has been used: 2x&lt;/span&gt;
&lt;span class="c1"&gt;#Curse you, merciful Poseidon!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python本身提供了一些装饰器：property,staticmethod,等等，&lt;/p&gt;
&lt;p&gt;Django使用装饰器去管理缓存和权限. Twisted to fake inlining asynchronous functions calls.用途广泛&lt;/p&gt;
&lt;p&gt;EDIT: 鉴于这个回答的完美，人们希望我去回答metaclass,我这样做了&lt;/p&gt;</content><category term="python"></category><category term="translation"></category></entry><entry><title>[翻译]Python中yield的解释</title><link href="http://www.wklken.me/posts/2013/07/18/python-translate-yield.html" rel="alternate"></link><published>2013-07-18T00:00:00+08:00</published><updated>2013-07-18T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-07-18:/posts/2013/07/18/python-translate-yield.html</id><summary type="html">&lt;p&gt;翻译&lt;/p&gt;
&lt;p&gt;来源于stackoverflow问答，原文链接 &lt;a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SN上面看到的，顺手翻译下，第一次翻译，好多地方翻的不是很好 :)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python中yield关键字的作用是什么？它做了什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，我想理解以下代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def node._get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &amp;lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &amp;gt;= self._median:
        yield self._rightchild
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是调用者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result, candidates = list(), [self]
while candidates:
    node …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;翻译&lt;/p&gt;
&lt;p&gt;来源于stackoverflow问答，原文链接 &lt;a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SN上面看到的，顺手翻译下，第一次翻译，好多地方翻的不是很好 :)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python中yield关键字的作用是什么？它做了什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，我想理解以下代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def node._get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &amp;lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &amp;gt;= self._median:
        yield self._rightchild
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是调用者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result, candidates = list(), [self]
while candidates:
    node = candidates.pop()
    distance = node._get_dist(obj)
    if distance &amp;lt;= max_dist and distance &amp;gt;= min_dist:
        result.extend(node._values)
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))
return result
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在_get_child_candidates这个函数被调用时发生了什么？返回了一个列表？还是只返回了一个元素？然后又再次被调用？什么时候调用结束？&lt;/p&gt;
&lt;p&gt;这段代码的来源 Jochen Schulz (jrschulz), who made a great Python library for metric spaces. 完整源码链接: &lt;a href="http://well-adjusted.de/~jrschulz/mspace/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;要了解yield的作用，你必须先明白什么是生成器，在此之前，你需要了解什么是可迭代对象（可迭代序列）&lt;/p&gt;
&lt;h2 id="die-dai"&gt;迭代&lt;/h2&gt;
&lt;p&gt;你可以创建一个列表，然后逐一遍历，这就是迭代&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; mylist = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; for i in mylist:
...    print(i)
1
2
3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mylist是可迭代的对象，当你使用列表解析时，你创建一个列表,即一个可迭代对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; mylist = [x*x for x in range(3)]
&amp;gt;&amp;gt;&amp;gt; for i in mylist:
...    print(i)
0
1
4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任何你可用 "for... in..." 处理的都是可迭代对象：列表，字符串，文件....
这些迭代对象非常便捷，因为你可以尽可能多地获取你想要的东西&lt;/p&gt;
&lt;p&gt;但，当你有大量数据并把所有值放到内存时，这种处理方式可能不总是你想要的
(but you store all the values in memory and it's not always what you want when you have a lot of values.)&lt;/p&gt;
&lt;h2 id="sheng-cheng-qi"&gt;生成器&lt;/h2&gt;
&lt;p&gt;生成器是迭代器，但你只能遍历它一次(iterate over them once)
因为生成器并没有将所有值放入内存中，而是实时地生成这些值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; mygenerator = (x*x for x in range(3))
&amp;gt;&amp;gt;&amp;gt; for i in mygenerator:
...    print(i)
0
1
4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这和使用列表解析地唯一区别在于使用()替代了原来的[]&lt;/p&gt;
&lt;p&gt;注意，你不能执行for i in mygenerator第二次，因为每个生成器只能被使用一次: 计算0，并不保留结果和状态，接着计算1，然后计算4，逐一生成&lt;/p&gt;
&lt;h2 id="yield"&gt;yield&lt;/h2&gt;
&lt;p&gt;yield是一个关键词，类似return, 不同之处在于，yield返回的是一个生成器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def createGenerator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
&amp;gt;&amp;gt;&amp;gt; mygenerator = createGenerator() # create a generator
&amp;gt;&amp;gt;&amp;gt; print(mygenerator) # mygenerator is an object!
&amp;lt;generator object createGenerator at 0xb7555c34&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for i in mygenerator:
...     print(i)
0
1
4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子并没有什么实际作用,仅说明当你知道你的函数将产生大量仅被读取一次的数据时,使用生成器将是十分有效的做法&lt;/p&gt;
&lt;p&gt;要掌握yield,你必须明白 - 当你调用这个函数，函数中你书写的代码并没有执行。这个函数仅仅返回一个生成器对象&lt;/p&gt;
&lt;p&gt;这有些狡猾 :-)&lt;/p&gt;
&lt;p&gt;然后，在每次for循环使用生成器时,都会执行你的代码&lt;/p&gt;
&lt;p&gt;然后，是比较困难的部分：&lt;/p&gt;
&lt;p&gt;第一次函数将会从头运行，直到遇到yield，然后将返回循环的首个值. 然后，每次调用，都会执行函数中的循环一次，返回下一个值，直到没有值可以返回&lt;/p&gt;
&lt;p&gt;当循环结束，或者不满足"if/else"条件，导致函数运行但不命中yield关键字，此时生成器被认为是空的&lt;/p&gt;
&lt;h3 id="wen-ti-dai-ma-de-jie-shi"&gt;问题代码的解释&lt;/h3&gt;
&lt;p&gt;生成器:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 这你你创建了node的能返回生成器的函数
def node._get_child_candidates(self, distance, min_dist, max_dist):

# 这里的代码你每次使用生成器对象都会调用

# 如果node节点存在左子节点,且距离没问题，返回该节点
if self._leftchild and distance - max_dist &amp;lt; self._median:
                yield self._leftchild

# 同理，返回右子节点
if self._rightchild and distance + max_dist &amp;gt;= self._median:
                yield self._rightchild

# 如果函数运行到这里，生成器空，该节点不存在左右节点
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用者:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 创建一个空列表，一个包含当前候选对象引用的列表
result, candidates = list(), [self]

# 当前候选非空，循环(开始时仅有一个元素)
while candidates:

    # 从候选列表取出最后一个元素作为当前节点
    node = candidates.pop()

    # 获取obj和当前节点距离
    distance = node._get_dist(obj)

    # 如果距离满足条件，将节点值加入结果列表
    if distance &amp;lt;= max_dist and distance &amp;gt;= min_dist:
        result.extend(node._values)

    # 获取节点的子节点，加入到候选列表，回到循环开始, 这里使用了生成器
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))
    # 注意这里extend会反复调用获取到所有生成器返回值

return result
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码包含几个灵活的部分:&lt;/p&gt;
&lt;p&gt;1.这个循环遍读取历候选列表,但过程中，候选列表不断扩展:-) &lt;/p&gt;
&lt;p&gt;这是一种遍历嵌套数据的简明方法，虽然有些危险，你或许会陷入死循环中&lt;/p&gt;
&lt;p&gt;在这个例子中， candidates.extend(node._get_child_candidates(distance, min_dist, max_dist)) 读取了生成器产生的所有值, 同时while循环产生新的生成器对象加入到列表，因为每个对象作用在不同节点上，所以每个生成器都将生成不同的值&lt;/p&gt;
&lt;p&gt;2.列表方法extend() 接收一个生成器，生成器的所有值被添加到列表中&lt;/p&gt;
&lt;p&gt;通常，我们传一个列表作为参数:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2]
&amp;gt;&amp;gt;&amp;gt; b = [3, 4]
&amp;gt;&amp;gt;&amp;gt; a.extend(b)
&amp;gt;&amp;gt;&amp;gt; print(a)
[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，在代码中，这个函数接受到一个生成器&lt;/p&gt;
&lt;p&gt;这样的做法好处是:&lt;/p&gt;
&lt;p&gt;1.你不需要重复读这些值&lt;/p&gt;
&lt;p&gt;2.你可能有海量的子节点，但是不希望将所有节点放入内存&lt;/p&gt;
&lt;p&gt;并且，可以这么传递生成器作为参数的原因是，Python不关心参数是一个方法还是一个列表&lt;/p&gt;
&lt;p&gt;Python接收可迭代对象，对于字符串，列表，元组还有生成器，都适用!&lt;/p&gt;
&lt;p&gt;这就是所谓的“鸭子类型”(duck typing), 这也是Python如此酷的原因之一, 但这是另一个问题了，对于这个问题......&lt;/p&gt;
&lt;p&gt;你可以在这里完成阅读，或者读一点点生成器的进阶用法:&lt;/p&gt;
&lt;h4 id="kong-zhi-yi-ge-sheng-cheng-qi-de-xiao-hao"&gt;控制一个生成器的消耗&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class Bank(): # let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield "$100"
&amp;gt;&amp;gt;&amp;gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want
&amp;gt;&amp;gt;&amp;gt; corner_street_atm = hsbc.create_atm()
&amp;gt;&amp;gt;&amp;gt; print(corner_street_atm.next())
$100
&amp;gt;&amp;gt;&amp;gt; print(corner_street_atm.next())
$100
&amp;gt;&amp;gt;&amp;gt; print([corner_street_atm.next() for cash in range(5)])
['$100', '$100', '$100', '$100', '$100']
&amp;gt;&amp;gt;&amp;gt; hsbc.crisis = True # crisis is coming, no more money!
&amp;gt;&amp;gt;&amp;gt; print(corner_street_atm.next())
&amp;lt;type 'exceptions.StopIteration'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs
&amp;gt;&amp;gt;&amp;gt; print(wall_street_atm.next())
&amp;lt;type 'exceptions.StopIteration'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty
&amp;gt;&amp;gt;&amp;gt; print(corner_street_atm.next())
&amp;lt;type 'exceptions.StopIteration'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business
&amp;gt;&amp;gt;&amp;gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这在很多场景都非常有用，例如控制资源的获取&lt;/p&gt;
&lt;h2 id="itertools_2"&gt;Itertools&lt;/h2&gt;
&lt;p&gt;一个很好的工具&lt;/p&gt;
&lt;p&gt;itertools模块包含很多处理可迭代对象的具体方法. 例如&lt;/p&gt;
&lt;p&gt;复制一个生成器？连接两个生成器？一行将嵌套列表中值分组？不使用另一个列表进行Map/Zip?
(Ever wish to duplicate a generator? Chain two generators? Group values in a nested list with a one liner? Map / Zip without creating another list?)&lt;/p&gt;
&lt;p&gt;只需要使用itertools模块&lt;/p&gt;
&lt;p&gt;一个例子，4匹马赛跑的可能抵达顺序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; horses = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; races = itertools.permutations(horses)
&amp;gt;&amp;gt;&amp;gt; print(races)
&amp;lt;itertools.permutations object at 0xb754f1dc&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
(1, 2, 4, 3),
(1, 3, 2, 4),
(1, 3, 4, 2),
(1, 4, 2, 3),
(1, 4, 3, 2),
(2, 1, 3, 4),
(2, 1, 4, 3),
(2, 3, 1, 4),
(2, 3, 4, 1),
(2, 4, 1, 3),
(2, 4, 3, 1),
(3, 1, 2, 4),
(3, 1, 4, 2),
(3, 2, 1, 4),
(3, 2, 4, 1),
(3, 4, 1, 2),
(3, 4, 2, 1),
(4, 1, 2, 3),
(4, 1, 3, 2),
(4, 2, 1, 3),
(4, 2, 3, 1),
(4, 3, 1, 2),
(4, 3, 2, 1)]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="liao-jie-die-dai-qi-de-nei-bu-ji-zhi"&gt;了解迭代器的内部机制&lt;/h2&gt;
&lt;p&gt;迭代过程包含可迭代对象(实现__iter__()方法) 和迭代器(实现__next__()方法)&lt;/p&gt;
&lt;p&gt;你可以获取一个迭代器的任何对象都是可迭代对象，迭代器可以让你迭代遍历一个可迭代对象(Iterators are objects that let you iterate on iterables.) [好拗口:]&lt;/p&gt;
&lt;p&gt;更多关于这个问题的 &lt;a href="http://effbot.org/zone/python-for-statement.htm"&gt;how does the for loop work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢这个回答，你也许会喜欢我关于 &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python#1594484"&gt;decorators&lt;/a&gt; 和 &lt;a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/6581949#6581949"&gt;metaclasses&lt;/a&gt; 的解释&lt;/p&gt;</content><category term="python"></category><category term="translation"></category></entry><entry><title>Linux Shell脚本攻略笔记[速查]</title><link href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html" rel="alternate"></link><published>2013-07-04T00:00:00+08:00</published><updated>2013-07-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-07-04:/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html</id><summary type="html">&lt;p&gt;Linux Shell脚本攻略的笔记，markdown编写，可以速查(ctrl+f)&lt;/p&gt;
&lt;p&gt;2013-09-08 从历史网摘中补充
 2014-02-16 增加&amp;lt;&lt;shell脚本指南&gt;&amp;gt;笔记补充&lt;/shell脚本指南&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9104.html"&gt;sed简明教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9070.html"&gt;awk简明教程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="shell-script"&gt;shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="run-shell-script"&gt;run shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh script.sh

or

chmod a+x script.sh
./script.sh
# 会读取首行的解释器, 执行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmd&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1; cmd2

or

cmd1
cmd2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="echo"&gt;echo&lt;/h3&gt;
&lt;p&gt;echo  的功能正如其名，就是基于标准输出打印一段文本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "welcome to bash …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Linux Shell脚本攻略的笔记，markdown编写，可以速查(ctrl+f)&lt;/p&gt;
&lt;p&gt;2013-09-08 从历史网摘中补充
 2014-02-16 增加&amp;lt;&lt;shell脚本指南&gt;&amp;gt;笔记补充&lt;/shell脚本指南&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9104.html"&gt;sed简明教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9070.html"&gt;awk简明教程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="shell-script"&gt;shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="run-shell-script"&gt;run shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh script.sh

or

chmod a+x script.sh
./script.sh
# 会读取首行的解释器, 执行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmd&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1; cmd2

or

cmd1
cmd2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="echo"&gt;echo&lt;/h3&gt;
&lt;p&gt;echo  的功能正如其名，就是基于标准输出打印一段文本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "welcome to bash"
echo welcome to bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用不带引号的echo时，无法显示分号&lt;/p&gt;
&lt;p&gt;使用单引号echo时，bash不会对单引号中变量求值  '$var'&lt;/p&gt;
&lt;p&gt;echo 中转义换行符&lt;/p&gt;
&lt;p&gt;默认情况，echo将换行标志追加到文本尾部，可以忽略结尾换行符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -n 'test\n'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对字符串进行转义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -e '1\t2\t3'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印彩色输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文字颜色码
    重置0
    黑色30
    红色31
    绿色32
    黄色33
    蓝色34
    洋红35
    青色36
    白色37

echo -e "\e[1;31m This is red test \e[0m"

背景颜色码
    重置0
    黑色40
    红色41
    绿色42
    黄色43
    蓝色44
    洋红45
    青色46
    白色47

echo -e "\e[1;42m Green Background \e[0m"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="printf"&gt;printf&lt;/h3&gt;
&lt;p&gt;可以格式化字符串, 使用参数同c中printf一样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;printf "hello world"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认不会加换行符, 需要手动添加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;printf "%-5s %-10s %-4.2f\n" 3 Jeff 77.564

3    Jeff      77.56
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huan-jing-bian-liang-he-bian-liang"&gt;环境变量和变量&lt;/h3&gt;
&lt;p&gt;bash中，每个变量的值都是字符串，无论你给变量赋值时是否使用引号，值都会以字符串的形式存储&lt;/p&gt;
&lt;p&gt;环境变量&lt;/p&gt;
&lt;p&gt;查看所有与此终端进程相关的环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看某个进程的环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/$PID/environ
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变量赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var=value
var='the value'
var="the &lt;span class="nv"&gt;$PARAM&lt;/span&gt;"

echo &lt;span class="nv"&gt;$var&lt;/span&gt;
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;

var = value非变量赋值是相等操作
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;未在当前进程中定义，而是从父进程中继承而来的变量
export 设置环境变量,之后,从当前shell 执行的任何程序都会继承这个变量

export PYTHONPATH=$PYTHONPATH:/home/ken/workspace
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PATH 查找可执行文件路径, 通常定义在/etc/environment or /ect/profile or ~/.bashrc
修改:        export PATH=$PATH:/new/path/
HOME
PWD
USER
UID
SHELL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取字符串长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;length=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;识别当前shell版本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $SHELL
    /bin/bash
echo $0
    bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查是否为超级用户 or 普通用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root的UID=0

if [ $UID -ne 0 ]
then
    echo "not root user"
else
    echo "root"
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改bash的提示字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置PS1变量
\u用户名
\h主机名
\w当前工作目录
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pgrep"&gt;pgrep&lt;/h3&gt;
&lt;p&gt;获取某个进程名对应进程id&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep gedit
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shellshu-xue-yun-suan"&gt;shell数学运算&lt;/h3&gt;
&lt;p&gt;整数运算&lt;/p&gt;
&lt;p&gt;let&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;no1=4
no2=5
let result=no1+no2

let no1++
let no2--
let no1+=7
let no2-=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expr(少用)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=`expr 3 + 4`
result=$(expr $no1 + 5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=$[ no1 + no2 ]
result=$[ $no + 5 ]

result=$(( no1 + 5 ))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浮点数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "4 * 0.56" | bc
设定精度
echo "scale=2;3/8" | bc
进制转换
echo "obase=2;100" | bc
平方
echo "10^10" | bc
平方根
echo "sqrt(100)" | bc
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ming-ling-zhuang-tai"&gt;命令状态&lt;/h3&gt;
&lt;p&gt;当命令成功完成, 返回0&lt;/p&gt;
&lt;p&gt;发生错误并退回, 返回非0&lt;/p&gt;
&lt;p&gt;可以从$?中获取  cmd; echo $?&lt;/p&gt;
&lt;h3 id="wen-jian-miao-shu-fu-he-zhong-ding-xiang"&gt;文件描述符和重定向&lt;/h3&gt;
&lt;p&gt;文件描述符: 与文件输入/输出相关联的整数, 用来跟踪已打开的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 stdin  标砖输入
1 stdout 标准输出
2 stderr 标准错误
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向到文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;清空文件写入新内容
echo "test" &amp;gt; temp.txt
追加
echo "test" &amp;gt;&amp;gt; temp.txt

&amp;gt;等价于1&amp;gt;
&amp;gt;&amp;gt;等价于 1&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出分离或合并&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分离
cmd 2&amp;gt;stderr.txt  1&amp;gt;stdout.txt

合并
cmd &amp;gt; output.txt 2&amp;gt;&amp;amp;1
or
cmd &amp;amp;&amp;gt; output.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扔到垃圾桶&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/dev/null 特殊设备文件, 接收到的任何数据都会被丢弃(位桶/黑洞)

只有标准错误
cmd 2 &amp;gt; /dev/null

标准输出和标准错误
cmd &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时输出到终端和文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd | tee file1

tee默认覆盖，可以-a选项追加
cmd | tee -a file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将stdin作为命令参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1 | cmd2 | cmd3 -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将文件重定向到命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd &amp;lt; file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义文件描述符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用文件描述符3打开并读取文件
exec 3&amp;lt;input.txt
cat &amp;lt;&amp;amp;3

使用文件描述符4进行写入
exec 4&amp;gt;output.txt
echo newline &amp;gt;&amp;amp;4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cat"&gt;cat&lt;/h3&gt;
&lt;p&gt;cat, concatenate(拼接)&lt;/p&gt;
&lt;p&gt;“cat”代表了连结（Concatenation），连接两个或者更多文本文件或者以标准输出形式打印文件的内容&lt;/p&gt;
&lt;p&gt;一般格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file1 file2 file3

从管道中读取
OUTPUT_FROM_SOME_CMDS | cat

echo "test" | cat - file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩空白行, 多个连续空行变成单个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat -s  file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配合tr移除空白行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | tr -s '\n' #连续多个\n -&amp;gt; \n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加行号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat -n file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示制表符等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat -T file

cat f &amp;gt; t
注意：“&amp;gt;&amp;gt;”和“&amp;gt;”调用了追加符号。它们用来追加到文件里，而不是显示在标准输出上。
“&amp;gt;”符号会删除已存在的文件，然后创建一个新的文件。
所以因为安全的原因，建议使用“&amp;gt;&amp;gt;”，它会写入到文件中，而不是覆盖或者删除。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入多行文字(CTRL + d 退出)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt; test.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu-zu-he-guan-lian-shu-zu"&gt;数组和关联数组&lt;/h3&gt;
&lt;p&gt;普通数组，整数作为数组索引, 借助索引将多个独立的数据存储为一个集合(list)&lt;/p&gt;
&lt;p&gt;关联数组，可以使用字符串作为索引(map)&lt;/p&gt;
&lt;p&gt;数组&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;array_var=(1 2 3 4 5)

or
array_var[0]="test1"
array_var[3]="test3"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以清单形式打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#array_var[*]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取索引列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关联数组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;declare -A ass_array

内嵌索引-值
ass_array=([index1]=value1 [index2]=value2)

独立
ass_array[index3]=value3

echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ass_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="alias"&gt;alias&lt;/h3&gt;
&lt;p&gt;alias是一个系统自建的shell命令，允许你为名字比较长的或者经常使用的命令指定别名。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias new_command='command seq'
unalias new_command

使用原生命令
\new_command
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="date"&gt;date&lt;/h3&gt;
&lt;p&gt;“date”命令使用标准的输出打印当前的日期和时间，也可以深入设置&lt;/p&gt;
&lt;p&gt;读取日期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间戳&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date +%s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日期转换为时间戳&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date --date "Thu Nov 18 08:07:21 IST 2010" +%s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日期格式化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;星期  %a  Sat
      %A  Saturday
月    %b  Nov
      %B  November
日    %d  31
固定日期格式mm/dd/yy     %D
年    %y  10
      %Y  2010
小时  %I/%H    08
分钟  %M  33
秒    %S  10
纳秒  %N  696308515
Unix纪元时  %s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;格式化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date "+%Y %B %d"

date +%Y-%m-%d
输出： 2011-07-28
date +"%Y-%m-%d %H:%M:%S"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置日期和时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date -s "格式化日期字符串"

date -s "21 June 2009 11:01:22"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;延时&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sleep number_of_seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两天后及两天前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date -d '2 days' +%Y%m%d
date -d '2 days ago' +%Y%m%d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;某一天的几天前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TODAY=`date +%Y%m%d`
DAY_1_AGO=`date -d "$TODAY 1 days ago" +%Y%m%d`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间戳日期转换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;@1193144433&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;@1193144433&lt;/span&gt; &lt;span class="s"&gt;"+%Y-%m-%d %T"&lt;/span&gt;

&lt;span class="err"&gt;反向&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s"&gt;"2007-10-23 15:00:23"&lt;/span&gt; &lt;span class="s"&gt;"+%s"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值给变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATE=$(date +%Y%m%d)
DATE=`date +%Y%m%d`
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="diao-shi-jiao-ben"&gt;调试脚本&lt;/h3&gt;
&lt;p&gt;打印出所执行的每一行命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash -x script.sh
sh -x script.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在脚本中设置开关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set -x 在执行时显示参数和命令
set +x 关闭调试
set -v 当命令进行读取时显示输入
set +v 禁止打印输入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接修改脚本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -xv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="han-shu-he-can-shu"&gt;函数和参数&lt;/h3&gt;
&lt;p&gt;定义函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;or&lt;/span&gt;
&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fname;
传参
fname arg1 arg2;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接收参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;第一个参数&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;第二个参数&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;第&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;个参数&lt;/span&gt;

&lt;span class="s"&gt;"$@"&lt;/span&gt;&lt;span class="err"&gt;被扩展成&lt;/span&gt; &lt;span class="s"&gt;"$1"&lt;/span&gt; &lt;span class="s"&gt;"$2"&lt;/span&gt; &lt;span class="s"&gt;"$3"&lt;/span&gt;
&lt;span class="s"&gt;"$*"&lt;/span&gt;&lt;span class="err"&gt;扩展成&lt;/span&gt;&lt;span class="s"&gt;"$1c$2c$3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;其中&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="n"&gt;IFS&lt;/span&gt;&lt;span class="err"&gt;第一个字符&lt;/span&gt;

&lt;span class="s"&gt;"$@"&lt;/span&gt;&lt;span class="err"&gt;使用最多&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;将所有的参数当做单个字符串&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bash支持递归&lt;/p&gt;
&lt;p&gt;导出函数,可以作用到子进程中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export -f fname
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数及命令返回值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd;
echo $?

退出状态，成功退出，状态为0，否则，非0

cmd
if [ $? -eq 0 ]
then
    echo "success"
else
    echo "fail"
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="guan-dao"&gt;管道&lt;/h3&gt;
&lt;p&gt;前一个命令的输出作为后一个命令的输入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$cmd1 | cmd2 | cmd3
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="du-qu-ming-ling-shu-chu"&gt;读取命令输出&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;子shell&lt;/span&gt;  &lt;span class="err"&gt;subshell&lt;/span&gt;
&lt;span class="nv"&gt;cmd_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;COMMANDS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;or&lt;/span&gt;
&lt;span class="err"&gt;反引用&lt;/span&gt;
&lt;span class="nv"&gt;cmd_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;COMMANDS&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子shell本身是独立进程, 不会对当前shell有任何影响&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pwd;
(cd /bin; ls)
pwd #同上一个pwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留空格和换行符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;out=$(cat text.txt)
echo $out  #丢失所有换行符

out="$(cat text.txt)"
echo $out  #保留

cat a
1
2
3
echo $(cat a)
1 2 3
echo "$(cat a)"
1
2
3
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="read"&gt;read&lt;/h3&gt;
&lt;p&gt;read, 用于从键盘或标准输入中读取文本&lt;/p&gt;
&lt;p&gt;读取n个字符存入变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -n number_of_chars variable_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不回显的方式读取密码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -s var
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示提示信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -p "Enter input:" var
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限时输入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -t  timeout var
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置界定符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -d delim_char var
read -d ":" var
hello:
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-duan-fen-ge-fu-he-die-dai-qi"&gt;字段分隔符和迭代器&lt;/h3&gt;
&lt;p&gt;内部字段分隔符，Internal Field Separator, IFS&lt;/p&gt;
&lt;p&gt;IFS默认为空白字符（换行符，制表符，空格）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data="name,sex,rollno"
oldIFS=$IFS
IFS=,
for item in $data
do
        echo $item
done

IFS=$oldIFS
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xun-huan"&gt;循环&lt;/h3&gt;
&lt;p&gt;for循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo {1..50}

for i in {a..z}; do actions; done;

or

for((i=0;i&amp;lt;10;i++))
{
    commands;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while condition
do
    commands;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;until循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;until condition
do
    commands;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bi-jiao-he-ce-shi"&gt;比较和测试&lt;/h3&gt;
&lt;p&gt;if条件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if condition;
then
    commands;
elif condition;
then
    commands;
else
    commands;
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑运算符进行简化, 短路运算更简洁&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ condition ] &amp;amp;&amp;amp; action;
[ condition ] || action;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算术比较&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-gt 大于
-lt 小于
-ge 大于等于
-le 小于等于
-ne 不等于
-eq 等于

注意[]和操作数之间的空格
[ $var -eq 0 ]

and
[ $var -ne 0 -a $var2 -ge 2 ]
or
[ $var -ne 0 -o $var2 -ge 2 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ -f $file_var ] 正常文件路径或文件名
[ -x $var ] 可执行
-d 目录
-e 存在
-c 字符设备文件
-b 块设备文件
-w 可写
-r 可读
-L 符号链接
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串比较&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[ $str1 = $str2 ]]&lt;/span&gt;
&lt;span class="k"&gt;[[ $str1 == $str2 ]]&lt;/span&gt;

&lt;span class="na"&gt;[[ $str1 !&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$str2 ]] 不等&lt;/span&gt;

&lt;span class="k"&gt;[[ $str1 &amp;gt; $str2 ]]&lt;/span&gt;
&lt;span class="k"&gt;[[ $str1 &amp;lt; $str2 ]]&lt;/span&gt;

&lt;span class="na"&gt;[[ -z $str1 ]]  空&lt;/span&gt;
&lt;span class="na"&gt;[[ -n $str1 ]]  非空&lt;/span&gt;

&lt;span class="na"&gt;if [[ -n $str1 ]] &amp;amp;&amp;amp; [[ -z $str2 ]]&lt;/span&gt;
&lt;span class="na"&gt;then&lt;/span&gt;
    &lt;span class="na"&gt;commands;&lt;/span&gt;
&lt;span class="na"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="find"&gt;find&lt;/h3&gt;
&lt;p&gt;搜索指定目录下的文件，从开始于父目录，然后搜索子目录&lt;/p&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find base_path

# 打印文件和目录列表
find . -print  #默认\n分割文件名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find path -name "*.txt" -print
          -iname  忽略大小写

多个条件 or
find . \( -name "*.txt" -o -name "*.py" \)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通配符
find /home/users -path "*slynux*" -print

正则
find . -regex ".*\(\.py\|\.sh\)$"
       -iregex 忽略大小写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;否定参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . ! -name "*.txt" -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据文件类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type d -print
f 普通文件
l 符号链接
d 目录
c 字符设备
b 块设备
s 套接字
p Fifo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定目录深度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -maxdepth 1 -type f -print
find . -mindepth 2 -type f -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据文件时间搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;计量单位 天
-atime 最近一次访问时间
-mtime 最后一次被修改时间
-ctime 文件元数据，最近一次修改时间

find . -type f -atime -7 -print #最近七天内被访问的
find . -type f -atime 7 -print  #恰好在七天前
                      +7 -print #超过七天

计量单位 分钟
-amin 访问时间
-mmin 修改时间
-cmin 变化时间

find . -type f -amin +7 -print #访问时间超过7分钟的

find . -type f -newer file.txt -print  #用于比较时间戳的参考文件，比参考文件更新的文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基于文件大小的搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -size +2k
+ 大于  -小于   无符号，恰好等于

b 块
c 字节
w 字（2字节）
k 千字节
M 兆字节
G 吉字节
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除匹配的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -name "*.swp" -delete
#注意：-delete位置一定是最后
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件权限及所有权&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -perm 644 -print

find . -type f -user slynux -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行命令或动作(最强大的命令)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -user root -exec chown slynux {} \;
find . -type f -exec cp {} OLD \;
find . -iname "abc.txt" -exec md5sum {} \;

{} 江北替换成对应文件名
exec无法结合多个命令，可以将多个命令放入脚本，调用之
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跳过指定目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . \( -name ".git" -prune \) -name '*.txt'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xargs"&gt;xargs&lt;/h3&gt;
&lt;p&gt;将标准输入数据转化成命令行参数&lt;/p&gt;
&lt;p&gt;将stdin接收到的数据重新格式化，再将其作为参数传给其他命令&lt;/p&gt;
&lt;p&gt;多行输入转化成单行输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat  example.txt | xargs  #空格替换掉\n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切成多行，每行n个参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat examplet.txt | xargs -n 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以指定分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "aaaXbbbXccc" | xargs -d 'X'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将参数传递给脚本(类似循环)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat args.txt | xargs -n 1 ./cecho.sh

./cecho.sh -p arg1 1
需要变更
cat args.txt | xargs -I {} ./cecho.sh -p {} 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;find与xargs组合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -name "*.txt" -print | xargs rm -rf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | ( while read arg; do cat $arg; done )
cat file | xargs -I {} cat {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tr"&gt;tr&lt;/h3&gt;
&lt;p&gt;tr可以对来自标准输入的字符进行替换，删除以及压缩(translate, 可以将一组字符变成另一组字符)&lt;/p&gt;
&lt;p&gt;tr只能通过stdin，无法通过其他命令行进行接收参数&lt;/p&gt;
&lt;p&gt;格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tr [options] source-char-set replace-char-set
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-c 取source-char-set补集，通常与-d/-s配合
-d 删除字source-char-set中的所列的字符
-s 浓缩重复字符，连续多个变成一个
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符替换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/12501/environ | tr '\0' '\n'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大小写替换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo  "HELLO" | tr 'A-Z' 'a-z'
cat text | tr '\t' ' '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "hello 123 world 456"| tr -d '0-9'
hello  world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符集补集&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "hello 1 char 2" | tr -d -c '0-9'  #删除非0-9
12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩字符&lt;/p&gt;
&lt;p&gt;连续的重复字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "GNU is    not UNix" | tr -s ' '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符类&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alnum 字母和数字
alpha 字母
cntrl 控制字符
digit 数字
graph 图形字符
lower 小写字母
print 可打印字符
punct 标点符号
space 空白字符
upper 大写字母
xdigit 十六进制字符

tr '[:lower:]' '[:upper:]'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="md5sum"&gt;md5sum&lt;/h3&gt;
&lt;p&gt;32个字符的十六进制串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;md5sum filename
md5sum filename1 filename2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sha1sum"&gt;sha1sum&lt;/h3&gt;
&lt;p&gt;40个字符十六进制串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sha1sum file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dui-mu-lu-jin-xing-xiao-yan"&gt;对目录进行校验&lt;/h3&gt;
&lt;p&gt;需安装md5deep软件包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;md5deep/sha1deep
md5deep -rl dirname
         r递归，l相对路径
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sort"&gt;sort&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort [options] [file(s)]

-c 检查是否已排序
-u 丢弃所有具有相同键值的记录

-b 忽略开头空白
-d 字典序
-g 一般数值，以浮点数类型比较字段，仅支持gnu
-i 忽略无法打印的字符

-k 定义排序键值字段
-n 以整数类型比较字段
-r 倒转
-o 输出到指定文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort file1 &amp;gt; file1.sorted
sort -o file1.sored file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按数字, 要明确&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -n file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逆序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -r file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试一个文件是否已经被排过序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -C file
if [ $? -eq 0 ]; then
    echo ssss
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;合并两个排过序的文件，并不需要对合并后的文件进行再排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -m sorted1 sorted2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据键或者列排序(按照哪一个列)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -k 1 data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限定特定范围内一组字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;key=char4-char8
sort -k 2,3 data

sort -k2.4,5.6 file
第二个字段的第四个字符开始比较，直到第五个字段的第六个字符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忽略前导空白及字典序排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -bd unsorted.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;去重&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort a.txt | uniq
sort -u a.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="uniq"&gt;uniq&lt;/h3&gt;
&lt;p&gt;用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只显示未重复的记录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq -u file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;找出重复的行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq -d file
-s 可指定跳过前N个字符
-w 指定用于比较的最大字符数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计各行出现的次数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq -c file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p57&lt;/p&gt;
&lt;h3 id="tempfile"&gt;tempfile&lt;/h3&gt;
&lt;p&gt;只有在基于Debian的发布版才有(Ubuntu/Debian)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;temp_file=$(tempfile)
等同
temp_file="/tmp/file-$RANDOM"

#$$为进程id
temp_file="/tmp/var.$$"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="split"&gt;split&lt;/h3&gt;
&lt;p&gt;按大小分割文件, 单位k(KB), M, G, c(byte), w(word)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -b 10k data.file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-d数字后缀，-a后缀长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -b 10k data.file -d -a 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分割后指定文件名前缀&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -b 10k data.file file_prefix

设置后缀格式
split -b 10k data.file -d -a 4 file_prefix
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据行数分割&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spilt -l 10 data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其扩展是csplit，可根据文件特性切分，关注&lt;/p&gt;
&lt;h3 id="bashbian-liang-pi-pei-qie-fen"&gt;bash变量匹配切分&lt;/h3&gt;
&lt;p&gt;sample.jpg&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_jpg="sample.jpg"

从右向左匹配
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_jpg&lt;/span&gt;&lt;span class="o"&gt;%.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
#sample

从左向右匹配
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_jpg&lt;/span&gt;&lt;span class="c1"&gt;#.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
#jpg

% # 属于非贪婪
%% ## 属于贪婪
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;贪婪非贪婪&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var=hack.fun.book.txt
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;%.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #hack.fun.book
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;%%.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #hack

&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="c1"&gt;#.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #fun.book.txt
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="c1"&gt;##.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="expect"&gt;expect&lt;/h3&gt;
&lt;p&gt;实现自动化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spawn ./ineractive.sh
expect "Enter the number"
send "1\n"
expect "Enter name:"
send "hello\n"
expect eof

spawn指定需要自动化的命令
expect提供需要等待的消息
send发送消息
expect eof指明命令交互结束
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dd"&gt;dd&lt;/h3&gt;
&lt;p&gt;生成任意大小的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 创建一个1M大小的文件junk.data
bs=2M count=2 则文件大小4M

dd if=/dev/zero of=junk.data bs=1M count=1
   输入文件     输出文件     块大小   复制块数

块大小单位
字节(1B) c
字(2B)   w
块(512B)   b
千字节(1024B) k
兆字节(1024KB) M
吉字节(1024MB) G
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="comm"&gt;comm&lt;/h3&gt;
&lt;p&gt;两个文件之间比较，输出三列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;onleA \t onlyB \t bothAB

comm A B -1 -2 #删除第一第二列
-3 删除第三列

可以得到A^B  A-B B-A
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mkdir"&gt;mkdir&lt;/h3&gt;
&lt;p&gt;“mkdir”(Make directory)命令在命名路径下创建新的目录。然而如果目录已经存在了，那么它就会返回一个错误信息”不能创建文件夹，文件夹已经存在了”(“cannot create folder, folder already exists”)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir dirpath

mkdir -p dirpath1/dirpath2

#一次多个目录
mkdir -p /home/user/{test,test1,test2}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：目录只能在用户拥有写权限的目录下才能创建&lt;/p&gt;
&lt;h3 id="ls"&gt;ls&lt;/h3&gt;
&lt;p&gt;ls命令是列出目录内容(List Directory Contents)的意思。运行它就是列出文件夹里的内容，可能是文件也可能是文件夹&lt;/p&gt;
&lt;p&gt;ls文件的内容关系&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 普通文件
d 目录
c 字符设备
b 块设备
l 符号链接
s 套接字
p 管道

文件权限序列
rwx
rwS  setuid(S)，特殊权限, 出现在x的位置, 允许用户以其拥有者的权限来执行文件, 即使这个可执行文件是由其他用户运行的

目录
r,允许读取目录中文件和子目录列表
w,允许在目录中创建或删除文件或目录
x,指明是否可以访问目录中的文件和子目录
rwt/rwT 粘滞位，只有创建该目录的用户才能删除目录中的文件，即使用户组和其他用户也有写权限，典型例子/tmp, 写保护
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -d */
ls -F | grep "/$"
ls -l | grep "^d"
find . -type d -maxdepth 1 -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l    命令已详情模式(long listing fashion)列出文件夹的内容
ls -a    命令会列出文件夹里的所有内容，包括以”.”开头的隐藏文件
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chmod"&gt;chmod&lt;/h3&gt;
&lt;p&gt;设置文件权限&lt;/p&gt;
&lt;p&gt;“chmod”命令就是改变文件的模式位。chmod会根据要求的模式来改变每个所给的文件，文件夹，脚本等等的文件模式（权限）。&lt;/p&gt;
&lt;p&gt;设置权限&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user group others all
u    g     o      a

chmod u=rwx g=rw o=r filename

chmod u+x filename
chomd a+x filename #所有

chmod a-x filename

chmod 764 filename

#设置粘滞位
chmod a+t dirname

#递归改变

chmod 777 . -R
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：对于系统管理员和用户来说，这个命令是最有用的命令之一了。在多用户环境或者服务器上，对于某个用户，如果设置了文件不可访问，那么这个命令就可以解决，如果设置了错误的权限，那么也就提供了为授权的访问。&lt;/p&gt;
&lt;h3 id="chown"&gt;chown&lt;/h3&gt;
&lt;p&gt;每个文件都属于一个用户组和一个用户“chown”命令用来改变文件的所有权，所以仅仅用来管理和提供文件的用户和用户组授权。&lt;/p&gt;
&lt;p&gt;改变所有权&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown user.group filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown -R user.group .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次都以其他用户身份执行(允许其他用户以文件所有者的身份来执行)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chomod +s executable_file

chown root.root executable_file
chmod +s executable_file
./executable_file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chattr"&gt;chattr&lt;/h3&gt;
&lt;p&gt;创建不可修改文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chattr +i file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一旦被设置为不可修改, 任何用户包括超级用户都不能删除该文件, 除非其不可修改的属性被移除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chattr -i file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="touch"&gt;touch&lt;/h3&gt;
&lt;p&gt;“touch”命令代表了将文件的访问和修改时间更新为当前时间。&lt;/p&gt;
&lt;p&gt;touch命令只会在文件不存在的时候才会创建它(空白文件)。如果文件已经存在了，它会更新时间戳，但是并不会改变文件的内容。&lt;/p&gt;
&lt;p&gt;空白文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch filename

for name {1..100}.txt
do
    touch $name
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改文件访问时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch -a "Fri Jun 25 20:50:14 IST 1999" filename
touch -m #修改文件内容的修改时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改文件或目录的时间戳(YYMMDDhhmm)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch -t 0712250000 file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：touch 可以用来在用户拥有写权限的目录下创建不存在的文件。&lt;/p&gt;
&lt;h3 id="ln"&gt;ln&lt;/h3&gt;
&lt;p&gt;建立软连接&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s target symbolic_link_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果目的路径已经存在，而没有指定 -f 标志，ln 命令不会创建新的链接，而是向标准错误写一条诊断消息并继续链接剩下的 SourceFiles。&lt;/p&gt;
&lt;p&gt;-f 促使 ln 命令替换掉任何已经存在的目的路径&lt;/p&gt;
&lt;h3 id="readlink"&gt;readlink&lt;/h3&gt;
&lt;p&gt;读取链接对应真是路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;readlink web

 readlink ~/.vim
 /Users/ken/github/k-vim
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="file"&gt;file&lt;/h3&gt;
&lt;p&gt;通过查看文件内容来找出特定类型的文件&lt;/p&gt;
&lt;p&gt;打印文件类型信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印不包含文件名在内&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file -b filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file /etc/passwd
/etc/passwd: ASCII English text

file -b /etc/passwd
ASCII English text
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="du-wen-jian"&gt;读文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while read line;
do
    something
done &amp;lt; filename
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="diff"&gt;diff&lt;/h3&gt;
&lt;p&gt;生成文件差异&lt;/p&gt;
&lt;p&gt;非一体化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff version1.txt version2.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一体化, 可读性更好&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -u version.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用patch将命令应用于任意一个文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -u version1.txt version2.txt &amp;gt; version.patch&lt;/span&gt;
patch -p1 version1.txt &amp;lt; version.patch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归作用于目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -Naur directory1 directory2&lt;/span&gt;

&lt;span class="gd"&gt;-N 所有缺失的文件作为空文件&lt;/span&gt;
&lt;span class="gd"&gt;-a 所有文件视为文本文件&lt;/span&gt;
&lt;span class="gd"&gt;-u 一体化输出&lt;/span&gt;
&lt;span class="gd"&gt;-r 递归遍历&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="head"&gt;head&lt;/h3&gt;
&lt;p&gt;前10行打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前n行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -n 4 file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扣除最后N行之外的所有行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -n -5 file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tail"&gt;tail&lt;/h3&gt;
&lt;p&gt;最后10行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印最后五行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -n 5 file
tail -5 file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扣除前n行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -n +(N+1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实时动态打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -f growing_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当某个给定进程结束后,  tail随之终结&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -f file --PID $PID
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pushdpopd"&gt;pushd/popd&lt;/h3&gt;
&lt;p&gt;将当前路径压入栈&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压入某个路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushd /home/ken
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看当前路径列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dirs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切换到某一个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#dirs从左到右编号 0 -
pushd +3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移除最近压入栈的路径并切换到下一个目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;popd
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cd"&gt;cd&lt;/h3&gt;
&lt;p&gt;经常使用的“cd”命令代表了改变目录。它在终端中改变工作目录来执行，复制，移动，读，写等等操作&lt;/p&gt;
&lt;p&gt;切换到上一目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会到HOME目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd
cd ~
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会到上一级目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ..
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wc"&gt;wc&lt;/h3&gt;
&lt;p&gt;Word Count&lt;/p&gt;
&lt;p&gt;统计行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -l file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计单词数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -w file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计字符数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -c file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计所有&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计最长行的长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc file -L
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tree"&gt;tree&lt;/h3&gt;
&lt;p&gt;以图形化的树状结构打印文件和目录的结构，需要自行安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree ~/unixfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重点标记出匹配某种样式的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree PATH -P "*.sh"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只标记符合样式之外的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree path -I PATTERN
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时打印文件和目录大小&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree -h
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="grep"&gt;grep&lt;/h3&gt;
&lt;p&gt;文本搜索工具, 支持正则表达式和通配符&lt;/p&gt;
&lt;p&gt;‘grep‘命令搜索指定文件中包含给定字符串或者单词的行&lt;/p&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep "match_pattern" file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用颜色重点标记&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep word filename --color=auto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扩展型使用正则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -E "[a-z]+"
egrep "[a-z]+"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只输出匹配到的文本部分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -o word filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除匹配行外的所有行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -v word filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计匹配行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -c 'text' filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印出包含匹配字符串的行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep linux -n filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印样式匹配所位于的字符或字节的偏移&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "gnu is not unix" | grep -b -o "not"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜索多个文件，找出匹配文本位于哪个文件中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -l linux file1 file2
取反
grep -L
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归搜索目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -R "text" dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忽略大小写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -i "hello" filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匹配多个样式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -e "pattern1" -e "pattern2" file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行匹配脚本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -f pattern_file source_file

pattern_file:
hello
cool
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在搜索中包含、排除文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep --include *.{c,cpp} word file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep --exclude "Readme" filename
--exclude-dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;静默输出，用于判断(不会产生任何输出)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -q word file
if [ $? -eq 0 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印匹配行之前，之后的行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -A 3 之后3行
grep -B 3 之前
grep -C 3 前后
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用行缓冲&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在使用tail -f命令时是可以及时看到文件的变化的，但是如果再加上一个grep命令，可能看到的就不那么及时了，
因为grep命令在buffer写不满时就不输出，可以通过选项  --line-buffered 来搞定，如：

tail -f file.txt | grep something  --line-buffered
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cut"&gt;cut&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -c list [ file ... ]
cut -f list [ -d delim ] [ file ...]

-c list 以字符为主，作剪切操作
-f list 以字段为主，作剪切操作
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取字段或列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#第一列
cut -f1 filenam

#第二三列
cut -f2,3 filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取补集&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -f1 --complement filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定字段分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -d ";" -f2 filename
cut -d : -f 1,5 /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-b 字节
-c 字符
-f 字段

cut -c1-5 filename
N-
N-M
-M

ls -l | cut -c 1-10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定输出分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -c1-3,6-9 --output-delimiter ","
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="join"&gt;join&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;join [options] file1 file2

选项
-1 field1
-2 field2
-o file.field
-t separator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;join file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sed"&gt;sed&lt;/h3&gt;
&lt;p&gt;sed(Stream editor)流编辑器, 可以配合正则使用, 进行替换等&lt;/p&gt;
&lt;p&gt;sed替换语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's/pattern/replace_string/' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将结果直接运用于源文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-i 用于, 直接修改源文件

替换第一个
sed -i 's/pattern/replace_string/' file

替换第二个
sed -i 's/pattern/replace_string/2' file

替换所有
sed -i 's/pattern/replace_string/g' file

从第N处开始替换
sed -i 's/pattern/replcae_string/2g' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移除空白行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed '/^$/d' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;已匹配字符串标记&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;引用匹配到的
sed 's/\w\+/[&amp;amp;]/g' filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组合多个表达式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 'exp1' | sed 'exp2'
等价
sed 'exp1;exp2'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用引用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed "s/$text/HELLO/"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子串匹配标记(后向引用，最多9个)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's/\([a-z]\+\)' \([A-Z\]\+\)/\2 \1/' filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存到文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's/pattern/replacement/' -i outfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用其他分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's#/home/#/tmp/#'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="awk"&gt;awk&lt;/h3&gt;
&lt;p&gt;基本结构&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F '-' 'BEGIN{statements} {statements} END{statements}' file
表达式中单引号可以换成双引号
BEGIN -&amp;gt; 每一行，执行statements, 执行END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印某一列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F '-' '{print $0}' file #全部
awk -F '-' '{print $2}' file #第二列
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;print拼接字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk '{var="v1"; var1="v2"; print var1"-"var2;}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特殊变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NR nuber of records, 记录数
NF number of fields, 字段数
$0 当前行文本
$1 第一字段
$2 第二字段
$NF 最后一个字段

FILENAME 当前输入文件的名称
FNR 当前输入文件记录数
FS 字段分隔字符
OFS 输出字段分隔符，默认" "
ORS 输出记录分隔符，默认"\n"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk 'END{print NF}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将外部变量值传递给awk&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -v VARIABLE=$VAR '{ print VARIABLE }'
awk '{print v1, v2}' v1=$var1 v2=$var2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;seq 5 | awk '{ getline var; print var}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行行过滤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk 'NR&amp;lt;5' #行号小于5
awk 'NR==1,NR==4' #行号在1到5之间
awk '/linux/' #包含样式linux
awk '!/linux/' #不包含
awk '$1 ~/jones/' #第一个字段包含jones

tail file
awk 'NR &amp;lt;= 10' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F: '{ print $NF }' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定输出分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F: -v "OFS=-" '{print $1,$2}' /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印空行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk 'NF&amp;gt;0 {print $0}'
or
awk 'NF&amp;gt;0' #未指定action默认打印
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;print和printf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F: '{print "User", $1, "is really", $5}' /etc/passwd
awk -F: '{printf "User %s is really %s\n", $1, $5}' /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;awk中使用循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for(i=0;i&amp;lt;10;i++) { print $i; }

for(i in array) { print array[i] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内建函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;length(str)
index(str,search_str)
split(str,array,delimiter) 用界定符生成一个字符串列表
substr(string, start, end) #子串
sub(regex, replacement_str, str) #正则替换首个匹配位置
gsub(regex, replacement_str, string) #最后一个匹配位置
match(string, regex) #检查是否能够匹配字符串
tolower(string) #转小写
toupper(string) #转大写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写成脚本文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BEGIN {}
pattern1 {action1}
pattern2 {action2}
END {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-jian-die-dai"&gt;文件迭代&lt;/h3&gt;
&lt;p&gt;读文件行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while read line;
do
    echo $line;
done &amp;lt; file.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;迭代每个单词&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for word in $line;
do
    echo $word;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;迭代每一个字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for((i=0;i&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#word&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;;i++))
do
    echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; ;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="paste"&gt;paste&lt;/h3&gt;
&lt;p&gt;按列合并文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;paste file1 file2 file3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;paste file1 file2 -d ','
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tac"&gt;tac&lt;/h3&gt;
&lt;p&gt;逆序打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tac file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rev"&gt;rev&lt;/h3&gt;
&lt;p&gt;接收一个文件或stdin作为输入, 逆序打印每一行内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "abc" | rev
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wget"&gt;wget&lt;/h3&gt;
&lt;p&gt;Wget是用于非交互式（例如后台）下载文件的免费工具.支持HTTP, HTTPS, FTP协议和 HTTP 代理(选项多, 用法灵活)&lt;/p&gt;
&lt;p&gt;一个用于文件下载的命令行工具&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget URL1 URL2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定保存文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget URL -O local.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定日志，默认达到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget URL -O local.txt -o log.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定重复尝试次数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -t 5 URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载限速&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --limit-rate 20k url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定限额&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -Q 100m url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;断点续传&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -c URL

$ wget -c -t 100 -T 120 http://www.linux.com/xxxx.data

当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。
wget的断点续传是自动的。
-c 选项的作用为断点续传。
-t 参数表示重试次数(例如重试100次，-t 100，如果设成-t 0，表示无穷次重试，直到连接成功)
-T 参数表示超时等待时间，例如-T 120，表示等待120秒连接不上就算超时
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制或镜像整个网站&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --mirror exampledomain.com
wget -r -N -l DEPTH URL
     递归，允许对文件使用时间戳，层级
$ wget -r -np -nd http://www.linux.com/packs/

-np 的作用是不遍历父目录
-nd 表示不在本机重新创建目录结构
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问需要认证的HTTP/FTP&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --user username --password pass URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;post请求&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget url -post-data "name=value" -O output.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;批量下载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -i downloads.txt #将文件地址写入一个文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用wget命令执行ftp下载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -m ftp://username:password@hostname
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="curl"&gt;curl&lt;/h3&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url &amp;gt; index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不显示进度信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --slient
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将内容写入文件，而非标准输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --slient -O
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写入指定文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --slient -o filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示进度条&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url -o index.html --progress
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;断点续传&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -C - URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置参照页字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --referer Referer_URL target_URL
跳转到target_URL,其头部referer为Referer_URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置cookie&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url --cookie "user=slynux;pass=hack"
另存为一个文件

curl URL --cookie-jar cookie_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置用户代理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --user-agent "Mozilla/5.0"
头部信息
curl -H "Host: www.slynux.org" -H "Accept-language: en" url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限定下载带宽&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url --limit-rate 20k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定最大下载量(可下载的最大文件大小)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url --max-filesize bytes
超出限制的话，返回非0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行认证&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -u user:pass url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只打印头部信息,不下载远程文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -I url
curl -head url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发送post请求&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL -d "va1=1&amp;amp;va2=2"
         --data
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lynx"&gt;lynx&lt;/h3&gt;
&lt;p&gt;将网页以ascii字符形式下载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lynx -dump URL &amp;gt; webpage_as_text.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印出网站的文本板块而非html&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lynx -dump url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成信息文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lynx -traversal url
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tar"&gt;tar&lt;/h3&gt;
&lt;p&gt;“tar”命令是磁带归档(Tape Archive)，对创建一些文件的的归档和它们的解压很有用。&lt;/p&gt;
&lt;p&gt;将多个文件和文件夹保存成单个文件, 同时还能保留所有的文件属性&lt;/p&gt;
&lt;p&gt;对文件进行归档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-c create file,创建文件
-f specify filename,指定文件名

tar -cf output.tar file1 file2 file3
tar -cf output.tar *.txt

tar -cvf output.tar *.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;向归档中追加文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -rvf original.tar new_file
-r,追加
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看过程中更多信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -tvvf archive.tar
-v/-vv, verbose
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取文件或文件夹&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-x, exact
tar -xf archive.tar

-C,指定文件
tar -xf archive.tar -C /path/to/extraction_directory


tar -xvf archive.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取指定文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvf file.tar file1 file4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拼接两个归档文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -Af file1.tar file2.tar
#file2合并到file1中
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只有在文件内容修改时间更新(newer),才进行添加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -uvvf archive.tar filea
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比较归档文件与文件系统中的内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -df archive.tar filename1 filename2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从归档文件中删除文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -f archive.tar --delete file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取到某个目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; tar zxvf package.tar.gz -C new_dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩归档文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzip/gunzip -&amp;gt; .gz
f.tar.gz   -z
tar -czvf 
tar -xzvf

bzip/bunzip -&amp;gt; .bz2
f.tar.bz2  -j

f.tar.lzma --lzma
f.tar.lzo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从归档中排除部分文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cf arch.tar * --exclude "*.txt"
cat list
   filea
   fileb
tar -cf arch.tar * -X list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除版本控制文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar --exclude-vcs -czvvf source.tar.gz files
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印总字节数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cf arc.tar * --exclude "*.txt" --totals
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cpio"&gt;cpio&lt;/h3&gt;
&lt;p&gt;使用频率不高&lt;/p&gt;
&lt;p&gt;归档，保留文件属性（权限、所有权等）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo file1 file2 | cpio -ov &amp;gt; archive.cpio
-o 指定输出
-v 打印归档文件列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出cpio中的文件内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cpio -it &amp;lt; archive.cpio
-i指定输入
-t列出归档文件中的内容
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gzip"&gt;gzip&lt;/h3&gt;
&lt;p&gt;压缩，会删除源文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzip filename
#got filename.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunzip filename.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出文件属性信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzip -l text.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stdin读入文件并写出到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | gzip -c &amp;gt; file.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩归档文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -czvvf archive.tar.gz [files]
or
tar -cvvf archive.tar.gz [files]
gzip archive.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1-9,1最低，但速度最快
gzip -9 test.img
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zcat"&gt;zcat&lt;/h3&gt;
&lt;p&gt;无需解压缩，直接从.gz中提取内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zcat test.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bzip"&gt;bzip&lt;/h3&gt;
&lt;p&gt;更大的压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bzip2 filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压缩&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bunzip2 filename.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stdin到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file &amp;gt; bzip2 -c &amp;gt; file.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩归档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cjvvf archive.tar.bz2 [files]
or
tar -cvvf archive.tar [files]
bzip2 archive.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留输入文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bunzip2 test.bz2 -k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bzip2 -9 test.img
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lzma"&gt;lzma&lt;/h3&gt;
&lt;p&gt;比gzip/bzip2更好的压缩率&lt;/p&gt;
&lt;p&gt;压缩&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lzma filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unlzma filename.lzma
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stdin到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | lzma -c &amp;gt; file.lzma
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建归档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cavvf archive.tar.lzma [files]
    -xavf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留输入文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lzma test.bz2 -k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lzma -9 test.img
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zip"&gt;zip&lt;/h3&gt;
&lt;p&gt;压缩&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip archive_name.zip [source files/dirs]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对目录和文件进行递归操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip -r archive.zip folder1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="base64"&gt;base64&lt;/h3&gt;
&lt;p&gt;编码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base64 filename &amp;gt; outfile
cat file | base64 &amp;gt; outfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base64 -d file &amp;gt; outfile
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="md5sum_1"&gt;md5sum&lt;/h3&gt;
&lt;p&gt;“md5sum”就是计算和检验MD5信息签名。
md5 checksum(通常叫做哈希)使用匹配或者验证文件的文件的完整性，因为文件可能因为传输错误，磁盘错误或者无恶意的干扰等原因而发生改变。&lt;/p&gt;
&lt;p&gt;单向散列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;md5sum file
sha1sum file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rsync"&gt;rsync&lt;/h3&gt;
&lt;p&gt;可以对位于不同位置的文件和目录进行备份, 借助差异计算和压缩技术实现最小化数据传输量&lt;/p&gt;
&lt;p&gt;要确保远端安装了 openssh&lt;/p&gt;
&lt;p&gt;从一个目录复制到另一个目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -av source_path dest_path
-a 进行归档  -v打印细节
路径可以使本地，也可以是远端路径

e.g.
rsync -av /home/test /home/backups/ #复制到backups目录下
rsync -av /home/test /home/backups  #创建backups目录, 复制
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份到远程服务器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -av source_path user@host:PATH
可以反向
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改善传输速度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -avz source destination
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -avz source dest --exclude "*.txt"
                       --exclude-from FILEPATH
FILEPATH:
*.bak
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新备份时，删除不存在的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -avz source dest --delete
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="git"&gt;git&lt;/h3&gt;
&lt;p&gt;初始化目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置用户信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global user.name "wklken"
git config --global user.email "wklken@yeah.net"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加到远端&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin user@remotehost:/home/backup/backup.git
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add *
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm *.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;标记一个检查点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit -m "Commit message"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回滚到某个版本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout hashid [ filename ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;克隆&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone url
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dd_1"&gt;dd&lt;/h3&gt;
&lt;p&gt;Dtat Definiton, 要注意参数顺序, 错误的参数会损毁所有数据&lt;/p&gt;
&lt;p&gt;可以用来转换和复制文件，大多数时间是用来复制iso文件(或任何其它文件)到一个usb设备(或任何其它地方)中去，所以可以用来制作USB启动器&lt;/p&gt;
&lt;p&gt;语法说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd if=SOURCE of=TARGET bs=BLOCK_SIZE count=COUNT
if/of  输入/输出文件或设备路径
bs块大小
count 限制复制到目标的字节数

dd if=/dev/zero of=/dev/sda1

#制作iso 从cdrom设备读取所有数据, 创建iso文件
dd if=/dev/cdrom of=cdrom.iso
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份恢复&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd if=/dev/sda1 of=x.img

dd if=x.img of=/dev/sda1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mount"&gt;mount&lt;/h3&gt;
&lt;p&gt;mount 是一个很重要的命令，用来挂载不能自动挂载的文件系统。你需要root权限挂载设备。
在插入你的文件系统后，&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount --bind /source /destination

首先运行”lsblk”命令，识别出你的设备，然后把分配的设备名记下来。
root@tecmint:~# lsblk
创建一个任何名字的目录，但是最好和引用相关。

root@tecmint:~# su
Password:
root@tecmint:~# cd /dev
root@tecmint:~# mkdir usb
现在将“sdb1”文件系统挂载到“usb”目录.
root@tecmint:~# mount /dev/sdb1 /dev/usb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;挂载镜像&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -o loop file.img /mnt/mount_point
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wang-luo-xiang-guan_1"&gt;网络相关&lt;/h2&gt;
&lt;h3 id="ifconfig"&gt;ifconfig&lt;/h3&gt;
&lt;p&gt;显示网络接口、子网掩码等详细信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig
/sbin/ifconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印某个特定网络接口&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig iface_name

e.g.
ifconfig en1

HWaddr     MAC地址
inet addr  ip地址
Bcast      广播地址
Mask       子网掩码
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置网络接口ip&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig wlan0 192.168.0.80
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dns&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/resolv.conf

host google.com #Dns查找

nslookup google.com #更详细信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改dns/host&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo nameserver IP_ADDRESS &amp;gt;&amp;gt; /etc/resolv.conf

echo ip domain &amp;gt;&amp;gt; /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ping&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping www.baidu.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;路由信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;显示路由表
route

以数字形式显示地址
route -n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置默认网关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;route add default gw 192.168.0.1 wlan0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;trace_route, 显示分组途径的所有网关的地址&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;traceroute google.com
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ping"&gt;ping&lt;/h3&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping ADDRESS  #主机名，域名或ip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PING命令可以得到RTT(Round Trip Time), 分组从源到目的主机的往返时间, 单位ms&lt;/p&gt;
&lt;p&gt;限制发送分组数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping ADDRESS -c COUNT

ping
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fping"&gt;fping&lt;/h3&gt;
&lt;p&gt;同时ping一组ip, 而且响应非常快&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fping -a ip1 ip2 -g
fping -a 192.160.1/24 -g
fping -a &amp;lt; ip.list

-a, 所有活动主机的ip
-g, 从IP/mask生成的ip地址范围
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行dns查询&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fping -a -d 2 &amp;gt; /dev/null  &amp;lt; ip.list
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lftp"&gt;lftp&lt;/h3&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lftp username@ftphost
cd dir
lcd改变本地主机目录
mkdir 创建目录
get/put 下载上传
quit退出
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="scp"&gt;scp&lt;/h3&gt;
&lt;p&gt;scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。&lt;/p&gt;
&lt;p&gt;linux的scp命令可以在linux服务器之间复制文件和目录.&lt;/p&gt;
&lt;p&gt;拷贝文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp filename user@remotehost:/home/pat
ip或主机名均可

scp SOURCE DESTINATION
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归复制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp -r dir1 user@remotehost:/home/backup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提高拷贝速度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp  -c arcfour -r -P20755 dir/ 192.168.2.*:/**/**/data/
-c arcfour 这个算法没有加校验不保证完整性，注意慎用，内网1000M带宽，默认算法速度只能达到30M/s，用arcfour这个算法速度可以达到50-80M/s
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ssh"&gt;SSH&lt;/h3&gt;
&lt;p&gt;连接远程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh username@remote_host

ssh -p port username@remote_host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh username@remote_host 'cmd1; cmd2' &amp;gt; stdout.txt 2&amp;gt;errors.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩功能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -C user@hostname 'cmds'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打通ssh&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.创建SSH密钥
  ssh-keygen -t rsa
  公钥, ~/.ssh/id_rsa.pub
2.登陆远端服务器, 将公钥写入 ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lsof"&gt;lsof&lt;/h3&gt;
&lt;p&gt;列出系统中开放端口及运行在端口上的服务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配合grep, 获取需要的信息&lt;/p&gt;
&lt;h3 id="netstat"&gt;netstat&lt;/h3&gt;
&lt;p&gt;查看开放端口和服务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netstat -tnp
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ci-pan-he-xi-tong_1"&gt;磁盘和系统&lt;/h2&gt;
&lt;h3 id="du"&gt;du&lt;/h3&gt;
&lt;p&gt;du = disk usage&lt;/p&gt;
&lt;p&gt;估计文件的空间占用。 逐层统计文件（例如以递归方式）并输出摘要。&lt;/p&gt;
&lt;p&gt;查看占用磁盘空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du FILENAME1 FILENAME2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -a dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以KB,MB或块为单位展示&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -h FILENAME1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示总计情况&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -c FILENAME1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只显示合计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -s FILENAME1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以特定单位打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -b/-k/-m/-B FILES
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除部分文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du --exclude "*.txt" DIR
   --exclude-from EXCLUDE.txt DIR
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定最深层级&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du --max-depth 2 DIR
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定目录最大的10个文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -ak S_DIR | sort -nrk 1 | head
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="df"&gt;df&lt;/h3&gt;
&lt;p&gt;df = disk free&lt;/p&gt;
&lt;p&gt;报告系统的磁盘使用情况。在跟踪磁盘使用情况方面对于普通用户和系统管理员都很有用。 ‘df‘ 通过检查目录大小工作，但这一数值仅当文件关闭时才得到更新。&lt;/p&gt;
&lt;p&gt;查看磁盘可用空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df
df -h
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="time"&gt;time&lt;/h3&gt;
&lt;p&gt;计算命令执行时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time COMMAND

real 挂钟时间, 从开始执行到结束的时间
user 进程花费在用户模式中的cpu时间, 真正用于执行进程所花得时间
sys  进程花费在内核模式中的cpu时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写入文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time -o output.txt COMMAND
time -a output.txt COMMAND #追加
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;格式化输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time -f "Time: %U"  -a -o timing.log uname
real %e
user %U
sys %S
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="who"&gt;who&lt;/h3&gt;
&lt;p&gt;获取当前用户登陆信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;who / w
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当前登陆主机的用户列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="uptime"&gt;uptime&lt;/h3&gt;
&lt;p&gt;查看系统已经通电运行多长时间了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uptime
#也可以看到负载
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="last"&gt;last&lt;/h3&gt;
&lt;p&gt;显示上次用户登录信息- 前一次启动会话信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;last
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取单个用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;last USER
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="watch"&gt;watch&lt;/h3&gt;
&lt;p&gt;在终端中以固定间隔监视命令输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#default 2s
watch ls

# 5s
watch -n 5 ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;颜色标示&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;watch -d 'COMMAND'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jin-cheng-he-xian-cheng_1"&gt;进程和线程&lt;/h2&gt;
&lt;h3 id="ps"&gt;ps&lt;/h3&gt;
&lt;p&gt;ps命令给出正在运行的某个进程的状态，每个进程有特定的id成为PID。&lt;/p&gt;
&lt;p&gt;ps命令主要查看系统中进程的状态&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USER              PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND
USER表示启动进程用户
PID表示进程标志号

%CPU表示运行该进程占用CPU的时间与该进程总的运行时间的比例
%MEM表示该进程占用内存和总内存的比例。

VSZ表示占用的虚拟内存大小，以KB为单位。
RSS为进程占用的物理内存值，以KB为单位。

TTY表示该进程建立时所对应的终端，"?"表示该进程不占用终端。
STAT表示进程的运行状态，包括以下几种代码：
    D，不可中断的睡眠；
    R，就绪（在可运行队列中）；
    S，睡眠；
    T，被跟踪或停止；
    Z，终止（僵死）的进程，Z不存在，但暂时无法消除；
    W，没有足够的内存分页可分配；&amp;lt;高优先序的进程；
    N，低优先序的进程；
    L，有内存分页分配并锁在内存体内（实时系统或I/O）。

START为进程开始时间。
TIME为执行的时间。
COMMAND是对应的命令名。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看进程信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#当前终端
ps

PID TTY TIME CMD
PID  进程ID
TTY  终端
TIME 进程启动后过去的时间
CMD  进程对应的命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示更多信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#当前终端
ps -f
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看所有进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps aux
ps -ef
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看某个用户的所有进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps U ken
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OTHER&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;par1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;par2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;par3&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eo&lt;/span&gt; &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pcpu&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
&lt;span class="n"&gt;pmem&lt;/span&gt; &lt;span class="err"&gt;内存使用率，&lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="err"&gt;可执行文件名&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;启动进程的用户&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;etime&lt;/span&gt;&lt;span class="err"&gt;启动后度过的时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置升序降序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -eo comm,pcpu --sort -pcpu | head
+升序，-降序
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;找出给定命令名对应进程ID&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -C COMMAND_NAME
ps -C bash -o pid=
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进程线程相关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -eLf --sort -nlwp | head
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看子进程树&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps axwef
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：当你要知道有哪些进程在运行或者需要知道想杀死的进程PID时ps命令很管用。你可以把它与‘grep‘合用来查询指定的输出结果，例如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ps -A | grep -i ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pgrep_1"&gt;pgrep&lt;/h3&gt;
&lt;p&gt;pgrep只需要命令名的一部分, ps需要准确的全名&lt;/p&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定进程的用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep -u root,slynux COMMAND
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回匹配进程数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep -c COMANND
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="top"&gt;top&lt;/h3&gt;
&lt;p&gt;查看占用cpu最多的进程列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;top
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="kill"&gt;kill&lt;/h3&gt;
&lt;p&gt;kill是用来杀死已经无关紧要或者没有响应的进程,杀死一个进程需要知道进程的PID&lt;/p&gt;
&lt;p&gt;列出可用信号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;终止一个进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill PROCESS_ID_LIST
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;强杀进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill -9 PROCESS_ID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;杀死一组命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;killall process_name
killall -9 process_name

指定用户
killall -u USERNAME process_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pkill"&gt;pkill&lt;/h3&gt;
&lt;p&gt;杀，接受进程名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkill process_name
pkill -s SIGNAL process_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="which"&gt;which&lt;/h3&gt;
&lt;p&gt;查找PATH下某个命令位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which ls
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="whereis"&gt;whereis&lt;/h3&gt;
&lt;p&gt;whereis的作用是用来定位命令的二进制文件\资源\或者帮助页.举例来说,获得ls和kill命令的二进制文件/资源以及帮助页:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;whereis ls
whereis kill
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似which，多了命令手册位置，源代码位置&lt;/p&gt;
&lt;p&gt;注意:当需要知道二进制文件保存位置时有用.&lt;/p&gt;
&lt;h3 id="file_1"&gt;file&lt;/h3&gt;
&lt;p&gt;确定文件类型&lt;/p&gt;
&lt;h3 id="whatis"&gt;whatis&lt;/h3&gt;
&lt;p&gt;对命令的简短描述&lt;/p&gt;
&lt;h3 id="hostname"&gt;hostname&lt;/h3&gt;
&lt;p&gt;当前主机名&lt;/p&gt;
&lt;h3 id="uname"&gt;uname&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主机名
uname -n

#内核版本，硬件架构等
uname -a

#内核发行版本
uname -r

主机类型(32位/64位)
uname -m

cpu相关信息
cat /proc/cpuinfo

内存信息
cat /proc/meminfo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#uname -a
Linux tecmint 3.8.0-19-generic #30-Ubuntu SMP Wed May 1 16:36:13 UTC 2013 i686 i686 i686 GNU/Linux

1. “Linux“: 机器的内核名
2. “tecmint“: 机器的分支名
3. “3.8.0-19-generic“: 内核发布版本
4. “#30-Ubuntu SMP“: 内核版本
5. “i686“: 处理器架构
6. “GNU/Linux“: 操作系统名
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="crontab"&gt;crontab&lt;/h3&gt;
&lt;p&gt;格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* * * * * cmd
分钟(0-59)，小时(0-23)，天(1-31)，月份(1-12)，工作日(0-6)

A,B  A and B
*/C  every C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -l
crontab -l -u slynux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编辑&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -e
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -r
crontab -u slynux -r
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以在crontab 中加入环境变量&lt;/p&gt;
&lt;h3 id="getopts"&gt;getopts&lt;/h3&gt;
&lt;p&gt;命令行参数处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while getopts :f:vql opt
do
    case $opt in
    f)  file=$OPTARG
        ;;
    v)  verbose=true
        ;;
    ....
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="history"&gt;history&lt;/h3&gt;
&lt;p&gt;“history”命令就是历史记录。它显示了在终端中所执行过的所有命令的历史&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;history
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：按住“CTRL + R”就可以搜索已经执行过的命令，它可以你写命令时自动补全&lt;/p&gt;
&lt;h3 id="sudo"&gt;sudo&lt;/h3&gt;
&lt;p&gt;“sudo”(super user do)命令允许授权用户执行超级用户或者其它用户的命令。通过在sudoers列表的安全策略来指定。&lt;/p&gt;
&lt;p&gt;注意：sudo 允许用户借用超级用户的权限，然而”su”命令实际上是允许用户以超级用户登录。所以sudo比su更安全。
并不建议使用sudo或者su来处理日常用途，因为它可能导致严重的错误如果你意外的做错了事，这就是为什么在linux社区流行一句话：&lt;/p&gt;
&lt;p&gt;“To err is human, but to really foul up everything, you need root password.”
“人非圣贤孰能无过，但是拥有root密码就真的万劫不复了。”&lt;/p&gt;
&lt;h3 id="cal"&gt;cal&lt;/h3&gt;
&lt;p&gt;“cal”（Calender），它用来显示当前月份或者未来或者过去任何年份中的月份&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cal
cal 02 1835
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cp"&gt;cp&lt;/h3&gt;
&lt;p&gt;“copy”就是复制。它会从一个地方复制一个文件到另外一个地方&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp file1 file2
cp -r dir1 dir2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速备份一个文件：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp some_file_name{,.bkp}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意： cp，在shell脚本中是最常用的一个命令，而且它可以使用通配符（在前面一块中有所描述），来定制所需的文件的复制。&lt;/p&gt;
&lt;h3 id="mv"&gt;mv&lt;/h3&gt;
&lt;p&gt;“mv”命令将一个地方的文件移动到另外一个地方去。&lt;/p&gt;
&lt;p&gt;“mv”命令将一个地方的文件移动到另外一个地方去。&lt;/p&gt;
&lt;h3 id="pwd"&gt;pwd&lt;/h3&gt;
&lt;p&gt;“pwd”（print working directory），在终端中显示当前工作目录的全路径。&lt;/p&gt;
&lt;p&gt;注意： 这个命令并不会在脚本中经常使用，但是对于新手，当从连接到nux很久后在终端中迷失了路径，这绝对是救命稻草。&lt;/p&gt;
&lt;h3 id="free"&gt;free&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;free -m
             total       used       free     shared    buffers     cached
Mem:          7982       6811       1171          0        350       5114
-/+ buffers/cache:       1346       6636
Swap:        16935         11      16924
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示剩余内存&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;free -m | grep cache | awk '/[0-9]/{ print $4" MB" }'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里例子中,应用程序只使用了1346MB内存,还有6636MB空闲内存可以使用.&lt;/p&gt;
&lt;p&gt;一些简单的计算方法：&lt;/p&gt;
&lt;p&gt;物理已用内存 = 实际已用内存 - 缓冲 - 缓存 = 6811M - 350M - 5114M&lt;/p&gt;
&lt;p&gt;物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存&lt;/p&gt;
&lt;p&gt;应用程序可用空闲内存 = 总物理内存 - 实际已用内存&lt;/p&gt;
&lt;p&gt;应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存&lt;/p&gt;
&lt;p&gt;原始解释：转至互联网：
Linux的基本原则是没有资源应该被浪费.因此核心会使用尽可能多的RAM,来缓存来自本地和远程的文件系统的信息.系统做读写操作的时候,会将与当前运行的进程相关的数据尽量存储在RAM里.系统报告的缓存是缓冲和页缓存两者之和.缓存并不是在进程结束的时候被回收(你可能很快会启动另外一个进程,需要同样的数据),而是随需回收–比如,当你启动一个需要大量内存的进程时,Linux核心会从内存中回收缓存,将得到的内存分配给新的进程.&lt;/p&gt;
&lt;p&gt;有些区域,比如匿名内存映射(mmps)和共享内存区域,它们被报告为缓存,但不是被核心直接释放.一般的缓存不映射到进程的地址空间,仅仅是简单的核心映射,而这些特别的缓存映射到所有挂接到它们上面的进程.&lt;/p&gt;
&lt;h3 id="eval"&gt;eval&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eval "ls -l"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="basename"&gt;basename&lt;/h3&gt;
&lt;p&gt;获取路径中文件部分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;basename resolv.conf #resolv.conf
basename /etc/resolv.conf # resolv.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cmp"&gt;cmp&lt;/h3&gt;
&lt;p&gt;比较两个任意类型的文件并将结果输出至标准输出。如果两个文件相同， ‘cmp‘默认返回0；如果不同，将显示不同的字节数和第一处不同的位置。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp file1 file2
diff file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rm"&gt;rm&lt;/h3&gt;
&lt;p&gt;‘rm’ 标准移除命令。 rm 可以用来删除文件和目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm file1
rm -r dir1  #递归删除空目录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;强删&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf fileordir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;警告: ”rm -rf” 命令是一个破坏性的命令,假如你不小心删除一个错误的目录。
一旦你使用’rm -rf’ 删除一个目录,在目录中所有的文件包括目录本身会被永久的删除,所以使用这个命令要非常小心。&lt;/p&gt;
&lt;h3 id="service"&gt;service&lt;/h3&gt;
&lt;p&gt;‘service‘命令控制服务的启动、停止和重启，它让你能够不重启整个系统就可以让配置生效以开启、停止或者重启某个服务。&lt;/p&gt;
&lt;p&gt;注意：要想使用service命令，进程的脚本必须放在‘/etc/init.d‘，并且路径必须在指定的位置。
如果要运行“service apache2 start”实际上实在执行“service /etc/init.d/apache2 start”.&lt;/p&gt;
&lt;h3 id="man"&gt;man&lt;/h3&gt;
&lt;p&gt;‘man‘是系统帮助页。Man提供命令所有选项及用法的在线文档。几乎所有的命令都有它们的帮助页&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;man thecommand
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：系统帮助页是为了命令的使用和学习而设计的。&lt;/p&gt;
&lt;h3 id="passwd"&gt;passwd&lt;/h3&gt;
&lt;p&gt;这是一个很重要的命令，在终端中用来改变自己密码很有用。显然的，因为安全的原因，你需要知道当前的密码。&lt;/p&gt;
&lt;h3 id="gcc"&gt;gcc&lt;/h3&gt;
&lt;p&gt;gcc 是Linux环境下C语言的内建编译器。下面是一个简单的C程序，在桌面上保存为Hello.c （记住必须要有‘.c‘扩展名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc Hello.c
./a.out
gcc -o Hello Hello.c
./Hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 编译C程序时，输出会自动保存到一个名为“a.out”的新文件，因此每次编译C程序 “a.out”都会被修改。
因此编译期间最好定义输出文件名.，这样就不会有覆盖输出文件的风险了。&lt;/p&gt;
&lt;h3 id="g"&gt;g++&lt;/h3&gt;
&lt;p&gt;g++是C++的内建编译器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++ Add.cpp
./a.out
g++ -o Add Add.cpp
./Add
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="java"&gt;java&lt;/h3&gt;
&lt;p&gt;Java 是世界上使用最广泛的编程语言之一. 它也被认为是高效, 安全和可靠的编程语言. 现在大多数基于网络的服务都使用Java实现.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;javac tecmint.java
java tecmint
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 几乎所有的Linux发行版都带有gcc编译器, 大多数发行版都内建了g++ 和 java 编译器, 有些也可能没有. 你可以用apt 或 yum 安装需要的包.&lt;/p&gt;
&lt;h3 id="guan-yu-devnull"&gt;关于/dev/null&lt;/h3&gt;
&lt;p&gt;特别有用的特殊文件，位桶，传送到此文件的数据都会被系统丢弃。&lt;/p&gt;
&lt;h3 id="yu-yan-ji-luan-ma"&gt;语言及乱码&lt;/h3&gt;
&lt;p&gt;查看变量值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $LANG   未设置任何LC_XXX时使用的默认值
echo $LC_ALL 覆盖所有LC_XXX变量，总控开关
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好的做法是，避免为任何LC_XXX变量赋值，使用LC_ALL和LANG来控制&lt;/p&gt;
&lt;p&gt;避免乱码：从编辑器到语言，再到系统，统一编码为UTF-8&lt;/p&gt;
&lt;h3 id="shellde-ban-ben"&gt;shell的版本&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash --version
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="shell"></category></entry><entry><title>工作两周年小结</title><link href="http://www.wklken.me/posts/2013/07/04/summary-07-worktwoyear.html" rel="alternate"></link><published>2013-07-04T00:00:00+08:00</published><updated>2013-07-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-07-04:/posts/2013/07/04/summary-07-worktwoyear.html</id><summary type="html">&lt;p&gt;两年了，又到了总结的时候，都成习惯了&lt;/p&gt;
&lt;p&gt;从哪说起呢，有点散，有点乱，还有错别字，囧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2011年的7月4号，是毕业后工作的第一天&lt;/p&gt;
&lt;p&gt;2012年的7月4号，满一年，记得那天太阳很大，坐在靠窗的位置，外面的天空很蓝，偶尔战斗机飞过，划出一道白，现在偶尔发呆，望着高楼外墙反射的阳光，想着身后是那片橙，那些人&lt;/p&gt;
&lt;p&gt;感谢那些可爱的人:)&lt;/p&gt;
&lt;p&gt;那时候的日子，简单快乐，周一到周五，工作，加加班，晚上回去看看书什么的，周六，有一段时间常来公司，写一些东西，学一些东西&lt;/p&gt;
&lt;p&gt;周日骑车出去溜溜，山里转一圈，然后绕西湖一圈，在湖边静静坐着，回公司蹭蹭水，上上网&lt;/p&gt;
&lt;p&gt;周末的公司，很安静，让人很是怀念，如今，已经没有了那种环境&lt;/p&gt;
&lt;p&gt;那时候的节奏，像在冬天里晒太阳，很幸福，家的感觉&lt;/p&gt;
&lt;p&gt;现在的节奏，像大夏天太阳底下登山，天热山陡 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;两年了，又到了总结的时候，都成习惯了&lt;/p&gt;
&lt;p&gt;从哪说起呢，有点散，有点乱，还有错别字，囧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2011年的7月4号，是毕业后工作的第一天&lt;/p&gt;
&lt;p&gt;2012年的7月4号，满一年，记得那天太阳很大，坐在靠窗的位置，外面的天空很蓝，偶尔战斗机飞过，划出一道白，现在偶尔发呆，望着高楼外墙反射的阳光，想着身后是那片橙，那些人&lt;/p&gt;
&lt;p&gt;感谢那些可爱的人:)&lt;/p&gt;
&lt;p&gt;那时候的日子，简单快乐，周一到周五，工作，加加班，晚上回去看看书什么的，周六，有一段时间常来公司，写一些东西，学一些东西&lt;/p&gt;
&lt;p&gt;周日骑车出去溜溜，山里转一圈，然后绕西湖一圈，在湖边静静坐着，回公司蹭蹭水，上上网&lt;/p&gt;
&lt;p&gt;周末的公司，很安静，让人很是怀念，如今，已经没有了那种环境&lt;/p&gt;
&lt;p&gt;那时候的节奏，像在冬天里晒太阳，很幸福，家的感觉&lt;/p&gt;
&lt;p&gt;现在的节奏，像大夏天太阳底下登山，天热山陡，还好风景不错，副本没完，得接着打&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;人，总是在成长，在变化，在思考&lt;/p&gt;
&lt;p&gt;刚入职那会，想着，好好干活，三年后再说，那时候，没想过变化，没想过最终会离职，换了个城市，换了份工作&lt;/p&gt;
&lt;p&gt;美好的日子，总是过得很快，七月，八月，九月，然后到了十月&lt;/p&gt;
&lt;p&gt;十月注定不平静&lt;/p&gt;
&lt;p&gt;参了个会，投了几个，面了几个，拿到offer,交接，离职，离开&lt;/p&gt;
&lt;p&gt;时间，终究没有跨过2到达3&lt;/p&gt;
&lt;p&gt;那段时间，一直在思考一个问题，自己想做的，擅长做的到底是什么&lt;/p&gt;
&lt;p&gt;最终，还是没有想明白，只是摸到点头绪，想到了，便要做决定&lt;/p&gt;
&lt;p&gt;以前认为帮主的follow your heart是很虚的东西，现在想来，有点道理&lt;/p&gt;
&lt;p&gt;花了很长时间，想明白一件事情，也算值得&lt;/p&gt;
&lt;p&gt;I just need to move on.&lt;/p&gt;
&lt;p&gt;很多时候在想，或许不变也不错，熟悉的环境，熟悉的人，熟悉的事&lt;/p&gt;
&lt;p&gt;但是，随着时间的推移，对待问题，事物的看法，总是在变化的，环境虽然不错，但是可能和自身的节奏已经不匹配，或许，需要换个环境了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;切换，从测试开发，转成了开发，用着喜欢的python，到现在，八个月了&lt;/p&gt;
&lt;p&gt;这八个月，很是漫长，又很是短暂&lt;/p&gt;
&lt;p&gt;身边的人，认识，熟悉，也有离开的&lt;/p&gt;
&lt;p&gt;相识用了很长，离开却只要短短几天&lt;/p&gt;
&lt;p&gt;离职，几天后，飞到另一个城市，入职&lt;/p&gt;
&lt;p&gt;刚开始一周，住在同学那，每天挤公交，哎，记得，装了三天系统，坑爹的联想机器&lt;/p&gt;
&lt;p&gt;后来，花了一天，找了房子，开始了每天地铁的生活&lt;/p&gt;
&lt;p&gt;熟悉环境，重构东西，写新的东西，上线，开始了这里的工作&lt;/p&gt;
&lt;p&gt;过年，回家，你妹的没年假，颇为无奈&lt;/p&gt;
&lt;p&gt;五月份，请了两天假，去海南溜了半圈，想清楚了一些问题&lt;/p&gt;
&lt;p&gt;六月底，公司outing，回厦门逛了两天，当做回家了&lt;/p&gt;
&lt;p&gt;好像流水账，实际上就是，这么，过了八个月&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这一年变化很多&lt;/p&gt;
&lt;p&gt;开始每天十点上班七点下班的节奏，早睡，然后七点多起来，看书看到八点半，起床然后晃悠悠去上班，地铁三站，十一分钟，加走路，十八分钟&lt;/p&gt;
&lt;p&gt;疯狂买书，书桌上一堆，书架上两层，都是战利品，这几个月啃了一部分，目测这是一年的量，读书是最好的投资，实践中也印证，坚信不疑&lt;/p&gt;
&lt;p&gt;足够强大的执行力和足够高的效率，空出了好多时间，看书，玩，发呆，做一些想做的事情&lt;/p&gt;
&lt;p&gt;开始，逐渐不上csdn了(感觉俩字：浮躁，勿喷，不喜欢负能量，另一个原因是，开始用markdown了)，转小道消息和hacknews（有效信息），qq越用越少，也逐渐习惯上线隐身…依然每天刷微博，慢慢在翻墙&lt;/p&gt;
&lt;p&gt;再也没没事去公司了&lt;/p&gt;
&lt;p&gt;小黑换mac了，继续倒腾，的确好用&lt;/p&gt;
&lt;p&gt;倒腾了个&lt;a href="https://github.com/wklken/k-vim"&gt;vim&lt;/a&gt;，写了几个东西，开始迁移&lt;a href="http://wklken.github.io/"&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写了几天代码，把摩托换iphone了，前两天换的，用着还成，铁杆moto粉变成伪果粉的节奏，想再搞个pad&lt;/p&gt;
&lt;p&gt;也渐渐熟悉了，自己搞定从设计到上线运维这一整套，修复bug，分分钟上线的节奏…..当然，形成一些好的习惯，开发或者去挖掘了一些好用的东西，提高效率&lt;/p&gt;
&lt;p&gt;相对一年前，算上跳槽的话，工资小提了两次，不算多，每个月依旧很穷的感觉，争取过两月再来一次&lt;/p&gt;
&lt;p&gt;越来越懒了，在这车况太复杂，没有再出去骑过车，只是偶尔徒步到海边逛逛&lt;/p&gt;
&lt;p&gt;看是啃一些原来认为很难很高深的东西，虽然过程有些艰难，但是目测能吃掉，没有什么东西，是轻而易举能得到的&lt;/p&gt;
&lt;p&gt;还有7月第一天，由于所在位置，或者其他原因，反正我不是很明白，很突然的，开始要带人了，五个人的小组，角色变化有点快，顿感压力山大，以前惬意的日子或许不再，需要一段时间好好过渡，发现写代码的时间被压缩了，经常打断处理些其他事情，意味着加会班搞定一些事情，需要再次提升下效率…..&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多东西没有变，或许也改变不了，譬如性格，譬如习惯，譬如外婆红烧肉，很怀念西湖，还有茶馆&lt;/p&gt;
&lt;p&gt;依然会对一些事情有莫名的坚持，这或许是一个码农的固执&lt;/p&gt;
&lt;p&gt;偏执地认为需要去做一些事情&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;两年了，感谢这一路遇到的人，都很nice&lt;/p&gt;
&lt;p&gt;性格内向的我，经常会带来一些困扰吧&lt;/p&gt;
&lt;p&gt;感谢你们，对我的包容，教会了我很多，留下了很多美好的回忆&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;其实有时想想，坚持做一件事情，没有错，但是需要偶尔抬头，看看天空，思考下&lt;/p&gt;
&lt;p&gt;做选择，没有对错，没有后悔的选项，很多时候，只是单选题&lt;/p&gt;
&lt;p&gt;现在想来，一个适合自己的节奏&lt;/p&gt;
&lt;p&gt;无非，一个良性循环&lt;/p&gt;
&lt;p&gt;思考成长，能力效率提升，时间越多，看书生活发呆，思考成长，循环&lt;/p&gt;
&lt;p&gt;无论工作，生活，都需要进入这个状态&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;总感觉自己还很弱，也的确很弱，要变得强力，还需要努力，还需要时间&lt;/p&gt;
&lt;p&gt;需要磨砺自己做事的方法，风格，对待问题的观点，以及同外界交流沟通的能力&lt;/p&gt;
&lt;p&gt;保持简单，保持高效，看很多书，做很多事，把事情做得漂亮，依然是这个目标&lt;/p&gt;
&lt;p&gt;什么时候，才能战斗力爆表呢&lt;/p&gt;
&lt;p&gt;继续思考，继续行走&lt;/p&gt;
&lt;p&gt;吴昆亮&lt;/p&gt;
&lt;p&gt;2013-07-04 00：08&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</content><category term="总结，程序人生"></category></entry><entry><title>我的vim配置及说明【k-vim】</title><link href="http://www.wklken.me/posts/2013/06/11/linux-my-vim.html" rel="alternate"></link><published>2013-06-11T00:00:00+08:00</published><updated>2013-06-11T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-06-11:/posts/2013/06/11/linux-my-vim.html</id><summary type="html">&lt;p&gt;ps: k-vim github地址 : https://github.com/wklken/k-vim&lt;/p&gt;
&lt;h3 id="vimcha-jian-fen-lei-ji-kuai-jie-jian"&gt;vim插件分类及快捷键&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给人一条Vim 命令，他能折腾一晚上；告诉他怎么自定义Vim 命令，他能捣腾一辈子&lt;/p&gt;
&lt;p&gt;生命不息,折腾不止 (╯‵□′)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;编辑器之神 = 生产力(效率为王) + 性感(界面快捷键) + 装x神器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="vimji-ben-yong-fa"&gt;vim基本用法&lt;/h3&gt;
&lt;p&gt;初学者: &lt;a href="http://blog.csdn.net/wklken/article/details/7533272"&gt;vim训练稿&lt;/a&gt;
几年前的三月份,第一次正儿八经开始使用vim,后来整理了一份,对着敲几遍,训练稿&lt;/p&gt;
&lt;p&gt;推荐: 耗子叔的 &lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者,玩游戏 &lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shi-yong-shuo-ming"&gt;使用说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;能熟练使用原生vim,最好先熟悉了再来使用插件扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下插件,仅介绍用途优点等,可以在github中搜索查看详细用途和配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前vim使用配置,在vimrc中查看&lt;/p&gt;
&lt;p&gt;快捷键为插件默认/或者当前配置vimrc定义的,如果需要修改,查看vimrc中对插件配置进行修改 [sd …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ps: k-vim github地址 : https://github.com/wklken/k-vim&lt;/p&gt;
&lt;h3 id="vimcha-jian-fen-lei-ji-kuai-jie-jian"&gt;vim插件分类及快捷键&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给人一条Vim 命令，他能折腾一晚上；告诉他怎么自定义Vim 命令，他能捣腾一辈子&lt;/p&gt;
&lt;p&gt;生命不息,折腾不止 (╯‵□′)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;编辑器之神 = 生产力(效率为王) + 性感(界面快捷键) + 装x神器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="vimji-ben-yong-fa"&gt;vim基本用法&lt;/h3&gt;
&lt;p&gt;初学者: &lt;a href="http://blog.csdn.net/wklken/article/details/7533272"&gt;vim训练稿&lt;/a&gt;
几年前的三月份,第一次正儿八经开始使用vim,后来整理了一份,对着敲几遍,训练稿&lt;/p&gt;
&lt;p&gt;推荐: 耗子叔的 &lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者,玩游戏 &lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shi-yong-shuo-ming"&gt;使用说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;能熟练使用原生vim,最好先熟悉了再来使用插件扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下插件,仅介绍用途优点等,可以在github中搜索查看详细用途和配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前vim使用配置,在vimrc中查看&lt;/p&gt;
&lt;p&gt;快捷键为插件默认/或者当前配置vimrc定义的,如果需要修改,查看vimrc中对插件配置进行修改 [sd]标记的为自定义 [d]标记的为默认快捷键&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于平时会使用python和golang,所以语言方面的配置偏向于这两个&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其它的可以参照网上配置(通用的插件可以配置,其他具体语言插件可以自己配置加入)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fork一份&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据自己使用的语言，自身习惯进行修改&lt;/p&gt;
&lt;p&gt;有些插件用不到，可以注释删除，有些插件没有，可以自行添加（vundle很强大只要github上有都能配置），有些插件快捷键等可以自己去进一步了解&lt;/p&gt;
&lt;p&gt;得到一份符合自己习惯的vim配置，后续能在任何地方进行一键配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      二八定律,关注可以最大提升自身生产力的那20%插件,具体要亲自实践
      有什么问题,先看插件文档说明-&amp;gt;代码选项-&amp;gt;github上的issues-&amp;gt;google it
      你遇到的问题,一定别人也遇到了,大部分可解决,少部分无解….
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;欢迎推荐好用更酷的插件配置:)&lt;/p&gt;
&lt;p&gt;我的配置也会不定期更新，thx&lt;/p&gt;
&lt;p&gt;PS: 这个vim配置是我的&lt;a href="https://github.com/wklken/linux_config"&gt;linux_config&lt;/a&gt;下一部分，如果需要，可以参考，主要是用于一键配置环境&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pei-zhi-bu-zou"&gt;配置步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;clone到本地,配置到linux个人目录（如果是从linux_config过来的，不需要clone）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/wklken/k-vim.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装依赖包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ctags
#brew install ctags     (mac用户)

#使用python需要
sudo pip install pyflakes
sudo pip install pylint
sudo pip install pep8
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装插件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd k-vim/

sh -x install.sh

#会进入安装插件的列表，目前30+个插件，一一安装是从github clone的，完全取决于网速

#安装完插件后，会自动编译YCM，注意，可能编译失败（缺少某些依赖包,暂不支持mac osx 10.9）
失败的话手动编译吧，看第4步 编译自动补全YouCompleteMe （这步耗时也有点长，但绝对值得）

install.sh
本质上做的事情
1.将vimrc/vim文件夹软链接到$HOME，编程系统vim配置
2.git clone安装vundle（clone到bundle目录下）
3.通过vundle安装其他所有插件（相当于进入vimrc, 命令行执行:BundleInstall）,从github全部搞到本地
4.编译需要手动编译的插件，eg.YCM
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可能遇到的问题:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译自动补全YouCompleteMe&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个插件需要Vim 7.3.584,所以,如果vim版本太低,需要&lt;a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"&gt;编译安装&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对行号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vimrc中配置,如果不习惯,可以去掉,&lt;a href="http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/"&gt;相关参考&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到vimrc中修改colortheme,可以使用molokai(用惯sublimetext2的童鞋很熟悉)&lt;/p&gt;
&lt;p&gt;默认配置的是&lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;solarized dark主题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想要修改终端配色为solarized可以参考 &lt;a href="https://github.com/sigurdga/gnome-terminal-colors-solarized"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装/卸载/更新插件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可能发现打开vim很慢，可能是插件有点多了，这个配置插件全开&lt;/p&gt;
&lt;p&gt;去掉某些自己用不到的插件: 编辑vimrc，注释掉插件对应Bundle行即可(加一个双引号),保存退出即可&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    "Bundle 'fholgado/minibufexpl.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想从物理上清除（删除插件文件），注释保存后再次进入vim&lt;/p&gt;
&lt;p&gt;命令行模式，执行:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    :BundleClean
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要安装新插件，在vimrc中加入bundle，然后执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    :BundleInstall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新插件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    :BundleUpdate
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;给mac用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用mac vim&lt;/p&gt;
&lt;p&gt;首先，安装最新mac vim ,可以正常打开&lt;/p&gt;
&lt;p&gt;然后(需要sudo)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mv /usr/bin/vim /usr/bin/vim.bk
    ln -s /usr/local/bin/mvim /usr/bin/vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，在.bashrc/.bash_profile中加入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    alias vi='mvim -v'
    alias vim='mvim -v'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;冲突和问题排查&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;插件很多，并且其默认快捷键或者配置可能发生冲突&lt;/p&gt;
&lt;p&gt;当加入新插件发现有冲突或者展现有问题&lt;/p&gt;
&lt;p&gt;排除法进行排查：注掉所有插件或配置，然后二分法逐一恢复，可以定位到出现问题的插件或配置&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="jie-tu"&gt;截图&lt;/h3&gt;
&lt;p&gt;solarized主题&lt;/p&gt;
&lt;p&gt;&lt;img alt="solarized" src="https://github.com/wklken/gallery/blob/master/vim/solarized.png?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;molokai主题&lt;/p&gt;
&lt;p&gt;&lt;img alt="molokai" src="https://github.com/wklken/gallery/blob/master/vim/molokai.png?raw=true"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-ding-yi-kuai-jie-jian-shuo-ming"&gt;自定义快捷键说明&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;F1  关掉，防止跳出帮助
F2  set nu/nonu
F3  set list/nolist
F4  set wrap/nowrap
F5  set paste/nopaste
F6  syntax on/off
空格 /开启查找
Y   =y$   复制到行尾
w!!  以sudo的权限保存
kj   &amp;lt;Esc&amp;gt;，不用到角落去按esc了
t    新起一行，下面，不进入插入模式
T    新起一行，上面
,sa   全选(select all)
hjkl  上下左右，强迫使用，要解开的自己改
ctrl + jkhl 进行上下左右窗口跳转,不需要ctrl+w+jkhl

,tn  new tab
,tc  tab close
,to  tab only
,tm  tab move
,te  new tab edit
ctrl+n  相对行号绝对行号变换，默认用相对行号
5j/5k  在相对行号模式下，往上移动5行 往下移动5行

,y 展示历史剪贴板
,yc 清空
yy/dd -&amp;gt; p -&amp;gt; ctrl+p可以替换非最近一次剪贴内容

,p 开启文件搜索 ctrlp
,/ 去除匹配高亮
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="cha-jian-ji-qi-kuai-jie-jian-shuo-ming"&gt;插件及其快捷键说明&lt;/h3&gt;
&lt;p&gt;图片有点多，展示有点慢，截得不是很专业，耐心看完:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插件管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="gmarikvundle"&gt;&lt;a href="https://github.com/gmarik/vundle"&gt;gmarik/vundle&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;必装,用于管理所有插件&lt;/p&gt;
&lt;p&gt;命令行模式下管理命令:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:BundleInstall     install
:BundleInstall!    update
:BundleClean       remove plugin not in list
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;导航及搜索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="scrooloosenerdtree"&gt;&lt;a href="https://github.com/scrooloose/nerdtree"&gt;scrooloose/nerdtree&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装,开启目录树导航&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
        ,n  打开 关闭树形目录结构

        在nerdtree窗口常用操作：(小写当前，大写root)
        x.......Close the current nodes parent收起当前目录树
        R.......Recursively refresh the current root刷新根目录树
        r.......Recursively refresh the current directory刷新当前目录
        P.......Jump to the root node
        p.......Jump to current nodes parent
        K.......Jump up inside directories at the current tree depth  到同目录第一个节点
        J.......Jump down inside directories at the current tree depth 最后一个节点
        o.......Open files, directories and bookmarks
        i.......Open selected file in a split window上下分屏
        s.......Open selected file in a new vsplit左右分屏
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="thenerdtree" src="https://github.com/wklken/gallery/blob/master/vim/thenerdtree.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="fholgadominibufexplvim"&gt;&lt;a href="https://github.com/fholgado/minibufexpl.vim"&gt;fholgado/minibufexpl.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，buffer管理, 可以查找其他同类插件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
        &amp;lt;Tab&amp;gt;  切换buffer
        左右方向键  切换buffer
        ,bn   切到后一个
        ,bp   切到前一个
        ,bd   关闭当前buffer
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="majutsushitagbar"&gt;&lt;a href="https://github.com/majutsushi/tagbar"&gt;majutsushi/tagbar&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装,标签导航,纬度和taglist不同&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] &amp;lt;F9&amp;gt; 打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="tagbar" src="https://github.com/wklken/gallery/blob/master/vim/tagbar.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptstaglistvim"&gt;&lt;a href="https://github.com/vim-scripts/taglist.vim"&gt;vim-scripts/taglist.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] &amp;lt;F8&amp;gt;打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="taglist" src="https://github.com/wklken/gallery/blob/master/vim/taglist.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="kienctrlpvim"&gt;&lt;a href="https://github.com/hdima/python-syntax"&gt;kien/ctrlp.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文件搜索,ack/Command-T需要依赖于外部包,不喜欢有太多依赖的,除非十分强大, 具体 &lt;a href="http://kien.github.io/ctrlp.vim/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] ,p  打开ctrlp搜索
    [sd] ,f  相当于mru功能，show recently opened files

    ctrl + j/k 进行上下移动
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="ctrip" src="https://github.com/wklken/gallery/blob/master/vim/ctrlp.gif?raw=true"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示增强&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;被动技能,无快捷键
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="lokaltogvim-powerline"&gt;&lt;a href="https://github.com/Lokaltog/vim-powerline"&gt;Lokaltog/vim-powerline&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，状态栏美观&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="powerline" src="https://github.com/wklken/gallery/blob/master/vim/powerline.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="kienrainbow_parenthesesvim"&gt;&lt;a href="https://github.com/kien/rainbow_parentheses.vim"&gt;kien/rainbow_parentheses.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装,括号高亮&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow" src="https://github.com/wklken/gallery/blob/master/vim/rainbow_parentheses.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="yggdrootindentline"&gt;&lt;a href="https://github.com/Yggdroot/indentLine"&gt;Yggdroot/indentLine&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装,装不装看个人喜好了,缩进标识&lt;/p&gt;
&lt;p&gt;另一个类似的,整块背景色的的,&lt;a href="https://github.com/nathanaelkane/vim-indent-guides"&gt;nathanaelkane/vim-indent-guides&lt;/a&gt;,自选吧, 看来看去还是st2的好看,唉&lt;/p&gt;
&lt;p&gt;调整颜色和solarized一致,不至于太显眼影响注意力,可以根据自己主题设置颜色(&lt;a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim?file=Xterm-color-table.png"&gt;颜色&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="indentline" src="https://github.com/wklken/gallery/blob/master/vim/indentline.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="bronsonvim-trailing-whitespace"&gt;&lt;a href="https://github.com/bronson/vim-trailing-whitespace"&gt;bronson/vim-trailing-whitespace&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将代码行最后无效的空格标红&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="altercationvim-colors-solarized"&gt;&lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;altercation/vim-colors-solarized&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经典主题,目前我使用的,看起来舒服&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="tomasrmolokai"&gt;&lt;a href="https://github.com/tomasr/molokai"&gt;tomasr/molokai&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用sublime text2的同学应该很熟悉, 另一个主题,可选,偶尔换换味道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快速移动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主动技能,需要快捷键
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="lokaltogvim-easymotion"&gt;&lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;Lokaltog/vim-easymotion&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，效率提升杀手锏，跳转到光标后任意位置&lt;/p&gt;
&lt;p&gt;配置(我的leader键配置 let g:mapleader = ',')&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ,, + w  跳转
    ,, + fe  查找'e',快速跳转定位到某个字符位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion" src="https://github.com/wklken/gallery/blob/master/vim/easymotion.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsmatchitzip"&gt;&lt;a href="https://github.com/vim-scripts/matchit.zip"&gt;vim-scripts/matchit.zip&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装&lt;/p&gt;
&lt;p&gt;% 匹配成对的标签，跳转&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自动补全及快速编辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主动技能,需要快捷键,高效编辑无上利器
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="valloricyoucompleteme"&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;Valloric/YouCompleteMe&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，强烈推荐&lt;/p&gt;
&lt;p&gt;YCM是我目前用到的最好的自动补全插件,我只能说，用这个写代码太舒畅了&lt;/p&gt;
&lt;p&gt;需要编译这个插件(见github文档)&lt;/p&gt;
&lt;p&gt;这个需要自己去看官方的配置方式,演示在官方github有&lt;/p&gt;
&lt;p&gt;需要Vim 7.3.584 以上版本(&lt;a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"&gt;如何编译vim&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;这个插件包含了以下四个插件功能,所以不需要装下面四个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    clang_complete
    AutoComplPop
    Supertab
    neocomplcache
    jedi(对python的补全)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷键:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ,gd  跳到声明位置, 仅 filetypes: c, cpp, objc, objcpp, python 有效
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="sirverultisnips"&gt;&lt;a href="https://github.com/SirVer/ultisnips"&gt;SirVer/ultisnips&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，效率杀手锏，快速插入自定义的代码片段&lt;/p&gt;
&lt;p&gt;自动补全加这个,高效必备, 针对各种语言已经带了一份配置了，可以到安装目录下查看具体，我有针对性补全一份，在snippets目录下，可自行修改&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="ultisnips" src="https://github.com/wklken/gallery/blob/master/vim/utilsnips.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="scrooloosenerdcommenter"&gt;&lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;scrooloose/nerdcommenter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，另一个大大提升效率的地方，快速批量加减注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [d] shift+v+方向键选中(默认当前行)   -&amp;gt;  ,cc  加上注释  -&amp;gt; ,cu 解开注释
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="nerdcommenter" src="https://github.com/wklken/gallery/blob/master/vim/nerdcomment.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="tpopevim-surround"&gt;&lt;a href="https://github.com/tpope/vim-surround"&gt;tpope/vim-surround&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，很给力的功能，快速给词加环绕符号,例如引号&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-repeat"&gt;tpope/vim-repeat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;repeat进行增强,'.'可以重复命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [d]
    cs"' [inside]
    "Hello world!" -&amp;gt; 'Hello world!'
    ds"
    "Hello world!" -&amp;gt; Hello world!
    ysiw"
    Hello -&amp;gt; "Hello"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="surround" src="https://github.com/wklken/gallery/blob/master/vim/surround.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="raimondidelimitmate"&gt;&lt;a href="https://github.com/Raimondi/delimitMate"&gt;Raimondi/delimitMate&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，输入引号,括号时,自动补全&lt;/p&gt;
&lt;p&gt;对python的docstring 三引号做了处理(只处理""", '''暂时没配，可以自己加)&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="delimitmate" src="https://github.com/wklken/gallery/blob/master/vim/delimate.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="godlygeektabular"&gt;&lt;a href="https://github.com/godlygeek/tabular"&gt;godlygeek/tabular&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装，代码格式化用的，code alignment&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    ,a=  按等号切分格式化
    ,a:  按逗号切分格式化
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="terrymavim-expand-region"&gt;&lt;a href="https://github.com/terryma/vim-expand-region"&gt;terryma/vim-expand-region&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装，visual mode selection
   视图模式下可伸缩选中部分，用于快速选中某些块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    = 增加选中范围(+/=按键)
    - 减少选中范围(_/-按键)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示（直接取链到其github图)&lt;/p&gt;
&lt;p&gt;&lt;img alt="expand-region" src="https://raw.github.com/terryma/vim-expand-region/master/expand-region.gif"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-multiple-cursors"&gt;&lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装，多光标批量操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    ctrl + m 开始选择
    ctrl + p 向上取消
    ctrl + x 跳过
    esc   退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示(官方演示图)&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiple-cursors" src="https://raw.github.com/terryma/vim-multiple-cursors/master/assets/example1.gif"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="scrooloosesyntastic"&gt;&lt;a href="https://github.com/scrooloose/syntastic"&gt;scrooloose/syntastic&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议安装，静态语法及风格检查,支持多种语言&lt;/p&gt;
&lt;p&gt;修改了下标记一列的背景色,原有的背景色在solarized下太难看了…..&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="syntastic" src="https://github.com/wklken/gallery/blob/master/vim/syntastic.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="kevinwpyflakes-vim"&gt;&lt;a href="https://github.com/kevinw/pyflakes-vim"&gt;kevinw/pyflakes-vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然这个的作者推荐使用syntastic,但是这个插件对于pythoner还是很需要的&lt;/p&gt;
&lt;p&gt;因为有一个特牛的功能,fly check,即,编码时在buffer状态就能动态查错标记,弥补syntastic只能保存和打开时检查语法错误的不足&lt;/p&gt;
&lt;p&gt;演示
   &lt;img alt="pyflakes" src="https://github.com/wklken/gallery/blob/master/vim/pyflakes.png?raw=true"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主要是python  其它语言以及前端的,用得少没有研究使用过
python   golang   markdown
需要其它语言支持的,可以到github上捞,上面很多流行的vim配置,eg. spf13-vim
以下均为选装，根据自己需要
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="python-syntax"&gt;&lt;a href="https://github.com/hdima/python-syntax"&gt;python-syntax&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用Python建议安装，python语法高亮,就是python.vim,在github,有维护和更新&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="jnwhitehvim-golang"&gt;&lt;a href="https://github.com/jnwhiteh/vim-golang"&gt;jnwhiteh/vim-golang&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用golang建议安装， golang语法高亮&lt;/p&gt;
&lt;p&gt;golang刚入门使用,项目中还没正式开始,目前很多golang的手册有配置vim的介绍,后续有需求再弄&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="plasticboyvim-markdown"&gt;&lt;a href="https://github.com/plasticboy/vim-markdown"&gt;plasticboy/vim-markdown&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;markdown语法,编辑md文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="panglossvim-javascript"&gt;&lt;a href="https://github.com/pangloss/vim-javascript"&gt;pangloss/vim-javascript&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;偶尔会看看js,频率不高&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="nonojqueryvim"&gt;&lt;a href="https://github.com/nono/jquery.vim"&gt;nono/jquery.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;jquery高亮&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="thidermannginx-vim-syntax"&gt;&lt;a href="https://github.com/thiderman/nginx-vim-syntax"&gt;thiderman/nginx-vim-syntax&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;nginx配置文件语法高亮,常常配置服务器很有用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="glenchvim-jinja2-syntax"&gt;&lt;a href="https://github.com/Glench/Vim-Jinja2-Syntax"&gt;Glench/Vim-Jinja2-Syntax&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;jinja2 语法高亮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其它扩展增强&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;根据自身需求自取配置,不需要的话自己注解
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptstasklistvim"&gt;&lt;a href="https://github.com/vim-scripts/TaskList.vim"&gt;vim-scripts/TaskList.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看并快速跳转到代码中的TODO列表&lt;/p&gt;
&lt;p&gt;重构代码时一般通读,标记修改位置,非常实用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    ,td 打开todo列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="tasklist" src="https://github.com/wklken/gallery/blob/master/vim/tasklist.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="tpopevim-fugitive"&gt;&lt;a href="https://github.com/tpope/vim-fugitive"&gt;tpope/vim-fugitive&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git插件&lt;/p&gt;
&lt;p&gt;不是很习惯,所以用的次数太少,目前和现有配置快捷键有冲突,尚未解决&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="sjlgundovim"&gt;&lt;a href="https://github.com/sjl/gundo.vim"&gt;sjl/gundo.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编辑文件时光机&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] ,h  查看文件编辑历史
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;待考察的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="sjlvitalityvim"&gt;sjl/vitality.vim&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsconque-shell"&gt;vim-scripts/Conque-Shell&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsyankringvim"&gt;vim-scripts/YankRing.vim&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsautogit"&gt;vim-scripts/auto.git&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;p&gt;The End!&lt;/p&gt;
&lt;p&gt;wklken (凌岳/pythoner/vim党预备党员)&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Github: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.me&lt;/p&gt;
&lt;p&gt;2013-06-11 于深圳&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>shell下小抄速查工具cmdcheatsheet[python实现]</title><link href="http://www.wklken.me/posts/2013/05/17/shell-cheat-sheet.html" rel="alternate"></link><published>2013-05-17T00:00:00+08:00</published><updated>2013-05-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-05-17:/posts/2013/05/17/shell-cheat-sheet.html</id><summary type="html">&lt;h3 id="githubdi-zhi"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="you-hua"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="xiao-guo"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="shi-xian-fang-fa"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="hou-xu-gai-jin"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</summary><content type="html">&lt;h3 id="githubdi-zhi"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="you-hua"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="xiao-guo"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="shi-xian-fang-fa"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="hou-xu-gai-jin"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</content><category term="python"></category><category term="linux"></category></entry><entry><title>Python fabric实现远程操作和部署</title><link href="http://www.wklken.me/posts/2013/03/25/python-tool-fabric.html" rel="alternate"></link><published>2013-03-25T00:00:00+08:00</published><updated>2013-03-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-25:/posts/2013/03/25/python-tool-fabric.html</id><summary type="html">&lt;h2 id="fabric"&gt;fabric&lt;/h2&gt;
&lt;p&gt;title是开发，但是同时要干开发测试还有运维的活 (o(╯□╰)o)&lt;/p&gt;
&lt;p&gt;近期接手越来越多的东西，发布和运维的工作相当机械，加上频率还蛮高，导致时间浪费还是优点多。&lt;/p&gt;
&lt;p&gt;修复bug什么的，测试，提交版本库(2分钟)，ssh到测试环境pull部署（2分钟），rsync到线上机器A,B,C,D,E（1分钟），分别ssh到ABCDE五台机器，逐一重启(8-10分钟) =  13-15分钟&lt;/p&gt;
&lt;p&gt;其中郁闷的是，每次操作都是相同的，命令一样，要命的是在多个机器上，很难在本机一个脚本搞定，主要时间都浪费在ssh，敲命令上了，写成脚本，完全可以一键执行，花两分钟看下执行结果&lt;/p&gt;
&lt;p&gt;直到，发现了fabric这货&lt;/p&gt;
&lt;p&gt;官方文档 &lt;a href="http://fabric.readthedocs.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="zuo-yong"&gt;作用&lt;/h3&gt;
&lt;p&gt;很强大的工具&lt;/p&gt;
&lt;p&gt;可以将自动化部署或者多机操作的命令固化到一个脚本里&lt;/p&gt;
&lt;p&gt;和某些运维工具很像，用它主要是因为，python…..&lt;/p&gt;
&lt;p&gt;简单好用易上手&lt;/p&gt;
&lt;p&gt;当然，shell各种命令组合起来也可以，上古神器和现代兵器的区别&lt;/p&gt;
&lt;h3 id="huan-jing-pei-zhi"&gt;环境配置 …&lt;/h3&gt;</summary><content type="html">&lt;h2 id="fabric"&gt;fabric&lt;/h2&gt;
&lt;p&gt;title是开发，但是同时要干开发测试还有运维的活 (o(╯□╰)o)&lt;/p&gt;
&lt;p&gt;近期接手越来越多的东西，发布和运维的工作相当机械，加上频率还蛮高，导致时间浪费还是优点多。&lt;/p&gt;
&lt;p&gt;修复bug什么的，测试，提交版本库(2分钟)，ssh到测试环境pull部署（2分钟），rsync到线上机器A,B,C,D,E（1分钟），分别ssh到ABCDE五台机器，逐一重启(8-10分钟) =  13-15分钟&lt;/p&gt;
&lt;p&gt;其中郁闷的是，每次操作都是相同的，命令一样，要命的是在多个机器上，很难在本机一个脚本搞定，主要时间都浪费在ssh，敲命令上了，写成脚本，完全可以一键执行，花两分钟看下执行结果&lt;/p&gt;
&lt;p&gt;直到，发现了fabric这货&lt;/p&gt;
&lt;p&gt;官方文档 &lt;a href="http://fabric.readthedocs.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="zuo-yong"&gt;作用&lt;/h3&gt;
&lt;p&gt;很强大的工具&lt;/p&gt;
&lt;p&gt;可以将自动化部署或者多机操作的命令固化到一个脚本里&lt;/p&gt;
&lt;p&gt;和某些运维工具很像，用它主要是因为，python…..&lt;/p&gt;
&lt;p&gt;简单好用易上手&lt;/p&gt;
&lt;p&gt;当然，shell各种命令组合起来也可以，上古神器和现代兵器的区别&lt;/p&gt;
&lt;h3 id="huan-jing-pei-zhi"&gt;环境配置&lt;/h3&gt;
&lt;p&gt;在本机和目标机器安装对应包（注意，都要有）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install fabric
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;目前是1.8版本&lt;/p&gt;
&lt;p&gt;安装完后，可以查看是否安装成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~$] which fab
/usr/local/bin/fab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装完之后，可以浏览下&lt;a href="http://docs.fabfile.org/en/1.8/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后，可以动手了&lt;/p&gt;
&lt;h3 id="hello-world"&gt;hello world&lt;/h3&gt;
&lt;p&gt;先进行本机简单操作，有一个初步认识，例子来源与官网&lt;/p&gt;
&lt;p&gt;新建一个py脚本: fabfile.py&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令行执行：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~/tmp/fab$] fab hello
Hello world!

Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这里可以不用fabfile作为文件名，但是在执行时需指定文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~/tmp/fab$] mv fabfile.py test.py
fabfile.py -&amp;gt; test.py
[ken@~/tmp/fab$] fab hello

Fatal error: Couldn't find any fabfiles!

Remember that -f can be used to specify fabfile path, and use -h for help.

Aborting.
[ken@~/tmp/fab$] fab -f test.py hello
Hello world!

Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;带参数：&lt;/p&gt;
&lt;p&gt;修改fabfile.py脚本：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~/tmp/fab$] fab hello:name=age,value=20
age = 20!

Done.
[ken@~/tmp/fab$] fab hello:age,20
age = 20!

Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-xing-ben-ji-cao-zuo"&gt;执行本机操作&lt;/h3&gt;
&lt;p&gt;简单的本地操作:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lsfab&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/tmp/fab'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ls'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~/tmp/fab$] pwd;ls
/Users/ken/tmp/fab
fabfile.py   fabfile.pyc  test.py      test.pyc
[ken@~/tmp/fab$] fab -f test.py lsfab
[localhost] local: cd ~/tmp/fab
[localhost] local: ls
fabfile.py  fabfile.pyc test.py     test.pyc

Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实战开始：&lt;/p&gt;
&lt;p&gt;假设，你每天要提交一份配置文件settings.py到版本库（这里没有考虑冲突的情况）&lt;/p&gt;
&lt;p&gt;如果是手工操作：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /home/project/test/conf/
git add settings.py
git commit -m 'daily update settings.py'
git pull origin
git push origin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说，这几个命令你每天都要手动敲一次，所谓daily job，就是每天都要重复的，机械化的工作，让我们看看用fabric怎么实现一键搞定：(其实用shell脚本可以直接搞定，但是fab的优势不是在这里，这里主要位后面本地+远端操作做准备，毕竟两个地方的操作写一种脚本便于维护)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setting_ci&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/home/project/test/conf/'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"git add settings.py"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#后面你懂的，懒得敲了…..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hun-da-zheng-he-yuan-duan-cao-zuo"&gt;混搭整合远端操作&lt;/h3&gt;
&lt;p&gt;这时候，假设，你要到机器A的/home/ken/project对应项目目录把配置文件更新下来&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user@ip:port'&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="c1"&gt;#ssh要用到的参数&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pwd'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setting_ci&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'echo "add and commit settings in local"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#刚才的操作换到这里，你懂的&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_setting_remote&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"remote update"&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/temp'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="c1"&gt;#cd用于进入某个目录&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ls -l | wc -l'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#远程操作用run&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;setting_ci&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;update_setting_remote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，执行之：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~/tmp/fab$] fab -f deploy.py update
[user@ip:port] Executing task 'update'
[localhost] local: echo "add and commit settings in local"
add and commit settings in local
remote update
[user@ip:port] run: ls -l | wc -l
[user@ip:port] out: 12
[user@ip:port] out:


Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，如果不声明env.password，执行到对应机器时会跳出要求输入密码的交互&lt;/p&gt;
&lt;h3 id="duo-fu-wu-qi-hun-da"&gt;多服务器混搭&lt;/h3&gt;
&lt;p&gt;操作多个服务器，需要配置多个host&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;#操作一致的服务器可以放在一组，同一组的执行同一套操作&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roledefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'testserver'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user1@host1:port1'&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt;
            &lt;span class="s1"&gt;'realserver'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user2@host2:port2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#env.password = '这里不要用这种配置了，不可能要求密码都一致的，明文编写也不合适。打通所有ssh就行了'&lt;/span&gt;

&lt;span class="nd"&gt;@roles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'testserver'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ls -l | wc -l'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@roles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'realserver'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ls ~/temp/ | wc -l'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dotask&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ken@~/tmp/fab$] fab -f mult.py dotask
[user1@host1:port1] Executing task 'task1'
[user1@host1:port1] run: ls -l | wc -l
[user1@host1:port1] out: 9
[user1@host1:port1] out:

[user2@host2:port2] Executing task 'task2'
[user2@host2:port2] run: ls ~/temp/ | wc -l
[user2@host2:port2] out: 11
[user2@host2:port2] out:


Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="kuo-zhan"&gt;扩展&lt;/h3&gt;
&lt;p&gt;1.颜色&lt;/p&gt;
&lt;p&gt;可以打印颜色，在查看操作结果信息的时候更为醒目和方便&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.colors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fail'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#fab -f color.py show&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.错误和异常&lt;/p&gt;
&lt;p&gt;关于&lt;a href="http://docs.fabfile.org/en/1.6/usage/execution.html#failures"&gt;错误处理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;默认，一组命令，上一个命令执行失败后，不会接着往下执行&lt;/p&gt;
&lt;p&gt;失败后也可以进行不一样的处理， &lt;a href="http://docs.fabfile.org/en/1.6/tutorial.html#failure-handling"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前没用到，后续用到再看了&lt;/p&gt;
&lt;p&gt;3.密码管理&lt;/p&gt;
&lt;p&gt;看&lt;a href="http://docs.fabfile.org/en/1.6/usage/execution.html#password-management"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更好的密码管理方式，哥比较土，没打通，主要是服务器列表变化频繁，我的处理方式是：&lt;/p&gt;
&lt;p&gt;3.1 host,user,port,password配置列表，所有的都写在一个文件&lt;/p&gt;
&lt;p&gt;或者直接搞到脚本里，当然这个更........&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'host1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'host2'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 注意: 要使env.passwords生效, host格式必须是  user@ip:port 端口号一定要显式写出来,即使是使用的默认22端口&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'host1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pwdofhost1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'host2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pwdofhost2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;或者&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roledefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;'testserver'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'host1:22'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'host2:22'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="s1"&gt;'realserver'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'host3:22'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# 注意: 要使env.passwords生效, host格式必须是  user@ip:port 端口号一定要显式写出来,即使是使用的默认22端口&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'host1:22'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pwdofhost1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'host2:22'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pwdofhost2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'host3:22'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pwdofhost3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.2 根据key解析成map嵌套，放到deploy中&lt;/p&gt;
&lt;p&gt;另外命令其实也可以固化成一个cmds列表的…..&lt;/p&gt;
&lt;p&gt;粗略就用到这些，后续有更多需求的时候再去捞文档了，话说文档里好东西真多，就是太多了，看了晕。。。&lt;/p&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;装饰器作用？
@task
@parallel

命令行常用： fab --help
fab -l             -- 显示可用的task（命令）
fab -H             -- 指定host，支持多host逗号分开
fab -R             -- 指定role，支持多个
fab -P             -- 并发数，默认是串行
fab -w             -- warn_only，默认是碰到异常直接abort退出
fab -f             -- 指定入口文件，fab默认入口文件是：fabfile/fabfile.py

状态确认及错误处理

更复杂的操作
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;update log&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-10-26 fix error of local/lcd
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue….&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://www.wklken.com&lt;/p&gt;
&lt;p&gt;2013-03-25&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-内置函数小结</title><link href="http://www.wklken.me/posts/2013/03/16/python-base-builtins.html" rel="alternate"></link><published>2013-03-16T00:00:00+08:00</published><updated>2013-03-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-builtins.html</id><summary type="html">&lt;h2 id="nei-zhi-han-shu"&gt;内置函数&lt;/h2&gt;
&lt;h3 id="chang-yong-han-shu"&gt;常用函数&lt;/h3&gt;
&lt;h4 id="1shu-xue-xiang-guan"&gt;1.数学相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;abs()返回一个数字的绝对值。如果给出复数，返回值就是该复数的模。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;print abs(-100)
100
&amp;gt;&amp;gt;&amp;gt;print abs(1+2j)
2.2360679775
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;divmod(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;divmod(x,y)函数完成除法运算，返回商和余数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; divmod(10,3)
(3, 1)
&amp;gt;&amp;gt;&amp;gt; divmod(9,3) (3, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pow(x,y[,z])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pow()函数返回以x为底，y为指数的幂。如果给出z值，该函数就计算x的y次幂值被z取模的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print pow(2 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="nei-zhi-han-shu"&gt;内置函数&lt;/h2&gt;
&lt;h3 id="chang-yong-han-shu"&gt;常用函数&lt;/h3&gt;
&lt;h4 id="1shu-xue-xiang-guan"&gt;1.数学相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;abs()返回一个数字的绝对值。如果给出复数，返回值就是该复数的模。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;print abs(-100)
100
&amp;gt;&amp;gt;&amp;gt;print abs(1+2j)
2.2360679775
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;divmod(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;divmod(x,y)函数完成除法运算，返回商和余数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; divmod(10,3)
(3, 1)
&amp;gt;&amp;gt;&amp;gt; divmod(9,3) (3, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pow(x,y[,z])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pow()函数返回以x为底，y为指数的幂。如果给出z值，该函数就计算x的y次幂值被z取模的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print pow(2,4)
16
&amp;gt;&amp;gt;&amp;gt; print pow(2,4,2)
0
&amp;gt;&amp;gt;&amp;gt; print pow(2.4,3)
13.824
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;round(x[,n])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;round()函数返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; round(3.333)
3.0
&amp;gt;&amp;gt;&amp;gt; round(3)
3.0
&amp;gt;&amp;gt;&amp;gt; round(5.9)
6.0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;min(x[,y,z...])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;min()函数返回给定参数的最小值，参数可以为序列。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; min(1,2,3,4)
1
&amp;gt;&amp;gt;&amp;gt; min((1,2,3),(2,3,4))
(1, 2, 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;max(x[,y,z...])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;max()函数返回给定参数的最大值，参数可以为序列。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; max(1,2,3,4)
4
&amp;gt;&amp;gt;&amp;gt; max((1,2,3),(2,3,4))
(2, 3, 4)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2xu-lie-xiang-guan"&gt;2.序列相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;len(object) -&amp;gt; integer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;len()函数返回字符串和序列的长度。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; len("aa")
2
&amp;gt;&amp;gt;&amp;gt; len([1,2])
2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;range([lower,]stop[,step])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;range()函数可按参数生成连续的有序整数列表。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&amp;gt;&amp;gt;&amp;gt; range(1,10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&amp;gt;&amp;gt;&amp;gt; range(1,10,2)
[1, 3, 5, 7, 9]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;xrange([lower,]stop[,step])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xrange()函数与range()类似，但xrnage()并不创建列表，而是返回一个xrange对象，它的行为&lt;/p&gt;
&lt;p&gt;与列表相似，但是只在需要时才计算列表值，当列表很大时，这个特性能为我们节省内存。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a=xrange(10)
&amp;gt;&amp;gt;&amp;gt; print a[0]
0
&amp;gt;&amp;gt;&amp;gt; print a[1]
1
&amp;gt;&amp;gt;&amp;gt; print a[2]
2
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3dui-xiang-ji-lei-xing"&gt;3.对象及类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;callable(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;callable()函数用于测试对象是否可调用，如果可以则返回1(真)；否则返回0(假)。可调用对象包括函数、方法、代码对象、类和已经定义了 调用 方法的类实例。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a="123"
&amp;gt;&amp;gt;&amp;gt; print callable(a)
False
&amp;gt;&amp;gt;&amp;gt; print callable(chr)
True
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;cmp(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cmp()函数比较x和y两个对象，并根据比较结果返回一个整数，如果x&lt;y，则返回-1；如果 x=""&gt;y，则返回1,如果x==y则返回0。&lt;/y，则返回-1；如果&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;a=1
&amp;gt;&amp;gt;&amp;gt;b=2
&amp;gt;&amp;gt;&amp;gt;c=2
&amp;gt;&amp;gt;&amp;gt; print cmp(a,b)
-1
&amp;gt;&amp;gt;&amp;gt; print cmp(b,a)
1
&amp;gt;&amp;gt;&amp;gt; print cmp(b,c)
0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;isinstance(object,class-or-type-or-tuple) -&amp;gt; bool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试对象类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a='isinstance test'
&amp;gt;&amp;gt;&amp;gt; b=1234
&amp;gt;&amp;gt;&amp;gt; isinstance(a,str)
True
&amp;gt;&amp;gt;&amp;gt;isinstance(a,int)
False
&amp;gt;&amp;gt;&amp;gt; isinstance(b,str)
False
&amp;gt;&amp;gt;&amp;gt; isinstance(b,int) True
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;type(obj)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;type()函数可返回对象的数据类型。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'list'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(copy)
&amp;lt;type 'module'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(1)
&amp;lt;type 'int'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nei-zhi-lei-xing-zhuan-huan-han-shu_1"&gt;内置类型转换函数&lt;/h3&gt;
&lt;h4 id="1zi-fu-ji-zi-fu-chuan"&gt;1.字符及字符串&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;chr(i)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;chr()函数返回ASCII码对应的字符串。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print chr(65)
A
&amp;gt;&amp;gt;&amp;gt; print chr(66)
B
&amp;gt;&amp;gt;&amp;gt; print chr(65)+chr(66)
AB
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;ord(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ord()函数返回一个字符串参数的ASCII码或Unicode值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ord("a")
97
&amp;gt;&amp;gt;&amp;gt; ord(u"a")
97
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;str(obj)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;str()函数把对象转换成可打印字符串。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; str("4")
'4'
&amp;gt;&amp;gt;&amp;gt; str(4)
'4'
&amp;gt;&amp;gt;&amp;gt; str(3+2j)
'(3+2j)'
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2jin-zhi-zhuan-huan"&gt;2.进制转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;int(x[,base])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;int()函数把数字和字符串转换成一个整数，base为可选的基数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; int(3.3)
3
&amp;gt;&amp;gt;&amp;gt; int(3L)
3
&amp;gt;&amp;gt;&amp;gt; int("13")
13
&amp;gt;&amp;gt;&amp;gt; int("14",15)
19
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;long(x[,base])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;long()函数把数字和字符串转换成长整数，base为可选的基数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; long("123")
123L
&amp;gt;&amp;gt;&amp;gt; long(11)
11L
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;float(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;float()函数把一个数字或字符串转换成浮点数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; float("12")
12.0
&amp;gt;&amp;gt;&amp;gt; float(12L)
12.0
&amp;gt;&amp;gt;&amp;gt; float(12.2)
12.199999999999999
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;hex(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hex()函数可把整数转换成十六进制数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; hex(16)
'0x10'
&amp;gt;&amp;gt;&amp;gt; hex(123)
'0x7b'
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;oct(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;oct()函数可把给出的整数转换成八进制数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; oct(8)
'010'
&amp;gt;&amp;gt;&amp;gt; oct(123)
'0173'
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;complex(real[,imaginary])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;complex()函数可把字符串或数字转换为复数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; complex("2+1j")
(2+1j)
&amp;gt;&amp;gt;&amp;gt; complex("2")
(2+0j)
&amp;gt;&amp;gt;&amp;gt; complex(2,1)
(2+1j)
&amp;gt;&amp;gt;&amp;gt; complex(2L,1)
(2+1j)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3shu-ju-jie-gou"&gt;3.数据结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;tuple(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tuple()函数把序列对象转换成tuple。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; tuple("hello world")
('h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd')
&amp;gt;&amp;gt;&amp;gt; tuple([1,2,3,4])
(1, 2, 3, 4)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;list(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;list()函数可将序列对象转换成列表。如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; list("hello world")
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
&amp;gt;&amp;gt;&amp;gt; list((1,2,3,4))
[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xu-lie-chu-li-han-shu_1"&gt;序列处理函数&lt;/h3&gt;
&lt;p&gt;常用函数中的len()、max()和min()同样可用于序列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;filter(function,list)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用filter()时，它会把一个函数应用于序列中的每个项，并返回该函数返回真值时的所有项，从而过滤掉返回假值的所有项。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def nobad(s):
    ... return s.find("bad") == -1
    ...
&amp;gt;&amp;gt;&amp;gt; s = ["bad","good","bade","we"]
&amp;gt;&amp;gt;&amp;gt; filter(nobad,s)
['good', 'we']
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;map(function,list[,list])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;map()函数把一个函数应用于序列中所有项，并返回一个列表。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"zope"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"linux"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Zope'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Linux'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;map()还可同时应用于多个列表。如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# s[i]*t[j]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果传递一个None值，而不是一个函数，则map()会把每个序列中的相应元素合并起来，并返回
该元组。如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a=[1,2];b=[3,4];c=[5,6]
&amp;gt;&amp;gt;&amp;gt; map(None,a,b,c)
[(1, 3, 5), (2, 4, 6)]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;reduce(function,seq[,init])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reduce()函数获得序列中前两个项，并把它传递给提供的函数，获得结果后再取序列中的下一项，连同结果再传递给函数，以此类推，直到处理完所有项为止。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# ((2*3)*4)*5&lt;/span&gt;
&lt;span class="mi"&gt;120&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# (((1*2)*3)*4)*5&lt;/span&gt;
&lt;span class="mi"&gt;120&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# (((2*2)*3)*4)*5&lt;/span&gt;
&lt;span class="mi"&gt;240&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-16&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-文件处理小结</title><link href="http://www.wklken.me/posts/2013/03/16/python-base-file.html" rel="alternate"></link><published>2013-03-16T00:00:00+08:00</published><updated>2013-03-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-file.html</id><summary type="html">&lt;h2 id="wen-jian-chu-li"&gt;文件处理&lt;/h2&gt;
&lt;p&gt;python常用，主要是用于文件操作，配合字符串操作，数值计算等，完成数据处理。&lt;/p&gt;
&lt;h3 id="wen-jian-mo-shi"&gt;文件模式&lt;/h3&gt;
&lt;p&gt;打开一个文件，返回一个文件对象。可以用open()或者file()，建议使用前者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_object = open(file_name, access_mode = ‘r’, buffering = -1)
file_name：打开的文件名,若非当前路径，需指出具体路径
mode:可选参数，文件打开模式
bufsize:可选参数，是否使用缓存
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="mode"&gt;mode&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;模式      描述
r       以读方式打开文件，可读取文件信息.文件必须已存在
w       以写方式打开文件，可向文件写入信息。存在则清空，不存在创建
a       以追加方式打开文件，文件指针自动移到文件尾。追加
r+      以读写方式打开文件，可对文件进行读和写操作。
w+      消除文件内容 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="wen-jian-chu-li"&gt;文件处理&lt;/h2&gt;
&lt;p&gt;python常用，主要是用于文件操作，配合字符串操作，数值计算等，完成数据处理。&lt;/p&gt;
&lt;h3 id="wen-jian-mo-shi"&gt;文件模式&lt;/h3&gt;
&lt;p&gt;打开一个文件，返回一个文件对象。可以用open()或者file()，建议使用前者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_object = open(file_name, access_mode = ‘r’, buffering = -1)
file_name：打开的文件名,若非当前路径，需指出具体路径
mode:可选参数，文件打开模式
bufsize:可选参数，是否使用缓存
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="mode"&gt;mode&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;模式      描述
r       以读方式打开文件，可读取文件信息.文件必须已存在
w       以写方式打开文件，可向文件写入信息。存在则清空，不存在创建
a       以追加方式打开文件，文件指针自动移到文件尾。追加
r+      以读写方式打开文件，可对文件进行读和写操作。
w+      消除文件内容，然后以读写方式打开文件。
a+      以读写方式打开文件，并把文件指针移到文件尾。
b       以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的

U      通用换行符支持，任何系统下的文件, 不管换行符是什么, 使用U模式打开时, 换行符都会被替换为NEWLINE(\n)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;+ 代表同时作为输入和输出文件，可以对相同文件进行读写&lt;/p&gt;
&lt;p&gt;b代表二进制数据处理&lt;/p&gt;
&lt;p&gt;和 r/w/a组合.
r+ 使用读写方式打开， rb二进制读&lt;/p&gt;
&lt;p&gt;注意，在mode中使用b，b不能作为第一个字符出现&lt;/p&gt;
&lt;h4 id="bufsize"&gt;bufsize&lt;/h4&gt;
&lt;p&gt;bufsize取值   描述&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0   禁用缓冲
1   行缓冲，只缓冲一行
\&amp;gt;1 指定缓冲区的大小，定制
&amp;lt;1  系统默认的缓冲区大小,m默认
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-jian-dui-xiang-shu-xing_1"&gt;文件对象属性&lt;/h3&gt;
&lt;p&gt;常用几个:&lt;/p&gt;
&lt;p&gt;file.name 文件名&lt;/p&gt;
&lt;p&gt;file.encoding文件使用编码,None 时使用系统默认编码&lt;/p&gt;
&lt;p&gt;file.mode Access文件打开时使用的额访问模式&lt;/p&gt;
&lt;p&gt;file.closed表文件已关闭，否则False&lt;/p&gt;
&lt;p&gt;file.newlines未读取到分隔符时为None，包含行结束符的列表&lt;/p&gt;
&lt;p&gt;file.softspace为0表示在输出一数据后，加上一空格，1表示不加，内部使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-jian-cao-zuo"&gt;文件操作&lt;/h3&gt;
&lt;p&gt;获取帮助&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#读
file.read(size=-1)       从文件读取size个字节，未给定或为负，读取所有
file.readline(size=-1)  读取并返回一行，或返回最大size个字符,包括\n
file.readlines(sizeint=0)   读取所有行并返回列表，若给定sizeint&amp;gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比sizhint较大, 因为需要填充缓冲区

#写
file.write(str)     向文件中写入字符串(文本或二进制)
file.writelines(seq)    写入多行，向文件中写入一个字符串列表，注意，要自己加入每行的换行符

#其他
file.seek(off,whence=0)     从文件中给移动指针，从whence(0起始，1当前，2末尾)偏移off个字节，正结束方向移动，负往开始方向移动
file.tell() 返回当前文件中的位置。获得文件指针位置
file.truncate(size=file.tell()) 截取文件到最大size个字节，默认为当前文件位置
file.close()    关闭打开的文件,垃圾回收机制也会在文件对象的引用计数降至0的时候自动关闭文件
file.fileno()    返回文件描述符(file descriptor FD 整型)是一个整数, 可以用在如os模块的read方法等一些底层操作上.
file.flush()    刷新文件内部缓冲,直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入.
file.isatty()   判断file是否是类tty设备
file.next()     返回文件下一行
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zui-jia-shi-jian"&gt;最佳实践&lt;/h3&gt;
&lt;p&gt;1.养成手动close&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;……&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.读取大文件&lt;/p&gt;
&lt;p&gt;方法一:一次性读入,去左右空白+换行符，文件太大不建议这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bigdata'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法二:迭代&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bigdata'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.上下文管理器
用with，等价与上面方法二，注意不用显式close&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; with open('a.py') as f:
...     for line in f:
...         line = line.strip()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.去除换行符/跳过空行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# if line is empty&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;            &lt;span class="c1"&gt;# skip it&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="stringio"&gt;StringIO&lt;/h3&gt;
&lt;p&gt;StringIO“虚拟文件”不是永久的&lt;/p&gt;
&lt;p&gt;如果不保存它（如将它写入一个真正的文件，或者使用 shelve 模块或数据库），则程序结束时，它将消失&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cStringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello world'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'hello world'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pickle"&gt;pickle&lt;/h3&gt;
&lt;p&gt;pickle任意python对象和字符串之间的序列化
类似java序列化存储到文件的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'datafile.pkl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'datafile.pkl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="struct"&gt;struct&lt;/h3&gt;
&lt;p&gt;能够构造并解析打包的二进制数据&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data.bin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hhl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data.bin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hhl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta-xiang-guan-mo-kuai"&gt;其他相关模块&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base64  二进制字符串和文本字符串之间的编码/解码操作
binascii  二进制和ascii编码的二进制字符串间的编码/解码操作
bz2  访问BZ2格式的压缩文件
csv  访问csv文件(逗号分割文件)
filecmp   用于比较目录和文件
fileinput  提供多个文本文件的行迭代器
getopt/optparse  提供了命令行参数的解析/处理
glob/fnmatch  提供Unix样式的通配符匹配功能
gzip/zlib   读写GNU zip(gzip)文件(压缩需要zlib模块)
shutil  提供高级文件访问能力
c/StringIO   对字符串对象提供类文件接口
tarfile  读写TAR归档文件, 支持压缩文件
tempfile   创建一个临时文件(名)
uu  格式的编码和解码
zipfile  用于读取ZIP归档文件的工具
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-16&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-函数小结</title><link href="http://www.wklken.me/posts/2013/03/16/python-base-function.html" rel="alternate"></link><published>2013-03-16T00:00:00+08:00</published><updated>2013-03-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-function.html</id><summary type="html">&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;h4 id="jian-jie-ji-ding-yi"&gt;简介及定义&lt;/h4&gt;
&lt;h5 id="jian-jie"&gt;简介&lt;/h5&gt;
&lt;p&gt;函数是可重用的程序段&lt;/p&gt;
&lt;p&gt;它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次地运行这个语句块。&lt;/p&gt;
&lt;p&gt;函数作用：最大程度重用和最小化代码冗余，流程分解&lt;/p&gt;
&lt;h5 id="ding-yi"&gt;定义&lt;/h5&gt;
&lt;p&gt;使用def可以声明一个函数，完整的函数由函数名，参数以及函数实现语句组成。&lt;/p&gt;
&lt;p&gt;一般形式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def &amp;lt;函数名&amp;gt; (参数列表):
   &amp;lt;函数语句&amp;gt;
   return &amp;lt;返回值&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中参数和返回值非必须&lt;/p&gt;
&lt;p&gt;注意，没有返回值的return语句等价于return None&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="nb"&gt;sum …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;h4 id="jian-jie-ji-ding-yi"&gt;简介及定义&lt;/h4&gt;
&lt;h5 id="jian-jie"&gt;简介&lt;/h5&gt;
&lt;p&gt;函数是可重用的程序段&lt;/p&gt;
&lt;p&gt;它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次地运行这个语句块。&lt;/p&gt;
&lt;p&gt;函数作用：最大程度重用和最小化代码冗余，流程分解&lt;/p&gt;
&lt;h5 id="ding-yi"&gt;定义&lt;/h5&gt;
&lt;p&gt;使用def可以声明一个函数，完整的函数由函数名，参数以及函数实现语句组成。&lt;/p&gt;
&lt;p&gt;一般形式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def &amp;lt;函数名&amp;gt; (参数列表):
   &amp;lt;函数语句&amp;gt;
   return &amp;lt;返回值&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中参数和返回值非必须&lt;/p&gt;
&lt;p&gt;注意，没有返回值的return语句等价于return None&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;def是可执行代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def可以出现在任一语句可以出现的地方，甚至是嵌套在其他语句中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  :::python
  if test:
     def func():
       …..
  else:
     def func():
       ….
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;def创建一个函数对象并将其赋值给一个变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数可以赋值给一个变量，类似别名,othername = func，在需要时再调用
&lt;em&gt; return将结果对象发送给调用者
&lt;/em&gt; 函数是通过赋值传递的（对象引用）
* 参数，返回值及变量并不不要类型声明&lt;/p&gt;
&lt;h4 id="can-shu_1"&gt;参数&lt;/h4&gt;
&lt;h5 id="jian-jie_1"&gt;简介&lt;/h5&gt;
&lt;h5 id="can-shu-lei-xing"&gt;参数类型&lt;/h5&gt;
&lt;p&gt;主要明确几个概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形参实参&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数中参数的名称位形参&lt;/p&gt;
&lt;p&gt;调用函数提供给函数的调用值位实参&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;#a, b形参&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1, 5实参&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;位置参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下，函数参数位位置参数,即通过位置指定实参&lt;/p&gt;
&lt;p&gt;格局传递位置确认值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# a=1, b=2&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# a=2, b=1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;默认参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一些函数，你可能希望它的一些参数是 可选 的，如果用户不想要为这些参数提供值的话，这些参数就使用默认值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#b为默认参数&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#3&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，默认参数定义必须在位置参数之后。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#有效&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#无效&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特别注意，默认参数值只计算一次，当值为可变对象时需特别注意：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def sum(a, b=[]):
...     b.append(a)
...     return b
...
&amp;gt;&amp;gt;&amp;gt; sum(1)
[1]
&amp;gt;&amp;gt;&amp;gt; sum(2)
[1, 2]

#若是不想缺省值在连续调用中被保留
def sum(a, b=None):
    if not b:
        b = []
    b.append(a)
    return b
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;关键参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用名字（关键字）而不是位置来给函数指定实参，keyword = value形式&lt;/p&gt;
&lt;p&gt;可以通过命名为参数赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 0 + 0&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1 + 0&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 0 + 1&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 1 + 2&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 2 + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;可变长参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具有任意个参数，而不必将所有参数定义&lt;/p&gt;
&lt;p&gt;参数开头以*&lt;/p&gt;
&lt;p&gt;*seq  序列位置参数,接收一个元组，包含了所有没有出现在形式参数列表中的参数值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def test(*seq):
...     print seq
...
&amp;gt;&amp;gt;&amp;gt; test(1,2,3,4)
(1, 2, 3, 4)
&amp;gt;&amp;gt;&amp;gt; test(*[1,2,3])
(1, 2, 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**dic  关键参数,接收一个字段，包含了所有未出现在形式参数列表中的关键字参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def test2(**dic):
...     print dic
...
&amp;gt;&amp;gt;&amp;gt; test2(a=1,b=2)
{'a': 1, 'b': 2}
&amp;gt;&amp;gt;&amp;gt; test2(**{'a':1, 'b':2})
{'a': 1, 'b': 2}
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="can-shu-pi-pei"&gt;参数匹配&lt;/h5&gt;
&lt;p&gt;参数匹配方式：&lt;/p&gt;
&lt;p&gt;定义:&lt;/p&gt;
&lt;p&gt;在函数定义中，参数顺序：&lt;/p&gt;
&lt;p&gt;任何一版参数name,默认参数name=value,之后*name，之后任何name,最后**name&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def func(name) 位置或变量名匹配
def func(name=value) 参数存在默认值，若是没有传入，使用默认值
def func(*name) 匹配并收集在元组中所有包含位置的参数
def func(**name) 匹配并收集在字典中所有包含位置的参数
def func(*args,name)参数必须在调用中按照关键字传递
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用:&lt;/p&gt;
&lt;p&gt;在函数调用中，参数出现顺序：&lt;/p&gt;
&lt;p&gt;位置参数value,关键字参数name=value，*sequence形式组合，最后是**dict&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func(value) 常规，位置匹配
func(name = value) 关键字匹配，通过变量名
func(*sequence) 以name传递所有对象，并作为独立的基于位置的参数
func(**dict) 以name传递所有关键字/值，并作为独立的关键字参数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以混合定义和传递多种类型参数，参数匹配顺序：&lt;/p&gt;
&lt;p&gt;位置分配分关键字-&amp;gt;匹配变量名-&amp;gt;而外非关键字分配到*name-&amp;gt;额外关键字参数分配到**name中-&amp;gt;默认值分配给头部未得到匹配的参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'tp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tp&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'dp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"=========="&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a 1
b 2
c 1
d 2
tp ()
dp {}
==========
a 1
b 2
c 1
d 3
tp ()
dp {}
==========
a 1
b 2
c 3
d 4
tp (5,)
dp {'e': 6, 'f': 7}
==========
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="can-shu-chuan-di"&gt;参数传递&lt;/h5&gt;
&lt;p&gt;不可变参数“通过值”进行传递，整数，字符串通过对象引用，而非拷贝一份，指向同一内存，效果很像创建拷贝&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; def p(param):
...     param = 2
...
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; p(a)
&amp;gt;&amp;gt;&amp;gt; a
1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可变对象通过“指针”进行传递的,改变函数的可变对象参数的值也许会对调用者造成影响&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; def d(param):
...     param.append(9)
...
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; d(b)
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3, 9]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特别注意：&lt;/p&gt;
&lt;p&gt;实参为可变对象，传递传引用，形参改变对象引用不会对实参造成影响&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; def c(param):  #执行到这里，param赋值，param和b指向同一内存位置
...     param = [4, 5, 6]  #param再次被赋值，指向另一位置，不会对原先造成影响
...
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; c(b)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="lambda_1"&gt;lambda&lt;/h4&gt;
&lt;p&gt;特殊的声明函数方式，用于创建新的函数对象，并且在运行时返回它们【返回函数对象】&lt;/p&gt;
&lt;p&gt;lambda是一个表达式，而不是一个语句&lt;/p&gt;
&lt;p&gt;lambda主体是一个单个的表达式，而不是一个代码块&lt;/p&gt;
&lt;p&gt;用于定义小型的函数，在函数中仅包含单一的参数表达式，而不能包含其他语句，但是可以调用其他函数&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#lambda 参数列表：表达式
lambda arg1,arg2,…argN: expression using args
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为什么使用：函数速写，GUI&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; result = lambda x:x**2
&amp;gt;&amp;gt;&amp;gt; result(3)
9
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="han-shu-she-ji-gai-nian"&gt;函数设计概念&lt;/h4&gt;
&lt;p&gt;指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耦合性：对于输入使用参数并且对于输出使用return 语句,让函数独立于它外部的东西&lt;/li&gt;
&lt;li&gt;耦合性：只有在真正必要的情况下使用全局变量使用参数和返回值&lt;/li&gt;
&lt;li&gt;耦合性：不要改变可变类型参数，除非调用者希望如此
特殊，不友好，不可预料的改变&lt;/li&gt;
&lt;li&gt;聚合性：每个函数都应该有一个单一的，统一的目标&lt;/li&gt;
&lt;li&gt;大小：每个函数都应该相对较小，一个函数只做一件事，保持简单，保持简短&lt;/li&gt;
&lt;li&gt;耦合：避免直接改变在另一个模块文件中的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="nei-zhi-han-shu"&gt;内置函数&lt;/h4&gt;
&lt;p&gt;常用且有点多，独立一章说明&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-16&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-简介/入门</title><link href="http://www.wklken.me/posts/2013/03/16/python-base-introduction.html" rel="alternate"></link><published>2013-03-16T00:00:00+08:00</published><updated>2013-03-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-introduction.html</id><summary type="html">&lt;h2 id="pythonjian-jie-ji-ru-men"&gt;Python简介及入门&lt;/h2&gt;
&lt;h3 id="python"&gt;python&lt;/h3&gt;
&lt;p&gt;为什么是python&lt;/p&gt;
&lt;p&gt;选择自己喜欢的语言，这往往不容易，更多的是根据需求&lt;/p&gt;
&lt;p&gt;话说，之前是java，大学用了三年+实习半年，后来入职做测试开发后，碰到了python&lt;/p&gt;
&lt;p&gt;到最后，转python开发了&lt;/p&gt;
&lt;p&gt;写起来快，缩进，不用打花括号，省手指，读起来舒服…..&lt;/p&gt;
&lt;p&gt;喜欢，貌似不需要什么太牛的理由，用着顺手舒服就行&lt;/p&gt;
&lt;p&gt;什么语言之争，编辑器之战啥的，能忽略就忽略吧，能无视就无视吧，工具，够用，用这舒服就ok了，浪费口水精力争来争去图个啥呢&lt;/p&gt;
&lt;p&gt;Life is short, I use python!&lt;/p&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python介绍: 到官网自个看&lt;/p&gt;
&lt;p&gt;有兴趣可以看看: 解释性语言+动态类型语言+强类型语言&lt;/p&gt;
&lt;p&gt;优点缺点: 自己google&lt;/p&gt;
&lt;p&gt;国际惯例&lt;/p&gt;
&lt;p&gt;交互模式:(主要拿来试验，可以试试 &lt;a href="http://ipython.org/"&gt;ipython …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2 id="pythonjian-jie-ji-ru-men"&gt;Python简介及入门&lt;/h2&gt;
&lt;h3 id="python"&gt;python&lt;/h3&gt;
&lt;p&gt;为什么是python&lt;/p&gt;
&lt;p&gt;选择自己喜欢的语言，这往往不容易，更多的是根据需求&lt;/p&gt;
&lt;p&gt;话说，之前是java，大学用了三年+实习半年，后来入职做测试开发后，碰到了python&lt;/p&gt;
&lt;p&gt;到最后，转python开发了&lt;/p&gt;
&lt;p&gt;写起来快，缩进，不用打花括号，省手指，读起来舒服…..&lt;/p&gt;
&lt;p&gt;喜欢，貌似不需要什么太牛的理由，用着顺手舒服就行&lt;/p&gt;
&lt;p&gt;什么语言之争，编辑器之战啥的，能忽略就忽略吧，能无视就无视吧，工具，够用，用这舒服就ok了，浪费口水精力争来争去图个啥呢&lt;/p&gt;
&lt;p&gt;Life is short, I use python!&lt;/p&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python介绍: 到官网自个看&lt;/p&gt;
&lt;p&gt;有兴趣可以看看: 解释性语言+动态类型语言+强类型语言&lt;/p&gt;
&lt;p&gt;优点缺点: 自己google&lt;/p&gt;
&lt;p&gt;国际惯例&lt;/p&gt;
&lt;p&gt;交互模式:(主要拿来试验，可以试试 &lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt; 支持tab自动补全)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$python
&amp;gt;&amp;gt;&amp;gt; print 'hello world'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;脚本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huan-jing-ji-qi-ta"&gt;环境及其他&lt;/h3&gt;
&lt;p&gt;基本安装: 自己google[安装和配置一搜一大把，基本技能，不解释,貌似很久之前我也写了一篇&lt;a href="http://blog.csdn.net/wklken/article/details/6311292"&gt;http://blog.csdn.net/wklken/article/details/6311292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;建议python2.7 + easy_install + pip + virtualenv + ipython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开发工具:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim/sublimetext2/eclipse+pydev/pycharm
建议初学idle或者pydev吧，用着顺手就行，
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于编码风格：&lt;/p&gt;
&lt;p&gt;谷歌的：&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html"&gt;http://google-styleguide.googlecode.com/svn/trunk/pyguide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文: &lt;a href="http://www.bsdmap.com/articles/zh-google-python-style-guide/"&gt;http://www.bsdmap.com/articles/zh-google-python-style-guide/&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ru-men_1"&gt;入门&lt;/h2&gt;
&lt;p&gt;不扯，开始&lt;/p&gt;
&lt;h3 id="suo-jin"&gt;缩进&lt;/h3&gt;
&lt;p&gt;Python 函数没有明显的 begin 和 end，没有标明函数的开始和结束的花括号。唯一的分隔符是一个冒号 (:)，接着代码本身是缩进的。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#函数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;  &lt;span class="c1"&gt;#缩进&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="biao-shi-fu"&gt;标识符&lt;/h3&gt;
&lt;p&gt;变量是标识符的例子。 标识符 是用来标识 某样东西 的名字。在命名标识符的时候，你要遵循这些规则：&lt;/p&gt;
&lt;p&gt;1.python中的标识符是区分大小写的。&lt;/p&gt;
&lt;p&gt;2.标示符以字母或下划线开头，可包括字母，下划线和数字,大小写敏感&lt;/p&gt;
&lt;p&gt;3.以下划线开头的标识符是有特殊意义的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；&lt;/li&gt;
&lt;li&gt;以双下划线开头的（__foo）代表类的私有成员；&lt;/li&gt;
&lt;li&gt;以双下划线开头和结尾的（&lt;strong&gt;foo&lt;/strong&gt;）代表python里特殊方法专用的标识，如__init__（）代表类的构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.标识符不能是保留字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;            &lt;span class="k"&gt;elif&lt;/span&gt;        &lt;span class="k"&gt;global&lt;/span&gt;   &lt;span class="ow"&gt;or&lt;/span&gt;    &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;         &lt;span class="k"&gt;else&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt;       &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt;          &lt;span class="k"&gt;except&lt;/span&gt;      &lt;span class="kn"&gt;import&lt;/span&gt;   &lt;span class="nn"&gt;print&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;          &lt;span class="nc"&gt;exec&lt;/span&gt;        &lt;span class="ow"&gt;in&lt;/span&gt;       &lt;span class="k"&gt;raise&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;       &lt;span class="k"&gt;finally&lt;/span&gt;     &lt;span class="ow"&gt;is&lt;/span&gt;       &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;            &lt;span class="nf"&gt;for&lt;/span&gt;         &lt;span class="k"&gt;lambda&lt;/span&gt;   &lt;span class="k"&gt;try&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt;            &lt;span class="kn"&gt;from&lt;/span&gt;        &lt;span class="nn"&gt;not&lt;/span&gt;      &lt;span class="nn"&gt;while&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bian-liang"&gt;变量&lt;/h3&gt;
&lt;p&gt;赋值语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赋值语句建立对象引用值&lt;/li&gt;
&lt;li&gt;变量名在首次赋值时会被建立&lt;/li&gt;
&lt;li&gt;变量名在引用前必须先赋值,不能引用未声明赋值的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赋值方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variable(变量)=Value(值)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = ‘spam’
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;多变量赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python中原始的元组和列表赋值语句形成，最后已被通用化，以接受右侧可以是是任何类型的序列，只要长度相等即可。注意，长度一定相等&lt;/p&gt;
&lt;p&gt;Variable1,variable2,...=Value1,Value2,...&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s,h = ‘a’,’b’  元组赋值，位置性  【常用】
[s,h] =[‘a’,’b’] 列表赋值，位置性
a,b,c,d = ‘spam’ 序列赋值，通用性
a,*b = ‘spam’ 拓展序列解包（python3）
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;多目标赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a=b=variable&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="err"&gt;多目标赋值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：多个变量内存中指向同一对象，对于可变类型需要，修改一个会对其他造成影响&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自变赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如+=，-=，*=等。&lt;/p&gt;
&lt;p&gt;在自变赋值中，python仅计算一次，而普通写法需计算两次；&lt;/p&gt;
&lt;p&gt;自变赋值会修改原始对象，而不是创建一个新对象。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="err"&gt;增强赋值&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;程序员输入更少

左侧只需计算一次，优化技术自动原处修改，更快
l +=[] 原处修改
l = l+[] 复制，生成新的对象
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yun-suan-fu"&gt;运算符&lt;/h3&gt;
&lt;p&gt;一个表达式可以分解为运算符和操作数&lt;/p&gt;
&lt;p&gt;运算符 的功能是完成某件事，它们由如+这样的符号或者其他特定的关键字表示&lt;/p&gt;
&lt;p&gt;运算符需要数据来进行运算，这样的数据被称为 操作数&lt;/p&gt;
&lt;p&gt;运算符优先顺序列表(从最高到最低)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;运算符 描述
'expr'  字符串转换
{key:expr,...}  字典
[expr1,expr2...]    列表
(expr1,expr2,...)   元组
function(expr,...)  函数调用
x[index:index]  切片
x[index]    下标索引取值
x.attribute 属性引用
~x  按位取反
+x，-x   正，负
x**y    幂
x*y，x/y，x%y 乘，除，取模
x+y，x-y 加，减
x&amp;lt;&amp;lt;y，x&amp;gt;&amp;gt;y   移位
x&amp;amp;y 按位与
x^y 按位异或
x|y 按位或
x&amp;lt;y，x&amp;lt;=y，x==y，x!=y，x&amp;gt;=y，x&amp;gt;y 比较
x is y，x is not y   等同测试
x in y，x not in y   成员判断
not x   逻辑否
x and y 逻辑与
x or y  逻辑或
lambda arg,...:expr Lambda匿名函数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结合规律&lt;/p&gt;
&lt;p&gt;运算符通常由左向右结合，即具有相同优先级的运算符按照从左向右的顺序计算&lt;/p&gt;
&lt;p&gt;计算顺序&lt;/p&gt;
&lt;p&gt;默认地，运算符优先级表决定了哪个运算符在别的运算符之前计算。然而，如果你想要改变它们的计算顺序，你得使用圆括号。好的做法：默认对复杂的运算加括号，而不是依赖于默认结合和计算顺序&lt;/p&gt;
&lt;h3 id="zhen-zhi"&gt;真值&lt;/h3&gt;
&lt;h4 id="zhen-zhi-ce-shi"&gt;真值测试&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;任何非零数字或非空对象都为真&lt;/li&gt;
&lt;li&gt;数字零，空对象以及特殊对象None都为假&lt;/li&gt;
&lt;li&gt;比较和相等测试都会递归地运用到数据结构中&lt;/li&gt;
&lt;li&gt;比较和相等测试会返回True或False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;真值表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;对象/常量   值
""  假
"string"    真
0   假
2&amp;gt;=1    真
-2&amp;lt;=-1  真
()空元组   假
[]空列表   假
{}空字典   假
None    假
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="bu-er-biao-da-shi"&gt;布尔表达式&lt;/h4&gt;
&lt;p&gt;三种布尔表达式运算符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="bi-jiao"&gt;比较&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数字通过相对大小进行比较&lt;/li&gt;
&lt;li&gt;字符串时按照字典顺序的，一个字符一个字符比较&lt;/li&gt;
&lt;li&gt;列表和元组从左到右对每部分的内容进行比较&lt;/li&gt;
&lt;li&gt;字典通过排序后的键值列表进行比较&lt;/li&gt;
&lt;li&gt;数字混合类型比较在python3是错误的，但是python2.6支持，固定但任意的排序规则&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="bu-er-shu"&gt;布尔数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有两个永远不改变的值True，False&lt;/li&gt;
&lt;li&gt;布尔是整型的子类，但不能被再继承&lt;/li&gt;
&lt;li&gt;没有__nonzero__()方法的对象的默认值是True&lt;/li&gt;
&lt;li&gt;对于值为0的任何数字或空集，值False&lt;/li&gt;
&lt;li&gt;在数学运算中，Bollean值的True和False分别对应于1和0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ji-ben-kong-zhi-liu_1"&gt;基本控制流&lt;/h3&gt;
&lt;h4 id="if"&gt;if&lt;/h4&gt;
&lt;p&gt;基本的条件测试语句，用来判断可能遇到的不同情况，并针对不同的情况进行操作&lt;/p&gt;
&lt;p&gt;基本形式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if &amp;lt;条件&amp;gt;:
   &amp;lt;语句&amp;gt;
elif &amp;lt;条件&amp;gt;:
   &amp;lt;语句&amp;gt;
else:
   &amp;lt;语句&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;p&gt;python根据缩进判断, elif和else部分是可选的&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;#两个放一句用分号隔开，不过建议分行&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"branch a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"branch b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"branch c"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;switch&lt;/p&gt;
&lt;p&gt;python 本身没有 switch 语句，若需要，用if/elif/else实现完成同样的工作,某些情况可以考虑用字典&lt;/p&gt;
&lt;p&gt;也可以用dict的形式&lt;/p&gt;
&lt;p&gt;if/else三元运算符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A = ((X and Y) or Z)
A = Y  if X else Z
例： a = ‘t’ if x else ‘a’
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="for"&gt;for&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基本语法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;循环控制语句，可以用于循环遍历某一序列&lt;/p&gt;
&lt;p&gt;else块可选，在循环终止的时候执行，若是break终止循环，else不执行&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for &amp;lt;对象变量&amp;gt; in &amp;lt;对象集合&amp;gt;:
    if&amp;lt;条件&amp;gt;:
       break
    if&amp;lt;条件&amp;gt;:
       continue
    &amp;lt;其他语句&amp;gt;
else:
    &amp;lt;其他语句&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.对象集合可以是列表，字典以及元组等
2.for..in循环对于任何序列都适用
3.for遍历一个字典时，遍历的是字典的键
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;rang &amp;amp; xrange&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过range()函数产生一个整数列表，完成计数循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;range([start,] stop[, step])

start可选参数，起始数
stop终止数，若为x，产生从0-(x-1)的整数列表
step可选参数，步长,未写默认为1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;range(1,5)   包含序列为 [1,2,3,4]&lt;/p&gt;
&lt;p&gt;xrange和range区别&lt;/p&gt;
&lt;p&gt;(python3.x的可无视)&lt;/p&gt;
&lt;p&gt;在Range的方法中，它会生成一个list的对象，但是在XRange中，它生成的却是一个xrange的对象，当返回的东西不是很大的时候，或者在一个循环里，基本上都是从头查到底的情况下，这两个方法的效率差不多。但是，当返回的东西很大，或者循环中常常会被Break出来的话，还是建议使用XRange，这样既省空间，又会提高效率。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print range(1, 5)
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; print xrange(1, 5)
xrange(1, 5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面语句中，range返回了一个普通List，而xrange返回了一个特定的xrange类型的对象。
由于 xrange 方法也创建整数 list（其使用相同参数），所以它与 range 方法非常相似。但是，xrange 方法仅在需要时才在 list 中创建整数。当需要迭代大量整数时，xrange 方法更适用，因为它不会创建极大的 list，那样会消耗大量计算机内存。&lt;/p&gt;
&lt;h4 id="while"&gt;while&lt;/h4&gt;
&lt;p&gt;与if语句类似，含一个条件测试语句，循环，允许重复执行一个语句块。&lt;/p&gt;
&lt;p&gt;可选else语句块，同for的else块。&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while &amp;lt;条件&amp;gt;:
   if &amp;lt;条件&amp;gt;:
      break
   if &amp;lt;条件&amp;gt;:
      continue
   &amp;lt;其他语句&amp;gt;
else:
   &amp;lt;语句&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while循环条件变为False的时候，else块才被执行&lt;/li&gt;
&lt;li&gt;若是使用break结束循环，while可选的else块不执行&lt;/li&gt;
&lt;li&gt;python没有do while或do until循环语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="break-continue-pass"&gt;break &amp;amp; continue &amp;amp; pass&lt;/h4&gt;
&lt;p&gt;break，终止循环语句，停止循环，若是for/while循环中终止，其else不执行&lt;/p&gt;
&lt;p&gt;continue,结束当前，进入下一轮循环 - 跳到最近所在循环的开头处（来到循环首行）&lt;/p&gt;
&lt;p&gt;pass 什么事也不做，只是空占位语句,它用于那些语法上必须要有什么语句，但程序什么也不做的场合&lt;/p&gt;
&lt;p&gt;循环else块 ：只有循环正常离开时才会执行，即&lt;/p&gt;
&lt;p&gt;如果你从for或while循环中break终止 ，任何对应的循环else块将不执行。
记住，break语句也可以在for循环中使用&lt;/p&gt;
&lt;h3 id="qi-ta_1"&gt;其他&lt;/h3&gt;
&lt;h4 id="bian-xie-xun-huan-de-ji-qiao"&gt;编写循环的技巧：&lt;/h4&gt;
&lt;p&gt;在迭代过程中修改迭代序列不安全（只有在使用链表这样的可变序列时才会有这样的情况）。如果你想要修改你迭代的序列（例如，复制选择项），你可以迭代它的复本。使用切割标识就可以很方便的做到这一点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for x in a[:]: # make a slice copy of the entire list
...    if len(x) &amp;gt; 6: a.insert(0, x)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在字典中循环时，关键字和对应的值可以使用 iteritems() 方法同时解读出来&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; knights = {'gallahad': 'the pure', 'robin': 'the brave'}
&amp;gt;&amp;gt;&amp;gt; for k, v in knights.iteritems():
...     print k, v
...
gallahad the pure
robin the brave
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在序列中循环时，索引位置和对应值可以使用 enumerate() 函数同时得到。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for i, v in enumerate(['tic', 'tac', 'toe']):
...     print i, v
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-16&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-数字处理相关模块</title><link href="http://www.wklken.me/posts/2013/03/10/python-base-extra-math.html" rel="alternate"></link><published>2013-03-10T00:00:00+08:00</published><updated>2013-03-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-extra-math.html</id><summary type="html">&lt;h2 id="shu-zi-chu-li-xiang-guan-mo-kuai"&gt;数字处理相关模块&lt;/h2&gt;
&lt;h3 id="math"&gt;math&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;#这句可查看所有函数名列表&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;#查看具体定义及函数0原型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.常用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceil(x) 取顶
floor(x) 取底
fabs(x) 取绝对值
factorial (x) 阶乘
hypot(x,y)  sqrt(x*x+y*y)
pow(x,y) x的y次方
sqrt(x) 开平方
log(x)
log10(x)
trunc(x)  截断取整数部分
isnan (x …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="shu-zi-chu-li-xiang-guan-mo-kuai"&gt;数字处理相关模块&lt;/h2&gt;
&lt;h3 id="math"&gt;math&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;#这句可查看所有函数名列表&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;#查看具体定义及函数0原型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.常用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceil(x) 取顶
floor(x) 取底
fabs(x) 取绝对值
factorial (x) 阶乘
hypot(x,y)  sqrt(x*x+y*y)
pow(x,y) x的y次方
sqrt(x) 开平方
log(x)
log10(x)
trunc(x)  截断取整数部分
isnan (x)  判断是否NaN(not a number)
degree (x) 弧度转角度
radians(x) 角度转弧度
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外该模块定义了两个常量:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e = 2.718281828459045
pi = 3.141592653589793
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="random"&gt;random&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;p&gt;random是用于生成随机数，我们可以利用它随机生成数字或者选择字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.常用函数&lt;/p&gt;
&lt;h4 id="randomrandom"&gt;random.random()&lt;/h4&gt;
&lt;p&gt;用于生成一个随机浮点数：range[0.0,1.0)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;0.999410896951364&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="randomuniformab"&gt;random.uniform(a,b)&lt;/h4&gt;
&lt;p&gt;用于生成一个指定范围内的随机浮点数，a,b为上下限&lt;/p&gt;
&lt;p&gt;只要a!=b,就会生成介于两者之间的一个浮点数，若a=b，则生成的浮点数就是a&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; random.uniform(10,20)
13.224754825064881
&amp;gt;&amp;gt;&amp;gt; random.uniform(20,10)
14.104410713376437
&amp;gt;&amp;gt;&amp;gt; random.uniform(10,10)
10.0
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="randomrandintab"&gt;random.randint(a,b)&lt;/h4&gt;
&lt;p&gt;用于生成一个指定范围内的整数，a为下限，b为上限，生成的随机整数a&amp;lt;=n&amp;lt;=b;&lt;/p&gt;
&lt;p&gt;若a=b，则n=a；若a&amp;gt;b，报错&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; random.uniform(10,10)
10.0
&amp;gt;&amp;gt;&amp;gt; random.randint(10,20)
15
&amp;gt;&amp;gt;&amp;gt; random.randint(10,10)
10
&amp;gt;&amp;gt;&amp;gt; random.randint(20,10)
Traceback (most recent call last):
……
ValueError: empty range for randrange() (20,11, -9)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="randomrandrangestart-stop-step"&gt;random.randrange([start], stop, [,step])&lt;/h4&gt;
&lt;p&gt;从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; random.randrange(10,100,5)
95
&amp;gt;&amp;gt;&amp;gt; random.randrange(10,100,5)
45
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="randomchoicesequence"&gt;random.choice(sequence)&lt;/h4&gt;
&lt;p&gt;从序列中获取一个随机元素，参数sequence表示一个有序类型，并不是一种特定类型，泛指list，tuple，字符串等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; random.choice([1,2,3,4])
1
&amp;gt;&amp;gt;&amp;gt; random.choice([1,2,3,4])
3
&amp;gt;&amp;gt;&amp;gt; random.choice('hello')
'e'
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="randomshufflex-random"&gt;random.shuffle(x[, random])&lt;/h4&gt;
&lt;p&gt;用于将一个列表中的元素打乱&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4,5]
&amp;gt;&amp;gt;&amp;gt; random.shuffle(a)
&amp;gt;&amp;gt;&amp;gt; a
[4, 5, 2, 1, 3]
&amp;gt;&amp;gt;&amp;gt; random.shuffle(a)
&amp;gt;&amp;gt;&amp;gt; a
[3, 2, 5, 1, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="randomsamplesequence-k"&gt;random.sample(sequence, k)&lt;/h4&gt;
&lt;p&gt;从指定序列中随机获取k个元素作为一个片段返回，sample函数不会修改原有序列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4,5]
&amp;gt;&amp;gt;&amp;gt; random.sample(a,3)
[1, 4, 5]
&amp;gt;&amp;gt;&amp;gt; random.sample(a,3)
[1, 2, 5]
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="decimal_1"&gt;decimal&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;p&gt;默认，浮点数学缺乏精确性&lt;/p&gt;
&lt;p&gt;decimal 模块提供了一个 Decimal 数据类型用于浮点数计算。相比内置的二进制浮点数实现 float
这个类型有助于&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;金融应用和其它需要精确十进制表达的场合，
控制精度，
控制舍入以适应法律或者规定要求，
确保十进制数位精度，或者用户希望计算结果与手算相符的场合。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decimal 重现了手工的数学运算，这就确保了二进制浮点数无法精确保有的数据精度。 高精度使 Decimal 可以执行二进制浮点数无法进行的模运算和等值测试。&lt;/p&gt;
&lt;p&gt;2.使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.3333333333333333333333333333'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcontext&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;#设置全局精度&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0.3333'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fractions"&gt;fractions&lt;/h3&gt;
&lt;p&gt;分数类型&lt;/p&gt;
&lt;p&gt;构造&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fractions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#分子分母&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#分子&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'3/7'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#字符串分数&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-.125'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#字符串浮点数&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#浮点数&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1.1'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#Decimal&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;计算&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fractions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1/3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-10&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-集合小结</title><link href="http://www.wklken.me/posts/2013/03/10/python-base-set.html" rel="alternate"></link><published>2013-03-10T00:00:00+08:00</published><updated>2013-03-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-set.html</id><summary type="html">&lt;h2 id="ji-he"&gt;集合&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.&lt;/p&gt;
&lt;p&gt;sets 支持 x in set, len(set), 和 for x in set。&lt;/p&gt;
&lt;p&gt;集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.&lt;/p&gt;
&lt;p&gt;作为一个无序的集合，sets 不记录元素位置或者插入点。因此，sets 不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。&lt;/p&gt;
&lt;p&gt;set为可变集合&lt;/p&gt;
&lt;p&gt;frozenset为固定集合&lt;/p&gt;
&lt;p&gt;可变集合特有的方法: add, remove, discard, pop, clear, 这些接受对象的方法, 参数必须是可哈希的&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;用集合的工厂方法 …&lt;/p&gt;</summary><content type="html">&lt;h2 id="ji-he"&gt;集合&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.&lt;/p&gt;
&lt;p&gt;sets 支持 x in set, len(set), 和 for x in set。&lt;/p&gt;
&lt;p&gt;集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.&lt;/p&gt;
&lt;p&gt;作为一个无序的集合，sets 不记录元素位置或者插入点。因此，sets 不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。&lt;/p&gt;
&lt;p&gt;set为可变集合&lt;/p&gt;
&lt;p&gt;frozenset为固定集合&lt;/p&gt;
&lt;p&gt;可变集合特有的方法: add, remove, discard, pop, clear, 这些接受对象的方法, 参数必须是可哈希的&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;用集合的工厂方法 set()和 frozenset():&lt;/p&gt;
&lt;p&gt;set&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s = set('cheeseshop')
&amp;gt;&amp;gt;&amp;gt; s
set(['c', 'e', 'h', 'o', 'p', 's'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;frozenset&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; b = frozenset([1,2,3,2])
&amp;gt;&amp;gt;&amp;gt; b
frozenset([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; b.add(4)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
AttributeError: 'frozenset' object has no attribute 'add'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set 和 ImmutableSet&lt;/p&gt;
&lt;p&gt;字符串-&amp;gt;字符集&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; set('hello')
set(['h', 'e', 'l', 'o'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表/元组-&amp;gt;集合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; set([1,2,3,2,1])
set([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; set((1,2,3,2,1))
set([1, 2, 3])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至是 字典-&amp;gt;集合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = {'name':'tom','age':22,'score':22}
&amp;gt;&amp;gt;&amp;gt; set(a)
set(['age', 'score', 'name'])
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chang-yong-cao-zuo"&gt;常用操作&lt;/h3&gt;
&lt;h4 id="cheng-yuan-guan-xi"&gt;成员关系&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; h = set('hello')
&amp;gt;&amp;gt;&amp;gt; h
set(['h', 'e', 'l', 'o'])
&amp;gt;&amp;gt;&amp;gt; 'l' in h
True
&amp;gt;&amp;gt;&amp;gt; 'l' not in h
False
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="xin-zeng-shan-chu"&gt;新增删除&lt;/h4&gt;
&lt;p&gt;新增单个元素
s.add(x)&lt;/p&gt;
&lt;p&gt;向 set “s”中增加元素 x&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = set([1,2,3,4,2])
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; a.add(2)
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; a.add(5)
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 4, 5])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新增多个元素&lt;/p&gt;
&lt;p&gt;s.update(t)&lt;/p&gt;
&lt;p&gt;s |= t&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = set([1,2,3])
&amp;gt;&amp;gt;&amp;gt; b = set([2,3,4])
&amp;gt;&amp;gt;&amp;gt; a.update(b)
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; b
set([2, 3, 4])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;p&gt;s.remove(x)&lt;/p&gt;
&lt;p&gt;从 set “s”中删除元素 x, 如果不存在则引发 KeyError&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 4, 5])
&amp;gt;&amp;gt;&amp;gt; a.remove(4)
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 5])
&amp;gt;&amp;gt;&amp;gt; a.remove(4)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
KeyError: 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s.discard(x)&lt;/p&gt;
&lt;p&gt;如果在 set “s”中存在元素 x, 则删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 5])
&amp;gt;&amp;gt;&amp;gt; a.discard(3)
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 5])
&amp;gt;&amp;gt;&amp;gt; a.discard(3)
&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 5])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s.pop()&lt;/p&gt;
&lt;p&gt;删除并且返回 set “s”中的一个不确定的元素, 如果为空则引发 KeyError&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a
set([1, 5])
&amp;gt;&amp;gt;&amp;gt; a.pop()
1
&amp;gt;&amp;gt;&amp;gt; a.pop()
5
&amp;gt;&amp;gt;&amp;gt; a.pop()
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
KeyError: 'pop from an empty set'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s.clear()&lt;/p&gt;
&lt;p&gt;删除 set “s”中的所有元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; a.clear()
&amp;gt;&amp;gt;&amp;gt; a
set([])

&amp;gt;&amp;gt;&amp;gt; b = set([1,2,3])
&amp;gt;&amp;gt;&amp;gt; del b
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="ji-he-jian-cao-zuo"&gt;集合间操作&lt;/h4&gt;
&lt;p&gt;注意，集合操作可以通过函数进行，也存在等价的运算符&lt;/p&gt;
&lt;p&gt;1.交集&lt;/p&gt;
&lt;p&gt;s.union(t)  等价  s | t&lt;/p&gt;
&lt;p&gt;返回一个新的 set 包含 s 和 t 中的每一个元素&lt;/p&gt;
&lt;p&gt;2.并集&lt;/p&gt;
&lt;p&gt;s.intersection(t) 等价 s &amp;amp; t&lt;/p&gt;
&lt;p&gt;返回一个新的 set 包含 s 和 t 中的公共元素&lt;/p&gt;
&lt;p&gt;3.差集&lt;/p&gt;
&lt;p&gt;s.difference(t)  等价  s - t&lt;/p&gt;
&lt;p&gt;返回一个新的 set 包含 s 中有但是 t 中没有的元素&lt;/p&gt;
&lt;p&gt;4.差分集&lt;/p&gt;
&lt;p&gt;s.symmetric_difference(t) 等价 s ^ t&lt;/p&gt;
&lt;p&gt;返回一个新的 set 包含 s 和 t 中不重复的元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = set([1,2,3])
&amp;gt;&amp;gt;&amp;gt; b = set([2,3,4])
&amp;gt;&amp;gt;&amp;gt; a.symmetric_difference(b)
set([1, 4])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.关系判断&lt;/p&gt;
&lt;p&gt;s.issubset(t) 等价 s &amp;lt;= t&lt;/p&gt;
&lt;p&gt;测试是否 s 中的每一个元素都在 t 中&lt;/p&gt;
&lt;p&gt;s.issuperset(t) 等价 s &amp;gt;= t&lt;/p&gt;
&lt;p&gt;测试是否 t 中的每一个元素都在 s 中&lt;/p&gt;
&lt;p&gt;6.浅拷贝&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a
set([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; b = a.copy()
&amp;gt;&amp;gt;&amp;gt; b
set([1, 2, 3])
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta_1"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.用的较少的函数&lt;/p&gt;
&lt;p&gt;s.intersection_update(t)  等价 s &amp;amp;= t&lt;/p&gt;
&lt;p&gt;返回只保留含有 set “t”中元素的 set “s”&lt;/p&gt;
&lt;p&gt;s.difference_update(t)  等价 s -= t&lt;/p&gt;
&lt;p&gt;返回删除了 set “t”中含有的元素后的 set “s”&lt;/p&gt;
&lt;p&gt;s.symmetric_difference_update(t) 等价  s ^= t&lt;/p&gt;
&lt;p&gt;返回含有 set “t”或者 set “s”中有而不是两者都有的元素的 set “s”&lt;/p&gt;
&lt;h3 id="bu-chong"&gt;补充&lt;/h3&gt;
&lt;p&gt;集合推导(2013-08-13)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; { x for x in range(10) }
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-10&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-字符串小结</title><link href="http://www.wklken.me/posts/2013/03/10/python-base-string.html" rel="alternate"></link><published>2013-03-10T00:00:00+08:00</published><updated>2013-03-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-string.html</id><summary type="html">&lt;h2 id="zi-fu-chuan"&gt;字符串&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;字符串序列
用于表示和存储文本，python中字符串是不可变的，一旦声明，不能改变&lt;/p&gt;
&lt;p&gt;通常由单引号(' )，双引号(" )，三引号('''   """)包围&lt;/p&gt;
&lt;p&gt;其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。便捷的多行注释&lt;/p&gt;
&lt;p&gt;Python实际三类字符串：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.通常意义字符串(str)
2.原始字符串，以大写R 或 小写r开始，r''，不对特殊字符进行转义
3.Unicode字符串，u'' basestring子类
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Python 中，字符串是“不可改变的序列”&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不可变

2.满足序列基本操作，按位置存取，切片及索引
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-fu-chuan_1"&gt;字符串&lt;/h4&gt;
&lt;p&gt;1.获得帮助:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(str)
&amp;gt;&amp;gt;&amp;gt; dir(str …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="zi-fu-chuan"&gt;字符串&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;字符串序列
用于表示和存储文本，python中字符串是不可变的，一旦声明，不能改变&lt;/p&gt;
&lt;p&gt;通常由单引号(' )，双引号(" )，三引号('''   """)包围&lt;/p&gt;
&lt;p&gt;其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。便捷的多行注释&lt;/p&gt;
&lt;p&gt;Python实际三类字符串：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.通常意义字符串(str)
2.原始字符串，以大写R 或 小写r开始，r''，不对特殊字符进行转义
3.Unicode字符串，u'' basestring子类
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Python 中，字符串是“不可改变的序列”&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不可变

2.满足序列基本操作，按位置存取，切片及索引
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-fu-chuan_1"&gt;字符串&lt;/h4&gt;
&lt;p&gt;1.获得帮助:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(str)
&amp;gt;&amp;gt;&amp;gt; dir(str)
&amp;gt;&amp;gt;&amp;gt; help(str.replace)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.不可变性&lt;/p&gt;
&lt;p&gt;在创建之后就不能就地改变（同java），不能通过对其某一位置进行赋值而改变字符
划分为不可变序列，这些字符串所包含的字符存在从左到右的顺序，不可在原处修改。
python中字符串相当于一个不可变序列的列表，一旦声明，每个字符位置固定&lt;/p&gt;
&lt;p&gt;意味着若想改变，必须新建一个！&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;s=’spam’
&amp;gt;&amp;gt;&amp;gt;s[0]=’k’   #TypeError
#修改字符串类似java,重新赋值
s = ‘k’ + s[1:]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="yuan-shi-zi-fu-chuan"&gt;原始字符串&lt;/h4&gt;
&lt;p&gt;原始字符串常量，r”abcd”，(r/R)即去掉了反斜线转义机制。关闭转义机制，即\不再表示转义&lt;/p&gt;
&lt;p&gt;用处：&lt;/p&gt;
&lt;p&gt;1.正则表达式&lt;/p&gt;
&lt;p&gt;用于处理正则表达式，减少反斜杠&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;p4search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'\s*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.系统路径&lt;/p&gt;
&lt;p&gt;可以方便地表示系统路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'e:\book'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="unicodezi-fu-chuan"&gt;unicode字符串&lt;/h4&gt;
&lt;p&gt;Unicode是书写国际文本的标准方法。&lt;/p&gt;
&lt;p&gt;Python允许你处理Unicode文本——你只需要在字符串前加上前缀u或U。例如，u"This is a Unicode string."&lt;/p&gt;
&lt;p&gt;BP: 在你处理文本文件的时候使用Unicode字符串，特别是当你知道这个文件含有用非英语的语言写的文本。&lt;/p&gt;
&lt;h3 id="chang-yong-cao-zuo_1"&gt;常用操作&lt;/h3&gt;
&lt;p&gt;1.基本操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+   :string1+string2    #联接字符串,将后一个串链接到前一个串的后面
    Python不允许在+表达式中出现其他类型，需要手工转【这点不同于java】‘abc’+str(9)
*   :string*n           #创建一个新字符串重复n次原来的串
[]  :string[n]          #从字符串中获取对应位置的一个字符
[:] :string[n:m]        #截取字符串,如果为:m从头到m如果为n:从n到尾
in  :char in string #判断一个字符是否在串中,如果在返回为真(True)
not in :char not in string #判断一个字符是否不在串中,如果在返回为真(True)
r/R : r/Rstring     #禁止转义字符的实际意义,整个字符为原始意义
len() : 长度len(s)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.类型转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串和数字相互转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字符串到数字
int/float/long&lt;/p&gt;
&lt;p&gt;数字到字符串
str&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; int(42)
42
&amp;gt;&amp;gt;&amp;gt; int('42')
42
&amp;gt;&amp;gt;&amp;gt; str(42)
'42'
&amp;gt;&amp;gt;&amp;gt; float('42.0')
42.0
&amp;gt;&amp;gt;&amp;gt; str(42.0)
'42.0'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者使用string模块的函数&lt;/p&gt;
&lt;p&gt;s：进行转换的字符串, base:可选，目标进制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;span class="c1"&gt;#base默认为10，如果为0,那么s就可以是012或0x23这种形式的字符串，如果是16那么s就只能是0x23或0X12这种形式的字符串&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;       &lt;span class="c1"&gt;#转成long&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;       &lt;span class="c1"&gt;#转成float&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;字符串和列表的转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字符串转列表：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spilt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表转字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‘’&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，不能join列表中的非字符串
 &lt;/p&gt;
&lt;p&gt;3.修改字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;pa&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="c1"&gt;#赋值空&lt;/span&gt;

&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="c1"&gt;#整个变量删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.索引和分片&lt;/p&gt;
&lt;p&gt;索引s[i]&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s[0]首个

s[-1] = s[len(s)-1] 倒数第一个
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分片s[i:j]&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;不含上边界，s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;取&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;取1到结束&lt;/span&gt;   &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;取开始到2&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;开始到倒数第二个&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;开始到结尾，相当于一个复制&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="s s-Atom"&gt;取1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="s s-Atom"&gt;，步长&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nn"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nn"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;步长为负数，两个边界意义反转了，表示从b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;到a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s s-Atom"&gt;步长&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s=’abcdefg’&lt;/span&gt;  
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;得到&lt;/span&gt; &lt;span class="s s-Atom"&gt;fedc&lt;/span&gt;
&lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s s-Atom"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  &lt;span class="s s-Atom"&gt;内置函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-fu-chuan-ge-shi-hua"&gt;字符串格式化&lt;/h3&gt;
&lt;p&gt;这里只介绍基本字符串格式化，扩展在后续篇幅介绍
%c 单个字符
%d 十进制整数
%o 八进制整数
%s 字符串
%x 十六进制整数，其中字母小写
%X 十六进制整数，其中字母大写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; str = "so %s a day!"
&amp;gt;&amp;gt;&amp;gt; str % 'beautiful'
'so beautiful a day!'

&amp;gt;&amp;gt;&amp;gt; '{0} is {1}'.format('a','b')
'a is b'

&amp;gt;&amp;gt;&amp;gt; template = "{0}, {1} and {2}"
&amp;gt;&amp;gt;&amp;gt; template.format('a', 'b', 'c')
'a, b and c'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nei-jian-han-shu-lie-biao"&gt;内建函数列表&lt;/h3&gt;
&lt;p&gt;【字符串方法是python文本处理头号工具】&lt;/p&gt;
&lt;h4 id="stringcapitalize"&gt;string.capitalize()&lt;/h4&gt;
&lt;p&gt;字符串第一个字符大写&lt;/p&gt;
&lt;h4 id="stringcenterwidthfill"&gt;string.center(width,[,fill])&lt;/h4&gt;
&lt;p&gt;原字符居中，空格填充至width长度&lt;/p&gt;
&lt;h4 id="stringcountstrbeg0endlenstring"&gt;string.count(str,beg=0,end=len(string))&lt;/h4&gt;
&lt;p&gt;获得字符串中某一个子串的数目,计算出现次数，可指定范围&lt;/p&gt;
&lt;h4 id="stringdecodeencodingutf-8errorsstrict"&gt;string.decode(encoding=’UTF-8’,errors=’strict’)&lt;/h4&gt;
&lt;p&gt;解码字符串，出错默认报ValueError,除非errors是ignore或replace&lt;/p&gt;
&lt;h4 id="stringencodeencodingutf-8errorsstrict"&gt;string.encode(encoding=’UTF-8’,errors=’strict’)&lt;/h4&gt;
&lt;h4 id="stringendswithsuffixbeg0endlenstring"&gt;string.endswith(suffix,beg=0,end=len(string))&lt;/h4&gt;
&lt;p&gt;是否以**结尾&lt;/p&gt;
&lt;h4 id="stringexpandtabstabsize8"&gt;string.expandtabs(tabsize=8)&lt;/h4&gt;
&lt;p&gt;把字符串中tab转为空格，默认8个&lt;/p&gt;
&lt;h4 id="stringfindstrbeg0endlenstirng"&gt;string.find(str,beg=0,end=len(stirng))&lt;/h4&gt;
&lt;p&gt;检测是否包含str，存在返回开始索引，否则返回-1&lt;/p&gt;
&lt;h4 id="stringindexstrbegin0endlenstring"&gt;string.index(str,begin=0,end=len(string))&lt;/h4&gt;
&lt;p&gt;同find，不存在报异常,ValueError&lt;/p&gt;
&lt;h4 id="stringisalnum"&gt;string.isalnum()&lt;/h4&gt;
&lt;p&gt;至少一个字符，且所有字符均为字母或数字，True. 检测字符串是否只包含0-9A-Za-z&lt;/p&gt;
&lt;h4 id="stringisalpha"&gt;string.isalpha()&lt;/h4&gt;
&lt;p&gt;至少一个字符，所有字符都是字母，True. 检测字符串是否只包含字母&lt;/p&gt;
&lt;h4 id="stringisdecimal"&gt;string.isdecimal()&lt;/h4&gt;
&lt;p&gt;只包含十进制数，True&lt;/p&gt;
&lt;h4 id="stirngisdigit"&gt;stirng.isdigit()&lt;/h4&gt;
&lt;p&gt;只包含数字，True. 检测字符串是否仅包含数字&lt;/p&gt;
&lt;h4 id="stringislower"&gt;string.islower()&lt;/h4&gt;
&lt;p&gt;至少一个区分大小写字符且所有字符小写，True. 检测字符串是否均为小写字母&lt;/p&gt;
&lt;h4 id="stringisnumeric"&gt;string.isnumeric()&lt;/h4&gt;
&lt;p&gt;只含数字字符,True&lt;/p&gt;
&lt;h4 id="stringisspace"&gt;string.isspace()&lt;/h4&gt;
&lt;p&gt;只包含空格，True. 检测字符串是否均为空白字符&lt;/p&gt;
&lt;h4 id="stringistitle"&gt;string.istitle()&lt;/h4&gt;
&lt;p&gt;标题化字符，True. 检测字符串中的单词是否为首字母大写&lt;/p&gt;
&lt;h4 id="stringisupper"&gt;string.isupper()&lt;/h4&gt;
&lt;p&gt;至少一个区分大小写字符且所有字符大写，True. 检测字符串是否均为大写字母&lt;/p&gt;
&lt;h4 id="stringjoinseq"&gt;string.join(seq)&lt;/h4&gt;
&lt;p&gt;以string作为分隔符，seq中所有元素合并为新的字符串. 将原字符串插入参数字符串中的每两个字符之间&lt;/p&gt;
&lt;h4 id="stringljustwidth"&gt;string.ljust(width)&lt;/h4&gt;
&lt;p&gt;返回一个原字符串左对齐，空格补充至长度width&lt;/p&gt;
&lt;h4 id="stringlower"&gt;string.lower()&lt;/h4&gt;
&lt;p&gt;转小写. 将字符串全部转为小写&lt;/p&gt;
&lt;h4 id="stringlstrip"&gt;string.lstrip()&lt;/h4&gt;
&lt;p&gt;截掉左侧的空格&lt;/p&gt;
&lt;h4 id="stringpartitionstr"&gt;string.partition(str)&lt;/h4&gt;
&lt;p&gt;= find+split，从str出现第一个位置，截断为pre_str,str,after_str元组，不含str则pre_str=str
string.replace(str1,str2,num=string.count(str1))
替换，指定不超过num次，可作为模板实现&lt;/p&gt;
&lt;h4 id="stringrfindstrbeg0endlenstring"&gt;string.rfind(str,beg=0,end=len(string))&lt;/h4&gt;
&lt;p&gt;同find，右边开始&lt;/p&gt;
&lt;h4 id="stringrindexstrbeg0endlenstring"&gt;string.rindex(str,beg=0,end=len(string))&lt;/h4&gt;
&lt;p&gt;同index,右边开始&lt;/p&gt;
&lt;h4 id="stringrjustwidth"&gt;string.rjust(width)&lt;/h4&gt;
&lt;p&gt;右对齐，空格补齐&lt;/p&gt;
&lt;h4 id="stringrpartitionstr"&gt;string.rpartition(str)&lt;/h4&gt;
&lt;p&gt;同partition，右边开始&lt;/p&gt;
&lt;h4 id="stringrstripchars"&gt;string.rstrip([chars])&lt;/h4&gt;
&lt;p&gt;清理右侧空白，包括换行符，返回处理后字符串&lt;/p&gt;
&lt;h4 id="stringsplitstr-maxsplit-stringcountstr"&gt;string.split(str=””, maxsplit =string.count(str))&lt;/h4&gt;
&lt;p&gt;以str切片，可指定分割次数, 分割字符串，返回列表，默认分隔符空格&lt;/p&gt;
&lt;h4 id="stringsplitlinesnumstringcountn"&gt;string.splitlines(num=string.count(‘\n’))&lt;/h4&gt;
&lt;p&gt;s.splitlines([keepends])
按行分隔，可指定分割次数&lt;/p&gt;
&lt;h4 id="stringstartswithobjbeg0endlenstring"&gt;string.startswith(obj,beg=0,end=len(string))&lt;/h4&gt;
&lt;p&gt;以str开头，True. 检测字符串是否以某一子串开头&lt;/p&gt;
&lt;h4 id="stringstripobj"&gt;string.strip([obj])&lt;/h4&gt;
&lt;p&gt;在string上执行lstrip和rstrip&lt;/p&gt;
&lt;h4 id="stringswapcase"&gt;string.swapcase&lt;/h4&gt;
&lt;p&gt;反转string中大小写. 字符串中小写转大写，大写转小写&lt;/p&gt;
&lt;h4 id="stringtitle"&gt;string.title()&lt;/h4&gt;
&lt;p&gt;标题花，单词首字母大写，其余小写&lt;/p&gt;
&lt;h4 id="stringtranslatestrdel"&gt;string.translate(str,del=””)&lt;/h4&gt;
&lt;p&gt;s.translate(table)
根据str给出表转换string字符，要过滤的字符放在del参数中&lt;/p&gt;
&lt;h4 id="stringupper"&gt;string.upper()&lt;/h4&gt;
&lt;p&gt;转大写. 将字符串全部转为大写&lt;/p&gt;
&lt;h4 id="stringzfillwidth"&gt;string.zfill(width)&lt;/h4&gt;
&lt;p&gt;返回长度width的字符串，原字符串右对齐，前面填充0&lt;/p&gt;
&lt;h4 id="lenstring"&gt;len(string)&lt;/h4&gt;
&lt;p&gt;获取字符串的长度&lt;/p&gt;
&lt;h3 id="zui-jia-shi-jian_1"&gt;最佳实践&lt;/h3&gt;
&lt;p&gt;1.循环中用到长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="c1"&gt;#修改&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.字符串追加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="c1"&gt;#修改&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.转义符&lt;/p&gt;
&lt;p&gt;几个常用：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\n换行，\\反斜杠
\t制表  \'单引号
\r回车 \"双引号
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hou-xu-xu-kuo-zhan"&gt;后续需扩展&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;字符串编码详解
字符串格式化
正则表达式
字符串涉及常用模块(序列化/文本包装等)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-10&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-字典小结</title><link href="http://www.wklken.me/posts/2013/03/09/python-base-dict.html" rel="alternate"></link><published>2013-03-09T00:00:00+08:00</published><updated>2013-03-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-dict.html</id><summary type="html">&lt;h2 id="zi-dian"&gt;字典&lt;/h2&gt;
&lt;h3 id="ding-yi"&gt;定义&lt;/h3&gt;
&lt;p&gt;dictionary&lt;/p&gt;
&lt;p&gt;1.键值对的集合(map)&lt;/p&gt;
&lt;p&gt;2.字典是以大括号“{}”包围的数据集合&lt;/p&gt;
&lt;p&gt;3.字典是无序的，在字典中通过键来访问成员。
  可变的，可嵌套，可以原处修改扩展等，不产生新的字典&lt;/p&gt;
&lt;p&gt;4.字典的键，可以是字符串(大小写敏感)，数字常量或元组（不可变类型），同一个字典的键可以混用类型。字典的键必须是可哈希的&lt;/p&gt;
&lt;p&gt;元组作为键的条件是，元组内的值都是不可变类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  a = (1,2)  #可以作为键
  b = (1,2,[3,4])  #不可以
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.字典的值可以是任意类型，可以嵌套，可以自由修改&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;创建字典的几种方式:&lt;/p&gt;
&lt;p&gt;1.基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;#空字典&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age' …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="zi-dian"&gt;字典&lt;/h2&gt;
&lt;h3 id="ding-yi"&gt;定义&lt;/h3&gt;
&lt;p&gt;dictionary&lt;/p&gt;
&lt;p&gt;1.键值对的集合(map)&lt;/p&gt;
&lt;p&gt;2.字典是以大括号“{}”包围的数据集合&lt;/p&gt;
&lt;p&gt;3.字典是无序的，在字典中通过键来访问成员。
  可变的，可嵌套，可以原处修改扩展等，不产生新的字典&lt;/p&gt;
&lt;p&gt;4.字典的键，可以是字符串(大小写敏感)，数字常量或元组（不可变类型），同一个字典的键可以混用类型。字典的键必须是可哈希的&lt;/p&gt;
&lt;p&gt;元组作为键的条件是，元组内的值都是不可变类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  a = (1,2)  #可以作为键
  b = (1,2,[3,4])  #不可以
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.字典的值可以是任意类型，可以嵌套，可以自由修改&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;创建字典的几种方式:&lt;/p&gt;
&lt;p&gt;1.基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;#空字典&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#等价&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'tom'&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.dict&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#空&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="c1"&gt;#等价&lt;/span&gt;
&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.fromkeys&lt;/p&gt;
&lt;p&gt;不指定default_value的话，默认None&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dict.fromkeys(['name','age'],'default_value')
{'age': 'default_value', 'name': 'default_value'}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ben-cao-zuo"&gt;基本操作&lt;/h3&gt;
&lt;p&gt;0.获取帮助&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.判定键是否存在于字典中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="c1"&gt;#k not in&lt;/span&gt;
    &lt;span class="n"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.读取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#得到1，但是若键不存在，将引发异常KeyError。慎用，建议不使用&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#得到3,get方法，若是键不存在，返回第二个参数default_value.若是没有设default_value返回None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理missing-key错误三种方式，根据具体需要&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#等价 d[k] if k in d else default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.遍历&lt;/p&gt;
&lt;p&gt;方式1：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#等价 for key in d.keys()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方式2：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.修改
方式1：某个键值对&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'newvalue'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方式2：批量添加或更新&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#另一个字典&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'newvalue'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  &lt;span class="c1"&gt;#这里支持一整组值&lt;/span&gt;

&lt;span class="c1"&gt;#元组列表&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#每个元组两个元素，(key,value)&lt;/span&gt;

&lt;span class="c1"&gt;#**key&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#删除并返回值&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#清空&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.其他：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;len(d)   #长度
d.keys()  #key列表
d.values()  #value列表
d.items()   #(key, value) 列表
c = d.copy()   #浅拷贝
#返回迭代器，节省内存
d.iterkeys()
d.itervalues()
d.iteritems()
d.setdefault('name', 'ken') #若原来没有，设置，否则原值不变
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.字典排序
按照key排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按照value进行排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#假设d为字典&lt;/span&gt;
&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#返回同 sorted(d.keys())，返回的是key排序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;补充 2013-08-31&lt;/p&gt;
&lt;p&gt;最快的字典排序方式(性能考虑,来自互联网)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.自定义对象作为key&lt;/p&gt;
&lt;p&gt;必须:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.字典拷贝
浅拷贝：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;深拷贝必须用copy模块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;deepcopy&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.一种使用场景
假设有一个很大的列表l,假设10w条记录&lt;/p&gt;
&lt;p&gt;有一个小列表b，要判断b中元素是否在l中&lt;/p&gt;
&lt;p&gt;如果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你会发现非常非常慢...因为第二个in语句，会遍历10w条….&lt;/p&gt;
&lt;p&gt;改进:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromkeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#空间换时间，O(n) -&amp;gt; O(1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.利用dict进行函数switch&lt;/p&gt;
&lt;p&gt;函数调用的switch(2013-09-01)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt;
&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-09&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-数字小结</title><link href="http://www.wklken.me/posts/2013/03/09/python-base-math.html" rel="alternate"></link><published>2013-03-09T00:00:00+08:00</published><updated>2013-03-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-math.html</id><summary type="html">&lt;h2 id="shu-zi"&gt;数字&lt;/h2&gt;
&lt;p&gt;python中的数字类型完整工具：
整数&amp;amp;浮点数，复数，固定精度十进制数，有理分数，集合，布尔类型，无穷的整数精度，各种数字内置函数和模块&lt;/p&gt;
&lt;h3 id="shu-lei-xing"&gt;数类型&lt;/h3&gt;
&lt;p&gt;Python中有四种类型的数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;整数：一般意义上的数，包含十进制(无前缀),八进制(0开头)，十六进制(0x开头),二进制(0b开头)
eg.  2

长整数：无限大小的数,表示范围和内存有关
eg.   2012121200

浮点数：小数或用e/E(10的幂)表示的幂,默认，浮点数学缺乏精确性,可以使用decimal
eg.   3.23      50.2E2

复数：复数的虚部以字母J 或 j结尾
eg.    2+3i …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="shu-zi"&gt;数字&lt;/h2&gt;
&lt;p&gt;python中的数字类型完整工具：
整数&amp;amp;浮点数，复数，固定精度十进制数，有理分数，集合，布尔类型，无穷的整数精度，各种数字内置函数和模块&lt;/p&gt;
&lt;h3 id="shu-lei-xing"&gt;数类型&lt;/h3&gt;
&lt;p&gt;Python中有四种类型的数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;整数：一般意义上的数，包含十进制(无前缀),八进制(0开头)，十六进制(0x开头),二进制(0b开头)
eg.  2

长整数：无限大小的数,表示范围和内存有关
eg.   2012121200

浮点数：小数或用e/E(10的幂)表示的幂,默认，浮点数学缺乏精确性,可以使用decimal
eg.   3.23      50.2E2

复数：复数的虚部以字母J 或 j结尾
eg.    2+3i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.分数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fractions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浮点数和分数转换：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(2.5).as_integer_ratio()  #返回元组(5,2)
或者Fraction.from_float(1.75)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.复数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = 实数 + 虚数j
a.real  #实部
a.imag  #虚部
a.conjugate()  #共轭复数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虚数不能单独存在, 总是和一个值为0.0的实数部分一起构成一个复数&lt;/p&gt;
&lt;p&gt;实数部分和虚数部分都是浮点数&lt;/p&gt;
&lt;h3 id="yun-suan-fu"&gt;运算符&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+加法
-减法
*乘法
**幂次(也可以使用内建的pow()函数来进行幂运算) 
/除法(2.x中是整除,3.x是浮点除)
//取整，商的整数部分强制整除(浮点数也会做整除运算)
%取余(可以使用内建的divmod()函数获得结果和余数的元组)
&amp;amp;位与
|位或
^位异或
~位翻转 x -&amp;gt; -(x+1)
&amp;lt;&amp;lt;左移
&amp;gt;&amp;gt;右移
值不相等 a != b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运算符优先级，同级从左到右&lt;/p&gt;
&lt;p&gt;BP:良好的做法是随时根据优先级需要加入括号，而不是依赖默认优先级&lt;/p&gt;
&lt;h3 id="nei-zhi-han-shu"&gt;内置函数&lt;/h3&gt;
&lt;p&gt;最常用round&lt;/p&gt;
&lt;p&gt;1.abs(number)&lt;/p&gt;
&lt;p&gt;返回数字的绝对值,&lt;/p&gt;
&lt;p&gt;如果是复数, 返回math.sqrt(num.real2 + num.imag2)&lt;/p&gt;
&lt;p&gt;2.coerce(number1, number2)&lt;/p&gt;
&lt;p&gt;按照类型转换规则,将num1和num2转为同一类型，以元组形式返回&lt;/p&gt;
&lt;p&gt;3.divmod(number1, number2)&lt;/p&gt;
&lt;p&gt;返回一个包含商和余数的元组&lt;/p&gt;
&lt;p&gt;整数返回地板除和取余操作结果&lt;/p&gt;
&lt;p&gt;浮点数返回的商部分是math.floor(number1/number2)&lt;/p&gt;
&lt;p&gt;复数的商部分是ath.floor((number1/number2).real)&lt;/p&gt;
&lt;p&gt;4.pow(num1,num2,mod=1)&lt;/p&gt;
&lt;p&gt;同**操作符&lt;/p&gt;
&lt;p&gt;第三个为可选参数，即一个余数操作，若存在这个参数，先指数，后与第三个参数取余,性能比pow(x,y)%z更高&lt;/p&gt;
&lt;p&gt;5.round(number[, base])&lt;/p&gt;
&lt;p&gt;对浮点数进行四舍五入运算,base参数是小数位参数，决定了精确到小数点后几位&lt;/p&gt;
&lt;p&gt;6.其他&lt;/p&gt;
&lt;p&gt;其他内建及工厂函数在后面类型转换和进制转换中说明&lt;/p&gt;
&lt;h3 id="lei-xing-zhuan-huan"&gt;类型转换&lt;/h3&gt;
&lt;p&gt;转换工厂函数
主要在类型转换和进制转换中用到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int(str, base=10) 转换为整型数,base为相应的进制;base的范围是2~32,base缺省十进制

long(obj,base=10),  转长整型


float(obj),转浮点数


complex(str),complex(real, imag=0.0), 转复数

bool(obj) 返回obj对象的布尔值,即obj.__nonzero__()方法返回值,没有__nonzero__()方法的对象默认值是True

string()，转字符串

chr(num) ASCII数字值转为字符

ord(chr) 字符转对应ASCII/Unicode值

unichr(num) 接收Unicode码值
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jin-zhi-zhuan-huan"&gt;进制转换&lt;/h3&gt;
&lt;p&gt;八进制:0o1&lt;/p&gt;
&lt;p&gt;十六进制:0x10&lt;/p&gt;
&lt;p&gt;二进制0b1&lt;/p&gt;
&lt;p&gt;1.十进制到其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;oct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#-&amp;gt;8&lt;/span&gt;
&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#-&amp;gt;16&lt;/span&gt;
&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#-&amp;gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接收一个整型对象（任意进制），返回对应值的字符串&lt;/p&gt;
&lt;p&gt;2.其他到十进制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#或者&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;o100&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="mb"&gt;0b1000&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;1.小整数缓存&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = -5
&amp;gt;&amp;gt;&amp;gt; b = -5
&amp;gt;&amp;gt;&amp;gt; a  is b
True
&amp;gt;&amp;gt;&amp;gt; a = -6
&amp;gt;&amp;gt;&amp;gt; b = -6
&amp;gt;&amp;gt;&amp;gt; a is b
False
&amp;gt;&amp;gt;&amp;gt; a = -6
&amp;gt;&amp;gt;&amp;gt; b = -6
&amp;gt;&amp;gt;&amp;gt; a is b
False
&amp;gt;&amp;gt;&amp;gt; a = 256
&amp;gt;&amp;gt;&amp;gt; b = 256
&amp;gt;&amp;gt;&amp;gt; a is b
True
&amp;gt;&amp;gt;&amp;gt; a = 257
&amp;gt;&amp;gt;&amp;gt; b = 257
&amp;gt;&amp;gt;&amp;gt; a  is b
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看python源代码可知，下限-5，上限256被设定为缓存范围。&lt;/p&gt;
&lt;p&gt;2.除法
关于传统除法/真正除法/地板除
传统除法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 1/2
0
&amp;gt;&amp;gt;&amp;gt; 1.0/2.0
0.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;真正除法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;地板除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 1//2
0
&amp;gt;&amp;gt;&amp;gt; 1.0//2.0
0.0
&amp;gt;&amp;gt;&amp;gt; -1//2
-1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chang-yong-mo-kuai"&gt;常用模块&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;math
random
decimal
operator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下一篇数学常用模块中说明&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-09&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-基础-元组小结</title><link href="http://www.wklken.me/posts/2013/03/09/python-base-tuple.html" rel="alternate"></link><published>2013-03-09T00:00:00+08:00</published><updated>2013-03-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-tuple.html</id><summary type="html">&lt;h2 id="yuan-zu"&gt;元组&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;tuple&lt;/p&gt;
&lt;p&gt;1.元组是以圆括号“()”包围的数据集合，不同成员以“,”分隔。通过下标进行访问&lt;/p&gt;
&lt;p&gt;2.不可变序列，可以看做不可变的列表，与列表不同：元组中数据一旦确立就不能改变（所以没有类似列表的增删改操作，只有基本序列操作）&lt;/p&gt;
&lt;p&gt;3.支持任意类型，任意嵌套以及常见的序列操作&lt;/p&gt;
&lt;p&gt;4.元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变&lt;/p&gt;
&lt;h3 id="sheng-ming-ji-shi-yong"&gt;声明及使用&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#空元组&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  &lt;span class="c1"&gt;#单个元素元组，注意逗号必须&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c1"&gt;#判断&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="c1"&gt;#其他同序列基本操作：分片，索引&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="yuan-zu"&gt;元组&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;tuple&lt;/p&gt;
&lt;p&gt;1.元组是以圆括号“()”包围的数据集合，不同成员以“,”分隔。通过下标进行访问&lt;/p&gt;
&lt;p&gt;2.不可变序列，可以看做不可变的列表，与列表不同：元组中数据一旦确立就不能改变（所以没有类似列表的增删改操作，只有基本序列操作）&lt;/p&gt;
&lt;p&gt;3.支持任意类型，任意嵌套以及常见的序列操作&lt;/p&gt;
&lt;p&gt;4.元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变&lt;/p&gt;
&lt;h3 id="sheng-ming-ji-shi-yong"&gt;声明及使用&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#空元组&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  &lt;span class="c1"&gt;#单个元素元组，注意逗号必须&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c1"&gt;#判断&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="c1"&gt;#其他同序列基本操作：分片，索引&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#不会对原来元组造成影响&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#返回新元组(1,2,3,4,5)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="c1"&gt;#(1,2,3,1,2,3)&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#列表元组转换&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lt_sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#对元组进行排序，返回是列表&lt;/span&gt;

&lt;span class="c1"&gt;#字符串转元组(得到字符元组序列)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello)   #('&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="s1"&gt;')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tuple没有append/extend/remove/pop等增删改操作
tuple没有find&lt;/p&gt;
&lt;p&gt;查看帮助&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yong-tu"&gt;用途&lt;/h3&gt;
&lt;p&gt;1.赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="c1"&gt;#等价 t = (1, 2, 3)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;   &lt;span class="c1"&gt;#序列拆封，要求左侧变量数目和右侧序列长度相等&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.函数多个返回值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.传参[强制不改变原始序列]&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#或者t = l[:]&lt;/span&gt;
    &lt;span class="n"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.字符串格式化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; years old'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.作为字典的key&lt;/p&gt;
&lt;h3 id="you-dian"&gt;优点&lt;/h3&gt;
&lt;p&gt;1.性能&lt;/p&gt;
&lt;p&gt;tuple比列表操作速度快&lt;/p&gt;
&lt;p&gt;若需要定义一个常量集，或者是只读序列，唯一的操作是不断遍历之，使用tuple代替list&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_t&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_l&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test_t()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"from __main__ import test_t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test_l()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"from __main__ import test_l"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; at.repeat(3, 100000)
[1.526214838027954, 1.5191287994384766, 1.5181210041046143]

&amp;gt;&amp;gt;&amp;gt; bt.repeat(3, 100000)
[1.5545141696929932, 1.557785987854004, 1.5511009693145752]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.不可变性&lt;/p&gt;
&lt;p&gt;对不需要的数据进行“写保护”，使代码更加安全&lt;/p&gt;
&lt;p&gt;不可变性，若在程序中以列表形式传递对象集合，可能在任何地方被改变，使用元组，则不能&lt;/p&gt;
&lt;p&gt;不可变性只适用于元组本身顶层而非其内容，例如元组内部的列表可以修改&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不可变性提供了某种完整性，规范化，确保不会被修改，保持某种固定关系&lt;/p&gt;
&lt;p&gt;修改的方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tuple -&amp;gt; list -&amp;gt; tuple
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bu-chong"&gt;补充&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;元组定义易错点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2013-08-31&lt;/p&gt;
&lt;p&gt;一个和多个的区别是定义1个后面必须有","否则就是 类型 "str"&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; t = ("a")
&amp;gt;&amp;gt;&amp;gt; type (t)
&amp;lt;type 'str'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; t = ("a",)
&amp;gt;&amp;gt;&amp;gt; type (t)
&amp;lt;type 'tuple'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; t = ("a","b")
&amp;gt;&amp;gt;&amp;gt; type (t)
&amp;lt;type 'tuple'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; t = "a",
&amp;gt;&amp;gt;&amp;gt; type(t)
&amp;lt;type 'tuple'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;To be continue&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Blog:  http://blog.csdn.net/wklken&lt;/p&gt;
&lt;p&gt;2013-03-09&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢&lt;/p&gt;</content><category term="python"></category></entry><entry><title>写在2012结尾，2013的开始</title><link href="http://www.wklken.me/posts/2013/01/02/summary-06-2012end2013begin.html" rel="alternate"></link><published>2013-01-02T00:00:00+08:00</published><updated>2013-01-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-01-02:/posts/2013/01/02/summary-06-2012end2013begin.html</id><summary type="html">&lt;p&gt;本来已经关电脑了，发现似乎落了些什么，想着昨晚似乎没有像以往写下总结，记录一些东西。&lt;/p&gt;
&lt;p&gt;看了下去年的总结: &lt;a href="http://wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html"&gt;地址&lt;/a&gt;,那时刚工作不久，感觉写的还是很不错的。每每回顾，总感觉过去的自己做得比现在好。难道老了么。。。。。&lt;/p&gt;
&lt;p&gt;既然去年标题，今年也俗一下，写在2012的结尾，2013的开始。虽然是补的。
思维有些跳跃，很少吃油条，纯粹是跳跃 &amp;gt; - &amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这一年做了什么呢？&lt;/p&gt;
&lt;p&gt;十月以前，没日没夜没心没肺开开心心过了玩玩整整的十个月，工作生活学习，充实，开心。&lt;/p&gt;
&lt;p&gt;工作上逐渐熟悉大部分东西了，做事效率什么的也上去了，所以过的也还算轻松。&lt;/p&gt;
&lt;p&gt;工具是提高生产力的方式之一。期间继续捣鼓一些工具脚本，有几个还算满意，有几个折戟沉沙颇为可惜。搞完了vim第一版本配置，搞完第一版alias。搞完了sublimetext2首个配置，开始玩github，dropbox+金山快盘+有道笔记。&lt;/p&gt;
&lt;p&gt;也瞎折腾了一些东西，注册SAE，搞了个开发者身份，迁移东西，搞了自己的域名和博客，瞎折腾。&lt;/p&gt;
&lt;p&gt;然后就是，感觉毕业快一年了，好多东西生疏了，买了几本数据结构和算法的书，同时开始看开放课 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;本来已经关电脑了，发现似乎落了些什么，想着昨晚似乎没有像以往写下总结，记录一些东西。&lt;/p&gt;
&lt;p&gt;看了下去年的总结: &lt;a href="http://wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html"&gt;地址&lt;/a&gt;,那时刚工作不久，感觉写的还是很不错的。每每回顾，总感觉过去的自己做得比现在好。难道老了么。。。。。&lt;/p&gt;
&lt;p&gt;既然去年标题，今年也俗一下，写在2012的结尾，2013的开始。虽然是补的。
思维有些跳跃，很少吃油条，纯粹是跳跃 &amp;gt; - &amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这一年做了什么呢？&lt;/p&gt;
&lt;p&gt;十月以前，没日没夜没心没肺开开心心过了玩玩整整的十个月，工作生活学习，充实，开心。&lt;/p&gt;
&lt;p&gt;工作上逐渐熟悉大部分东西了，做事效率什么的也上去了，所以过的也还算轻松。&lt;/p&gt;
&lt;p&gt;工具是提高生产力的方式之一。期间继续捣鼓一些工具脚本，有几个还算满意，有几个折戟沉沙颇为可惜。搞完了vim第一版本配置，搞完第一版alias。搞完了sublimetext2首个配置，开始玩github，dropbox+金山快盘+有道笔记。&lt;/p&gt;
&lt;p&gt;也瞎折腾了一些东西，注册SAE，搞了个开发者身份，迁移东西，搞了自己的域名和博客，瞎折腾。&lt;/p&gt;
&lt;p&gt;然后就是，感觉毕业快一年了，好多东西生疏了，买了几本数据结构和算法的书，同时开始看开放课，博客上也陆续扯了点东西，可惜看着看着直感叹大学白读了。唉。过了那么久，其实剩下的才是真正学到的，忘了的，就忘了吧，最大收获就是，复习后，对很多东西有了重新的认识，会从其他角度来看待问题吧。&lt;/p&gt;
&lt;p&gt;年后回来买了个两轮的车，从此周末的1／2不宅了，每周有了新项目，晨起冲山，每每累趴了，饿过了都暗暗发誓lz以后再也不来了，结果下周末又是屁颠屁颠往山里钻。其实每周出去逛逛挺好，目前深有感触，感觉现在深度宅了，很怀念那段山里的日子。每次从山里出来，无论在哪个口，都习惯性跑西湖边逛一圈，然后回公司蹭个水，上上网。现在回想起来，其实杭州大部分景点都去过了，不过，都是路过.....&lt;/p&gt;
&lt;p&gt;然后，是七月，工作满一周年，一年香是什么感觉呢？不好说，不过很难忘。对自个一年理了理，工作一年也算收获颇多，逐渐适应了那环境和氛围，也认同和接受那里的一切，然后那时候想，接着干，三年醇。哪想，生活总是存在变数的。&lt;/p&gt;
&lt;p&gt;那时候貌似开始要写日报，每天干干活，总要对自己今天做了什么进行思考，然后，想着想着，每天有收获，但是似乎不多，每每对自己说，熟悉了，要有更多的收获，往往比较困难，但是似乎这很难说服自己，有些迷茫吧，不过迷茫归迷茫，生活还得继续，做好当下认为正确的事情。继续埋头捣鼓代码。&lt;/p&gt;
&lt;p&gt;工作也还算顺利，和很多人合作都很愉快，所以效率还好，压力一般，状态不错，很怀念。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;然后，到了十月。&lt;/p&gt;
&lt;p&gt;十月，或者注定不会平静。&lt;/p&gt;
&lt;p&gt;有个大会召开了，然后哥激动地去膜拜了一把大神，虽然是远程视频，回头看看，虽然自己喜欢一样东西，业余搞一搞，用得也还算顺风顺水，但是和专业的一比，微不足道，有种从自我感觉良好直接被打落凡尘的挫败感。&lt;/p&gt;
&lt;p&gt;事实是，这回打击大了..........唉，你妹的纯属自虐。&lt;/p&gt;
&lt;p&gt;前前后后想了几天，发现，目前情况继续下去，永远菜鸟水准，当然，这时候相对比较狭隘吧，只追求技术方面的。&lt;/p&gt;
&lt;p&gt;然后，花了两个钟头，在博客上写了类似自荐的简历，然后扔了出去。&lt;/p&gt;
&lt;p&gt;然后，六天时间，面了三家，都拿到offer。&lt;/p&gt;
&lt;p&gt;然后，是最煎熬的时候，选择，是走，是留，去哪，何去何从。&lt;/p&gt;
&lt;p&gt;我只想说，这五天，是我最煎熬的时刻。&lt;/p&gt;
&lt;p&gt;抉择，总是艰难的吧，这个，真不好选。&lt;/p&gt;
&lt;p&gt;然后，是做决定。&lt;/p&gt;
&lt;p&gt;从开始，到结束，十一天整。&lt;/p&gt;
&lt;p&gt;那句很土的话，我猜得到开始，却猜不到结局。&lt;/p&gt;
&lt;p&gt;决定，总是要做的。唉。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;十一月，是我最后一个月，把离别的愁絮扔到脑后，最后的时光。&lt;/p&gt;
&lt;p&gt;善始善终，不留遗憾，做事原则吧。&lt;/p&gt;
&lt;p&gt;当最后踏出公司，想想要离开自己这熟悉的一切，这里的人，这里的事，心中还是很不舍的。&lt;/p&gt;
&lt;p&gt;这一年，要感谢的人很多，主管，同事，对应的开发.........&lt;/p&gt;
&lt;p&gt;感谢，这里所有的人，所有的一切。&lt;/p&gt;
&lt;p&gt;Thank you , for everything.&lt;/p&gt;
&lt;p&gt;PS：写了一个很长的邮件，回头看了下，有点糗，但是那时心境，也就释然，发了篇博文还被秒杀了，真心不爽，所以决定写到自己的地盘去.........&lt;/p&gt;
&lt;p&gt;第二天，飞机南飘。&lt;/p&gt;
&lt;p&gt;第四天，入职。&lt;/p&gt;
&lt;p&gt;十二月，入职，干活，第一个月还算顺利，该搞定的都搞定了，开始适应吧，每天多出来好几个钟头，却又开始迷茫了，主要原因是不知道怎么花。尼玛没时间迷茫，有时间还迷茫，这叫个什么事呀。&lt;/p&gt;
&lt;p&gt;这几天继续思考吧，好好规划规划时间的花法。&lt;/p&gt;
&lt;p&gt;为何十一月十二月写的那么少，这两个月发生了太多的事情，很多记忆，太过深刻。每每，还没从原来的状态中恢复。&lt;/p&gt;
&lt;p&gt;好吧，我是鸵鸟，在回避一些感觉。&lt;/p&gt;
&lt;p&gt;南下，带了一本相册，几本书，一箱衣服。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2012&lt;/p&gt;
&lt;p&gt;2012，工作满一年了，收获很多。&lt;/p&gt;
&lt;p&gt;2012，做很多事，见很多人，读很多书，第二个不及格，两外两个勉强80.&lt;/p&gt;
&lt;p&gt;2012，折腾了很多东西，时间有浪费了，也有不浪费的，大多东西没瞎折腾。&lt;/p&gt;
&lt;p&gt;2012，想要做一些事情，跳槽了，告别了一些人，离开了一个地方，到了另一个地方，去做一些事情。&lt;/p&gt;
&lt;p&gt;2012，12月21日，活下来了，说好的末日呢？&lt;/p&gt;
&lt;p&gt;2012，刷微博，看网易成了每天日常，也同步了这一年发生的几乎所有大小事，有丑陋，也有美好&lt;/p&gt;
&lt;p&gt;2012，尾巴，从win彻底迁linux，发现没啥不便，彻底无弹窗广告了.....&lt;/p&gt;
&lt;p&gt;2012，很多事情依旧没有想清楚&lt;/p&gt;
&lt;p&gt;2012，依旧单身，唉&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;p&gt;命运感觉是很奇妙的东西，是你决定又不是你决定，就像当年高考差了一分，然后，哥孤身杀到了山东。就像那次去笔试，已然迟到了，但是还是去试了，结果到了杭州，然后是十月，这青黄不接竟然让我面上了，然后来了深圳。&lt;/p&gt;
&lt;p&gt;是你决定，却又不是你决定的东西&lt;/p&gt;
&lt;p&gt;其实，很多时候我在想，自己要什么？而大多数时候，这个问题是无解的，很难明确出一些事情。&lt;/p&gt;
&lt;p&gt;INTJ，注定的独行者，性格如此，别无他法，只能继续。&lt;/p&gt;
&lt;p&gt;做决定，跟着自己内心的直觉走吧，以前感觉乔帮主的follow your heart有点虚，但是实际经历，发现这个很重要，还是那句话，既然选择了远方，便只顾风雨兼程。&lt;/p&gt;
&lt;p&gt;2013，好吧，这是我经历第一个四个数不一样的年。&lt;/p&gt;
&lt;p&gt;90后都出来混职场了，真心觉得老了。&lt;/p&gt;
&lt;p&gt;还没想好，目前挂着Python后台开发的头衔，当然，是初级的，继续搞Python，也要去搞Go，还要去深入linux，总之，这块，很忙。打算自己搞个blog，迁走，更自由吧。另外开始读源码，写些东西，参与开源的项目。然后，要去做题刷题，继续啃书。然后，争取今年不过双十一,目测有点难度的.....&lt;/p&gt;
&lt;p&gt;然后，祝大伙新年快乐吧，今天2号，不算太迟:)&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-01-02 00:45 于深圳&lt;/p&gt;</content><category term="总结，程序人生"></category></entry><entry><title>Python-基础-列表及列表解析小结</title><link href="http://www.wklken.me/posts/2012/12/30/python-base-list.html" rel="alternate"></link><published>2012-12-30T00:00:00+08:00</published><updated>2012-12-30T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-12-30:/posts/2012/12/30/python-base-list.html</id><summary type="html">&lt;h2 id="lie-biao-ji-lie-biao-jie-xi"&gt;列表及列表解析&lt;/h2&gt;
&lt;p&gt;发现要到2013了，这两个月，离职入职，忙七忙八的，博文少了好多，笔记到是一大堆。
最近开始整理书签，微博收藏以及笔记梳理
采用删的方式，就是在evernote中新建一片，然后捞对应的笔记，一点点总结梳理，删除原有的笔记，发现这样效率高些（原来是在原有笔记之上直接修改总结，发现有用的信息其实并不多，效率有点低）&lt;/p&gt;
&lt;p&gt;相对而言比较全和有用，会持续优化。&lt;/p&gt;
&lt;p&gt;2013，发完这个系列的博客之后，将会整个博客迁移到自己的博客（刚开始写...），后续将同步吧，不过csdn可能会慢一些，自己blog会更自由些。后续将会是python&amp;amp;框架,linux后台开发，Go等等其他。&lt;/p&gt;
&lt;p&gt;不扯了，看正题
以下是对列表笔记梳理的第一个版本，仅供参考&lt;/p&gt;
&lt;p&gt;资料来源于书籍，网络，个人练习等等&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#author:wklken
#version: 1.0
#date: 2012-12-30
#history:
  2012-12-30  created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-yi"&gt;定义：&lt;/h3&gt;
&lt;p&gt;列表是Python中使用最频繁的数据类型 …&lt;/p&gt;</summary><content type="html">&lt;h2 id="lie-biao-ji-lie-biao-jie-xi"&gt;列表及列表解析&lt;/h2&gt;
&lt;p&gt;发现要到2013了，这两个月，离职入职，忙七忙八的，博文少了好多，笔记到是一大堆。
最近开始整理书签，微博收藏以及笔记梳理
采用删的方式，就是在evernote中新建一片，然后捞对应的笔记，一点点总结梳理，删除原有的笔记，发现这样效率高些（原来是在原有笔记之上直接修改总结，发现有用的信息其实并不多，效率有点低）&lt;/p&gt;
&lt;p&gt;相对而言比较全和有用，会持续优化。&lt;/p&gt;
&lt;p&gt;2013，发完这个系列的博客之后，将会整个博客迁移到自己的博客（刚开始写...），后续将同步吧，不过csdn可能会慢一些，自己blog会更自由些。后续将会是python&amp;amp;框架,linux后台开发，Go等等其他。&lt;/p&gt;
&lt;p&gt;不扯了，看正题
以下是对列表笔记梳理的第一个版本，仅供参考&lt;/p&gt;
&lt;p&gt;资料来源于书籍，网络，个人练习等等&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#author:wklken
#version: 1.0
#date: 2012-12-30
#history:
  2012-12-30  created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-yi"&gt;定义：&lt;/h3&gt;
&lt;p&gt;列表是Python中使用最频繁的数据类型【可以说没有之一】&lt;/p&gt;
&lt;p&gt;关键词：有序，可变&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;一组有序项目的集合
&amp;gt;可变的数据类型【可进行增删改查】
&amp;gt;列表中可以包含任何数据类型，也可包含另一个列表【可任意组合嵌套】
&amp;gt;列表是以方括号“ []”包围的数据集合，不同成员以“ ,”分隔
&amp;gt;列表可通过序号访问其中成员
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看帮助 : help(list)&lt;/p&gt;
&lt;h3 id="chang-jian-de-lie-biao-cao-zuo"&gt;常见的列表操作&lt;/h3&gt;
&lt;h4 id="sheng-ming-chuang-jian"&gt;声明&amp;amp;创建&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;    &lt;span class="c1"&gt;#空列表&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;#得到 ['h', 'e', 'l', 'l', 'o']&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;#[0, 1, 2, 3]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1,2,3,4,5'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#['1', '2', '3', '4', '5']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内建函数list(a_sequence) 可以将一个序列转为列表&lt;/p&gt;
&lt;p&gt;通过下标访问&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;l = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt;l[0]  #1
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zeng-jia-yuan-su"&gt;增加元素&lt;/h4&gt;
&lt;p&gt;A.新加入一个元素append&lt;/p&gt;
&lt;p&gt;append方法添加。它在原列表末尾添加一个 item， item类型可以是任意的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#得到 [1, 2, 3, 'hello']&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;span class="c1"&gt;#得到 [1, 2, 3, 'hello', ['hello']]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.插入一个元素insert&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;#[1, 9, 2, 3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C.两个列表相加
两种方式
第一种&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#这种方式,l1不变，二者返回新的列表，当列表很长时，会消耗大量内存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二种(必须接收一个参数，且是另一个列表)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;#直接扩增l1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等价的做法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;梳理：&lt;/p&gt;
&lt;p&gt;s.append(x)&lt;/p&gt;
&lt;p&gt;same as s[len(s):len(s)] = [x] 在列表尾部追加单个对象x。使用多个参数会引起异常。&lt;/p&gt;
&lt;p&gt;s.extend(x)&lt;/p&gt;
&lt;p&gt;same as s[len(s):len(s)] = x将列表L中的表项添加到列表中。返回None。&lt;/p&gt;
&lt;p&gt;s.insert(i, x)&lt;/p&gt;
&lt;p&gt;same as s[i:i] = [x] 在索引为i的元素前插入对象x。如list.insert(0,x)在第一项前插入对象。返回None。&lt;/p&gt;
&lt;h4 id="shan-chu-yuan-su"&gt;删除元素&lt;/h4&gt;
&lt;p&gt;A.按item的索引或切片删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;#得到[2, 3, 4, 5, 6]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#得到[4, 5, 6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.按item的值进行删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#得到[2,3,1,2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若是remove对应值查无，将跑ValueError&lt;/p&gt;
&lt;p&gt;C.删除某个位置并返回该位置值&lt;/p&gt;
&lt;p&gt;pop若是不传位置参数，默认删除列表最后一个元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#a=2&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;#a=5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;梳理:&lt;/p&gt;
&lt;p&gt;s.pop([i])&lt;/p&gt;
&lt;p&gt;same as x = s[i]; del s[i]; return x删除列表中索引为x的表项，并返回该表项的值。若未指定索引，pop返回列表最后一项。&lt;/p&gt;
&lt;p&gt;s.remove(x)&lt;/p&gt;
&lt;p&gt;same as del s[s.index(x)] 删除列表中匹配对象x的第一个元素。匹配元素时产生异常。返回None。&lt;/p&gt;
&lt;p&gt;del s[i:j]&lt;/p&gt;
&lt;p&gt;same as s[i:j] = []&lt;/p&gt;
&lt;h4 id="xiu-gai-yuan-su"&gt;修改元素&lt;/h4&gt;
&lt;p&gt;对指定索引进行赋值操作&lt;/p&gt;
&lt;p&gt;A.某个元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="c1"&gt;#[0,2,3,4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.某一段元素&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#[7,8,9,3,4]&lt;/span&gt;

&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;   &lt;span class="c1"&gt;#清空了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;梳理：&lt;/p&gt;
&lt;p&gt;s[i] = x&lt;/p&gt;
&lt;p&gt;item i of s is replaced by x&lt;/p&gt;
&lt;p&gt;s[i:j] = t&lt;/p&gt;
&lt;p&gt;slice of s from i to j is replaced by the contents of the iterable t&lt;/p&gt;
&lt;p&gt;5.切片和索引&lt;/p&gt;
&lt;p&gt;A.索引l[i]&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#1&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#5，负数的索引从尾部开始计数,最后一个元素为-1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.切片l[i:j:k]
i,j,k可选，冒号必须的 i不指定默认0，j不指定默认序列尾，k不指定默认1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;#[1, 2],   取区间[i,j) ，左闭右开&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;#同上，可省略第一位&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;     &lt;span class="c1"&gt;#[3, 4, 5, 6, 7, 8, 9, 10, 11]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;#[3, 4, 5, 6, 7, 8, 9, 10]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;       &lt;span class="c1"&gt;#同l1，相当于复制一份&lt;/span&gt;

&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;#步长2，[1, 3, 5, 7, 9, 11]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#[1, 3, 5, 7]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#[8, 6, 4, 2]   注意步长为负、理解起来相当于从7到1，倒序步长2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="pai-xu"&gt;排序&lt;/h4&gt;
&lt;p&gt;A.原地排list.sort()&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;#得到[1,2,3,4,5,6]   默认升序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sort可接受参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp，比较函数，接受两个参数,小于时返回负，大于返回正，相等返回0
key，指定排序键
reverse，指定是否反序
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表的比较操作 , 隐式调用cmp 方法 , 比较规则是逐个扫描元素 , 进行比较, 如果可以比较 , 比较, 如果相等扫描下一个元素 , 如果不相等返回结果 , 如果两个元素类型不可以比较 , 就比较两个对象的 id()值 .. 如果一直相等 ,直到一个列表扫描结束 , 那么返回较长的列表较大&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; l1 = [(1,99),(3,97),(2,98),(4,96)]
&amp;gt;&amp;gt;&amp;gt; l1.sort(key=lambda x: x[1])
&amp;gt;&amp;gt;&amp;gt; l1
[(4, 96), (3, 97), (2, 98), (1, 99)]
&amp;gt;&amp;gt;&amp;gt; l1.sort(key=lambda x: x[1], reverse=True)
&amp;gt;&amp;gt;&amp;gt; l1
[(1, 99), (2, 98), (3, 97), (4, 96)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.sorted函数&lt;/p&gt;
&lt;p&gt;sorted(l1)   #返回l1的有序序列，l1不变&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C.反序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#l1反序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#返回一个iterator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;l[::-1]可以达到一样的效果，但是这个是返回一个新的列表&lt;/p&gt;
&lt;p&gt;梳理：&lt;/p&gt;
&lt;p&gt;sort  sorted 区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort:     在原 list 上排序，不返回排序后的 list
sorted: 不改变原 list ，返回排序后的 list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s.reverse()&lt;/p&gt;
&lt;p&gt;reverses the items of s in place颠倒列表元素的顺序。&lt;/p&gt;
&lt;p&gt;s.sort([cmp[, key[, reverse]]])&lt;/p&gt;
&lt;p&gt;sort the items of s in place对列表排序，返回none。bisect模块可用于排序列表项的添加和删除。&lt;/p&gt;
&lt;h4 id="cha-zhao-he-tong-ji"&gt;查找和统计&lt;/h4&gt;
&lt;p&gt;A.包含判断in ,not in&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;  &lt;span class="c1"&gt;#True&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="c1"&gt;#False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.查询位置索引index&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l1 = [1, 2, 3, 4]
l1.index(1)    #0
&amp;gt;&amp;gt;&amp;gt; l1.index(5)    #特别注意，当值不存在于列表，用index将抛ValueError

Traceback (most recent call last):
  File "&amp;lt;pyshell#44&amp;gt;", line 1, in &amp;lt;module&amp;gt;
    l1.index(5)
ValueError: 5 is not in list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C.统计一个元素的出现次数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;#2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;梳理：&lt;/p&gt;
&lt;p&gt;s.count(x)&lt;/p&gt;
&lt;p&gt;return number of i's for which s[i] == x返回对象x在列表中出现的次数。&lt;/p&gt;
&lt;p&gt;s.index(x[, i[, j]])&lt;/p&gt;
&lt;p&gt;return smallest k such that s[k] == x and i &amp;lt;= k &amp;lt; j返回列表中匹配对象x的第一个列表项的索引。无匹配元素时产生异常。&lt;/p&gt;
&lt;h4 id="bian-li-lie-biao"&gt;遍历列表&lt;/h4&gt;
&lt;p&gt;A.直接&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.需要索引位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9.其他操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;len(l)   #列表长度
l*3 重复
l1 = [1, 2]
l1*3   #[1,2,1,2,1,2]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;清空列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：在操作list时，如果是涉及原地修改的操作，例如append,insert等，返回值是None
要防止出现这种语法   l1 = l1.append('a')  ，如果这样，你将得到None.......&lt;/p&gt;
&lt;h3 id="lie-biao-jie-xi_1"&gt;列表解析&lt;/h3&gt;
&lt;h4 id="ding-yi-he-shuo-ming"&gt;定义和说明&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;Python 的强大特性之一是其对 list 的解析，它提供一种紧凑的方法，可以通过对 list 中的每个元素应用一个函数，从而将一个 list 映射为另一个 list。
&amp;gt;列表解析，又叫列表推导式( list comprehension)
&amp;gt;列表解析比 for 更精简，运行更快，特别是对于较大的数据集合
&amp;gt;列表解析可以替代绝大多数需要用到 map和 filter的场合
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表推导式提供了一个创建链表的简单途径，无需使用 map() ， filter() 以及 lambda 。以定义方式得到列表通常要比使用构造函数创建这些列表更清晰。每一个列表推导式包括在一个 for 语句之后的表达式，零或多个 for 或 if 语句。返回值是由 for 或 if 子句之后的表达式得到的元素组成的列表。如果想要得到一个元组，必须要加上括号。&lt;/p&gt;
&lt;h4 id="ji-ben-lie-biao-jie-xi"&gt;基本列表解析&lt;/h4&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; [x for x in range(5)]   # [0, 1, 2, 3, 4]
l1 = [1,2,3,4]
[ x*2 for x in l1]   #[2,4,6,8]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多个值的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两次循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; l1 = [1,2,3,4]
&amp;gt;&amp;gt;&amp;gt; l2 = [1,2,3,4]
&amp;gt;&amp;gt;&amp;gt; [x+y for x in l1 for y in l2]
[2, 3, 4, 5, 3, 4, 5, 6, 4, 5, 6, 7, 5, 6, 7, 8]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以调用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#等价于map&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，列表解析不会改变原有列表的值，会创建新的list&lt;/p&gt;
&lt;h4 id="tiao-jian-lie-biao-jie-xi"&gt;条件列表解析&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="qian-tao-lie-biao-jie-xi"&gt;嵌套列表解析&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;交换行列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;#[[1, 4, 7], [2, 5, 8], [3, 6, 9]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta_1"&gt;其他：&lt;/h3&gt;
&lt;p&gt;1.根据索引取元素时，需要进行边界检查  IndexError
   切片取，不需要，超过边界不会异常&lt;/p&gt;
&lt;p&gt;2.在迭代中修改列表
   注意，不安全，不建议这么干
但是可以
   for i in l1[:]:
          l1.insert()......&lt;/p&gt;
&lt;p&gt;3.多个list合成一个
就是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;['a','b',.....],['a','b'.....]['a','b'.....]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;['a','b',.....,'a','b'.....'a','b'.....]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sum ([[ 'a', 'b' ],['a' , 'b'],[ 'a' ,'b' ]], [])
['a' , 'b' , 'a', 'b' , 'a' , 'b']
&amp;gt;&amp;gt;&amp;gt; list (itertools .chain([ 'a' ,'b' ],[ 'a', 'b' ],['a' , 'b']))
['a' , 'b' , 'a', 'b' , 'a' , 'b']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.关于堆栈和队列&lt;/p&gt;
&lt;p&gt;通过上面的操作，可以发现，很轻易可以拿列表当做堆栈或者队列使用&lt;/p&gt;
&lt;p&gt;当然，他们有自己的模块，可以查相关库&lt;/p&gt;
&lt;p&gt;5.序列相关模块&lt;/p&gt;
&lt;p&gt;array 一种受限制可变序列类型，要求所有元素必须是相同类型&lt;/p&gt;
&lt;p&gt;copy 提供浅拷贝和深拷贝的能力&lt;/p&gt;
&lt;p&gt;operator 包含函数调用形式的序列操作符，如 operator.concat(m,n) 相当于m+n&lt;/p&gt;
&lt;p&gt;re 正则表达式&lt;/p&gt;
&lt;p&gt;types 包含Python 支持的所有类型&lt;/p&gt;
&lt;p&gt;collections 高性能容器数据类型&lt;/p&gt;
&lt;h3 id="bu-chong"&gt;补充&lt;/h3&gt;
&lt;p&gt;2013-09-01 二维数组初始化陷阱&lt;/p&gt;
&lt;p&gt;对一维数组，可以这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lst =[0]*3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是对二维数组，不成立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; lst_2d =[[0]*3]*3
&amp;gt;&amp;gt;&amp;gt; lst_2d
[[0,0,0],[0,0,0],[0,0,0]]
&amp;gt;&amp;gt;&amp;gt; lst_2d[0][0]=5
&amp;gt;&amp;gt;&amp;gt; lst_2d
[[5,0,0],[5,0,0],[5,0,0]]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二维数组，可以这么做&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; lst_2d = [[0] * 3 for i in xrange(3)]
&amp;gt;&amp;gt;&amp;gt; lst_2d
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&amp;gt;&amp;gt;&amp;gt; lst_2d[0][0] = 5
&amp;gt;&amp;gt;&amp;gt; lst_2d
[[5, 0, 0], [0, 0, 0], [0, 0, 0]]
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Gighub: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.sinaapp.com/&lt;/p&gt;
&lt;p&gt;2012-12-30&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>关于测试开发及其他——写在离职之前</title><link href="http://www.wklken.me/posts/2012/11/28/summary-05-quitfirstjob.html" rel="alternate"></link><published>2012-11-28T00:00:00+08:00</published><updated>2012-11-28T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-11-28:/posts/2012/11/28/summary-05-quitfirstjob.html</id><summary type="html">&lt;p&gt;前面&lt;/p&gt;
&lt;p&gt;在入职一周年的时候，写过一些东西，有过一些思考。&lt;/p&gt;
&lt;p&gt;而在一个月前，花了六天，投了下简历，花了五天，思考，抉择。&lt;/p&gt;
&lt;p&gt;虽然要投身入另一个地方，不再搞测试开发，但是，工作十六个月迄今，还是有一些感受的。&lt;/p&gt;
&lt;p&gt;所以，想针对这个，说说一些个人看法，仅供参考。&lt;/p&gt;
&lt;p&gt;（SDET，测试开发，但是貌似实际工作和字面理解还是有些差距的，工作时，角色更像QA+Tester，实际工作中，被称为QA......其实我还是喜欢SDET多些）&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作为测试这一年多（准确来说16个月）：&lt;/p&gt;
&lt;p&gt;有为了赶进度，和开发一起加班到凌晨两点的时候&lt;/p&gt;
&lt;p&gt;有深夜上线，一大早又起来冒烟的时候(冬天很痛苦)&lt;/p&gt;
&lt;p&gt;有要开发帮忙搭环境，拉数据，查问题的时候&lt;/p&gt;
&lt;p&gt;有经历各种问题，挖出一个潜伏很深的bug的时候&lt;/p&gt;
&lt;p&gt;有误提bug导致开发查老半天的时候（面壁面壁）&lt;/p&gt;
&lt;p&gt;有搭环境搭到抓狂的时候&lt;/p&gt;
&lt;p&gt;有为了提高效率（不加班），狂写工具的时候&lt;/p&gt;
&lt;p&gt;也会偶尔测漏，郁闷的时候&lt;/p&gt;
&lt;p&gt;当然，也会吐吐槽 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;前面&lt;/p&gt;
&lt;p&gt;在入职一周年的时候，写过一些东西，有过一些思考。&lt;/p&gt;
&lt;p&gt;而在一个月前，花了六天，投了下简历，花了五天，思考，抉择。&lt;/p&gt;
&lt;p&gt;虽然要投身入另一个地方，不再搞测试开发，但是，工作十六个月迄今，还是有一些感受的。&lt;/p&gt;
&lt;p&gt;所以，想针对这个，说说一些个人看法，仅供参考。&lt;/p&gt;
&lt;p&gt;（SDET，测试开发，但是貌似实际工作和字面理解还是有些差距的，工作时，角色更像QA+Tester，实际工作中，被称为QA......其实我还是喜欢SDET多些）&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作为测试这一年多（准确来说16个月）：&lt;/p&gt;
&lt;p&gt;有为了赶进度，和开发一起加班到凌晨两点的时候&lt;/p&gt;
&lt;p&gt;有深夜上线，一大早又起来冒烟的时候(冬天很痛苦)&lt;/p&gt;
&lt;p&gt;有要开发帮忙搭环境，拉数据，查问题的时候&lt;/p&gt;
&lt;p&gt;有经历各种问题，挖出一个潜伏很深的bug的时候&lt;/p&gt;
&lt;p&gt;有误提bug导致开发查老半天的时候（面壁面壁）&lt;/p&gt;
&lt;p&gt;有搭环境搭到抓狂的时候&lt;/p&gt;
&lt;p&gt;有为了提高效率（不加班），狂写工具的时候&lt;/p&gt;
&lt;p&gt;也会偶尔测漏，郁闷的时候&lt;/p&gt;
&lt;p&gt;当然，也会吐吐槽，某个项目或某些流程很让人蛋疼&lt;/p&gt;
&lt;p&gt;一年多，经历了很多事情，接触了很多开发，接触了很多测试，无论是开发和测试，都很nice，合作也很愉快，一年多下来，自认做到了“靠谱”二字，侥幸，一年多经手测试没出过测漏故障。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于开发：&lt;/p&gt;
&lt;p&gt;开发，我划分了三类&lt;/p&gt;
&lt;p&gt;一种，完美型，这类开发，对自己要求十分严格，思维严谨，逻辑清晰，严格遵守流程规范，严格自测（或许还懂得测试理论的）。对于这种开发，作为测试对其是十分佩服的，他们的提测近乎完美，文档清晰，从头到尾测试起来效率非常高，提测近于形式。当然，这类开发还是十分少的，大部分是经验丰富而且严格要求自己的开发。&lt;/p&gt;
&lt;p&gt;另一种，次完美型，这类开发，刚刚工作或工作有一段时间，离完美型还有一定距离，（经验问题而非能力问题），在向完美型努力，代码会有bug,规范有不遵守，文档有缺失，等等，但是非常配合测试，测试提的bug等及时修复，文档规范等及时改正，犯过一次的错误后续不会再出现，逐步地完善。合作起来还是非常愉快地，良性循环，逐步提高的过程，随着合作深入，效率不断提高。接触的大部分开发属于此类。&lt;/p&gt;
&lt;p&gt;还一种，新手型，这类开发，大多是新人，对环境流程等等还不熟悉，处于初生牛犊不怕虎的。又分为两种，一种认为不需要测试，另一种认为走走测试流程也还好。无论哪种，第一次提测比较头痛，如果对应开发部门没有新人规范或者没师兄指导的话，提测是属于头痛型甚至灾难型的，一次提测bug频出，频繁触犯规范，狂打包.......一般头痛一次即可，每一个开发都是需要培养的，逐渐就会遵守规范了。&lt;/p&gt;
&lt;p&gt;很幸运，碰到的开发都很nice，非常配合。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于测试：&lt;/p&gt;
&lt;p&gt;测试有依赖型和独立型，依赖型过度地依赖开发(只用不学，用过即忘，对开发各种依赖-环境搭建，调试定位等等)，独立型相对独立(接触-请教-学习-实践，自我驱动，独立能搞定大部分东西)。后者我认为才是合格的测试人员，&lt;/p&gt;
&lt;p&gt;这年头，测试不再是所谓的点点鼠标能搞定的&lt;/p&gt;
&lt;p&gt;我们要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对业务熟悉，项目的业务，涉及逻辑，上下游等等&lt;/li&gt;
&lt;li&gt;对代码熟悉，参与code review，读懂各类代码，java/c++/perl/python/shell....同时要懂debug，往往要定位到错误原因&lt;/li&gt;
&lt;li&gt;要会写代码，测试需要各种工具，自动化等等，都需要实现&lt;/li&gt;
&lt;li&gt;对流程规范熟悉，从项目初始介入，到最终上线完成，要制定测试计划，协助和跟进各个环节风险和进度（测试环节在最后，前面环节的失误会影响测试进程及项目主体进度，而且这时候PM往往会压缩测试时间），各种沟通&lt;/li&gt;
&lt;li&gt;会搭环境，sap.apach,nginx,hadoop.....要面对各种千奇百怪的错误异常。&lt;/li&gt;
&lt;li&gt;要会测试理论，进行各种测试（功能性能稳定性黑盒白盒.......），造各种case,模拟各种场景&lt;/li&gt;
&lt;li&gt;要会写文档，会提bug，描述清楚问题....总之，文笔要好，不要求会吟一首好诗，但要会以最简洁的文字描述清楚问题&lt;/li&gt;
&lt;li&gt;要会分配时间，多线程运作......往往开发测试比开始很高的，有时候同时要处理好多事情.....&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.................&lt;/p&gt;
&lt;p&gt;当然，这些都是需要时间的。&lt;/p&gt;
&lt;p&gt;以及&lt;/p&gt;
&lt;p&gt;测试，需要有足够的细心和耐心，只有忍无可忍的时候，没有无需再忍的时候。(当然，事不过三，过三就是你自个问题了)&lt;/p&gt;
&lt;p&gt;测试，要求什么都要达到一定程度（什么都要会，会到足够用，但也经常被人吐槽什么都会点，什么都不精），测试其实对广度要求来得高些，但其实很多前辈身怀绝技，卧虎藏龙之地。&lt;/p&gt;
&lt;p&gt;测试，有时候想想挺郁闷的，因为我们的目标是没有测试。通过各种方式提高质量，终极目标没有测试一样质量有保证。即，我们的目的是消灭自己。（这个想象就.......）&lt;/p&gt;
&lt;p&gt;测试，还有个很矛盾的问题，一个牛逼的项目，不出问题，好像没你测试什么事，出了问题，却又觉得辜负了这份信任，哎。（这个有些苦逼了）&lt;/p&gt;
&lt;p&gt;测试，还有个问题，就是要全程参与关注流程，必须像一个老妈子一样，事无巨细，关注很多事情......&lt;/p&gt;
&lt;p&gt;测试，有些被动的角色，却要时时掌握主动权，督促开发&lt;/p&gt;
&lt;p&gt;测试，既要和开发保持良好关系，又要坚持自身的原则（不能放水）&lt;/p&gt;
&lt;p&gt;记得在哪听过，代码问题，和测试有毛关系。其实作为测试，存在测试遗漏，无论是否是自身问题，测试都会数省吾身，反省，思考，改进，提高自身及改进流程，防止再次发生。(我不杀伯仁，伯仁却因我而死.......)&lt;/p&gt;
&lt;p&gt;测试，其实有时候是相当累的，项目多的时候，满负荷运转，数量上去了，还得质量保证。但将一个个项目送上线，还是很有成就感的。&lt;/p&gt;
&lt;p&gt;测试，更多的像是幕后全能型选手，操心一切，保证一切ok，一切ok，我们便ok。(你好，我好.............囧)&lt;/p&gt;
&lt;p&gt;其实测试涉及的内容还很多，我只是作为最初级的测试人员，就所做所见写了下.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于测试开发关系：&lt;/p&gt;
&lt;p&gt;说说测试和开发的关系。&lt;/p&gt;
&lt;p&gt;记得上次会上，提到测试和开发的关系，有恋爱关系，长辈晚辈关系，敌人关系等等，不同人有不同看法，不同条件也会得到不同结论。&lt;/p&gt;
&lt;p&gt;开发和测试其实是需要磨合的，老开发新测试，开发需要多配合指导一些。新开发老测试，测试需要更花心思督促规范。新开发新测试，都需要多问前辈多思考。老开发老测试，一句你懂的足矣。&lt;/p&gt;
&lt;p&gt;网上看到很多开发吐槽测试或者测试吐槽开发的，其实，这只是其中某一方做得不够好，导致磨合进入恶性循环而非良性循环。&lt;/p&gt;
&lt;p&gt;要保证良性循环，开发在不断提高自身代码质量，测试在不断完善和优化流程规范，提高自身测试相关的素质，保证项目质量，二者配合之下，一个良性循环，开发和测试效率都会大大提高。&lt;/p&gt;
&lt;p&gt;这需要做的，首先还是开发需要积极的态度配合测试，而测试，需要了解开发的习惯，了解对应的项目，读代码，熟悉流程，会环境搭建，熟悉逻辑，测试逻辑，很多都需要在开发的帮助下完成。但这并不是依赖关系，开发教你搭了一次环境，你就要学会搭环境，下次不再麻烦。&lt;/p&gt;
&lt;p&gt;恶性循环往往始于轻视和不配合，开发认为测试不重要，测试吐槽开发不配合，但是测试流程还是要走的，往往结果是，双方效率直线下降，消耗了大量时间和精力。搞完之后，对对方的印象都再次恶化。&lt;/p&gt;
&lt;p&gt;看到有吐槽测试不重要，不需要QA的。&lt;/p&gt;
&lt;p&gt;当然，如果团队都是完美型的选手，再加上某些方法，当然可以。&lt;/p&gt;
&lt;p&gt;但是现实很骨感的，大部分情况是次完美型选手居多，这类情况，QA还是有存在必要的。&lt;/p&gt;
&lt;p&gt;合格的开发+合格的测试 + 良性循环 =  最佳组合&lt;/p&gt;
&lt;p&gt;无论是开发或测试，都会走的更远。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于规范：&lt;/p&gt;
&lt;p&gt;很多开发可能吐槽很多规范(代码，打包，流程等等)的形式化or不重要or浪费时间。&lt;/p&gt;
&lt;p&gt;但是，其实这些规范一开始也都是没有的，都是前人一次次踩坑踩出来的。&lt;/p&gt;
&lt;p&gt;存在即合理，该遵守的规范还是不能忽视。但对于流程规范，也没有完全死板硬性要求一定要做什么，根据项目特点，确认某些规范是否适用，是否有改进之处。这并不矛盾，很多规范，有个适用性，很多规范，也是在一步步改进和优化，目的只有一个，提高质量。&lt;/p&gt;
&lt;p&gt;开发和测试或许大目标不一样，但是我们目的只有一个，保证最终产品正常运行。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于靠谱：&lt;/p&gt;
&lt;p&gt;要做到“靠谱”二字，感觉还是有些难度的&lt;/p&gt;
&lt;p&gt;有几类：相当不靠谱，不靠谱，一般靠谱，靠谱&lt;/p&gt;
&lt;p&gt;大多数处于一般靠谱-&amp;gt;靠谱之间，当然，有极少数属于相当不靠谱/不靠谱/靠谱。&lt;/p&gt;
&lt;p&gt;其实，要达到靠谱，需要一个过程，这个过程有快有慢&lt;/p&gt;
&lt;p&gt;大部分都是随经验和能力增长变得靠谱，当然，也有极少数顿悟型的，直接进入靠谱行列&lt;/p&gt;
&lt;p&gt;测试和开发，同样要经历一个过程，逐步“靠谱”&lt;/p&gt;
&lt;p&gt;是否，我说修复了，一定就是修复了，我说有bug，一定是有问题，我说，我回头check下，一定就check了。&lt;/p&gt;
&lt;p&gt;最给力的，我说，没问题，一定就没问题。&lt;/p&gt;
&lt;p&gt;可以自问下，我靠不靠谱？&lt;/p&gt;
&lt;p&gt;开发最怕改需求(特别是刚写完代码就改)，其实测试最怕提测后改需求（特别是测完的时候）......哎，来来回回尽折腾。&lt;/p&gt;
&lt;p&gt;所以，一群靠谱的人，可以释放超乎想象的能量。&lt;/p&gt;
&lt;p&gt;靠谱的最高境界，或许是把复杂的事情做简单，把简单的事情做好。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;关于选择：&lt;/p&gt;
&lt;p&gt;你为什么选择做测试？&lt;/p&gt;
&lt;p&gt;记得面试的时候被问过这个问题，（那时候是，你为什么选择测试开发？），好吧，当时刚刚毕业的我，实习半年多(Java开发)，那时对测试开发印象模糊，工作半年后才发现，测试比例多一些，和SDET其实还是有些差距的。&lt;/p&gt;
&lt;p&gt;曾经有段迷茫的时候，也被主管问及到底想要做什么，那时候的回答是“做当下认为正确的事情”，很多事情，没想明白之前，做自己认为正确的事情。&lt;/p&gt;
&lt;p&gt;其实，每个阶段有每个阶段的想法，受到那时经验/阅历/环境的限制，我们做出的决定或许并不是最好的。&lt;/p&gt;
&lt;p&gt;但是，选择没有正不正确，只有后不后悔。&lt;/p&gt;
&lt;p&gt;我当时的选择，我并不后悔，工作后这一年多，很充实，很快乐，这就足够了。&lt;/p&gt;
&lt;p&gt;So,当面临选择时，问下自己，自己是否喜欢？SWOT，分析下&lt;/p&gt;
&lt;p&gt;做出决定，便不后悔。&lt;/p&gt;
&lt;p&gt;既然选择了远方，便只顾风雨兼程。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;SDET，测试开发，我的第一份工作。三天后，我只能说，我曾经是。&lt;/p&gt;
&lt;p&gt;哎，伤感&lt;/p&gt;
&lt;p&gt;最后，在这里，感谢这一年多，一起奋战的同事，谢谢！！！&lt;/p&gt;
&lt;p&gt;：）&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2012-11-28 于杭州&lt;/p&gt;</content><category term="总结，程序人生"></category></entry><entry><title>Python-进阶-魔术方法小结(方法运算符重载)</title><link href="http://www.wklken.me/posts/2012/10/29/python-base-magic.html" rel="alternate"></link><published>2012-10-29T00:00:00+08:00</published><updated>2012-10-29T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-10-29:/posts/2012/10/29/python-base-magic.html</id><summary type="html">&lt;h2 id="mo-zhu-fang-fa"&gt;魔术方法&lt;/h2&gt;
&lt;p&gt;对定制及重载做了下梳理，还没消化完，后续补全&lt;/p&gt;
&lt;h3 id="ji-ben-ding-zhi"&gt;基本定制&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__init__(self[, arg1, ...]) 构造器（带一些可选的参数）
C.__new__(self[, arg1, ...]) 构造器（带一些可选的参数）；通常用在设置不变数据类型的子类
C.__del__(self) 解构器
C.__str__(self) 可打印的字符输出；内建str()及print 语句
C.__repr__(self) 运行时的字符串输出；内建repr()  ‘‘  和 操作符
C.__unicode__(self)b Unicode 字符串输出；内建unicode()
C.__call__(self, *args) 表示可调用的实例
C …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2 id="mo-zhu-fang-fa"&gt;魔术方法&lt;/h2&gt;
&lt;p&gt;对定制及重载做了下梳理，还没消化完，后续补全&lt;/p&gt;
&lt;h3 id="ji-ben-ding-zhi"&gt;基本定制&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__init__(self[, arg1, ...]) 构造器（带一些可选的参数）
C.__new__(self[, arg1, ...]) 构造器（带一些可选的参数）；通常用在设置不变数据类型的子类
C.__del__(self) 解构器
C.__str__(self) 可打印的字符输出；内建str()及print 语句
C.__repr__(self) 运行时的字符串输出；内建repr()  ‘‘  和 操作符
C.__unicode__(self)b Unicode 字符串输出；内建unicode()
C.__call__(self, *args) 表示可调用的实例
C.__nonzero__(self) 为object 定义False 值；内建bool() （从2.2 版开始）
C.__len__(self) “ ” 长度（可用于类）；内建len()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __init__"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __new__"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __del__"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __str__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"class A str"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __repr__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"class A repr"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __unicode__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"class A unicode"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__nozero__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __nozero__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __len__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;#定以后callable(instance) True&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __call__"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A.new和init区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __init__"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __new__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;__new__：创建对象时调用，返回当前对象的一个实例,相当于java里面的构造器
         一般是用于继承内置类的，返回值是一个对象&lt;/p&gt;
&lt;p&gt;使用：需要控制一个新实例的创建,一般情况下不会使用，除非需要子类化不可变类型例如str/int/unicode/tuple&lt;/p&gt;
&lt;p&gt;__init__：创建完对象后调用，对当前对象的实例的一些初始化，无返回值&lt;/p&gt;
&lt;p&gt;使用：需要控制一个实例的初始化&lt;/p&gt;
&lt;p&gt;可以这样理解，默认是创建（&lt;strong&gt;new&lt;/strong&gt;），然后调用__init__
(new的时候，self还不存在, init的时候self已经存在了)&lt;/p&gt;
&lt;h3 id="dui-xiang-zhi-bi-jiao"&gt;对象值比较&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__cmp__(self, obj) 对象比较；内建cmp()
C.__lt__(self, obj) and 小于/小于或等于；对应&amp;lt;及&amp;lt;=操作符
C.__le__(self,obj)
C.__gt__(self, obj) and 大于/大于或等于；对应&amp;gt;及&amp;gt;=操作符
C.__ge__(self,obj)
C.__eq__(self, obj) and 等于/不等于；对应==,!=及&amp;lt;&amp;gt;操作符
C.__ne__(self,obj)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__cmp__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __cmp__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __lt__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__gt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __gt__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __eq__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu-xing-cao-zuo"&gt;属性操作&lt;/h3&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__getattr__(self, attr) 获取属性；内建getattr()；仅当属性没有找到时调用
C.__setattr__(self, attr, val) 设置属性
C.__delattr__(self, attr) 删除属性
C.__getattribute__(self, attr) 获取属性；内建getattr()；总是被调用
C.__get__(self, attr) （描述符）获取属性
C.__set__(self, attr, val)  （描述符）设置属性
C.__delete__(self, attr)  （描述符）删除属性
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __getattr__"&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"not found"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __setattr__"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__delattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __delattr__"&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __getattribute__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A.get/getattr/getattribute区别&lt;/p&gt;
&lt;p&gt;object.&lt;strong&gt;getattr&lt;/strong&gt;(self, name)&lt;/p&gt;
&lt;p&gt;当一般位置找不到attribute的时候，会调用getattr，返回一个值或AttributeError异常。&lt;/p&gt;
&lt;p&gt;object.&lt;strong&gt;getattribute&lt;/strong&gt;(self, name)&lt;/p&gt;
&lt;p&gt;无条件被调用，通过实例访问属性。如果class中定义了__getattr__()，则__getattr__()不会被调用（除非显示调用或引发AttributeError异常）&lt;/p&gt;
&lt;p&gt;object.&lt;strong&gt;get&lt;/strong&gt;(self, instance, owner)&lt;/p&gt;
&lt;p&gt;如果class定义了它，则这个class就可以称为descriptor。owner是所有者的类，instance是访问descriptor的实例，如果不是通过实例访问，而是通过类访问的话，instance则为None。（descriptor的实例自己访问自己是不会触发__get__，而会触发__call__，只有descriptor作为其它类的属性才有意义。）&lt;/p&gt;
&lt;h3 id="shu-zhi-ji-er-jin-zhi"&gt;数值及二进制&lt;/h3&gt;
&lt;p&gt;二元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__*add__(self, obj) 加；+操作符
C.__*sub__(self, obj) 减；-操作符
C.__*mul__(self, obj) 乘；*操作符
C.__*div__(self, obj) 除；/操作符
C.__*truediv__(self, obj)  True 除；/操作符
C.__*floordiv__(self, obj)  Floor 除；//操作符
C.__*mod__(self, obj) 取模/取余；%操作符
C.__*divmod__(self, obj) 除和取模；内建divmod()
C.__*pow__(self, obj[, mod]) 乘幂；内建pow();**操作符
C.__*lshift__(self, obj) 左移位；&amp;lt;&amp;lt;操作符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二进制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__*rshift__(self, obj) 右移；&amp;gt;&amp;gt;操作符
C.__*and__(self, obj) 按位与；&amp;amp;操作符
C.__*or__(self, obj) 按位或；|操作符
C.__*xor__(self, obj) 按位与或；^操作符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__neg__(self) 一元负
C.__pos__(self) 一元正
C.__abs__(self) 绝对值；内建abs()
C.__invert__(self) 按位求反；~操作符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数值转换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__complex__(self, com) 转为complex(复数);内建complex()
C.__int__(self) 转为int;内建int()
C.__long__(self) 转为long；内建long()
C.__float__(self) 转为float；内建float()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__oct__(self) 八进制表示；内建oct()
C.__hex__(self) 十六进制表示；内建hex()
C.__coerce__(self, num) 压缩成同样的数值类型；内建coerce()
C.__index__(self)g 在有必要时,压缩可选的数值类型为整型（比如：用于切片索引等等
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xu-lie"&gt;序列&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__len__(self) 序列中项的数目
C.__getitem__(self, ind) 得到单个序列元素
C.__setitem__(self, ind,val) 设置单个序列元素
C.__delitem__(self, ind) 删除单个序列元素

C.__getslice__(self, ind1,ind2) 得到序列片断
C.__setslice__(self, i1, i2,val) 设置序列片断
C.__delslice__(self, ind1,ind2) 删除序列片断
C.__contains__(self, val) f 测试序列成员；内建in 关键字
C.__*add__(self,obj) 串连；+操作符
C.__*mul__(self,obj) 重复；*操作符
C.__iter__(self)  创建迭代类；内建iter()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __init__"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __len__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __getitem__"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __setitem__"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__delitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call __delitem__"&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ying-she"&gt;映射&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__len__(self) mapping 中的项的数目
C.__hash__(self) 散列(hash)函数值
C.__getitem__(self,key) 得到给定键(key)的值
C.__setitem__(self,key,val) 设置给定键(key)的值
C.__delitem__(self,key) 删除给定键(key)的值
C.__missing__(self,key) 给定键如果不存在字典中，则提供一个默认值
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Gighub: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.sinaapp.com/&lt;/p&gt;
&lt;p&gt;2012-10-29&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python-进阶-装饰器小结</title><link href="http://www.wklken.me/posts/2012/10/27/python-base-decorator.html" rel="alternate"></link><published>2012-10-27T00:00:00+08:00</published><updated>2012-10-27T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-10-27:/posts/2012/10/27/python-base-decorator.html</id><summary type="html">&lt;p&gt;想找个地方快乐的coding，貌似不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;一时冲动，不过后路已断，做自己想做的事情，总要付出一些代价的，坚持吧，只能。&lt;/p&gt;
&lt;p&gt;吐槽下，本周各种事情，搞得如越级打怪般艰难。周六，去三小时，回来三小时，大败而归，但是还是学到不少东西。&lt;/p&gt;
&lt;p&gt;差距还是有的，虽然自信可以在最短时间补上，但是，需要成本。&lt;/p&gt;
&lt;p&gt;总之，貌似时机不对，哎
以上废话，进入正题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上周六碰到了，一周忙碌，今天稍微理下，待补全，资料主要来源于书籍，网络&amp;amp;self.coding()。有任何问题，请指正哈&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan"&gt;资源&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;具体概念自己google&lt;/p&gt;
&lt;p&gt;装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理, Web权限校验, Cache等。&lt;/p&gt;
&lt;p&gt;很有名的例子，就是咖啡，加糖的咖啡，加牛奶的咖啡 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;想找个地方快乐的coding，貌似不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;一时冲动，不过后路已断，做自己想做的事情，总要付出一些代价的，坚持吧，只能。&lt;/p&gt;
&lt;p&gt;吐槽下，本周各种事情，搞得如越级打怪般艰难。周六，去三小时，回来三小时，大败而归，但是还是学到不少东西。&lt;/p&gt;
&lt;p&gt;差距还是有的，虽然自信可以在最短时间补上，但是，需要成本。&lt;/p&gt;
&lt;p&gt;总之，貌似时机不对，哎
以上废话，进入正题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上周六碰到了，一周忙碌，今天稍微理下，待补全，资料主要来源于书籍，网络&amp;amp;self.coding()。有任何问题，请指正哈&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan"&gt;资源&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;具体概念自己google&lt;/p&gt;
&lt;p&gt;装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理, Web权限校验, Cache等。&lt;/p&gt;
&lt;p&gt;很有名的例子，就是咖啡，加糖的咖啡，加牛奶的咖啡。
本质上，还是咖啡，只是在原有的东西上，做了“装饰”，使之附加一些功能或特性。&lt;/p&gt;
&lt;p&gt;例如记录日志，需要对某些函数进行记录&lt;/p&gt;
&lt;p&gt;笨的办法，每个函数加入代码，如果代码变了，就悲催了&lt;/p&gt;
&lt;p&gt;装饰器的办法，定义一个专门日志记录的装饰器，对需要的函数进行装饰，搞定&lt;/p&gt;
&lt;h2 id="you-dian"&gt;优点&lt;/h2&gt;
&lt;p&gt;抽离出大量函数中与函数功能本身无关的雷同代码并继续重用&lt;/p&gt;
&lt;p&gt;即，可以将函数“修饰”为完全不同的行为，可以有效的将业务逻辑正交分解，如用于将权限和身份验证从业务中独立出来&lt;/p&gt;
&lt;p&gt;概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能&lt;/p&gt;
&lt;h2 id="pythonzhong-de-zhuang-shi-qi"&gt;Python中的装饰器&lt;/h2&gt;
&lt;p&gt;在Python中，装饰器实现是十分方便的&lt;/p&gt;
&lt;p&gt;原因是：函数可以被扔来扔去。&lt;/p&gt;
&lt;p&gt;函数作为一个对象：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.可以被赋值给其他变量，可以作为返回值

B.可以被定义在另外一个函数内
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;def:&lt;/p&gt;
&lt;p&gt;装饰器是一个函数,一个用来包装函数的函数，装饰器在函数申明完成的时候被调用，调用之后返回一个修改之后的函数对象，将其重新赋值原来的标识符，并永久丧失对原始函数对象的访问(申明的函数被换成一个被装饰器装饰过后的函数)&lt;/p&gt;
&lt;p&gt;当我们对某个方法应用了装饰方法后， 其实就改变了被装饰函数名称所引用的函数代码块入口点，使其重新指向了由装饰方法所返回的函数入口点。&lt;/p&gt;
&lt;p&gt;由此我们可以用decorator改变某个原有函数的功能，添加各种操作，或者完全改变原有实现&lt;/p&gt;
&lt;h2 id="fen-lei"&gt;分类：&lt;/h2&gt;
&lt;p&gt;装饰器分为无参数decorator，有参数decorator&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* 无参数decorator

生成一个新的装饰器函数

* 有参decorator

有参装饰，装饰函数先处理参数，再生成一个新的装饰器函数，然后对函数进行装饰
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰器有参/无参，函数有参/无参，组合共4种&lt;/p&gt;
&lt;h2 id="ju-ti-ding-yi"&gt;具体定义：&lt;/h2&gt;
&lt;p&gt;decorator方法&lt;/p&gt;
&lt;p&gt;A.把要装饰的方法作为输入参数，&lt;/p&gt;
&lt;p&gt;B.在函数体内可以进行任意的操作(可以想象其中蕴含的威力强大，会有很多应用场景)，&lt;/p&gt;
&lt;p&gt;C.只要确保最后返回一个可执行的函数即可（可以是原来的输入参数函数， 或者是一个新函数）&lt;/p&gt;
&lt;h3 id="wu-can-shu-zhuang-shi-qi-bao-zhuang-wu-can-shu-han-shu"&gt;无参数装饰器 – 包装无参数函数&lt;/h3&gt;
&lt;p&gt;不需要针对参数进行处理和优化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;foo()
等价于:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wu-can-shu-zhuang-shi-qi-bao-zhuang-dai-can-shu-han-shu"&gt;无参数装饰器 – 包装带参数函数&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_func_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#处理传入函数的参数&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"begin"&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#函数调用&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"end"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handle_args&lt;/span&gt;


&lt;span class="nd"&gt;@decorator_func_args&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;foo2(1)
等价于&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator_func_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dai-can-shu-zhuang-shi-qi-bao-zhuang-wu-can-shu-han-shu"&gt;带参数装饰器 – 包装无参数函数&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_with_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg_of_decorator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="c1"&gt;#这里是装饰器的参数&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;arg_of_decorator&lt;/span&gt;
    &lt;span class="c1"&gt;#最终被返回的函数&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newDecorator&lt;/span&gt;


&lt;span class="nd"&gt;@decorator_with_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"deco_args"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;foo3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与前面的不同在于：比上一层多了一层封装，先传递参数，再传递函数名&lt;/p&gt;
&lt;p&gt;第一个函数decomaker是装饰函数，它的参数是用来加强“加强装饰”的。由于此函数并非被装饰的函数对象，所以在内部必须至少创建一个接受被装饰函数的函数，然后返回这个对象（实际上此时foo3= decorator_with_params(arg_of_decorator)(foo3)）&lt;/p&gt;
&lt;h3 id="dai-can-shu-zhuang-shi-qi-bao-zhuang-dai-can-shu-han-shu"&gt;带参数装饰器– 包装带参数函数&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator_whith_params_and_func_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg_of_decorator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"begin"&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"end"&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;arg_of_decorator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handle_args&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handle_func&lt;/span&gt;


&lt;span class="nd"&gt;@decorator_whith_params_and_func_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Content"&lt;/span&gt;

&lt;span class="n"&gt;foo4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nei-zhi-zhuang-shi-qi"&gt;内置装饰器&lt;/h3&gt;
&lt;p&gt;内置的装饰器有三个：staticmethod,classmethod, property&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_static&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"static"&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"normal"&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_static&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_static&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_normal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;static&lt;/span&gt;
&lt;span class="kr"&gt;static&lt;/span&gt;
&lt;span class="nx"&gt;normal&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A.test_static&lt;/p&gt;
&lt;p&gt;staticmethod 类中定义的实例方法变成静态方法&lt;/p&gt;
&lt;p&gt;基本上和一个全局函数差不多(不需要传入self，只有一般的参数)，只不过可以通过类或类的实例对象来调用，不会隐式地传入任何参数。&lt;/p&gt;
&lt;p&gt;类似于静态语言中的静态方法&lt;/p&gt;
&lt;p&gt;B.test_normal&lt;/p&gt;
&lt;p&gt;普通对象方法：
普通对象方法至少需要一个self参数，代表类对象实例&lt;/p&gt;
&lt;p&gt;C.test_class&lt;/p&gt;
&lt;p&gt;类中定义的实例方法变成类方法&lt;/p&gt;
&lt;p&gt;classmethod需要传入类对象，可以通过实例和类对象进行调用。&lt;/p&gt;
&lt;p&gt;是和一个class相关的方法，可以通过类或类实例调用，并将该class对象（不是class的实例对象）隐式地当作第一个参数传入。&lt;/p&gt;
&lt;p&gt;就这种方法可能会 比较奇怪一点，不过只要你搞清楚了python里class也是个真实地存在于内存中的对象，而不是静态语言中只存在于编译期间的类型，就好办了。正常的方法就是和一个类的实例对象相关的方法，通过类实例对象进行调用，并将该实例对象隐式地作为第一个参数传入，这个也和其它语言比较像。&lt;/p&gt;
&lt;p&gt;D.区别&lt;/p&gt;
&lt;p&gt;staticmethod，classmethod相当于全局方法，一般用在抽象类或父类中。一般与具体的类无关。&lt;/p&gt;
&lt;p&gt;类方法需要额外的类变量cls，当有子类继承时，调用类方法传入的类变量cls是子类，而不是父类。&lt;/p&gt;
&lt;p&gt;类方法和静态方法都可以通过类对象和类的实例对象访问&lt;/p&gt;
&lt;p&gt;定义方式，传入的参数，调用方式都不相同。&lt;/p&gt;
&lt;p&gt;E.property&lt;/p&gt;
&lt;p&gt;对类属性的操作，类似于java中定义getter/setter&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call get"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__prop&lt;/span&gt;
    &lt;span class="nd"&gt;@prop.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call set"&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="nd"&gt;@prop.deleter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"call del"&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__prop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;A.装饰器的顺序很重要，需要注意&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@A&lt;/span&gt;
&lt;span class="nd"&gt;@B&lt;/span&gt;
&lt;span class="nd"&gt;@C&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B.decorator的作用对象可以是模块级的方法或者类方法&lt;/p&gt;
&lt;p&gt;C.functools模块提供了两个装饰器。
这个模块是Python 2.5后新增的。&lt;/p&gt;
&lt;p&gt;functools.wraps(func)
total_ordering(cls)
这个具体自己去看吧，后续用到了再补充&lt;/p&gt;
&lt;h3 id="yi-ge-jian-dan-li-zi"&gt;一个简单例子&lt;/h3&gt;
&lt;p&gt;通过一个变量，控制调用函数时是否统计时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#@author: wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#@version: a test of decorator&lt;/span&gt;
&lt;span class="c1"&gt;#@date: 20121027&lt;/span&gt;
&lt;span class="c1"&gt;#@desc: just a test&lt;/span&gt;


&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;is_debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_debug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;handle_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;handle_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"] -&amp;gt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handle_args&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handle_func&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@count_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@count_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hello world
hello world
DEBUG:root:[test2] -&amp;gt; 0.0748538970947
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Gighub: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.sinaapp.com/&lt;/p&gt;
&lt;p&gt;2012-10-27&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>如何进行shell脚本正确性测试</title><link href="http://www.wklken.me/posts/2012/09/15/how-to-test-shell.html" rel="alternate"></link><published>2012-09-15T00:00:00+08:00</published><updated>2012-09-15T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-09-15:/posts/2012/09/15/how-to-test-shell.html</id><summary type="html">&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？
  用于检查是否有遗漏逻辑，或有悖于需求。
B.具体语法，变量，判断语句
  语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？
  用于检查是否有遗漏逻辑，或有悖于需求。
B.具体语法，变量，判断语句
  语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -n ***.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若是没有异常输出，证明脚本没有明显的语法问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="运行结果" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_1.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;3.运行跟踪：&lt;/p&gt;
&lt;p&gt;实践是检验整理的唯一标准，跑一把。&lt;/p&gt;
&lt;p&gt;不过，可不是直接运行然后去看最终结果，这样会遗漏掉很多中间过程。&lt;/p&gt;
&lt;p&gt;命令格式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -vx ***.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="运行结果" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_2.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到&lt;/p&gt;
&lt;p&gt;每行代码原始命令（无+的）:[这是-v的效果]&lt;/p&gt;
&lt;p&gt;代码执行时的情况（带+），包括运算结果，逻辑判断结果，变量赋值等等[-x的效果]&lt;/p&gt;
&lt;p&gt;而我们所要关注的就是这些信息，主要是变量值和逻辑判断结果。&lt;/p&gt;
&lt;p&gt;4.覆盖分支：&lt;/p&gt;
&lt;p&gt;直接跑，只能覆盖到主体流程，对于其他控制流分支的代码是无法覆盖到的。&lt;/p&gt;
&lt;p&gt;对于关键性的，重点的逻辑，我们需要制造条件，使运行脚本可以进入对应分支&lt;/p&gt;
&lt;p&gt;5.其他：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.关于bashdb:
  可以尝试下，但是感觉投入产出比不高
B.关于单元测试：
  实际工作中，由于项目压力比较大，单元测试的成本还是相当高的，所以目前为止没有。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.有没有更好的方式?&lt;/p&gt;
&lt;p&gt;好吧，单步跟踪，脚本短的还好，日志信息不会太多，要是多了，存在调用其他脚本等等.....&lt;/p&gt;
&lt;p&gt;日志量达到几千行，这是很轻易的事情。&lt;/p&gt;
&lt;p&gt;跟踪过的童鞋有同感，展现不够友好，惨白惨白一片，一千行下来，看的眼花。&lt;/p&gt;
&lt;p&gt;很容易遗漏（LZ被坑了好多回，你看，或不看......错误信息明明就在那里，就是视而不见）&lt;/p&gt;
&lt;p&gt;So.进行了一层优化，对日志进行处理，使用正则，标注我关心的信息&lt;/p&gt;
&lt;p&gt;效果图对比：&lt;/p&gt;
&lt;p&gt;&lt;img alt="原始图" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_3.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="扩展图" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_4.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;脚本是用python实现的，位置:https://github.com/wklken/pytools/tree/master/shell&lt;/p&gt;
&lt;p&gt;思想是：执行，抓到所有日志，用正则进行匹配，打上颜色，然后输出&lt;/p&gt;
&lt;p&gt;好了，就这些&lt;/p&gt;
&lt;p&gt;工具的实现是为了提高效率，节约时间。&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Gighub: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.me&lt;/p&gt;
&lt;p&gt;2012-09-15&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢！&lt;/p&gt;</content><category term="python"></category><category term="shell"></category></entry><entry><title>Python通用邮件发送[smtplib]</title><link href="http://www.wklken.me/posts/2012/09/02/python-email-smtplib.html" rel="alternate"></link><published>2012-09-02T00:00:00+08:00</published><updated>2012-09-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-09-02:/posts/2012/09/02/python-email-smtplib.html</id><summary type="html">&lt;p&gt;使用到的模块 &lt;a href="http://docs.python.org/2/library/smtplib.html"&gt;smtplib&lt;/a&gt;,  &lt;a href="http://docs.python.org/2/library/email"&gt;email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;1.发送邮件&lt;/p&gt;
&lt;p&gt;2.不需要登录任何邮箱等等&lt;/p&gt;
&lt;p&gt;3.支持多接收人&lt;/p&gt;
&lt;p&gt;4.支持附件&lt;/p&gt;
&lt;p&gt;5.支持命令行+方法调用&lt;/p&gt;
&lt;h3 id="ji-yu-ban-ben"&gt;基于版本&lt;/h3&gt;
&lt;p&gt;2.4
使用2.7和3.x的童鞋，可能需要修改下import信息&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;p&gt;使用官网一份代码进行重新修改，扩增功能&lt;/p&gt;
&lt;p&gt;代码托管地址 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#@author : wklken@yeah.ent&lt;/span&gt;
&lt;span class="c1"&gt;#@version : 0.1&lt;/span&gt;
&lt;span class="c1"&gt;#@desc: for mail sending.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getopt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用到的模块 &lt;a href="http://docs.python.org/2/library/smtplib.html"&gt;smtplib&lt;/a&gt;,  &lt;a href="http://docs.python.org/2/library/email"&gt;email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;1.发送邮件&lt;/p&gt;
&lt;p&gt;2.不需要登录任何邮箱等等&lt;/p&gt;
&lt;p&gt;3.支持多接收人&lt;/p&gt;
&lt;p&gt;4.支持附件&lt;/p&gt;
&lt;p&gt;5.支持命令行+方法调用&lt;/p&gt;
&lt;h3 id="ji-yu-ban-ben"&gt;基于版本&lt;/h3&gt;
&lt;p&gt;2.4
使用2.7和3.x的童鞋，可能需要修改下import信息&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;p&gt;使用官网一份代码进行重新修改，扩增功能&lt;/p&gt;
&lt;p&gt;代码托管地址 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#@author : wklken@yeah.ent&lt;/span&gt;
&lt;span class="c1"&gt;#@version : 0.1&lt;/span&gt;
&lt;span class="c1"&gt;#@desc: for mail sending.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getopt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.MIMEMultipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.MIMEBase&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEBase&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.MIMEText&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.Encoders&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;encoders&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="c1"&gt;# Create message container - the correct MIME type is multipart/alternative.&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'alternative'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Subject'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'From'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_from&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'To'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the body of the message (a plain-text and an HTML version).&lt;/span&gt;
    &lt;span class="c1"&gt;#text = msg&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg_txt&lt;/span&gt;

    &lt;span class="c1"&gt;# Record the MIME types of both parts - text/plain and text/html.&lt;/span&gt;
    &lt;span class="c1"&gt;#part1 = MIMEText(text, 'plain')&lt;/span&gt;
    &lt;span class="n"&gt;part2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Attach parts into message container.&lt;/span&gt;
    &lt;span class="c1"&gt;# According to RFC 2046, the last part of a multipart message, in this case&lt;/span&gt;
    &lt;span class="c1"&gt;# the HTML message, is best and preferred.&lt;/span&gt;
    &lt;span class="c1"&gt;#msg.attach(part1)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#attachment&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#octet-stream:binary data&lt;/span&gt;
        &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'application'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'octet-stream'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;encoders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode_base64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Content-Disposition'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'attachment; filename="&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;"'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Send the message via local SMTP server.&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# sendmail function takes 3 arguments: sender's address, recipient's address&lt;/span&gt;
    &lt;span class="c1"&gt;# and message to send - here it is sent as one string.&lt;/span&gt;

    &lt;span class="n"&gt;mailto_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mailtoi&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mailtoi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="s2"&gt;"f:t:s:m:a:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mail_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-t"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mail_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-s"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-m"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;msg_txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" : params are not defined well!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_txt&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;CMD:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./sendEmail.py -f "fromSomeOne@XXX.com" \
            -t "toA@XXX.com,toB@XXX.com" \
            -s "the subject of mail" \
            -m "the mail Message.Main Content" \
            -a "attachment1_path,attachment2_path"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IMPORT:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sendEmail&lt;/span&gt;
&lt;span class="n"&gt;sendEmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Blog:  http://wklken.me&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;2012-09-02&lt;/p&gt;</content><category term="python"></category><category term="smtplib"></category></entry><entry><title>入职一周年小结</title><link href="http://www.wklken.me/posts/2012/07/04/summary-04-workoneyear.html" rel="alternate"></link><published>2012-07-04T00:00:00+08:00</published><updated>2012-07-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-07-04:/posts/2012/07/04/summary-04-workoneyear.html</id><summary type="html">&lt;p&gt;@author: wklken
@date: 2012-07-04
@version: 0.1
@desc: 入职一年，算作小结&lt;/p&gt;
&lt;p&gt;2012-07-04&lt;/p&gt;
&lt;p&gt;皓月当空，很久没有停下来好好望望月。&lt;/p&gt;
&lt;p&gt;从去年毕业入职到现在，正好一周年。&lt;/p&gt;
&lt;p&gt;一年中，不变的很多，改变的也很多。&lt;/p&gt;
&lt;p&gt;记得去年的7月4日，背着包挤公交去入职，认识新同事，打了两个礼拜酱油（熟悉各种...），然后开工。&lt;/p&gt;
&lt;p&gt;上班，培训，上课，写作业，加班，outing,新人秀.......&lt;/p&gt;
&lt;p&gt;回想一年，过得还算充实。&lt;/p&gt;
&lt;p&gt;时间流逝，生活也是一个不断发展的过程，是过程而非结果，这中间，得到什么，失去什么，迷茫，信念，思考，欢乐，失落，看过，走过，遗忘的，铭记的，遇到的事情，见到的人 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;@author: wklken
@date: 2012-07-04
@version: 0.1
@desc: 入职一年，算作小结&lt;/p&gt;
&lt;p&gt;2012-07-04&lt;/p&gt;
&lt;p&gt;皓月当空，很久没有停下来好好望望月。&lt;/p&gt;
&lt;p&gt;从去年毕业入职到现在，正好一周年。&lt;/p&gt;
&lt;p&gt;一年中，不变的很多，改变的也很多。&lt;/p&gt;
&lt;p&gt;记得去年的7月4日，背着包挤公交去入职，认识新同事，打了两个礼拜酱油（熟悉各种...），然后开工。&lt;/p&gt;
&lt;p&gt;上班，培训，上课，写作业，加班，outing,新人秀.......&lt;/p&gt;
&lt;p&gt;回想一年，过得还算充实。&lt;/p&gt;
&lt;p&gt;时间流逝，生活也是一个不断发展的过程，是过程而非结果，这中间，得到什么，失去什么，迷茫，信念，思考，欢乐，失落，看过，走过，遗忘的，铭记的，遇到的事情，见到的人，做过的事，成功的，失败的.......&lt;/p&gt;
&lt;p&gt;人生，就像老天爷起了一个进程，问题是丫永远不知道接下去会干什么，碰到什么，溢出，阻塞，挂起，还是直接被干掉，虽然大部分时间运行稳定，但是很不幸：1，资源是抢占的，2，程序没有经过测试，有bug，而且还不少&lt;/p&gt;
&lt;p&gt;工作后&lt;/p&gt;
&lt;p&gt;工作后，最纠结的是，你不能想在学校那样，随心所欲。我一直认为，学校是人生中停留最最幸福和干净的地方（对比后才知道），但不幸的是，当局者迷，围城，年轻的我们总是想跳出这围城，但，很多东西，都是失去后才觉得美好，所以，珍惜当下吧。不能凭好恶，不能凭心情去做事，很多事情，虽不像不愿，却也需要去面对，去处理，而且要处理得让自己满意。&lt;/p&gt;
&lt;p&gt;另外一个很明显的变化是，上班，你再也没有整整一大段时间去做一件自己想做的事情，上班时间，下班时间，作为IT工程师的我们，还有加班时间（囧），大学或许可以一个礼拜攻完一本书，但是工作后，你会发现，可能一个月才能勉勉强强啃完，时间碎片化，而且每天工作很晚，回来还要做点自己喜欢的事情，生活会相当充实。嘿。看很多书，做很多事。这是我刚入职后不久贴到墙上的，后者不清楚是否足够，幸好前者感觉还是达到。工作后最明显的变化还有一点就是这个，你可以买书，哈哈，不用像大学里，从生活费里省出来。当当，京东各种促销，三百减一百，算下来今年买书估计也有一千，当然，光买不看是件极其败家的事情，算到今天，四十余本，一半杂书，一半技术砖头，都啃得差不多，所获颇多，今年也算没有虚度，算是给自个先投资了。&lt;/p&gt;
&lt;p&gt;工作后，还有一个，就是没有各种假了，没有暑假寒假，一年只有法定假日加上那么可怜的几天年假，上学是偶尔可以翘翘课，上班时却没法翘班，记得刚来时，7点10分起，公交，八点多准时到公司，三个月，风雨无阻，一年后最大的变化是，八点起，接近九点到公司，老油条了.......所谓不打卡，上下班自由，但是事情多的时候，只能悲剧地加班了。刚来那半年，加班比较多，因为各种不懂，不熟悉，但那段时间或许是指数级地上涨，最近加班不多，大部分在做自己想做的事情，却也发现，没压力，动力似乎少了不少，哎。&lt;/p&gt;
&lt;p&gt;很多时候&lt;/p&gt;
&lt;p&gt;很多时候，都在思考，自己想要的是什么，活在这个世上，所追求的是什么？难道简简单单遵循一个模式，这不是我想要的，这个问题思考很久，一直没有想清楚，继续思考中。很多时候，感觉现在得到的似乎并不是自己想要的东西，就像，原本想要一个西瓜，生活return一个苹果回来，想着好歹是个苹果，就接受了。外人看起来很美好，起码你有了个苹果，但苹果是酸是甜，有木有虫子，好不好吃，这是个问题。&lt;/p&gt;
&lt;p&gt;很多时候，困扰我们的，不是我们没有，而是我们拥有的不是我们想要的。&lt;/p&gt;
&lt;p&gt;很多时候，生活不易，冷暖自知。&lt;/p&gt;
&lt;p&gt;一直在想，是不是应该放下所有，去找自己想要的东西。但自己想要的东西，似乎又没想好。这么一个蛋疼的问题，哎。&lt;/p&gt;
&lt;p&gt;每天&lt;/p&gt;
&lt;p&gt;每天依旧跟上学似地，三点一线，完成工作，看书，睡觉，周末敲敲代码，逛逛西湖（去过几次不记得了...）&lt;/p&gt;
&lt;p&gt;每天刷刷微博看看网易新闻（每天的报道都让我感觉这世界快完了........）&lt;/p&gt;
&lt;p&gt;每天逛逛论坛，更新下blog，更新下自己的代码&lt;/p&gt;
&lt;p&gt;这一年&lt;/p&gt;
&lt;p&gt;这一年，工作中同事给予了很多帮助，衷心感谢。&lt;/p&gt;
&lt;p&gt;这一年，开始了思考，学会了如何去解决各式各样的问题。&lt;/p&gt;
&lt;p&gt;这一年，见过靠谱的，不靠谱的，自认自己做到“靠谱”二字。&lt;/p&gt;
&lt;p&gt;这一年，一起入职的同事走了几个。&lt;/p&gt;
&lt;p&gt;最近&lt;/p&gt;
&lt;p&gt;最近，一直在攻书，感觉有进步&lt;/p&gt;
&lt;p&gt;最近，迷上了骑行，每周五十公里（周末，平常上班6&lt;em&gt;2&lt;/em&gt;5=60，上班有点远）&lt;/p&gt;
&lt;p&gt;最近，最幸福的时候，便是周末，泡杯清茶，放段音乐，看书or敲代码or思考，安安静静地。远离喧嚣的外界，思考。&lt;/p&gt;
&lt;p&gt;列了20个自己想去的地方，列了20个自己会实现的目标。&lt;/p&gt;
&lt;p&gt;未来是个未知数，在思考，在前进，一年后会是怎么样我不清楚，但我相信可以达到目标，一步一个脚印。&lt;/p&gt;
&lt;p&gt;几点，权作小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要主动。做任何事情，多要主动，不要被动地放任事情发展，否则最后悲剧的往往是你；&lt;/li&gt;
&lt;li&gt;站在别人的角度思考和沟通；&lt;/li&gt;
&lt;li&gt;事不过三，发生一次，可以，两次，忍了，三次，决不允许；&lt;/li&gt;
&lt;li&gt;学会拒绝，大包大揽老好人是不行的，严格遵循原则，否则，悲剧的肯定是你（加班&amp;amp;背锅，对谁都不好）&lt;/li&gt;
&lt;li&gt;学习&amp;amp;思考，做靠谱的人，你对所做事情的学习和思考，决定了你是不是变得越来越靠谱，也决定了你是工作一年有三年经验，还是工作三年有一年经验；（干IT的毕业一年经验一年半，加班加的）&lt;/li&gt;
&lt;li&gt;没有大事，没有小事，认认真真做事，淡定严谨&lt;/li&gt;
&lt;li&gt;读书&amp;amp;尝试新事物&amp;amp;使用工具&lt;/li&gt;
&lt;li&gt;锻炼身体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The End!&lt;/p&gt;</content><category term="总结，程序人生"></category></entry><entry><title>数据结构&amp;算法实践—【排序|选择排序】堆排序</title><link href="http://www.wklken.me/posts/2012/06/02/python-ds-09-sort-heap.html" rel="alternate"></link><published>2012-06-02T00:00:00+08:00</published><updated>2012-06-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-06-02:/posts/2012/06/02/python-ds-09-sort-heap.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;堆排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.堆排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/zh-cn/%E5%A0%86%E7%A9%8D%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;heapSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;max_heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;make_max_heap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;#构建一个最大堆&lt;/span&gt;
    &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;   &lt;span class="err"&gt;#当堆中还存在值&lt;/span&gt;
        &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;堆排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.堆排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/zh-cn/%E5%A0%86%E7%A9%8D%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;heapSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;max_heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;make_max_heap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;#构建一个最大堆&lt;/span&gt;
    &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;   &lt;span class="err"&gt;#当堆中还存在值&lt;/span&gt;
        &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop_max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="err"&gt;#取出最大一个&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;堆为一棵完全二叉树，每个节点值都&amp;gt;=子节点值&lt;/p&gt;
&lt;p&gt;堆排序根据这个特性，首先将所有元素建立堆，然后一个个取出，即有序的&lt;/p&gt;
&lt;p&gt;堆中每个节点的位置：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;父节点i的左子节点在位置 (2*i);
父节点i的右子节点在位置 (2*i+1);
子节点i的父节点在位置 floor(i/2);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最大堆主要操作逻辑：&lt;/p&gt;
&lt;p&gt;插入：将新元素加入完全二叉树最后一个节点，依次往上，调整直到满足父节点值都&amp;gt;=子节点值&lt;/p&gt;
&lt;p&gt;删除：移除根节点，将最后一个节点拿到根节点，依次往下，调整&lt;/p&gt;
&lt;p&gt;原始:&lt;/p&gt;
&lt;p&gt;&lt;img alt="heap1" src="https://github.com/wklken/gallery/blob/master/pyds/heap-1.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;插入操作：12，先假定放在最后一个位置，然后从这个节点开始往上，同父节点比较，依次调整&lt;/p&gt;
&lt;p&gt;&lt;img alt="heap2" src="https://github.com/wklken/gallery/blob/master/pyds/heap-2.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;删除：取走11，将最后一个元素8移到根节点，从上往下，重新调整&lt;/p&gt;
&lt;p&gt;&lt;img alt="heap3" src="https://github.com/wklken/gallery/blob/master/pyds/heap-3.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据公式，我们可以使用数组模拟实现完全二叉树(不使用首个位置)&lt;/p&gt;
&lt;p&gt;首先，我们先实现堆:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#堆排序&lt;/span&gt;
&lt;span class="c1"&gt;#@author: wklken@yeah.net&lt;/span&gt;

&lt;span class="c1"&gt;#先实现一个最大堆&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MaxHeap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#第一个元素用不到，只是为了将下标转为1开始，方便计算节点的位置&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;#插入节点&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="c1"&gt;#如果插入节点大于其父节点，需要交换二者,反复，直到值小于父节点&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#父节点下移&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;  &lt;span class="c1"&gt;#把 value插入对应位置&lt;/span&gt;
    &lt;span class="c1"&gt;#删除最大节点——最大的是根节点&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deleteMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;#没有元素了&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;#最大&lt;/span&gt;

        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#每次取最后一个，若是只剩两个的情况，pop&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="c1"&gt;#每次，移除根节点，将树的最后一个节点挪到根节点，然后从上到下，调整位置，保证树是一个最大堆&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;current_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;  &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;current_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;current_size&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;
            &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initFromList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#从最后一棵子树开始，调整每一棵子树&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="n"&gt;t_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

              &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
              &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                      &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t_root&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                      &lt;span class="k"&gt;break&lt;/span&gt;
                  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
                  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t_root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，实现排序过程：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;heap_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MaxHeap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initFromList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deleteMax&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.概念，过程描述？&lt;/p&gt;
&lt;p&gt;B. 时间复杂度？空间复杂度？是否是稳定排序？&lt;/p&gt;
&lt;p&gt;C.适用场景，何种情况下表现最优&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|插入排序】插入排序</title><link href="http://www.wklken.me/posts/2012/06/02/python-ds-10-sort-insert.html" rel="alternate"></link><published>2012-06-02T00:00:00+08:00</published><updated>2012-06-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-06-02:/posts/2012/06/02/python-ds-10-sort-insert.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+示例分析
1.插入排序实现
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;插入排序，简单来说就是每次拿一个新的数，将其插入到有序序列中.&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[8, 4, 3, 1, 6, 9, 2, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 1  #从第二个数开始&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 1 , change-&amp;gt; [4, 8, 3, 1 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+示例分析
1.插入排序实现
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;插入排序，简单来说就是每次拿一个新的数，将其插入到有序序列中.&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[8, 4, 3, 1, 6, 9, 2, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 1  #从第二个数开始&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 1 , change-&amp;gt; [4, 8, 3, 1, 6, 9, 2, 7]  #移动一次，插入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 2 , change-&amp;gt; [3, 4, 8, 1, 6, 9, 2, 7] #移动两次，插入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 3&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 3 , change-&amp;gt; [1, 3, 4, 8, 6, 9, 2, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 4&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 1 , change-&amp;gt; [1, 3, 4,6, 8, 9, 2, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 5&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 0 ,  nochange -&amp;gt; [1, 3, 4, 6, 8, 9, 2, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 6&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 5 , change-&amp;gt; [1,2, 3, 4, 6, 8, 9, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 7&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 2 , change-&amp;gt; [1, 2, 3, 4, 6,7, 8, 9]

[1, 2, 3, 4, 6, 7, 8, 9]
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;插入排序python实现&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#插入排序&lt;/span&gt;
&lt;span class="c1"&gt;#@author: wklken@yeah.net&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt; &lt;span class="c1"&gt;#从第二个元素开始&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;insert_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改进及优化：&lt;/p&gt;
&lt;p&gt;1.加入监控，已排序完成直接退出&lt;/p&gt;
&lt;p&gt;2.使用二分插入排序，即，处理某个节点往前插入的时候，使用二分查找插入&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|交换排序】地精排序及改进</title><link href="http://www.wklken.me/posts/2012/05/27/python-ds-06-sort-gnome.html" rel="alternate"></link><published>2012-05-27T00:00:00+08:00</published><updated>2012-05-27T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-27:/posts/2012/05/27/python-ds-06-sort-gnome.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;地精排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.地精排序实现
2.改进
3.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科:http://en.wikipedia.org/wiki/Gnome_sort(目前只有英文版的)&lt;/p&gt;
&lt;p&gt;地精排序又称侏儒排序，类似于插入排序，但是将一个数放入其正确位置的交换同冒泡排序（一系列交换）&lt;/p&gt;
&lt;p&gt;简单，只有一层循环，&lt;/p&gt;
&lt;p&gt;时间复杂度O(n^2)，最优复杂度O(n),平均时间复杂度O(n^2)&lt;/p&gt;
&lt;p&gt;其实思想很简单,往前冒泡，一旦发生数据交换，就往回冒泡，直到把被交换数字放入正确位置，之后，继续前进&lt;/p&gt;
&lt;p&gt;伪代码(来自于维基百科)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;procedure gnomeSort(a …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;地精排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.地精排序实现
2.改进
3.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科:http://en.wikipedia.org/wiki/Gnome_sort(目前只有英文版的)&lt;/p&gt;
&lt;p&gt;地精排序又称侏儒排序，类似于插入排序，但是将一个数放入其正确位置的交换同冒泡排序（一系列交换）&lt;/p&gt;
&lt;p&gt;简单，只有一层循环，&lt;/p&gt;
&lt;p&gt;时间复杂度O(n^2)，最优复杂度O(n),平均时间复杂度O(n^2)&lt;/p&gt;
&lt;p&gt;其实思想很简单,往前冒泡，一旦发生数据交换，就往回冒泡，直到把被交换数字放入正确位置，之后，继续前进&lt;/p&gt;
&lt;p&gt;伪代码(来自于维基百科)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;procedure gnomeSort(a[])
    pos := 1
    while pos &amp;lt; length(a)
        if (a[pos] &amp;gt;= a[pos-1])
            pos := pos + 1
        else
            swap a[pos] and a[pos-1]
            if (pos &amp;gt; 1)
                pos := pos - 1
            else
                pos := pos + 1
            end if
        end if
    end while
end procedure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[5, 3, 2, 4]               #输入数组

i=0, i=i+1=1    #初始，i=0 ，直接i+=1

cmp l[0]= 5  l[1]= 3
change -&amp;gt; [3, 5, 2, 4]
swap, i=i-1=0   #发生交换，i=i-1

i=0, i=i+1=1   #i=0,i+=1

cmp l[0]= 3  l[1]= 5
no swap, i=i+1=1   #无交换，i+=1

cmp l[1]= 5  l[2]= 2
change -&amp;gt; [3, 2, 5, 4]  #交换
swap, i=i-1=1    #i=i-1，反向冒泡开始

cmp l[0]= 3  l[1]= 2
change -&amp;gt; [2, 3, 5, 4]
swap, i=i-1=0  # 交换

i=0, i=i+1=1
cmp l[0]= 2  l[1]= 3
no swap, i=i+1=1 #无交换，i+=1

cmp l[1]= 3  l[2]= 5
no swap, i=i+1=2 #无交换，i+=1

cmp l[2]= 5  l[3]= 4
change -&amp;gt; [2, 3, 4, 5]
swap, i=i-1=2  #交换,i-=1

cmp l[1]= 3  l[2]= 4
no swap, i=i+1=2

cmp l[2]= 4  l[3]= 5
no swap, i=i+1=3 #结束排序
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1 start&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# 地精排序&lt;/span&gt;
&lt;span class="c1"&gt;#@author: wklken@yeah.net&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gnome_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;#i=0或者正序不需交换，i+1&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;#否则，交换两数，i回退&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;观察上面例子，是不是发现有些别扭.......&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[3, 5, 2, 4]  #比较 5,2
[3, 2, 5, 4]  #交换
[3, 2,5, 4]  #比较 3,2
[2, 3, 5, 4]  #交换
[2, 3, 5, 4]    #比较2,3
[2, 3, 5, 4]    #比较3,5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没错，若是到了b存在交换，反向冒泡，直至把被交换数冒泡放到其有序位置a,然后再从a-&amp;gt;b进行比较冒泡&lt;/p&gt;
&lt;p&gt;其实，a-&amp;gt;b这一段序列已经是有序的，不需要浪费比较次数在这上面&lt;/p&gt;
&lt;p&gt;所以我们进行jump&lt;/p&gt;
&lt;p&gt;即，记录b的位置，当发现反序冒泡没有交换时（冒泡结束），jump到b位置，继续正序冒泡&lt;/p&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gnome_sort2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;current_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;#保存反向冒泡前位置&lt;/span&gt;
    &lt;span class="n"&gt;back_noswap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;#标识反向冒泡是否完成&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;#i=0或者正序不需交换，i+1&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;back_noswap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;#否则，交换两数，i回退&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;current_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;#开始反序，记录位置,跳转回来后比较就是 i i+1两个数的比较，之前数已有序&lt;/span&gt;
            &lt;span class="n"&gt;back_noswap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"change -&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_index&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;back_noswap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;#满足 当前是反序冒泡，且未发数据交换，代表已结束，可以跳回&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_index&lt;/span&gt;
            &lt;span class="n"&gt;current_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"jump"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际过程：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[5, 3, 2, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmp  5 3&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;change -&amp;gt; [3, 5, 2, 4]
jump 2   #这里jump的位置是i+1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmp  5 2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;change -&amp;gt; [3, 2, 5, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmp  3 2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;change -&amp;gt; [2, 3, 5, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jump 2
cmp  3 5
cmp  5 4&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;change -&amp;gt; [2, 3, 4, 5]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmp  3 4
jump 4&lt;/p&gt;
&lt;p&gt;相同例子的序列，改进前比较次数12，改进后只需要9次&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.地精排序概念，过程描述？&lt;/p&gt;
&lt;p&gt;B.时间复杂度？空间复杂度？是否是稳定排序？&lt;/p&gt;
&lt;p&gt;C.适用场景，何种情况下表现最优&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|交换排序】Bogo排序</title><link href="http://www.wklken.me/posts/2012/05/27/python-ds-07-sort-bogo.html" rel="alternate"></link><published>2012-05-27T00:00:00+08:00</published><updated>2012-05-27T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-27:/posts/2012/05/27/python-ds-07-sort-bogo.html</id><summary type="html">&lt;p&gt;维基百科上排序算法表里的算法基本都实现完了，陆续发出来&lt;/p&gt;
&lt;p&gt;有几个排序只有英文维基说明，有几个有中文，但是压根对不上，例如臭皮匠排序.....晕死，查找中....&lt;/p&gt;
&lt;p&gt;另外快排不敢轻易发出，等完全所有实现版本都搜罗分析完了再来.&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;地精排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念(木有啥伪代码)
2.bogo排序实现
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是一个比较蛋碎的排序算法.....囧&lt;/p&gt;
&lt;p&gt;原理：将一堆卡片撒到地上，查看是否已排序好，若没有，捡起来再撒一次，直到有序情况出现.&lt;/p&gt;
&lt;p&gt;维基百科:http://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;有兴趣看看无限猴子定理:http://zh.wikipedia.org/wiki/%E7%84%A1 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;维基百科上排序算法表里的算法基本都实现完了，陆续发出来&lt;/p&gt;
&lt;p&gt;有几个排序只有英文维基说明，有几个有中文，但是压根对不上，例如臭皮匠排序.....晕死，查找中....&lt;/p&gt;
&lt;p&gt;另外快排不敢轻易发出，等完全所有实现版本都搜罗分析完了再来.&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;地精排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念(木有啥伪代码)
2.bogo排序实现
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是一个比较蛋碎的排序算法.....囧&lt;/p&gt;
&lt;p&gt;原理：将一堆卡片撒到地上，查看是否已排序好，若没有，捡起来再撒一次，直到有序情况出现.&lt;/p&gt;
&lt;p&gt;维基百科:http://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;有兴趣看看无限猴子定理:http://zh.wikipedia.org/wiki/%E7%84%A1%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86&lt;/p&gt;
&lt;p&gt;1.实现:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#bogo排序&lt;/span&gt;
&lt;span class="c1"&gt;#@author: wklken@yeah.net&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#判断序列是否有序&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bogo_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#随机重排&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|选择排序】选择排序</title><link href="http://www.wklken.me/posts/2012/05/27/python-ds-07-sort-select.html" rel="alternate"></link><published>2012-05-27T00:00:00+08:00</published><updated>2012-05-27T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-27:/posts/2012/05/27/python-ds-07-sort-select.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.选择排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E9%81%B8%E6%93%87%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#共有&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;次选择&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;
        &lt;span class="k"&gt;for …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.选择排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E9%81%B8%E6%93%87%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#共有&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;次选择&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;  &lt;span class="nx"&gt;downto&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="err"&gt;#每次从剩余序列选出最大的&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;max_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;max_index&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="err"&gt;#将最大的换到后面&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;[49, 38, 65, 97, 76, 13, 27]&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Current index 6 value= 27 Max index: 3 value= 97
exchange -&amp;gt; [49, 38, 65, 27, 76, 13, 97]
Current index 5 value= 13 Max index: 4 value= 76
exchange -&amp;gt; [49, 38, 65, 27, 13, 76, 97]
Current index 4 value= 13 Max index: 2 value= 65
exchange -&amp;gt; [49, 38, 13, 27, 65, 76, 97]
Current index 3 value= 27 Max index: 0 value= 49
exchange -&amp;gt; [27, 38, 13, 49, 65, 76, 97]
Current index 2 value= 13 Max index: 1 value= 38
exchange -&amp;gt; [27, 13, 38, 49, 65, 76, 97]
Current index 1 value= 13 Max index: 0 value= 27
exchange -&amp;gt; [13, 27, 38, 49, 65, 76, 97]
Done
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;max_index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.概念，过程描述？&lt;/p&gt;
&lt;p&gt;B.交换次数，比较次数，赋值次数?&lt;/p&gt;
&lt;p&gt;C. 时间复杂度？空间复杂度？是否是稳定排序？&lt;/p&gt;
&lt;p&gt;D.适用场景，何种情况下表现最优&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>Python修改xml任意内容[xml.etree.ElementTree]</title><link href="http://www.wklken.me/posts/2012/05/25/python-xml-etree.html" rel="alternate"></link><published>2012-05-25T00:00:00+08:00</published><updated>2012-05-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-25:/posts/2012/05/25/python-xml-etree.html</id><summary type="html">&lt;p&gt;使用库 &lt;a href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;xml.etree.ElementTree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在实际应用中，需要对xml配置文件进行实时修改，&lt;/p&gt;
&lt;p&gt;1.增加、删除 某些节点&lt;/p&gt;
&lt;p&gt;2.增加，删除，修改某个节点下的某些属性&lt;/p&gt;
&lt;p&gt;3.增加，删除，修改某些节点的文本&lt;/p&gt;
&lt;h3 id="shi-yong-xmlwen-dang"&gt;使用xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;framework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;processers&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/A.so"&lt;/span&gt;
            &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"/tmp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fordelete"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用库 &lt;a href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;xml.etree.ElementTree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在实际应用中，需要对xml配置文件进行实时修改，&lt;/p&gt;
&lt;p&gt;1.增加、删除 某些节点&lt;/p&gt;
&lt;p&gt;2.增加，删除，修改某个节点下的某些属性&lt;/p&gt;
&lt;p&gt;3.增加，删除，修改某些节点的文本&lt;/p&gt;
&lt;h3 id="shi-yong-xmlwen-dang"&gt;使用xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;framework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;processers&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/A.so"&lt;/span&gt;
            &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"/tmp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fordelete"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so2222222"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;services&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;prefix=&lt;/span&gt;&lt;span class="s"&gt;"/bin/search?"&lt;/span&gt;
                &lt;span class="na"&gt;output_formatter=&lt;/span&gt;&lt;span class="s"&gt;"OutPutFormatter:service_inc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;chain&lt;/span&gt; &lt;span class="na"&gt;sequency=&lt;/span&gt;&lt;span class="s"&gt;"chain1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;chain&lt;/span&gt; &lt;span class="na"&gt;sequency=&lt;/span&gt;&lt;span class="s"&gt;"chain2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/chain&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"update"&lt;/span&gt; &lt;span class="na"&gt;prefix=&lt;/span&gt;&lt;span class="s"&gt;"/bin/update?"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;chain&lt;/span&gt; &lt;span class="na"&gt;sequency=&lt;/span&gt;&lt;span class="s"&gt;"chain3"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fordelete"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/services&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/processers&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/framework&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-xian-si-xiang"&gt;实现思想&lt;/h3&gt;
&lt;p&gt;使用ElementTree，先将文件读入，解析成树，之后，根据路径，可以定位到树的每个节点，再对节点进行修改，最后直接将其输出&lt;/p&gt;
&lt;h3 id="shi-xian-dai-ma"&gt;实现代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding=utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# author : wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;# date: 2012-05-25&lt;/span&gt;
&lt;span class="c1"&gt;# version: 0.1&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ElementTree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''读取并解析xml文件&lt;/span&gt;
&lt;span class="sd"&gt;       in_path: xml路径&lt;/span&gt;
&lt;span class="sd"&gt;       return: ElementTree'''&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ElementTree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''将xml文件写出&lt;/span&gt;
&lt;span class="sd"&gt;       tree: xml树&lt;/span&gt;
&lt;span class="sd"&gt;       out_path: 写出路径'''&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;xml_declaration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''判断某个节点是否包含所有传入参数属性&lt;/span&gt;
&lt;span class="sd"&gt;       node: 节点&lt;/span&gt;
&lt;span class="sd"&gt;       kv_map: 属性及属性值组成的map'''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;#---------------search -----&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''查找某个路径匹配的所有节点&lt;/span&gt;
&lt;span class="sd"&gt;       tree: xml树&lt;/span&gt;
&lt;span class="sd"&gt;       path: 节点路径'''&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_node_by_keyvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''根据属性及属性值定位符合的节点，返回节点&lt;/span&gt;
&lt;span class="sd"&gt;       nodelist: 节点列表&lt;/span&gt;
&lt;span class="sd"&gt;       kv_map: 匹配属性及属性值map'''&lt;/span&gt;
    &lt;span class="n"&gt;result_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;if_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;result_nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result_nodes&lt;/span&gt;

&lt;span class="c1"&gt;#---------------change -----&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_node_properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''修改/增加 /删除 节点的属性及属性值&lt;/span&gt;
&lt;span class="sd"&gt;       nodelist: 节点列表&lt;/span&gt;
&lt;span class="sd"&gt;       kv_map:属性及属性值map'''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_node_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''改变/增加/删除一个节点的文本&lt;/span&gt;
&lt;span class="sd"&gt;       nodelist:节点列表&lt;/span&gt;
&lt;span class="sd"&gt;       text : 更新后的文本'''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;is_delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''新造一个节点&lt;/span&gt;
&lt;span class="sd"&gt;       tag:节点标签&lt;/span&gt;
&lt;span class="sd"&gt;       property_map:属性及属性值map&lt;/span&gt;
&lt;span class="sd"&gt;       content: 节点闭合标签里的文本内容&lt;/span&gt;
&lt;span class="sd"&gt;       return 新节点'''&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_child_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''给一个节点添加子节点&lt;/span&gt;
&lt;span class="sd"&gt;       nodelist: 节点列表&lt;/span&gt;
&lt;span class="sd"&gt;       element: 子节点'''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;del_node_by_tagkeyvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''同过属性及属性值定位一个节点，并删除之&lt;/span&gt;
&lt;span class="sd"&gt;       nodelist: 父节点列表&lt;/span&gt;
&lt;span class="sd"&gt;       tag:子节点标签&lt;/span&gt;
&lt;span class="sd"&gt;       kv_map: 属性及属性值列表'''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;parent_node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getchildren&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;if_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;parent_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#1. 读取xml文件&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./test.xml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#2. 属性修改&lt;/span&gt;
      &lt;span class="c1"&gt;#A. 找到父节点&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"processers/processer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;#B. 通过属性准确定位子节点&lt;/span&gt;
    &lt;span class="n"&gt;result_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_node_by_keyvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"BProcesser"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="c1"&gt;#C. 修改节点属性&lt;/span&gt;
    &lt;span class="n"&gt;change_node_properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="c1"&gt;#D. 删除节点属性&lt;/span&gt;
    &lt;span class="n"&gt;change_node_properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#3. 节点修改&lt;/span&gt;
      &lt;span class="c1"&gt;#A.新建节点&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"money"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"200000"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;"this is the firest content"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;#B.插入到父节点之下&lt;/span&gt;
    &lt;span class="n"&gt;add_child_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#4. 删除节点&lt;/span&gt;
       &lt;span class="c1"&gt;#定位父节点&lt;/span&gt;
    &lt;span class="n"&gt;del_parent_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"processers/services/service"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="c1"&gt;#准确定位子节点并删除之&lt;/span&gt;
    &lt;span class="n"&gt;target_del_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;del_node_by_tagkeyvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;del_parent_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"chain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"sequency"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"chain1"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;#5. 修改节点文本&lt;/span&gt;
       &lt;span class="c1"&gt;#定位节点&lt;/span&gt;
    &lt;span class="n"&gt;text_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_node_by_keyvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"processers/services/service/chain"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"sequency"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"chain3"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;change_node_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"new text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#6. 输出到结果文件&lt;/span&gt;
    &lt;span class="n"&gt;write_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"./out.xml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xiu-gai-hou-de-jie-guo"&gt;修改后的结果&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version='1.0' encoding='utf-8'?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;framework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;processers&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/A.so"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AProcesser"&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"/tmp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;age=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;person&lt;/span&gt; &lt;span class="na"&gt;age=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt; &lt;span class="na"&gt;money=&lt;/span&gt;&lt;span class="s"&gt;"200000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;this is the firest content&lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;age=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so2222222"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;person&lt;/span&gt; &lt;span class="na"&gt;age=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt; &lt;span class="na"&gt;money=&lt;/span&gt;&lt;span class="s"&gt;"200000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;this is the firest content&lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;services&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;output_formatter=&lt;/span&gt;&lt;span class="s"&gt;"OutPutFormatter:service_inc"&lt;/span&gt;
                &lt;span class="na"&gt;prefix=&lt;/span&gt;&lt;span class="s"&gt;"/bin/search?"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;chain&lt;/span&gt; &lt;span class="na"&gt;sequency=&lt;/span&gt;&lt;span class="s"&gt;"chain2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"update"&lt;/span&gt; &lt;span class="na"&gt;prefix=&lt;/span&gt;&lt;span class="s"&gt;"/bin/update?"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;chain&lt;/span&gt; &lt;span class="na"&gt;sequency=&lt;/span&gt;&lt;span class="s"&gt;"chain3"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fordelete"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;new text&lt;span class="nt"&gt;&amp;lt;/chain&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/services&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/processers&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/framework&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2012-05-25&lt;/p&gt;</content><category term="python"></category><category term="xml"></category></entry><entry><title>数据结构&amp;算法实践—【排序|交换排序】奇偶排序</title><link href="http://www.wklken.me/posts/2012/05/17/python-ds-04-sort-oddeven.md.html" rel="alternate"></link><published>2012-05-17T00:00:00+08:00</published><updated>2012-05-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-17:/posts/2012/05/17/python-ds-04-sort-oddeven.md.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;奇偶排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.奇偶排序实现
2.Question
3.后续扩展
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;odd_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="nx"&gt;whie&lt;/span&gt; &lt;span class="nx"&gt;has_swap&lt;/span&gt;:
        &lt;span class="kt"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;奇偶排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.奇偶排序实现
2.Question
3.后续扩展
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;odd_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="nx"&gt;whie&lt;/span&gt; &lt;span class="nx"&gt;has_swap&lt;/span&gt;:
        &lt;span class="kt"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;奇偶排序&lt;/p&gt;
&lt;p&gt;类似于冒泡排序，冒泡排序并行化的版本()&lt;/p&gt;
&lt;p&gt;简单但效率不高&lt;/p&gt;
&lt;p&gt;每一轮存在两次排序：奇数排序（下标奇数与其邻居比较&amp;amp;交换），偶数排序（下标偶数与其邻居比较交换）&lt;/p&gt;
&lt;p&gt;直到不存在数据交换&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[50, 10, 30, 20, 40, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一轮 偶数排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp 50 10
change [10, 50, 30, 20, 40, 60]
cmp 30 20
change [10, 50, 20, 30, 40, 60]
cmp 40 60
odd range [10, 50, 20, 30, 40, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一轮 奇数排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp 50 20
change [10, 20, 50, 30, 40, 60]
cmp 30 40
even range [10, 20, 50, 30, 40, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二轮 偶数排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp 10 20
cmp 50 30
change [10, 20, 30, 50, 40, 60]
cmp 40 60
odd range [10, 20, 30, 50, 40, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二轮 奇数排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp 20 30
cmp 50 40
change [10, 20, 30, 40, 50, 60]
even range [10, 20, 30, 40, 50, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三轮 不存在数据交换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp 10 20
cmp 30 40
cmp 50 60
odd range [10, 20, 30, 40, 50, 60]
cmp 20 30
cmp 40 50
even range [10, 20, 30, 40, 50, 60] #到这里，无数据交换，结束
[10, 20, 30, 40, 50, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;start&lt;/p&gt;
&lt;p&gt;:::python
def oddeven_sort(l):
    odd_range = range(0,len(l)-1,2)
    even_range = range(1,len(l)-1,2)
    sign = 1
    while sign:
        sign = 0
        for i in odd_range:
            if l[i] &amp;gt; l[i+1]:
                l[i], l[i+1] = l[i+1],l[i]
                sign = 1
        for j in even_range:
            if l[j] &amp;gt; l[j+1]:
                l[j], l[j+1] = l[j+1], l[j]
                sign = 1
    print l&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;start&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.奇偶排序概念，过程描述？&lt;/p&gt;
&lt;p&gt;B. 时间复杂度？空间复杂度？是否是稳定排序？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后续扩展——Batcher奇偶归并排序（后面实现）&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|交换排序】梳子排序</title><link href="http://www.wklken.me/posts/2012/05/17/python-ds-05-sort-comb.html" rel="alternate"></link><published>2012-05-17T00:00:00+08:00</published><updated>2012-05-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-17:/posts/2012/05/17/python-ds-05-sort-comb.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;梳子排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.梳子排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E6%A2%B3%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comb_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;
    &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.3&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//更新间距&lt;/span&gt;
        &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;gap …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;梳子排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.梳子排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E6%A2%B3%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comb_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;
    &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.3&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//更新间距&lt;/span&gt;
        &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;gap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt;
        &lt;span class="nx"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="c1"&gt;//梳一次&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="nx"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;梳子排序:&lt;/p&gt;
&lt;p&gt;间隔gap   递减率rate(大于1的数)&lt;/p&gt;
&lt;p&gt;比较 i 和 i+gap 位置的数字，若反序，交换，然后i+=1，直到比较i+gap超过最大索引&lt;/p&gt;
&lt;p&gt;然后gap /= rate，再重复上面操作&lt;/p&gt;
&lt;p&gt;直到gap=1 ，执行最后一遍梳理后结束&lt;/p&gt;
&lt;p&gt;可以想象成 先拿一把大梳子（只有三个齿两个缝的）从第一个梳到最后一个，把两个缝隙里面反序的数交换&lt;/p&gt;
&lt;p&gt;再换把小点的梳子，重复.&lt;/p&gt;
&lt;p&gt;最终，中间那个齿消失（梳理相邻两个数），完成最后一遍梳理&lt;/p&gt;
&lt;p&gt;例子：(关注gap和cmp的下标)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[8, 4, 3, 7, 6, 5, 2, 1]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gap:  6  [初始设定gap=size/1.3]&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp l[0]=8,l[6]=2
change [2, 4, 3, 7, 6, 5,8, 1]
cmp l[1]=4,l[7]=1
change [2, 1, 3, 7, 6, 5, 8,4]
one time: [2, 1, 3, 7, 6, 5, 8, 4]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gap:  4&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp l[0]=2,l[4]=6
cmp l[1]=1,l[5]=5
cmp l[2]=3,l[6]=8
cmp l[3]=7,l[7]=4
change [2, 1, 3, 4, 6, 5, 8,7]
one time: [2, 1, 3, 4, 6, 5, 8, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gap:  3&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp l[0]=2,l[3]=4
cmp l[1]=1,l[4]=6
cmp l[2]=3,l[5]=5
cmp l[3]=4,l[6]=8
cmp l[4]=6,l[7]=7
one time: [2, 1, 3, 4, 6, 5, 8, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gap:  2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp l[0]=2,l[2]=3
cmp l[1]=1,l[3]=4
cmp l[2]=3,l[4]=6
cmp l[3]=4,l[5]=5
cmp l[4]=6,l[6]=8
cmp l[5]=5,l[7]=7
one time: [2, 1, 3, 4, 6, 5, 8, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gap:  1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp l[0]=2,l[1]=1
change [1,2, 3, 4, 6, 5, 8, 7]
cmp l[1]=2,l[2]=3
cmp l[2]=3,l[3]=4
cmp l[3]=4,l[4]=6
cmp l[4]=6,l[5]=5
change [1, 2, 3, 4, 5,6, 8, 7]
cmp l[5]=6,l[6]=8
cmp l[6]=8,l[7]=7
change [1, 2, 3, 4, 5, 6, 7,8]
one time: [1, 2, 3, 4, 5, 6, 7, 8]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;观察上面例子，梳排序可以有效地将乌龟（尾部的小数值和头部的大数值）调整到有序后位置的附近&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;start&lt;/p&gt;
&lt;p&gt;:::python
def comb_sort(l):
    dis = int(len(l)/1.3)
    while dis:
        for i in range(len(l)-dis):
            if l[i] &amp;gt; l[i+dis]:
                l[i], l[i+dis] = l[i+dis], l[i]
        dis = int(dis/1.3)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2 start&lt;/p&gt;
&lt;p&gt;A.奇偶排序概念，过程描述？&lt;/p&gt;
&lt;p&gt;B. 时间复杂度？空间复杂度？是否是稳定排序？&lt;/p&gt;
&lt;p&gt;C.适用场景&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|交换排序】冒泡排序及改进</title><link href="http://www.wklken.me/posts/2012/05/16/python-ds-02-sort-bubble.html" rel="alternate"></link><published>2012-05-16T00:00:00+08:00</published><updated>2012-05-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-16:/posts/2012/05/16/python-ds-02-sort-bubble.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;冒泡排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.基本冒泡排序
2.冒泡排序改进1
3.冒泡排序改进2——局部冒泡排序
4.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码：(来自百科)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubblesort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;冒泡排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.基本冒泡排序
2.冒泡排序改进1
3.冒泡排序改进2——局部冒泡排序
4.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码：(来自百科)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubblesort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="nx"&gt;downto&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简要排序过程的示例：(基本冒泡排序)&lt;/p&gt;
&lt;p&gt;初始数组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[50, 10, 30, 20, 40, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一轮：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp 50 10 -&amp;gt; change [10, 50, 30, 20, 40, 60]
cmp 50 30 -&amp;gt; change [10, 30, 50, 20, 40, 60]
cmp 50 20 -&amp;gt; change [10, 30, 20, 50, 40, 60]
cmp 50 40 -&amp;gt; change [10, 30, 20, 40, 50, 60]
cmp 50 60 -&amp;gt; nochange
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二轮:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[10, 30, 20, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 10 30 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 30 20 -&amp;gt; change [10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 30 40 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 40 50 -&amp;gt; nochange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三轮&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 10 20 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 20 30 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 30 40 -&amp;gt; nochange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第四轮：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 10 20 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 20 30 -&amp;gt; nochange&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第五轮：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 10 20 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="k"&gt;[10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmp count 15&lt;/p&gt;
&lt;p&gt;即共进行n-1=5轮冒泡，比较次数为 (n-1) + (n-2) + ......+1 =n*(n-1)/2=15&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本冒泡排序python实现:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#冒泡排序，base&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#每一轮冒泡，第 i个 元素会是最大的(i&amp;lt;=size-1)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#从0到i-1,比较 current 和next,若current &amp;gt; next，对换&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;问题：在基本冒泡排序的示例中，第三轮结束时，其实已经排序完成了，但是还是一直会持续后面几轮的排序，这就带来了无谓的浪费.&lt;/p&gt;
&lt;p&gt;改进：加入标志，判断，若是上一轮不存在数据交换，代表上一轮已经是排序的了，退出&lt;/p&gt;
&lt;p&gt;比较次数:12&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#改进1:  当某一轮跑完，不存在数据交换时，代表已排序完成，此时退出&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubble_improve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#初始标志，1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#若是上一轮存在数据交换，继续执行排序&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;#每一轮初始，交换标志为0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#存在交换，标志置为1&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="c1"&gt;#否则，代表目前序列已经排序完毕了&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;局部冒泡排序：(资料不多，不知道自己理解对不对)&lt;/p&gt;
&lt;p&gt;序列[ a b c d ] 冒泡到了b,此时a小于b，比较b c，若是 b 大于 c，交换b c 得到 [ a c b d ]&lt;/p&gt;
&lt;p&gt;通常冒泡排序一直往前，继续比较b和d&lt;/p&gt;
&lt;p&gt;其实，在完成一次数据交换时(b&amp;lt;-&amp;gt;c)，可以反向增加一次比较，(a 和 c) ，若是a&amp;gt;c,再次交换得到[ c a b d] ——反向做一次冒泡&lt;/p&gt;
&lt;p&gt;（百度百科有几行....凑合看）&lt;/p&gt;
&lt;p&gt;定义：可以在一趟全局扫描中，对每一反序数据对进行局部冒泡排序处理，称之为局部冒泡排序
局部冒泡排序与冒泡排序算法具有相同的时间复杂度，并且在正序和逆序的情况下，所需的关键字的比较次数和移动次数完全相同。
由于局部冒泡排序和冒泡排序的数据移动次数总是相同的，而局部冒泡排序所需关键字的比较次数常少于冒泡排序，这意味着局部冒泡排序很可能在平均比较次数上对冒泡排序有所改进
当比较次数较少的优点不足以抵消其程序复杂度所带来的额外开销，而当数据量较大时，局部冒泡排序的时间性能则明显优于冒泡排序
(查看百度百科，有张对比图)&lt;/p&gt;
&lt;p&gt;简而言之，正向冒泡时，若存在数据交换，反向再进行一次冒泡比较。减少了比较次数&lt;/p&gt;
&lt;p&gt;why?&lt;/p&gt;
&lt;p&gt;假设在第二轮冒泡  到了50 &amp;lt;-&amp;gt; 30&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[10, 20, 40, 50, 30, 60]&lt;/span&gt;
&lt;span class="na"&gt;带标志位冒泡：cmp 50 30 -&amp;gt;change  [10, 20, 40, 30, 50, 60]     count+&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;第三轮 count+&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4      (10,20) (20,40) (40,30) (40,50)&lt;/span&gt;
&lt;span class="na"&gt;第四轮count +3   (10,20) (20,30) (30,40)     (无数据交换了，退出)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;共   8次&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;局部冒泡: cmp 50 30 -&amp;gt;change  [10, 20, 40, 30, 50, 60]    count+=1
cmp 40 30 -&amp;gt; change  [10, 20, 30, 40,  50, 60]  count+=1
第三轮 count+=4(无数据交换了，退出)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;共 6次&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#改进2: 局部冒泡排序&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubble_improve2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;inner_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;#本次是否存在数据交换标志，每次置空，不复用flag的原因是如果第一次就交换了，会造成不必要的局部冒泡&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="n"&gt;inner_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="c1"&gt;#从前往后的冒泡，j与j+1发生数据交换了,反向冒泡 j-1 j&lt;/span&gt;
                &lt;span class="c1"&gt;#若是本轮存在数据交换，局部排序处理 j-1  j j+1，保证是从小到大的 &lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inner_flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;局部冒泡排序一个示例过程：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[50, 10, 30, 20, 40, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 50 10 -&amp;gt; change [10, 50, 30, 20, 40, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 50 30 -&amp;gt; change [10, 30, 50, 20, 40, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 50 20 -&amp;gt; change [10, 30, 20, 50, 40, 60]&lt;/span&gt;
&lt;span class="na"&gt;inner cmp 30 20&lt;/span&gt;
&lt;span class="na"&gt;inner change [10, 20, 30, 50, 40, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 50 40 -&amp;gt; change [10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;inner cmp 30 40&lt;/span&gt;
&lt;span class="na"&gt;cmp 50 60 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="k"&gt;[10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;span class="na"&gt;cmp 10 20 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 20 30 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 30 40 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="na"&gt;cmp 40 50 -&amp;gt; nochange&lt;/span&gt;
&lt;span class="k"&gt;[10, 20, 30, 40, 50, 60]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仅是贴出来，权当复习，木有答案，后续补充&lt;/p&gt;
&lt;p&gt;A.冒泡排序概念，过程描述？&lt;/p&gt;
&lt;p&gt;B.最差，平均，最优 时间复杂度？&lt;/p&gt;
&lt;p&gt;C.空间复杂度？&lt;/p&gt;
&lt;p&gt;D.是否是稳定排序？&lt;/p&gt;
&lt;p&gt;E.如何改进？&lt;/p&gt;
&lt;p&gt;F.局部冒泡排序原理？&lt;/p&gt;
&lt;p&gt;G.适用场景，什么情况下最优，什么情况下最差？&lt;/p&gt;
&lt;p&gt;-----------------------------------------  END -------------------------------------------------&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;这是第一篇，有什么不对请指正哈，欢迎补充任何问题和答案&lt;/p&gt;
&lt;p&gt;白天上班加班(SDET)，夜深敲代码(python,java.......)，会坚持写完的&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践—【排序|交换排序】鸡尾酒排序</title><link href="http://www.wklken.me/posts/2012/05/16/python-ds-03-sort-cocktail.html" rel="alternate"></link><published>2012-05-16T00:00:00+08:00</published><updated>2012-05-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-16:/posts/2012/05/16/python-ds-03-sort-cocktail.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;鸡尾酒排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.鸡尾酒排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cocktail_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;f …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;鸡尾酒排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.鸡尾酒排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cocktail_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;鸡尾酒排序是冒泡排序的变种——双向冒泡排序&lt;/p&gt;
&lt;p&gt;从伪代码可以看到，每一轮循环，从前到后一次正向冒泡，之后从后往前再进行一次逆向冒泡(每一轮存在两个数被排序)&lt;/p&gt;
&lt;p&gt;可以看到的表现是两边先排序好，逐渐向中间有序&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt;[50, 10, 30, 20, 60, 40, 1]
-&amp;gt; [10, 30, 20, 50, 40, 1, 60]  第一轮正向
-&amp;gt; [1, 10, 30, 20, 50, 40, 60]  第一轮逆向
-&amp;gt; [1, 10, 20, 30, 40, 50, 60]  第二轮正向
-&amp;gt; [1, 10, 20, 30, 40, 50, 60]  第二轮逆向，无交换，结束
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;详细比较过程:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[50, 10, 30, 20, 60, 40, 1]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一轮     正向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l-&amp;gt;r  cmp 50 10
change [10, 50, 30, 20, 60, 40, 1]
l-&amp;gt;r  cmp 50 30
change [10, 30, 50, 20, 60, 40, 1]
l-&amp;gt;r  cmp 50 20
change [10, 30, 20, 50, 60, 40, 1]
l-&amp;gt;r  cmp 50 60
l-&amp;gt;r  cmp 60 40
change [10, 30, 20, 50, 40, 60, 1]
l-&amp;gt;r  cmp 60 1
change [10, 30, 20, 50, 40, 1, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一轮    逆向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r-&amp;gt;l  cmp 1 40
change [10, 30, 20, 50, 1, 40, 60]
r-&amp;gt;l  cmp 1 50
change [10, 30, 20, 1, 50, 40, 60]
r-&amp;gt;l  cmp 1 20
change [10, 30, 1, 20, 50, 40, 60]
r-&amp;gt;l  cmp 1 30
change [10, 1, 30, 20, 50, 40, 60]
r-&amp;gt;l  cmp 1 10
change [1, 10, 30, 20, 50, 40, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[1, 10, 30, 20, 50, 40, 60]&lt;/p&gt;
&lt;p&gt;第二轮 正向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l-&amp;gt;r  cmp 10 30
l-&amp;gt;r  cmp 30 20
change [1, 10, 20, 30, 50, 40, 60]
l-&amp;gt;r  cmp 30 50
l-&amp;gt;r  cmp 50 40
change [1, 10, 20, 30, 40, 50, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二轮 逆向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r-&amp;gt;l  cmp 40 30
r-&amp;gt;l  cmp 30 20
r-&amp;gt;l  cmp 20 10
[1, 10, 20, 30, 40, 50, 60] (上一轮逆向无交换，结束排序)
[1, 10, 20, 30, 40, 50, 60]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本数组共比较18次，而使用带标志冒泡排序需要21次&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cocktail_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;#用于判断上轮排序是否存在数据交换&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="c1"&gt;#正向，冒泡   从   i 到    对称的位置-1&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#逆向，冒泡  从正向排完最大数的前一个开始，到  i&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;#若是逆向存在交换，代表还没排序完成，否则，排序完成&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改换成while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cocktail_sort2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;#用于判断上轮排序是否存在数据交换&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;#若是逆向存在交换，代表还没排序完成，否则，排序完成&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以维护一个bottom和top，每次bottom+1,top-1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.鸡尾酒排序概念，过程描述？&lt;/p&gt;
&lt;p&gt;B.最差，平均，最优 时间复杂度？
   最差=平均=O(n^2)  最优=O(n)&lt;/p&gt;
&lt;p&gt;C.空间复杂度？&lt;/p&gt;
&lt;p&gt;D.是否是稳定排序？&lt;/p&gt;
&lt;p&gt;E.存在什么方法可以更优化&lt;/p&gt;
&lt;p&gt;F.适用场景，什么情况下最优，什么情况下最差？&lt;/p&gt;
&lt;p&gt;-----------------------------------------  END -------------------------------------------------&lt;/p&gt;
&lt;p&gt;p.s.维基百科的动态排序图很赞&amp;amp;坑爹好几种排序无中文描述，只能啃英文版的百科了，到时候一块贴了&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>数据结构&amp;算法实践-Python——序章</title><link href="http://www.wklken.me/posts/2012/05/10/python-ds-01-start.html" rel="alternate"></link><published>2012-05-10T00:00:00+08:00</published><updated>2012-05-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-05-10:/posts/2012/05/10/python-ds-01-start.html</id><summary type="html">&lt;p&gt;很久很久之前的blog，没写完的系列，当时想写完来着，有点用，先转过来&lt;/p&gt;
&lt;p&gt;数据结构&amp;amp;算法实践——Python &lt;/p&gt;
&lt;p&gt;--------------------------------------目录 START------------------------------------------------&lt;/p&gt;
&lt;p&gt;第一部分列表(目录主要来自于维基百科)&lt;/p&gt;
&lt;p&gt;模块一：经典排序实现&lt;/p&gt;
&lt;p&gt;交换排序法&lt;/p&gt;
&lt;p&gt;冒泡排序 |鸡尾酒排序 |奇偶排序 |梳排序 |地精排序(gnome_sort) |Bogo排序|快速排序&lt;/p&gt;
&lt;p&gt;选择排序法&lt;/p&gt;
&lt;p&gt;选择排序 | 堆排序&lt;/p&gt;
&lt;p&gt;插入排序法&lt;/p&gt;
&lt;p&gt;插入排序 | 希尔排序 | 二叉查找树排序 | Library sort | Patience sorting&lt;/p&gt;
&lt;p&gt;归并排序法&lt;/p&gt;
&lt;p&gt;归并排序 | Strand sort&lt;/p&gt;
&lt;p&gt;非比较排序法&lt;/p&gt;
&lt;p&gt;基数排序 | 桶排序 | 计数排序 | 鸽巢排序 | Burstsort | Bead sort&lt;/p&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;拓扑排序 | 排序网络 | Bitonic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;很久很久之前的blog，没写完的系列，当时想写完来着，有点用，先转过来&lt;/p&gt;
&lt;p&gt;数据结构&amp;amp;算法实践——Python &lt;/p&gt;
&lt;p&gt;--------------------------------------目录 START------------------------------------------------&lt;/p&gt;
&lt;p&gt;第一部分列表(目录主要来自于维基百科)&lt;/p&gt;
&lt;p&gt;模块一：经典排序实现&lt;/p&gt;
&lt;p&gt;交换排序法&lt;/p&gt;
&lt;p&gt;冒泡排序 |鸡尾酒排序 |奇偶排序 |梳排序 |地精排序(gnome_sort) |Bogo排序|快速排序&lt;/p&gt;
&lt;p&gt;选择排序法&lt;/p&gt;
&lt;p&gt;选择排序 | 堆排序&lt;/p&gt;
&lt;p&gt;插入排序法&lt;/p&gt;
&lt;p&gt;插入排序 | 希尔排序 | 二叉查找树排序 | Library sort | Patience sorting&lt;/p&gt;
&lt;p&gt;归并排序法&lt;/p&gt;
&lt;p&gt;归并排序 | Strand sort&lt;/p&gt;
&lt;p&gt;非比较排序法&lt;/p&gt;
&lt;p&gt;基数排序 | 桶排序 | 计数排序 | 鸽巢排序 | Burstsort | Bead sort&lt;/p&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;拓扑排序 | 排序网络 | Bitonic sorter | Batcher odd-even mergesort | Pancake sorting&lt;/p&gt;
&lt;p&gt;低效排序法&lt;/p&gt;
&lt;p&gt;Bogosort | Stooge sort&lt;/p&gt;
&lt;p&gt;模块二：经典查找&lt;/p&gt;
&lt;p&gt;模块三：数据结构(后续补充完整，树和图是大头，包含很多分类和经典算法)&lt;/p&gt;
&lt;p&gt;线性表   队列   栈   堆   树  图&lt;/p&gt;
&lt;p&gt;--------------------------------------目录 END------------------------------------------------&lt;/p&gt;
&lt;p&gt;写在前面&lt;/p&gt;
&lt;p&gt;毕业迄今也接近一年了，发现很多学校的东西似乎生疏了.&lt;/p&gt;
&lt;p&gt;最近重新拿起数据结构，算法导论，离散数学，决定用代码敲些东西，权当复习&lt;/p&gt;
&lt;p&gt;大部分的地方我只会给出例子和具体的代码实现，顺带给出一些百科的链接，概念和理论性的东西网上都有，不赘述了
  
之所以选择用python来写，主要是python的可读性非常好，即使不写注释，也能很轻松读懂.&lt;/p&gt;
&lt;p&gt;我把这个过程大概切成三个部分：&lt;/p&gt;
&lt;p&gt;1.经典数据结构和算法的实现&lt;/p&gt;
&lt;p&gt;实现基本的经典算法，包括经典排序，经典查找，索引等，基本实现及改进&lt;/p&gt;
&lt;p&gt;实现基本的数据结构，包括线性表，队列，栈，堆，树，图等，包含扩展&lt;/p&gt;
&lt;p&gt;使用实现类似Java的数据结构，至始至终都认为java的api最为优美，使用Python实现之，包括Map,List,Set等，提供相同的API，同时希望会循序渐进，先用简单直观的方法实现，给出优化，涉及的知识主要是python面向对象，继承，重写内置方法，封装，（要对Python和java数据结构实现的底层源码有了解，需要看源代码）&lt;/p&gt;
&lt;p&gt;2.笔试题面试题数据结构和算法实现&lt;/p&gt;
&lt;p&gt;笔试&amp;amp;面试题的python处理&lt;/p&gt;
&lt;p&gt;使用Python搞定笔试题&amp;amp;面试题中出现的算法和数据结构题目&lt;/p&gt;
&lt;p&gt;包含大规模数据处理的详细例子&lt;/p&gt;
&lt;p&gt;3.challenge&lt;/p&gt;
&lt;p&gt;挑战一些大个的东西，深入实现一些较为复杂的算法&lt;/p&gt;
&lt;p&gt;不罗嗦，先列下目录，已经写完一部分了，逐步发出来，更新目录(挪到前头去了)
     
先列这些，逐渐补充.&lt;/p&gt;
&lt;p&gt;每天上完班回来，啃这堆砖头，然后敲出来，累却充实.&lt;/p&gt;
&lt;p&gt;敲代码，调试代码其实是一件十分快乐的事情&lt;/p&gt;
&lt;p&gt;My daytime job is SDET,平时敲自己喜欢的代码的时间并不会太多，业余时间有限&lt;/p&gt;
&lt;p&gt;但做事贵善始善终，会坚持搞完的哈!
    
The End!&lt;/p&gt;
&lt;p&gt;wklken@yeah.net&lt;/p&gt;
&lt;p&gt;2012-05-10&lt;/p&gt;</content><category term="python-ds-algorithm"></category></entry><entry><title>Python解析xml大文件[sax]</title><link href="http://www.wklken.me/posts/2012/04/07/python-xml-sax.html" rel="alternate"></link><published>2012-04-07T00:00:00+08:00</published><updated>2012-04-07T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-04-07:/posts/2012/04/07/python-xml-sax.html</id><summary type="html">&lt;p&gt;使用到的包：xml.sax &lt;a href=""&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;读取xml数据文件，文件较大，需要实时处理插入到数据库&lt;/p&gt;
&lt;h3 id="xmlwen-dang"&gt;xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PERSONS&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;100000&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sex&amp;gt;&lt;/span&gt;男&lt;span class="nt"&gt;&amp;lt;/sex&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;北京，海淀区&lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;fansNum&amp;gt;&lt;/span&gt;437&lt;span class="nt"&gt;&amp;lt;/fansNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;1989&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;wbNum&amp;gt;&lt;/span&gt;333&lt;span class="nt"&gt;&amp;lt;/wbNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;gzNum&amp;gt;&lt;/span&gt;242&lt;span class="nt"&gt;&amp;lt;/gzNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;blog&amp;gt;&lt;/span&gt;null&lt;span class="nt"&gt;&amp;lt;/blog&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edu&amp;gt;&lt;/span&gt;大学&lt;span class="nt"&gt;&amp;lt;/edu&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;work&amp;gt;&amp;lt;/work&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;renZh&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/renZh&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;brithday&amp;gt;&lt;/span&gt;2月14日&lt;span class="nt"&gt;&amp;lt;/brithday&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/person …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用到的包：xml.sax &lt;a href=""&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;读取xml数据文件，文件较大，需要实时处理插入到数据库&lt;/p&gt;
&lt;h3 id="xmlwen-dang"&gt;xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PERSONS&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;100000&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sex&amp;gt;&lt;/span&gt;男&lt;span class="nt"&gt;&amp;lt;/sex&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;北京，海淀区&lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;fansNum&amp;gt;&lt;/span&gt;437&lt;span class="nt"&gt;&amp;lt;/fansNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;1989&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;wbNum&amp;gt;&lt;/span&gt;333&lt;span class="nt"&gt;&amp;lt;/wbNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;gzNum&amp;gt;&lt;/span&gt;242&lt;span class="nt"&gt;&amp;lt;/gzNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;blog&amp;gt;&lt;/span&gt;null&lt;span class="nt"&gt;&amp;lt;/blog&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edu&amp;gt;&lt;/span&gt;大学&lt;span class="nt"&gt;&amp;lt;/edu&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;work&amp;gt;&amp;lt;/work&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;renZh&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/renZh&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;brithday&amp;gt;&lt;/span&gt;2月14日&lt;span class="nt"&gt;&amp;lt;/brithday&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/person&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/PERSONS&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chu-li"&gt;处理&lt;/h3&gt;
&lt;p&gt;sax处理时并不会像dom一样可以以类似节点的维度进行读取,它只有 开始标签  内容  结束标签 之分&lt;/p&gt;
&lt;p&gt;处理思想是：通过一个handler，对开始标签，内容，结束标签各有一个处理函数&lt;/p&gt;
&lt;h3 id="dai-ma-ji-zhu-jie"&gt;代码及注解&lt;/h3&gt;
&lt;h1 id="person-chu-li-lei_1"&gt;person 处理类&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;parseString&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PersonHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_ops&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#db op obj&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db_ops&lt;/span&gt;
    &lt;span class="c1"&gt;#存储一个person的map&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;#当前的tag&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="c1"&gt;#是否是tag之间的内容 ，目的拿到tag间内容，不受空白的干扰&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="c1"&gt;#开始，清空map&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;startElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#以person，清空map&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;#记录 状态&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="c1"&gt;#结束，插入数据库&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;endElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#以person结尾  代表读取一个person的信息结束&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;#do something&lt;/span&gt;
      &lt;span class="n"&gt;in_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;in_sql&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;in_fields&lt;/span&gt;
      &lt;span class="n"&gt;db_ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;in_sql&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_fields&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;#处理&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#若是在tag之间的内容，更新到map中&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jia-shang-ru-ku-de-wan-zheng-dai-ma"&gt;加上入库的完整代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#parse_person.py&lt;/span&gt;
&lt;span class="c1"&gt;#version : 0.1&lt;/span&gt;
&lt;span class="c1"&gt;#author : wukunliang@163.com&lt;/span&gt;
&lt;span class="c1"&gt;#desc : parse person.xml and out sql&lt;/span&gt;


&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;

&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;in_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"insert into person(id,sex,address,fansNum,summary,wbNum,gzNum,blog,edu,work,renZh,brithday) values(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"sex"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"fansNum"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"summary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"wbNum"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"gzNum"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"edu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"work"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"renZh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"brithday"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#数据库方法&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Db_Connect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;use_unicode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"init begin"&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_unicode&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;charset&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_unicode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;use_unicode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"init end"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Error: execute sql '"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"' failed"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#person 处理类&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.sax&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;parseString&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PersonHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_ops&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#db op obj&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db_ops&lt;/span&gt;
        &lt;span class="c1"&gt;#存储一个person的map&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="c1"&gt;#当前的tag&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="c1"&gt;#是否是tag之间的内容&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="c1"&gt;#开始，清空map&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;startElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#以person，清空map&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="c1"&gt;#记录 状态&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;#结束，插入数据库&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;endElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#以person结尾  代表读取一个person的信息结束&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"person"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#do something&lt;/span&gt;
            &lt;span class="n"&gt;in_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;in_sql&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;in_fields&lt;/span&gt;
            &lt;span class="n"&gt;db_ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;in_sql&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_fields&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;#处理&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#若是在tag之间的内容，更新到map中&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./person.xml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#如果源文件gbk  转码      若是utf-8，去掉decode.encode&lt;/span&gt;
    &lt;span class="n"&gt;db_ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Db_Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"root"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"root"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gbk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PersonHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_ops&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db_ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;平时拿python来分析数据，工具脚本还有hadoop streamming，但是用的面和深度实在欠缺
只能说道行还浅，需要多多实践&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;2012-04-07&lt;/p&gt;</content><category term="python"></category><category term="xml"></category></entry><entry><title>Python读取修改ini配置文件[ConfigParser]</title><link href="http://www.wklken.me/posts/2012/02/19/python-ini-configparser.html" rel="alternate"></link><published>2012-02-19T00:00:00+08:00</published><updated>2012-02-19T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-02-19:/posts/2012/02/19/python-ini-configparser.html</id><summary type="html">&lt;p&gt;使用到的包：ConfigParser &lt;a href="http://docs.python.org/2/library/configparser.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;写个项目，用到数据库，多个地方使用，不能硬编码。很类似java的properties文件&lt;/p&gt;
&lt;p&gt;Python支持ini文件的读取&lt;/p&gt;
&lt;h3 id="iniwen-jian"&gt;ini文件&lt;/h3&gt;
&lt;p&gt;db_config.ini&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[baseconf]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3306&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;evaluting_sys&lt;/span&gt;
&lt;span class="k"&gt;[concurrent]&lt;/span&gt;
&lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-li-dai-ma"&gt;示例代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to db ops&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用到的包：ConfigParser &lt;a href="http://docs.python.org/2/library/configparser.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;写个项目，用到数据库，多个地方使用，不能硬编码。很类似java的properties文件&lt;/p&gt;
&lt;p&gt;Python支持ini文件的读取&lt;/p&gt;
&lt;h3 id="iniwen-jian"&gt;ini文件&lt;/h3&gt;
&lt;p&gt;db_config.ini&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[baseconf]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3306&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;evaluting_sys&lt;/span&gt;
&lt;span class="k"&gt;[concurrent]&lt;/span&gt;
&lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-li-dai-ma"&gt;示例代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to db ops&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'section:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;

    &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'options:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;

    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'db:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;

    &lt;span class="n"&gt;db_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;db_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_pwd&lt;/span&gt;

    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baseconf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"db_pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"123456"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"config_file_path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../conf/db_config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tong-yong-mo-kuai-init_oppy"&gt;通用模块init_op.py&lt;/h3&gt;
&lt;p&gt;支持命令行+import两种&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to read ini&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#2012-09-02 changed for class support&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="n"&gt;config_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
   &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;read_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;write_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="ini"></category></entry><entry><title>Python解析xml[xml.dom]</title><link href="http://www.wklken.me/posts/2012/02/18/python-xml-dom.html" rel="alternate"></link><published>2012-02-18T00:00:00+08:00</published><updated>2012-02-18T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-02-18:/posts/2012/02/18/python-xml-dom.html</id><summary type="html">&lt;p&gt;用到的包：xml.dom.minidom &lt;a href="http://docs.python.org/2/library/xml.dom.minidom.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;有一个表，里面数据量比较大，每天一更新，其字段可以通过xml配置文件进行配置，即，可能每次建表的字段不一样。&lt;/p&gt;
&lt;p&gt;上游跑时会根据配置从源文件中提取，到入库这一步需要根据配置进行建表。&lt;/p&gt;
&lt;h3 id="jie-jue"&gt;解决&lt;/h3&gt;
&lt;p&gt;写了一个简单的xml，配置需要字段及类型&lt;/p&gt;
&lt;p&gt;上游读取到对应的数据&lt;/p&gt;
&lt;p&gt;入库这一步，先把原表删除，根据配置建新表&lt;/p&gt;
&lt;h3 id="xmlwen-jian"&gt;XML文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 表名 ,数据库名   可灵活配置插入哪个库哪个表 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"top_query"&lt;/span&gt; &lt;span class="na"&gt;db_name=&lt;/span&gt;&lt;span class="s"&gt;"evaluting_sys"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 非业务主键，自增长,可配名，其他 INTEGER UNSIGNED AUTO_INCREMENT  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;primary_key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;id&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/primary_key …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;用到的包：xml.dom.minidom &lt;a href="http://docs.python.org/2/library/xml.dom.minidom.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;有一个表，里面数据量比较大，每天一更新，其字段可以通过xml配置文件进行配置，即，可能每次建表的字段不一样。&lt;/p&gt;
&lt;p&gt;上游跑时会根据配置从源文件中提取，到入库这一步需要根据配置进行建表。&lt;/p&gt;
&lt;h3 id="jie-jue"&gt;解决&lt;/h3&gt;
&lt;p&gt;写了一个简单的xml，配置需要字段及类型&lt;/p&gt;
&lt;p&gt;上游读取到对应的数据&lt;/p&gt;
&lt;p&gt;入库这一步，先把原表删除，根据配置建新表&lt;/p&gt;
&lt;h3 id="xmlwen-jian"&gt;XML文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 表名 ,数据库名   可灵活配置插入哪个库哪个表 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"top_query"&lt;/span&gt; &lt;span class="na"&gt;db_name=&lt;/span&gt;&lt;span class="s"&gt;"evaluting_sys"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 非业务主键，自增长,可配名，其他 INTEGER UNSIGNED AUTO_INCREMENT  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;primary_key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;id&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/primary_key&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 字段开始 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;field&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;query&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;varchar(200)&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;is_index&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/is_index&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;query&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;field&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;pv&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;integer&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;is_index&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/is_index&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;pv&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;field&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;avg_money&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;integer&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;is_index&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/is_index&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/field&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 字段配置结束 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chu-li-jiao-ben"&gt;处理脚本&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: wklken&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to read db xml config.&lt;/span&gt;
&lt;span class="c1"&gt;#-----------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#----------------------&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.dom&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_dbconfig_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml_file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minidom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"table"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;#read dbname and table name.&lt;/span&gt;
    &lt;span class="n"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"db_name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"create database if not exists `"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"`; use "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";"&lt;/span&gt;
        &lt;span class="n"&gt;table_drop_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"drop "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" if exists "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;";"&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;"db_sql"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;db_sql&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;"table_sql"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;table_drop_sql&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Error:attribute is not define well!  db_name="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;db_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" ;table_name="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;table_name&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#print table_name, db_name&lt;/span&gt;

    &lt;span class="n"&gt;table_create_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"create table "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"("&lt;/span&gt;

    &lt;span class="c1"&gt;#read primary cell&lt;/span&gt;
    &lt;span class="n"&gt;primary_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"primary_key"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;primary_key_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;

    &lt;span class="n"&gt;table_create_sql&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;primary_key_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,"&lt;/span&gt;

    &lt;span class="c1"&gt;#print primary_key.toxml()&lt;/span&gt;
    &lt;span class="c1"&gt;#read ordernary field&lt;/span&gt;
    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"field"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;
        &lt;span class="n"&gt;table_create_sql&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f_index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;table_create_sql&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;","&lt;/span&gt;
        &lt;span class="n"&gt;is_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"is_index"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodeValue&lt;/span&gt;

    &lt;span class="n"&gt;table_create_sql&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;");"&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;"table_create_sql"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;table_create_sql&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;#character set latin1 collate latin1_danish_ci;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;read_dbconfig_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="she-ji-fang-fa"&gt;涉及方法&lt;/h3&gt;
&lt;p&gt;root = minidom.parse(xml_file_path)  获取dom对象&lt;/p&gt;
&lt;p&gt;root.getElementsByTagName("table")  根据tag获取节点列表&lt;/p&gt;
&lt;p&gt;table.getAttribute("name")  获取属性&lt;/p&gt;
&lt;p&gt;primary_key.getElementsByTagName("name")[0].childNodes[0].nodeValue  获取子节点的值（&lt;name&gt;id&lt;/name&gt;  得到id）&lt;/p&gt;
&lt;p&gt;2012-02-18&lt;/p&gt;</content><category term="python"></category><category term="xml"></category></entry><entry><title>半年工作成长小结</title><link href="http://www.wklken.me/posts/2012/02/05/summary-03-workhalfyear.html" rel="alternate"></link><published>2012-02-05T00:00:00+08:00</published><updated>2012-02-05T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-02-05:/posts/2012/02/05/summary-03-workhalfyear.html</id><summary type="html">&lt;p&gt;自去年毕业工作至今，满打满算，七个月&lt;/p&gt;
&lt;p&gt;这七个月思考不断接触新的东西，学习很多，思考很多，却也依旧很是迷茫&lt;/p&gt;
&lt;p&gt;很多问题还没想好，所以，继续思考&lt;/p&gt;
&lt;p&gt;收获还是很多的，主要是一些前辈的建议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术与业务的关系？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A. 业务是目的，技术是手段。要在业务的设计开发中沉淀出通用的技术产品，要不断了解出现的技术，是否能为我所用，形成敏锐的判断力&lt;/p&gt;
&lt;p&gt;B. 业务分析能力更多的是经验、思考和坚持&lt;/p&gt;
&lt;p&gt;C. 技术研究与创新要与团队的整体目标紧密相连，才能得到更好地认同和发展&lt;/p&gt;
&lt;p&gt;刚毕业，对于技术，还是相当有热情的，理所当然，所谓的业务在心里的占比，就不是那么大了。去啃shell，啃python，回过头来发现似乎不太对劲。&lt;/p&gt;
&lt;p&gt;对于这几点，迄今还不是很能理解。起码对技术热情依然盖过了业务。&lt;/p&gt;
&lt;p&gt;很多问题，需要去深入学习和思考，或许只能慢慢来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要形成自己的知识体系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;术业有专攻，东西那么多，人的精力总是有限的，需要对自己整体的技术体系和业务体系有一个规划，形成体系。&lt;/p&gt;
&lt;p&gt;盲目通吃，多而不精，浅尝则止 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;自去年毕业工作至今，满打满算，七个月&lt;/p&gt;
&lt;p&gt;这七个月思考不断接触新的东西，学习很多，思考很多，却也依旧很是迷茫&lt;/p&gt;
&lt;p&gt;很多问题还没想好，所以，继续思考&lt;/p&gt;
&lt;p&gt;收获还是很多的，主要是一些前辈的建议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术与业务的关系？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A. 业务是目的，技术是手段。要在业务的设计开发中沉淀出通用的技术产品，要不断了解出现的技术，是否能为我所用，形成敏锐的判断力&lt;/p&gt;
&lt;p&gt;B. 业务分析能力更多的是经验、思考和坚持&lt;/p&gt;
&lt;p&gt;C. 技术研究与创新要与团队的整体目标紧密相连，才能得到更好地认同和发展&lt;/p&gt;
&lt;p&gt;刚毕业，对于技术，还是相当有热情的，理所当然，所谓的业务在心里的占比，就不是那么大了。去啃shell，啃python，回过头来发现似乎不太对劲。&lt;/p&gt;
&lt;p&gt;对于这几点，迄今还不是很能理解。起码对技术热情依然盖过了业务。&lt;/p&gt;
&lt;p&gt;很多问题，需要去深入学习和思考，或许只能慢慢来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要形成自己的知识体系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;术业有专攻，东西那么多，人的精力总是有限的，需要对自己整体的技术体系和业务体系有一个规划，形成体系。&lt;/p&gt;
&lt;p&gt;盲目通吃，多而不精，浅尝则止，是不行的&lt;/p&gt;
&lt;p&gt;单点 到 网络 再到体系&lt;/p&gt;
&lt;p&gt;规划下目标，实现之&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成长的过程就是进步&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A.形成自己的思想，自己的知识体系&lt;/p&gt;
&lt;p&gt;B.形成自己的做事方法和风格&lt;/p&gt;
&lt;p&gt;C.建立自己对事情的评判标准&lt;/p&gt;
&lt;p&gt;这是一个迭代的过程，需要自己不断去摸索和改进&lt;/p&gt;
&lt;p&gt;目前自己方法和风格刚刚雏形，所谓一步一个脚印，还是那句话，思考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;多思考和分享，在不断分享中接受挑战，完善自己的思路&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更加开放的心态，乐于接受新的事物，乐于接受不同的意见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;忙不是成长的绊脚石，而是助推器，想方设法（技术方案，工具，解决方法），解决那些耗费时间的，机械性的工作，变得不忙，便是成长。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我按照这个原则这么做的，结果发现，效率上去了，活也变多了，总体工作时间几乎没被降下来&lt;/p&gt;
&lt;p&gt;加班，依然如故。所谓能力越大责任越大，同理，效率越高，活也越多&lt;/p&gt;
&lt;p&gt;不过需要继续改进，为了不加班，继续努力改进&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成长是长跑，持久的坚持是最基本的前提&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;坚持，总之，需要形成好的习惯&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;多看多问，求甚解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从小事做起，主动承担，学习推动事情的发展，并解决之&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止抱怨，主动改变现状，很多事情，都不是问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开始抱怨的时候，就是问题出现的时候，想办法解决之&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学会规划，也要学会量化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录于此&lt;/p&gt;
&lt;p&gt;刚来，资源紧张，连续加了三个月班，然而，资源总是紧张滴，所以，要从自己，从流程上，不断审视，思考，优化和改进，提高自己的效率&lt;/p&gt;
&lt;p&gt;虽然现在还是得加班，但是，毕竟机械性重复性劳动全部秒杀掉了，不用那么苦逼了&lt;/p&gt;
&lt;p&gt;效率提高，意味着有更多时间学习想学的东西，然后再次提高效率，良性循环&lt;/p&gt;
&lt;p&gt;以上很多事这半年来各位前辈给的建议，也供大家参考吧&lt;/p&gt;
&lt;p&gt;虽然很多还需要继续思考，例如依旧偏执地将技术放在首位，例如为啥效率提高那么多还需要加班，&lt;/p&gt;
&lt;p&gt;例如为啥那么苦逼，例如怎样才能不苦逼&lt;/p&gt;
&lt;p&gt;继续思考，但是不要停下来，即使还没想清楚，即使依旧迷茫&lt;/p&gt;
&lt;p&gt;做当前正确的事情&lt;/p&gt;
&lt;p&gt;写年度规划去鸟，提前祝大伙元宵快乐&lt;/p&gt;
&lt;p&gt;2012-02-05&lt;/p&gt;</content><category term="总结，程序人生"></category></entry><entry><title>写在2011的结尾，2012的开始</title><link href="http://www.wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html" rel="alternate"></link><published>2011-12-31T00:00:00+08:00</published><updated>2011-12-31T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2011-12-31:/posts/2011/12/31/summary-02-2011end-2012begin.html</id><summary type="html">&lt;p&gt;写在2011的结尾，2012的开始&lt;/p&gt;
&lt;p&gt;2011-12-31 22:50&lt;/p&gt;
&lt;p&gt;今天是2011的最后一天。&lt;/p&gt;
&lt;p&gt;本来已经绝了写点东西的念头，但是想想，还是写点东西吧，算是对过去一年的一个总结吧。&lt;/p&gt;
&lt;p&gt;有点长，估计得写到明年才能写完&lt;/p&gt;
&lt;p&gt;从哪开始呢&lt;/p&gt;
&lt;p&gt;还是从头来吧&lt;/p&gt;
&lt;p&gt;2010年最后一天，也就是去年的今天，我正在北京，什么区来着，额，丰台区，四环外的一个小区，程庄路程庄北里八号楼，一个半地下室，和同来实习的一群哥们在一起。&lt;/p&gt;
&lt;p&gt;那时候实习，是来学校招的，大三时候也没想太多，面上了便来了。七八个人住半地下室，刚来第一个月是培训，什么都不管，早上五点半起，倒两个小时车，到北三环学院路一个大厦里上课，一天的课，那时起，对北京4毛的公交印象深刻，对一堵堵成列车的公交迄今难忘。&lt;/p&gt;
&lt;p&gt;上课那段只是复习而已，个人而言，还没自己看十天书敲十天代码来得强，主要是快餐式地灌输J2EE快速开发的一些内容，当然，也学到了不少东西，起码在学校接触不到。&lt;/p&gt;
&lt;p&gt;那时候，没想那么多，实习而已嘛，没想到我们几个实习生却承担了很大部分的工作，当做正式员工使 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;写在2011的结尾，2012的开始&lt;/p&gt;
&lt;p&gt;2011-12-31 22:50&lt;/p&gt;
&lt;p&gt;今天是2011的最后一天。&lt;/p&gt;
&lt;p&gt;本来已经绝了写点东西的念头，但是想想，还是写点东西吧，算是对过去一年的一个总结吧。&lt;/p&gt;
&lt;p&gt;有点长，估计得写到明年才能写完&lt;/p&gt;
&lt;p&gt;从哪开始呢&lt;/p&gt;
&lt;p&gt;还是从头来吧&lt;/p&gt;
&lt;p&gt;2010年最后一天，也就是去年的今天，我正在北京，什么区来着，额，丰台区，四环外的一个小区，程庄路程庄北里八号楼，一个半地下室，和同来实习的一群哥们在一起。&lt;/p&gt;
&lt;p&gt;那时候实习，是来学校招的，大三时候也没想太多，面上了便来了。七八个人住半地下室，刚来第一个月是培训，什么都不管，早上五点半起，倒两个小时车，到北三环学院路一个大厦里上课，一天的课，那时起，对北京4毛的公交印象深刻，对一堵堵成列车的公交迄今难忘。&lt;/p&gt;
&lt;p&gt;上课那段只是复习而已，个人而言，还没自己看十天书敲十天代码来得强，主要是快餐式地灌输J2EE快速开发的一些内容，当然，也学到了不少东西，起码在学校接触不到。&lt;/p&gt;
&lt;p&gt;那时候，没想那么多，实习而已嘛，没想到我们几个实习生却承担了很大部分的工作，当做正式员工使，每天很忙，上班，吃饭，加班。印象里有几回凌晨两三点回去，满大街清冷，只有黑的不时靠上来问是否要打车。&lt;/p&gt;
&lt;p&gt;上班，加班，轮回，但每周固定回去超市，我主要是买一周的补给。每周去一次超市，这个习惯，那时候养成。迄今保留。逛超市是件令人愉快的事情，虽然俺是效率派，去两三次之后彻底摸清货架，之后每次都是直达目的。&lt;/p&gt;
&lt;p&gt;突然很怀念那段日子，不用想太多，除了干活，睡觉，偶尔出去聚一聚，奢侈一把。一群人。&lt;/p&gt;
&lt;p&gt;天下没有不散的宴席，先是培训结束后，分到了不同项目组，然后，又是陆续离开了公司。&lt;/p&gt;
&lt;p&gt;快到年前的时候，只剩下我一个人呆在宿舍，很是凄凉。&lt;/p&gt;
&lt;p&gt;看过电影的快放没，一大群人拖着行李到了这个地方，一起生活，一起去上班，一起下班，做饭，吃饭，热热闹闹，然后，然后，一个个离开，到最后剩下你一个人。&lt;/p&gt;
&lt;p&gt;实习的公司不大不小，最后我的感想：人很好，体制不行。的确，里面每个人都很好，很友善，那是我们刚踏入社会，虽然是半只脚，从他们身上，我学到了很多东西，我进的第一个项目组已经进入了维护期，所以也没什么事情，领了一台电脑，也没什么事干，前后经理就扔了两个任务给我。那一个月，却是感觉敲代码那么久第一次有了提升的感觉，一个月，new了一个java project，从无到有，搭建出了那个项目现有使用的基本框架，对还是菜鸟的我，开始感觉有点进步了，后台java-&amp;gt;hibernate-&amp;gt;mysql,前台完全是freemarker模板。也摸到点感觉，仿着写了一个。然后的然后，没然后了，我被一个电话借走，一个全国邮政的项目，慧哥是我们几个实习生的TL，那段时间还是很累的额，一周六天班，周一三五晚上必须加班，因为模板化了，每个人负责部分都是从前台到后台一路打到底，期间维护了所有的公有代码，以及对现有框架进行重构和升级。那七个月，过得也算充实，期间主要接触oracle，还有需求方来的各种苦逼的更改和要求，也开始以另一种角度看自己的代码。&lt;/p&gt;
&lt;p&gt;之后，因为各种原因，实习生相继离开了。最后组里就剩三个人，记得有一次整层楼都我一个人，那种感觉。那段时间，一个人当几个使，要cover所有人的bug，要写程序搞定的上线初始化数据，那时候还不会脚本，对linux木有概念，用的是java+第三方开源jar包，现在那个系统用的数据批量导入还是java+poi用annotation搞定的通用数据处理。当晚上回到宿舍只有自己一个人，一天可能除了接几个电话处理问题，找不到任何人说话。这种状态，直到快过年前两天才结束。因为，我也选择了离开。&lt;/p&gt;
&lt;p&gt;做出这个决定其实挺难的，当时经理找我谈过几次，问过我想做什么，其实，那时候出学校实习，七个月，没有仔细想过要做什么。真让我想想，要做什么？那时候才发现，自己也不知道。这个问题我思考了接近三个月，自己想做什么，究竟喜欢做的是什么？&lt;/p&gt;
&lt;p&gt;结果，没想通。&lt;/p&gt;
&lt;p&gt;呵呵，很多问题，那时候是搞不懂的，所谓历史局限性。&lt;/p&gt;
&lt;p&gt;很多问题，现在也还不懂。&lt;/p&gt;
&lt;p&gt;思考了很久，做出了决定。&lt;/p&gt;
&lt;p&gt;没想出来的问题，接着想，但是，必须做出决定，做当下正确的事情，起码自己认为正确的事情。这是我的原则。&lt;/p&gt;
&lt;p&gt;做了决定，却没有立刻走，做一件事情，善始善终，这也是我的原则。&lt;/p&gt;
&lt;p&gt;一直cover掉所有东西，过年了，才向经理道别。&lt;/p&gt;
&lt;p&gt;南下的飞机，离开的那时，我对自己说，京城，俺还会回来的。&lt;/p&gt;
&lt;p&gt;然后，最后终是没有回去。&lt;/p&gt;
&lt;p&gt;过年，一家人团聚，这年有大事，老姐嫁人了，呵呵。&lt;/p&gt;
&lt;p&gt;日子一天天过去，那段时间，压力其实挺大的，因为校招在年前已经结束了，很多同学已然定下了，考研，考公务员，工作，等等。而自己，还未定。&lt;/p&gt;
&lt;p&gt;所以，年后匆匆，再次北上，这次目的很明确，找工作。&lt;/p&gt;
&lt;p&gt;到了北京，雪还未化去，而我，开始了为期一个月最精彩的日子，酸甜苦辣，尽在其中，压力山大，那段时间，经历很多，也学到很多。&lt;/p&gt;
&lt;p&gt;面了很多公司，基本都拿到offer，却迟迟没有决定，因为一个问题，还是那个问题，你到底想做什么？&lt;/p&gt;
&lt;p&gt;前半月，基本晚上投简历，白天出去笔试和面试，有的效率比较高，一路到底给结果，慢的也就隔几天，因为校招已经结束，这时候还是相当难找的，只能参加各个社招。有一次面一非常想去的公司，终面挂了，有一次去了才知道，要找有三年经验的，结果人事MM拉我简历过去了，败得一塌糊涂。&lt;/p&gt;
&lt;p&gt;面试的好处是，搞定笔试后可以直接接触到面试官，再次感谢所有面过我的面试官，从中学到了很多东西，对某些事情的看法，对技术的观点，解决问题的思路，以及我自身的短板和不足。面试其实是一件很有意思的事情，你不知道对方是谁，会问什么问题，关注什么，同样，他也不知道你是何许人也，一个小时，两个小时谈下来，其实，可以看到自己很多看不到的东西。&lt;/p&gt;
&lt;p&gt;下半月，前半月的顺利就此截止，拿到很多offer, 有的还好，没有要求立刻答复，有几个给了一个礼拜，有一个给了两天。期限在这时候到来，意味着我必须做出决定。选择什么？&lt;/p&gt;
&lt;p&gt;很多时候，抉择是困难的，特别是难以抉择的时候……囧，有点绕&lt;/p&gt;
&lt;p&gt;这时候，已然开学很久，某天收到华为短信，才发现跑我们学校招去了，问了下同学，基本都定下了，就剩我了……..这时候，方知何为压力。&lt;/p&gt;
&lt;p&gt;对付压力的办法，睡觉！&lt;/p&gt;
&lt;p&gt;对我来所蛮有效的方法，对付搞不定的事情，好好睡一觉，第二天满状态再去搞。&lt;/p&gt;
&lt;p&gt;至于那个问题，我想做的是什么？起码不想做重复枯燥无意义的因为体制导致的无法优化的重复性劳动【这基本就是我实习的状态】&lt;/p&gt;
&lt;p&gt;评估以后，去掉了一半，然后，想做什么？有活力，比较自由，可以通过自己代码看到效果的，不会因为体制原因导致重复劳动的，好吧，没有了。&lt;/p&gt;
&lt;p&gt;思考了两天，当然，期限的最后一天。打电话，一个个回复了。把所有的都拒掉了。然后，重写简历，重新开始。&lt;/p&gt;
&lt;p&gt;做自己认为正确的事情。&lt;/p&gt;
&lt;p&gt;笔试，面试，奔走于北京各个角落，地铁，公交，记忆里那常常坐的390.额，面的倒数第二家公司，就是我现在在的，笔试只有三道题，迄今做题最少的一次，半小时，当时大致看了下休息区，椅子很舒服。面试的时候，一点半进去，四点半出来，三面，简历，问题，项目，写写画画，映像很深的是第一面时画了整整两页，第三面坐在二十五楼临窗，看下去很壮观。后来又参加了几个公司在学校里的校招，见识过管培生与技术同时笔试时五百比二十的场面，话说那次笔试题起码三个小时的量，给了一个半小时，涉及各种，答到手酸。&lt;/p&gt;
&lt;p&gt;然后，事情还算顺利，顺利拿到offer，很多通知面试的也就没去了。没有选择去实习，因为经历了这几个月，分外珍惜学校的日子。&lt;/p&gt;
&lt;p&gt;最后，拖着行李箱，关上了那扇门，南下回校。&lt;/p&gt;
&lt;p&gt;既然选择了远方，便只顾风雨兼程。这是我初中英语老师送的一句话。&lt;/p&gt;
&lt;p&gt;回学校的日子，仿佛却又是另一个世界，没有任何压力。那时候已然知道离别的日子将要到来，一天天数着日子。&lt;/p&gt;
&lt;p&gt;泡图书馆，上自习，还有，就是敲代码。那时候宿舍哥们都去打篮球，打累了差不多到饭点了打个电话呼我下去，一起校外去吃饭。那时候会去跑步，跑了两次，发现坚持不了，也发现身体是该锻炼地。&lt;/p&gt;
&lt;p&gt;最后，毕业季，散伙饭，然后，各奔东西。&lt;/p&gt;
&lt;p&gt;送走一个个同学，然后，再被同学送走。&lt;/p&gt;
&lt;p&gt;美好的时光总是短暂，怀念一起的日子，虽然平淡，但是，那种日子再也没有了。&lt;/p&gt;
&lt;p&gt;然后，就是来到杭州，开始新的篇章。&lt;/p&gt;
&lt;p&gt;话说六个月了，这篇章书写的，并不是十分满意吧。&lt;/p&gt;
&lt;p&gt;本身，话比较少，额，周围人应该都能感受。性格使然，用别人对我的评价就是，性格偏冷。&lt;/p&gt;
&lt;p&gt;性格偏内向，所以或许会给大家带来一些困扰，十分抱歉。&lt;/p&gt;
&lt;p&gt;迄今六个月，linux从一点概念都木有，到现在稍微有点概念，摸到门槛，python，也是从无到有，好歹想做什么就写什么。对测试，也逐渐了解和深入，技术活，而且还挺难。&lt;/p&gt;
&lt;p&gt;六个月，形成了一套自己的工具体系，例如dropbox，有道笔记,chrome及各种插件，桌面工具，开发工具等等，有了一整套，效率，提高很多。&lt;/p&gt;
&lt;p&gt;六个月，写了很多脚本，根据事不过三的原则，对每一个项目测试进行一轮轮优化，力求达到最快速高效准确地搞定任务。唯一苦逼的是平时木有什么时间写脚本，周末偶尔写写，还得自己测，貌似组里就我一个用python,也就意味着写完就自个用。&lt;/p&gt;
&lt;p&gt;六个月，看了很多文章，很多书，对很多东西有了新的认识，继续，视野需要拓展。&lt;/p&gt;
&lt;p&gt;六个月，唯一遗憾就是放掉了java,用了三年多，记得时隔几个月再一次打开eclipse时，激动了一把，虽然现在拿来写python…….发现学完java,python基本不难接受。&lt;/p&gt;
&lt;p&gt;六个月，还是没有很好地形成自己的做事风格，当然，学会承诺并兑现自己的承诺，承诺做过什么，一定尽全力做好。好，好的，额，ok，没问题，我会去….。这是我的承诺，我会做好。算是风格部分，需要更多的东西。&lt;/p&gt;
&lt;p&gt;六个月，还是没有学会更好的沟通，这个需要加强的，清楚的表达意思。&lt;/p&gt;
&lt;p&gt;六个月其实经历了很多事情，很多事，都需要去学习，经历过一次，便掌握之，不需要第二遍。第二遍就是轻车熟路了，这或许是这六个月做的还算不错的地方。&lt;/p&gt;
&lt;p&gt;绝对不在同一个地方摔倒两次。&lt;/p&gt;
&lt;p&gt;至于明年，额，淘宝上搞了张船票，O(∩_∩)O~。&lt;/p&gt;
&lt;p&gt;额，对了，是今年了，规划，还在思考，需要继续深入学习很多东西，想写个工具库，自己用也好，把流程最优化，提高效率才是王道。想好了自己规划，一步步执行。&lt;/p&gt;
&lt;p&gt;2011，难忘的一年，实习了，毕业了，工作了，写过很多代码，看过很多书，见过很多人，去过很多地方，做过很多事，想过很多问题，很多问题依旧没有想通。&lt;/p&gt;
&lt;p&gt;还算充实。&lt;/p&gt;
&lt;p&gt;我给自己大学四年的评价，有遗憾，无后悔。&lt;/p&gt;
&lt;p&gt;我给自己2011年评价，无遗憾，无后悔，继续。&lt;/p&gt;
&lt;p&gt;2012，继续努力&lt;/p&gt;
&lt;p&gt;Be good，do right!&lt;/p&gt;
&lt;p&gt;感谢所有人！&lt;/p&gt;
&lt;p&gt;The end of summary&lt;/p&gt;
&lt;p&gt;just the beginning of 2012.Happy new year.&lt;/p&gt;
&lt;p&gt;2012-1-1 1:31 于杭州&lt;/p&gt;</content><category term="总结，程序人生"></category></entry><entry><title>Python通用数据格式转换工具</title><link href="http://www.wklken.me/posts/2011/12/10/python-dataformat.html" rel="alternate"></link><published>2011-12-10T00:00:00+08:00</published><updated>2011-12-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2011-12-10:/posts/2011/12/10/python-dataformat.html</id><summary type="html">&lt;hr/&gt;
&lt;p&gt;已独立成项目在github上面 &lt;a href="https://github.com/wklken/dataformat"&gt;dataformat&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;涉及模块 os, getopt, sys&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在进行hadoop测试时，需要造大量数据，例如某个表存在56列，但实际程序逻辑只适用到某几列，我们造的数据 也只需要某几列&lt;/p&gt;
&lt;p&gt;构造几列数据，转化为对应数据表格式&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#dataformat.py&lt;/span&gt;
&lt;span class="c1"&gt;#   wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script change data from your source to the dest data format&lt;/span&gt;
&lt;span class="c1"&gt;#2011-08-05 created version0.1&lt;/span&gt;
&lt;span class="c1"&gt;#2011-10-29 add row-row mapping ,default row value …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;hr/&gt;
&lt;p&gt;已独立成项目在github上面 &lt;a href="https://github.com/wklken/dataformat"&gt;dataformat&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;涉及模块 os, getopt, sys&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在进行hadoop测试时，需要造大量数据，例如某个表存在56列，但实际程序逻辑只适用到某几列，我们造的数据 也只需要某几列&lt;/p&gt;
&lt;p&gt;构造几列数据，转化为对应数据表格式&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#dataformat.py&lt;/span&gt;
&lt;span class="c1"&gt;#   wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script change data from your source to the dest data format&lt;/span&gt;
&lt;span class="c1"&gt;#2011-08-05 created version0.1&lt;/span&gt;
&lt;span class="c1"&gt;#2011-10-29 add row-row mapping ,default row value .rebuild all functions. version0.2 &lt;/span&gt;
&lt;span class="c1"&gt;#next:add data auto generate by re expression&lt;/span&gt;
&lt;span class="c1"&gt;#2011-12-17 add new functions, add timestamp creator.  version0.3&lt;/span&gt;
&lt;span class="c1"&gt;#2012-03-08 rebuild functions. version0.4&lt;/span&gt;
&lt;span class="c1"&gt;#2012-06-22 add function to support multi output separators&lt;/span&gt;
&lt;span class="c1"&gt;#2012-07-11 fix bug  line 44,add if&lt;/span&gt;
&lt;span class="c1"&gt;#2012-09-03 rebuild functions,add help msg! version0.5&lt;/span&gt;
&lt;span class="c1"&gt;#2012-11-08 last version edited by lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#           this py: https://github.com/wklken/pytools/blob/master/data_process/dataformat.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getopt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="c1"&gt;#read file and get each line without \n&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#处理一行，转为目标格式，返回目标行&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;one_line_proc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty_fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill_with_sno&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;outline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="c1"&gt;#step1.获取每一列的值&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fill_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#加入使用默认值列  若是以d开头，后面是默认，否则取文件对应列 done&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fill_index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;#列默认值暂不开启时间戳处理&lt;/span&gt;
                &lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler_specal_part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#-s 选项生效，填充列号&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fill_with_sno&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="c1"&gt;#否则，填充默认填充值&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;empty_fill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#step2.组装加入输出分隔符，支持多分隔符&lt;/span&gt;
    &lt;span class="n"&gt;default_outsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;outsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;outsize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_outsp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;#step3.拼成一行返回&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#处理入口，读文件，循环处理每一行，写出&lt;/span&gt;
&lt;span class="c1"&gt;#输入数据分隔符默认\t,输出数据默认分隔符\t&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;insp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty_fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill_with_sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_line_out&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ft_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;#有效输入字段数（去除默认值后的）&lt;/span&gt;
    &lt;span class="n"&gt;in_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;used_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="c1"&gt;#step1-3相当于数据预处理，解析传入选项&lt;/span&gt;

    &lt;span class="c1"&gt;#step1 处理映射列 不能和第二步合并&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;to_row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\:"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to_row&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;used_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\="&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;in_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;#step2 处理默认值列&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;to_row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#处理默认值列&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\="&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; &lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;#处理列列映射&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\:"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to_row&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; &lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c1"&gt;#其他普通列&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;to_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;used_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;to_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_index&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
            &lt;span class="n"&gt;used_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#setp3 处理输出分隔符   outsp  0=\t,1=    0代表默认的，其他前面带列号的代表指定的&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;outsps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"\d=.+?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;outsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;outsp_kv&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;outsps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outsp_kv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;outsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;#step4 开始处理每一行&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#多个输入分隔符情况，使用正则切分成列&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#否则使用正常字符串切分成列&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#正常的，切分后字段数大于等于配置的选项个数&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;in_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;outline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;one_line_proc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ft_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty_fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill_with_sno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outline&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#不正常的，列数少于配置&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#若配置了-e 输出，否则列数不符的记录过滤&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error_line_out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#step5 输出结果&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#特殊的处理入口，处理维度为每一行,目前只有时间处理&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler_specal_part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#timestamp 时间处理&lt;/span&gt;
    &lt;span class="c1"&gt;#时间列，默认必须 TS数字=时间&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"TS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"="&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ts_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"%Y%m&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"%Y%m&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;%H%M%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;to_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="c1"&gt;#step1 确认输出的格式 TS8 TS10 TS14 TS19&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;to_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

        &lt;span class="n"&gt;part_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="c1"&gt;#step2 存在时间+-的情况 确认加减区间&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"+"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#20101020 - XX&lt;/span&gt;
                &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#2010-10-20&lt;/span&gt;
                &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#2010-10-20 - XX&lt;/span&gt;
                &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#step3 将原始时间转为目标时间&lt;/span&gt;
        &lt;span class="n"&gt;part_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#step4 如果定义了输出格式，转换成目标格式，返回&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;to_l&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;part_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_l&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part_str&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;part_str&lt;/span&gt;

&lt;span class="c1"&gt;#将时间由秒转化为目标格式&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts_format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;"now()"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%Y%m&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;%H%M%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;inputdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputdate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ts_format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts_format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"the input date and time expression error,only allow 'YYYYmmdd[HHMMSS]' or 'YYYY-MM-DD HH:MM:SS'  "&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"the input date and time expression error,only allow 'YYYYmmdd[HHMMSS]' or 'YYYY-MM-DD HH:MM:SS'  "&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#打印帮助信息&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;help_msg&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"功能：原数据文件转为目标数据格式"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"选项:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -i inputfilepath  [必输，input, 原文件路径]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -t n              [必输，total, n为数字，目标数据总的域个数]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -a '1,3,4'        [必输，array, 域编号字符串，逗号分隔。指定域用原数据字段填充，未指定用'0'填充]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;                          -a '3,5=abc,6:2'  第5列默认值abc填充,第6列使用输入的第1列填充，第3列使用输入第1列填充"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -o outputfilepath [可选，output, 默认为 inputfilepath.dist ]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -F 'FS'           [可选，field Sep，原文件域分隔符，默认为&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;t,支持多分隔符，eg.'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;||\|' ]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -P 'OFS'          [可选，out FS，输出文件的域分隔符，默认为&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;t,可指定多个，多个需指定序号=分隔符,逗号分隔,默认分隔符序号0 ]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -f 'fill_str'     [可选，fill，未选列的填充值，默认为空 ]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -s                [可选，serial number,当配置时，-f无效，使用列号填充未指派的列]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; -e                [可选，error, 源文件列切分不一致行/空行/注释等，会被直接输出，正确行按原逻辑处理]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#判断某个参数必须被定义&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;must_be_defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;error_info&lt;/span&gt;
       &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#程序入口，读入参数，执行&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#init default value&lt;/span&gt;
    &lt;span class="n"&gt;insp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;outsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;empty_fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="n"&gt;fill_with_sno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;error_line_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="c1"&gt;#handle options&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;&lt;span class="s2"&gt;"F:P:t:a:i:o:f:hse"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-h"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-H"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--help"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;help_msg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;inpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-o"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;outpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-t"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-F"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;insp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"string_escape"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-P"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;outsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"string_escape"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-f"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;empty_fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-s"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fill_with_sno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"-e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;error_line_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;" : the amount of params must great equal than 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Command : ./dataformat.py -h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;" : params are not defined well!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Command : ./dataformat.py -h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;params_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;must_be_defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inpath'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;" : -i param is needed,input file path must define!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;must_be_defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'total'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;" : -t param is needed,the fields of result file must define!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;must_be_defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;" : -a param is needed,must assign the field to put !"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inpath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;" file : &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is not exists"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;inpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'outpath'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;outpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpath&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;".dist"&lt;/span&gt;

    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;insp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty_fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill_with_sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_line_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong-shuo-ming"&gt;使用说明&lt;/h3&gt;
&lt;p&gt;功能：可指定输入分隔，输出分隔，无配置字段填充，某列默认值,可按顺序填充，也可乱序映射填充&lt;/p&gt;
&lt;p&gt;输入：输入文件路径&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-i “path”
必设
输入文件路径

-t n
必设
目标数据表总列数

-a “r1,r2”
必设
将要填充的列号列表，可配置默认值，可配置映射

-o “path”
可选
输出文件路径，默认为 输入文件路径.dist

-F “IFS”
可选
输入文件中字段域分隔符，默认\t

-P ”OFS”
可选
输出文件中字段域分隔符，默认\t

-f “”
可选
指定未配置列的填充内容，默认为空

-h
单独
查看帮助信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列填充的配置示例：&lt;/p&gt;
&lt;p&gt;普通用法【最常用】&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./dataformat.py –i in_file –t 65 -a “22,39,63” –F “^I” –P “^A” –f “0”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;in_file&lt;/span&gt;&lt;span class="err"&gt;中字段是以\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;分隔的&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;可不配&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;使用默认&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="err"&gt;将&lt;/span&gt;&lt;span class="n"&gt;in_file&lt;/span&gt;&lt;span class="err"&gt;的第&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;列分别填充到&lt;/span&gt;&lt;span class="n"&gt;in_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;的第&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="err"&gt;列&lt;/span&gt;
&lt;span class="n"&gt;in_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="err"&gt;共&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="err"&gt;列，以&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="err"&gt;分隔，未配置列以&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;填充&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;中顺序与源文件列序有关，若&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="err"&gt;则是将第&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;列填充到第&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="err"&gt;列，第二列填充到&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="err"&gt;列，第&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;列填充到&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="err"&gt;列&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列默认值用法:【需要对某些列填充相同的值，但不想在源文件中维护】&lt;/p&gt;
&lt;p&gt;命令:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./dataformat.py -i in_file –t 30 –a “3=tag_1,9,7,12=0.0” –o out_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in_file以\t分隔，输出out_file以\t分隔
将in_file的第1列,第2列填充到out_file的第9列，第7列
out_file共30列，第3列均用字符串”tag_1”填充，第12列用0.0填充，其他未配置列为空
注意：默认值 的取值，若是使用到等号和冒号，需转义，加 \= \:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列列乱序映射：&lt;/p&gt;
&lt;p&gt;命令:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./dataformat.py –i in_file –t 56 –a “3:2,9,5:3,1=abc,11”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分隔，输入，输出，同上…..
冒号前面为输出文件列号，后面为输入文件列号
目标文件第3列用输入文件第2列填充，目标文件第5列用输入文件第3列填充
目标文件第一列均填充“abc”
目标文件第9列用输入文件第1列填充，第11列用输入文件第4列填充【未配置映射，使用从头开始还没有被用过的列】
脚本会对简单的字段数量等映射逻辑进行检测，复杂最好全配上，使用默认太抽象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码托管位置  &lt;a href="https://github.com/wklken/pytools/blob/master/data_process/dataformat.py"&gt;链接&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Python实现ftp常用操作[ftplib]</title><link href="http://www.wklken.me/posts/2011/12/10/python-ftp-ftplib.html" rel="alternate"></link><published>2011-12-10T00:00:00+08:00</published><updated>2011-12-10T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2011-12-10:/posts/2011/12/10/python-ftp-ftplib.html</id><summary type="html">&lt;p&gt;使用到的模块  &lt;a href="http://docs.python.org/2/library/ftplib.html"&gt;ftplib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;快速进行ftp上传 ，下载，查询文件&lt;/p&gt;
&lt;p&gt;原来直接在shell下操作：需要【连接，输用户名，输密码，单文件操作，存在超时限制】&lt;/p&gt;
&lt;p&gt;太过于繁琐，容易操作失败&lt;/p&gt;
&lt;h3 id="gai-jin"&gt;改进&lt;/h3&gt;
&lt;p&gt;一句命令，搞定多文件上传，下载，查询，列表等操作&lt;/p&gt;
&lt;p&gt;后期可以加入更强大的功能&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#ftp.py&lt;/span&gt;
&lt;span class="c1"&gt;#    wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script is used to do some operations more convenient via ftp&lt;/span&gt;
  &lt;span class="c1"&gt;#1.[p]upload …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用到的模块  &lt;a href="http://docs.python.org/2/library/ftplib.html"&gt;ftplib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;快速进行ftp上传 ，下载，查询文件&lt;/p&gt;
&lt;p&gt;原来直接在shell下操作：需要【连接，输用户名，输密码，单文件操作，存在超时限制】&lt;/p&gt;
&lt;p&gt;太过于繁琐，容易操作失败&lt;/p&gt;
&lt;h3 id="gai-jin"&gt;改进&lt;/h3&gt;
&lt;p&gt;一句命令，搞定多文件上传，下载，查询，列表等操作&lt;/p&gt;
&lt;p&gt;后期可以加入更强大的功能&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#ftp.py&lt;/span&gt;
&lt;span class="c1"&gt;#    wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script is used to do some operations more convenient via ftp&lt;/span&gt;
  &lt;span class="c1"&gt;#1.[p]upload many files in the same time,show md5s&lt;/span&gt;
  &lt;span class="c1"&gt;#2.[g]download many files in the same time,show md5s&lt;/span&gt;
  &lt;span class="c1"&gt;#3.[l]list all the files on ftp site&lt;/span&gt;
  &lt;span class="c1"&gt;#4.[f]search a file on ftp site,return True or Flase&lt;/span&gt;
  &lt;span class="c1"&gt;#5.[h]show help info&lt;/span&gt;

&lt;span class="c1"&gt;#add upload and download operations  20111210 version0.1&lt;/span&gt;
&lt;span class="c1"&gt;#add md5sum after ops 20120308 version0.2&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;ftplib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;CONST_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ip"&lt;/span&gt;
&lt;span class="n"&gt;CONST_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"username"&lt;/span&gt;
&lt;span class="n"&gt;CONST_PWD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pwd"&lt;/span&gt;
&lt;span class="n"&gt;CONST_BUFFER_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt;

&lt;span class="n"&gt;COLOR_NONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[m"&lt;/span&gt;
&lt;span class="n"&gt;COLOR_GREEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[01;32m"&lt;/span&gt;
&lt;span class="n"&gt;COLOR_RED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[01;31m"&lt;/span&gt;
&lt;span class="n"&gt;COLOR_YELLOW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[01;33m"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ftp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONST_HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONST_USERNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CONST_PWD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ftp&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gaierror&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FTP is unavailable,please check the host,username and password!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storbinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'STOR &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONST_BUFFER_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ftplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_perm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retrbinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RETR &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONST_BUFFER_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ftplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_perm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ftp_f_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlst&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ftp_f_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;help&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"help info:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[./ftp.py l]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; show the file list of the ftp site "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[./ftp.py f filenamA filenameB]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; check if the file is in the ftp site"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[./ftp.py p filenameA filenameB]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; upload file into ftp site"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[./ftp.py g filenameA filenameB]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; get file from ftp site"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[./ftp.py h]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt; show help info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"other params are invalid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Params needed!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ftp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;success_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;failed_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;up_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"UPLOAD: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_RED&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"FAILED"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"  :file not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"UPLOAD: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_RED&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"FAILED"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"  :&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is not a file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;failed_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;COLOR_GREEN&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"UPLOAD SUCCESS: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"md5sum:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"md5sum "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failed_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;COLOR_RED&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"UPLOAD FAILED: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failed_list&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;down_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;down_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"DOWNLOAD: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_RED&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"FAILED"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"  :&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is not in the ftp site"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;down_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;down_file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;down_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;down_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;failed_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;down_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;COLOR_GREEN&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"DOWNLOAD SUCCESS: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"md5sum:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;success_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"md5sum "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failed_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;COLOR_RED&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"DOWNLOAD FAILED: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failed_list&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"SEARCH: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_GREEN&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"EXIST"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;f_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"SEARCH: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_RED&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"NOT EXIST"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;COLOR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;f_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Similar File List:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlst&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;  &lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"args are invalid!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chang-yong-han-shu"&gt;常用函数&lt;/h3&gt;
&lt;p&gt;用手册查看，以下只是简略，因为没用用到，[待整理]：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;login(user='',passwd='', acct='')     登录到FTP 服务器，所有的参数都是可选的
pwd()                       当前工作目录
cwd(path)                   把当前工作目录设置为path
dir([path[,...[,cb]])       显示path 目录里的内容，可选的参数cb 是一个回调函数，会被传给retrlines()方法
nlst([path[,...])           与dir()类似，但返回一个文件名的列表，而不是显示这些文件名
retrlines(cmd [, cb])       给定FTP 命令（如“RETR filename”），用于下载文本文件。可选的回调函数cb 用于处理文件的每一行
retrbinary(cmd, cb[,bs=8192[, ra]])     与retrlines()类似，只是这个指令处理二进制文件。回调函数cb 用于处理每一块（块大小默认为8K）下载的数据。
storlines(cmd, f)   给定FTP 命令（如“STOR filename”），以上传文本文件。要给定一个文件对象f
storbinary(cmd, f[,bs=8192])    与storlines()类似，只是这个指令处理二进制文件。要给定一个文件对象f，上传块大小bs 默认为8Kbs=8192])
rename(old, new)    把远程文件old 改名为new
delete(path)     删除位于path 的远程文件
mkd(directory)  创建远程目录
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="ftplib"></category></entry><entry><title>虽有遗憾，不曾后悔——写在离校之前</title><link href="http://www.wklken.me/posts/2011/06/18/summary-01-leaveschool.html" rel="alternate"></link><published>2011-06-18T00:00:00+08:00</published><updated>2011-06-18T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2011-06-18:/posts/2011/06/18/summary-01-leaveschool.html</id><summary type="html">&lt;p&gt;即将离开学校了，突然想写点什么，既然是CSDN，就写写这四年是咋过的吧。&lt;/p&gt;
&lt;p&gt;高考一分之差，错过了自己报的本省大学，机缘巧合，补录到了离家两千多公里外的这个大学。&lt;/p&gt;
&lt;p&gt;大一，只身北上，两千五百多公里，二十七个钟头火车，来到了学校。&lt;/p&gt;
&lt;p&gt;话说那时候挺猛，一个人杀到学校注册，结果到的时候发现就自己是一个人来的，囧。&lt;/p&gt;
&lt;p&gt;注册，军训，然后开始了正儿八经的大学生活。&lt;/p&gt;
&lt;p&gt;大一，中规中矩，大一教的编程语言是Java，其实一直到现在对这个一直抱有怨念，坑爹的应该教C才对。虽然简单易学，但是毕竟属于比较非底层的语言。但毕竟有自己的优点，也就是那时候，开始使用Java。&lt;/p&gt;
&lt;p&gt;记得那时候的实验课，是感觉最具有挑战性的，题目都是实验老师临时出的，一晚上一个，做出来交上就完事，呵呵，记得写print第一个画图形的程序花了两个多钟头，还记得另一个写日历程序，那时候压根还不知道Java自带的日历，坑爹的拿纸整整演算了两大页，用算法愣是搞出来了。呵呵，回头看，似乎没啥，但是人总是存在一个成长的过程，经历了。&lt;/p&gt;
&lt;p&gt;晕晕乎乎，把Java学完了，那时候做习题，以及考试 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;即将离开学校了，突然想写点什么，既然是CSDN，就写写这四年是咋过的吧。&lt;/p&gt;
&lt;p&gt;高考一分之差，错过了自己报的本省大学，机缘巧合，补录到了离家两千多公里外的这个大学。&lt;/p&gt;
&lt;p&gt;大一，只身北上，两千五百多公里，二十七个钟头火车，来到了学校。&lt;/p&gt;
&lt;p&gt;话说那时候挺猛，一个人杀到学校注册，结果到的时候发现就自己是一个人来的，囧。&lt;/p&gt;
&lt;p&gt;注册，军训，然后开始了正儿八经的大学生活。&lt;/p&gt;
&lt;p&gt;大一，中规中矩，大一教的编程语言是Java，其实一直到现在对这个一直抱有怨念，坑爹的应该教C才对。虽然简单易学，但是毕竟属于比较非底层的语言。但毕竟有自己的优点，也就是那时候，开始使用Java。&lt;/p&gt;
&lt;p&gt;记得那时候的实验课，是感觉最具有挑战性的，题目都是实验老师临时出的，一晚上一个，做出来交上就完事，呵呵，记得写print第一个画图形的程序花了两个多钟头，还记得另一个写日历程序，那时候压根还不知道Java自带的日历，坑爹的拿纸整整演算了两大页，用算法愣是搞出来了。呵呵，回头看，似乎没啥，但是人总是存在一个成长的过程，经历了。&lt;/p&gt;
&lt;p&gt;晕晕乎乎，把Java学完了，那时候做习题，以及考试，都是用手写代码，总算是培养了个好习惯，手写最高境界是一口气写完，木有涂改，然后肯定地说：这段代码木有问题！呵呵，后来和同学合作写东西，压根没有测试环境，只能说说实现，然后各自去写，凭“臆想”去规划书写代码，然后最后整合起来再进行测试。&lt;/p&gt;
&lt;p&gt;大一的高等数学，以及后来的概率统计，数值计算，离散数学，线性代数等等数学课程，刚开始可能觉得没啥，写个程序不会用到多少，但是由于大一自己不知道学了有没有用，索性就好好学，所以基础还是不错的，其实，数学学好，无形中思维上，以及算法，代码等等都有很强的提高。所以，或许暂时用不上，但是好好学，多学点东西总是没错的。&lt;/p&gt;
&lt;p&gt;大一下学期课程设计，写的是聊天工具，话说上学期上完基本还没什么概念，有点赶鸭子上架的味道，但是有压力才是有动力，你会发现自己潜力还是不错的。O(∩_∩)O~。下学期基本都在这敲敲打打中度过，学会了String的所有操作，大概熟悉了集合框架，多线程，图形界面，还有GUI的设计。话说最重要的是学到了怎么去查找信息，应用到问题的解决中。&lt;/p&gt;
&lt;p&gt;大一下学期最后到大二上学期期间，感觉应该可以做更多的事情了，然后开始学JSP。刚开始一个月，完全不知道这玩意儿到底是个神马东西，两本书，快一个月，一堆大大的笔记，全是代码。后来悟了，开始敲代码，发现Eclipse不好用，就用上了MyEclipse，呵呵，大三又换回了Eclipse。敲代码实现，记得第一个比较完善的程序是一个论坛，页面超级简陋的论坛，实现主体的所有功能，刚开始全是JSP页面，就是&amp;lt;%%&amp;gt;加一堆代码的那种，后来看到JavaBean，重构了一次，发现代码量骤减，后来看了EL，再次重构，又少了一大堆，再看到JSP标签部分，再次重构，&amp;lt;%%&amp;gt;已经很少了，后来JSTL，再次重构，彻底清理了&amp;lt;%%&amp;gt;。感觉学习是一个循序渐进的过程，而写代码，实在不断重构中实现的进步。话说那时候经常性死磕，中文乱码死磕了一个礼拜才搞出来，但是虽说苦了点，后来这个问题就不是问题了，还是值得的。&lt;/p&gt;
&lt;p&gt;大一下，五一的时候，同学拿了个彩铃的网站过来，说是从老师那拿到的项目，那时候一般般，本想拒了，但是同学接了却找不到人做，只能自己试试了，记得那时候刚看了点MVC，就用JSP+JavaBean+Servlet实现了，这期间大概一个多月不断写不断测和修改，又用了一个多月维护。主要用到socket编程，js，多线程，回头看看，代码十分简单，呵呵。貌似这两天查了下，网站还在线上，点了下，貌似还有几个BUG，囧，那时候拿到了四百块钱，这是第一次用代码换钱，请舍友到饭店改善了下伙食，买了两本书，基本没了。&lt;/p&gt;
&lt;p&gt;大二，开始学数据结构，用的是C++，大一学Java，让我怨念的就是这个。每一章都有实验课，这时候只能由模仿开始，学习C++，学习数据结构，相当于学了两样东西。我一直认为数据结构，算法和语言三者是最最基础的东西，所以相当上心，这时候实验课就没啥挑战了，基本能前几个交了，秒杀。大二下的数据结构课程设计，写的是计算器和Huffman文本压缩，计算器没有用传统的栈解决，用了递归，解析字符串，直接出结果。Huffman用C++，花了挺长时间的，貌似还被命中抽到上台将PPT，想起自己上台讲解的样子，挺搞。&lt;/p&gt;
&lt;p&gt;大二暑假，和同学合作参加了软件设计大赛，写一个局域网资源搜索引擎。负责XML处理和搜索部分。整整两个月，相当忙碌，也挺充实，早上自然醒，也不会太晚，醒了就开始写代码，然后午饭，下午继续写，傍晚夹本书，穿着大裤头，买个冷饮，晃晃悠悠晃到没有几个人的自习室【主要是有空调，宿舍电扇不给力呀】，边想着问题，看看书，写写解决方案，感觉差不多了再晃悠回宿舍，和同写的那个哥们讨论下，然后继续敲代码，敲到想睡为止，基本都是凌晨，貌似有一回快天亮才睡。想想那时候，太有激情了。充实，自由自在，没有烦恼。一直很佩服合作的那个哥们，逻辑性比我强了不是一点半点。那时候不知道有SVN这玩意儿，写代码接口啥的都是讨论下，他写他的，我写我的，然后最后再测，经常是“臆想”着就敲完了。那时候印象最深的是一个问题，搞不定，就一直想，查东西，吃饭时也在考虑，睡觉时还在考虑，然后第二天早上醒过来突然就想通了，这种感觉真奇妙。那段时间感觉自己编码能力提高很大吧，量变引起质变，写代码写多了，自然而然感觉“境界”提升了，思考的方式，看问题的角度，解决问题的方法都有很大的提高。暑假快结束，也是大赛快结束，写完代码才发现木有文档，坑爹的，花了三天草草弄了文档。问题就出在这，大赛只拿了个三等奖，后来补齐文档，重新整理，把项目拿到学院科技创新评比，也拿了三等，汗倒，最后拿了四百，项目组五个人，其实就我两干活。&lt;/p&gt;
&lt;p&gt;后来，队长进了银行，另一个去了北邮读研，和我合作的哥们去了中科院，我，工作，快了，过几天南下杭州。逝去的青春，牢记于心。&lt;/p&gt;
&lt;p&gt;大二大三是所有写程序最多的，多个课程设计同时上，忙呀。期间写了个学生选课系统【软院的绝对传统】，写了个基于Struts2的班级网站，然后是SSH的网上商城，写了个大的教务监控管理系统，一个lucene搜索，中间选修数据仓库和图形学，写了个算法模拟器，一个opengl迷宫。循序渐进，虽然有提高，但是感觉只是会用，而不会写。知其然而不知其所以然。不过，总是有历史局限性的嘛，那时候，还没有意识到那么多，只是不断地去学怎么用，而不会去思考为什么。&lt;/p&gt;
&lt;p&gt;大三下学期，面临着考研，考公务员还有找工作的抉择，家里的意思是让我自己选择，最终还是决定工作，从农村出来，一路走到这，想想，该承担一些责任了。有些东西，还不能享受，有些责任，已要承担。&lt;/p&gt;
&lt;p&gt;那时候有公司来招聘实习生，在不知情的情况下，和同学去笔试面试，呵呵，貌似当时来得挺多，开始了人生第一次笔试面试。忙碌了一段时间，定了下去向，决定到北京闯一闯。那段时间近一个多月，一直在学c,因为听说金融系统用的比较多，后来才发现没用上，但是毕竟学了。&lt;/p&gt;
&lt;p&gt;大三选修了现代软件开发和面向对象，还有几门偏向实用性质的选修课程。这时候开始接触“设计”，分层，设计模式，接口等等。&lt;/p&gt;
&lt;p&gt;大三已结束，立马赶到北京实习了，兴冲冲到了才发现，住的是六人一屋子的半地下室，想想，该锻炼下，也就忍了。刚开始没分项目组，一堆人9个全住一块，去拉网，去买厨具等等，都是学生，都很穷，但是日子还过得去。第一个月培训，木有工资，只管午饭。一个月培训主要是Java和J2ee的东西，天天上课，一天近七小时，那段时间，感觉只是对Java整体的一个查漏补缺，进步是有，但是不是很多。培训老师干了近十年，经验应该算是相当丰富，讲的内容大部分是快速应用，基本木有涉及原理，所以差不多是快餐，也算还行。印象深刻的是刚去那会，五点半起床，倒车，从北四环外到南三环，三趟公交车，直接挤死。八点半左右勉强到了，吃个早饭，然后上一整天课，后来才发现可以只倒两趟的，只是多走一站地，那时候上了车开始迷迷糊糊睡觉。&lt;/p&gt;
&lt;p&gt;培训完之后的一个月，算是比较轻松的吧，刚进项目组，也没什么事情，发现就我一个分去做Java了，其他人去做C，我一个人呆在五楼的一个项目组，项目后期运维，也没我什么事，另外一些人在一楼，天天做C的一些练习题。我可能性格使然，算是比较悲剧的，不怎么好过。因为刚开始不熟，自己话又比较少，而项目运维本身就没什么事让我干，老员工电话来了处理下问题，基本不会和我有什么交集，天天坐着，经理一天可能都不会跟我说句话【性格内向的人伤不起呀】，没我什么事，虽然交代下来的事情基本都能按时搞定，但是感觉到孤独呀。事实上经理人很不错，呵呵，那时候主要还是自己的问题。既然没事干，便开始看代码，从头开始，new了一个工程，仿照着开始搭项目框架，看文档，跟踪代码，画结构图，写写文档等等，快一个月，勉强搭出一个半成品。然后，就被另一个项目组借走了。&lt;/p&gt;
&lt;p&gt;第一个月实习公司，九百大洋。&lt;/p&gt;
&lt;p&gt;新的项目组是一个新的项目，写了一个多月文档，然后开始编码和测试，加了近四个月班，天天，一二四加班，三五六不加，但是正常上班，那时候只有周日，但基本用来睡觉了。有时候晚的时候加班到凌晨一两点。因为实习生工资是按工时算的，所以加班最多一个月拿到了一千六百五，哎。其实实习生干的活绝对和正式员工差不多，一个小组，两个正式员工，带着六个实习生。那时候加班直接加郁闷了，主要是累，回去就睡觉，还有就是太没营养，天天重复性劳动。我还算好，因为有那个月看代码，负责组件扩展，重构，公共代码部分，当然还有自己负责模块，工作量是两倍吧，但是主要是交替着来不会觉得枯燥，其他人基本重复着写东西，相当枯燥。&lt;/p&gt;
&lt;p&gt;最后在决定去留的时候还是选择离开，同去的实习生都走了，我一直坚持加班加到大年二十八，第二个省上完线才撤的，那时候整个五楼就我一个人，偶尔处理下bug，也没什么事，住的地方就我一个人了，感觉，挺凄凉。那段时间想的最多的是自己到底想要的是什么，是什么样的工作？最终还是没有想通，但是绝对不是目前的工作。所以决定离开。&lt;/p&gt;
&lt;p&gt;经理和组长对我还是十分不错的，走的时候谈话了，一下子加了一千五工资，让我留下好好干，后来还是决定离开，前阵听说经理和组长都升了一级。&lt;/p&gt;
&lt;p&gt;大四下，正月十几，我就又杀到北京了，目标很明确，找个工作，找个自己想要的工作。&lt;/p&gt;
&lt;p&gt;这期间整整一个月，到最后自己接受offer，一个月的时间，这辈子，永远忘不了。苦过，累过，烦躁过，痛苦过。在偌大的北京，跑来跑去，笔试面试，这一个月的经历，感觉比过去一整年的经历还多，最后逼到绝路，拒了所有offer，然后重头来过，重新开始找，逼着自己，要么找到自己想要的，要么滚蛋。呵呵，最后三面一直通过，找到了目前的工作，算是比较想做的一个工作。记得某天傍晚，看到宣讲通知，没吃晚饭便杀过去了，两个多小时车程，笔完，回来，一个人在寒风中等车，可谓饥寒交迫。还有一次，早上出发两钟头去笔试，笔完说过两天通知面试，坑爹的刚回来还么吃饭呢让我回去面试，草草吃了饭又杀回去面试，那天，花了八个钟头在车上。那段时间，瘦了二十来斤吧。&lt;/p&gt;
&lt;p&gt;到北京半年多，却没有去过一个地方游玩，基本都在加班，睡觉的循环中，找工作这一个月，压力太大，也没有出去，天天忙碌，早出晚归，基本见不到什么人，以至于刚面完那天下午，坐地铁半路下了车，到天安门广场沾沾人气，记得安检查我包的时候，一个笔，一瓶水，一个笔记本，一本书，那天等了两个多小时看完降旗，才慢慢悠悠晃回去。&lt;/p&gt;
&lt;p&gt;后来的后来，找到了工作，回了学校，却一直没有去想，没有去提这段时间。可能是回避吧，想喘口气，往昔不堪回首，这段时间，铭记了，但是却不轻易去想。所以回到学校，倍加珍惜学校的生活，因为，这样的日子不多了。慢悠悠晃去吃饭，偶尔上个自习，图书馆，散散步，跟同学胡吹海聊，这样的日子，好好珍惜，外面社会压力太大，这样的日子，不多了。&lt;/p&gt;
&lt;p&gt;现在是凌晨2:21，距离离校还有九天，想想还是写些东西，记录下吧。虽然自认为记忆力还行，几年内发生的事情基本都全部清楚地记录，但是，十几年后呢，几十年后呢。呵呵，想得远了。&lt;/p&gt;
&lt;p&gt;这四年，基本算是充实，也算是丰富吧，木有参加社团什么的，木有谈恋爱，这只能算是遗憾吧。大一大二天天上自习，大二大三疯狂代码，大四找工作，大学，结束了啊。&lt;/p&gt;
&lt;p&gt;虽有遗憾，不曾后悔。&lt;/p&gt;
&lt;p&gt;再看看未来吧，宿舍六人，一国家公务员，两省公务员，一保研，还有我和另一个哥们找工作，一个深圳一个杭州，从此天南地北，各奔东西了。&lt;/p&gt;
&lt;p&gt;未来，不敢说太远，今后五到十年，好好努力吧，好好奋斗&lt;/p&gt;</content><category term="总结，程序人生"></category></entry></feed>