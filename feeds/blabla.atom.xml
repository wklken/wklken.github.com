<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog - blabla</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/blabla.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2018-07-01T00:00:00+08:00</updated><entry><title>工作七年小结: 学习,生活及其他</title><link href="http://www.wklken.me/posts/2018/07/01/summary-15-work-7-years.html" rel="alternate"></link><published>2018-07-01T00:00:00+08:00</published><updated>2018-07-01T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2018-07-01:/posts/2018/07/01/summary-15-work-7-years.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;一切经历都是有价值的, 你要从中有所收获&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再有三天, 工作七年了.&lt;/p&gt;
&lt;p&gt;大学毕业前, 实习做了一年多的Java开发;&lt;/p&gt;
&lt;p&gt;因为实习错过了校招, 11年一个人北上北京找工作, 阴差阳错, 找了个测试开发的工作, 没成为北漂, 向南飘到了杭州, 开始了自己的职业生涯.&lt;/p&gt;
&lt;p&gt;在杭州一年多, 塑造我现在行事风格, 高效/专注/细心等等, 过多不表, 区间测试各种后端需要关注各种语言各种技术, 写自动化测试, 学习了shell和python等等, 然而国内测试开发其实更多的是测试, 发现自己并不是很喜欢, 年少冲动, 压不住内心的想法, 投了几个python简历, 之后毅然决然南下.&lt;/p&gt;
&lt;p&gt;在深圳第一家公司, python后台开发, 一直做到14年, 从测试转为开发, 也算如鱼得水, 而且基本不加班, 所以有很多时间倒腾各种东西. 14年由于某些不可抵抗力公司over了, 如果没有over, 或许我现在还在那里. 离职出去浪了一个月, 回来愣头青有个抵挡不住的想法, 我想去创业公司.....&lt;/p&gt;
&lt;p&gt;历时一周顺利入职创业公司, 公司团队都很nice, 从零到一开始做一些事情, 过程中对项目运作/产品开发等等, 都有了新的认识, 奈何天不遂人员, 入职十个月, 公司解散 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;一切经历都是有价值的, 你要从中有所收获&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再有三天, 工作七年了.&lt;/p&gt;
&lt;p&gt;大学毕业前, 实习做了一年多的Java开发;&lt;/p&gt;
&lt;p&gt;因为实习错过了校招, 11年一个人北上北京找工作, 阴差阳错, 找了个测试开发的工作, 没成为北漂, 向南飘到了杭州, 开始了自己的职业生涯.&lt;/p&gt;
&lt;p&gt;在杭州一年多, 塑造我现在行事风格, 高效/专注/细心等等, 过多不表, 区间测试各种后端需要关注各种语言各种技术, 写自动化测试, 学习了shell和python等等, 然而国内测试开发其实更多的是测试, 发现自己并不是很喜欢, 年少冲动, 压不住内心的想法, 投了几个python简历, 之后毅然决然南下.&lt;/p&gt;
&lt;p&gt;在深圳第一家公司, python后台开发, 一直做到14年, 从测试转为开发, 也算如鱼得水, 而且基本不加班, 所以有很多时间倒腾各种东西. 14年由于某些不可抵抗力公司over了, 如果没有over, 或许我现在还在那里. 离职出去浪了一个月, 回来愣头青有个抵挡不住的想法, 我想去创业公司.....&lt;/p&gt;
&lt;p&gt;历时一周顺利入职创业公司, 公司团队都很nice, 从零到一开始做一些事情, 过程中对项目运作/产品开发等等, 都有了新的认识, 奈何天不遂人员, 入职十个月, 公司解散, 失业了.&lt;/p&gt;
&lt;p&gt;然后, 这次浪得有点久, 整整一百天, 花了三天找到了工作, 入职了现在的公司, 一晃两年半了.&lt;/p&gt;
&lt;p&gt;在深圳, 到现在已经5年半了. 五年三家公司, 也算经历丰富:)&lt;/p&gt;
&lt;p&gt;想相信大部分人起点会好很多, 没那么折腾, 毕业进入公司, 可以一直呆三年, 五年, 可以很好的沉淀进步, 收获更多. 这么多年的折腾, 导致了我其实可以说正儿八经的开发生涯只有5年, 5年该到什么程度, 我也不知道, 我只知道, 我需要规划好, 不断学习和成长;&lt;/p&gt;
&lt;h2 id="guan-yu-xue-xi"&gt;关于学习&lt;/h2&gt;
&lt;p&gt;我一直有两个观点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从工作相关的内容出发, 向外扩散以及向下延伸, 学以致用, 不断实践-学习-实践的循环中逐步成长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成体系, 站在全局的角度, 思考业界的趋势和职业规划的方向所需要的技能体系, 像打游戏修炼一样, 点满技能树&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一点, &lt;code&gt;转换率&lt;/code&gt;最高, 因为跟每天使用接触的东西离得近, 所以胜在实践多, 成长高. 而不会了解了一堆概念,  写了一堆&lt;code&gt;hello world&lt;/code&gt;, 但是平时无法使用, 逐步地这类&lt;code&gt;无效学习&lt;/code&gt;的时间就沉没了. 但是前者范围小, 太过局限, 对于制定短期成长目标有效, 对长期方向性成长目标作用小.&lt;/p&gt;
&lt;p&gt;第二点, 是方向性的内容, 对自己的职业发展有利. 各种技术革新非常快, 信息爆炸, 可能你一个月前关注了&lt;code&gt;5.0&lt;/code&gt;版本, 一个月后&lt;code&gt;6.0&lt;/code&gt;又出了, 人的精力有限, 应该用在&lt;code&gt;刀刃&lt;/code&gt;上, 而那些在业界趋势以及跟自己职业规划契合的内容值得学习. 很多东西都不是一蹴而就, 是慢慢积累来的.&lt;/p&gt;
&lt;h4 id="mang-qu"&gt;盲区&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;买很多书, 却无法静心看完, 收获有限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几年前, 我的想法是, 一本书都不买, 那么你收获永远是0, 买了书, 即使转化率低, 你的收获也是有的.&lt;/p&gt;
&lt;p&gt;导致我这几年囤积了三四百本书, 其中有经典的, 也有快销品.&lt;/p&gt;
&lt;p&gt;三年前出过一波, 今年因为有了一个叫&lt;code&gt;多抓鱼&lt;/code&gt;的平台, 陆陆续续卖了几十本:)&lt;/p&gt;
&lt;p&gt;我发现刚工作的时候, 买了很多&lt;code&gt;快销&lt;/code&gt;书, 各种快速入门等等, 我追过&lt;code&gt;ios&lt;/code&gt;/&lt;code&gt;swift&lt;/code&gt;, 追过&lt;code&gt;前端开发&lt;/code&gt;, 追过&lt;code&gt;推荐系统&lt;/code&gt;, 追过.....回过头来, 发现收获有, 但是相对于投入的时间和精力, &lt;code&gt;转化率&lt;/code&gt;太低了.&lt;/p&gt;
&lt;p&gt;所以有了本文的第一个观点, 从工作内容出发的学以致用.&lt;/p&gt;
&lt;p&gt;如果我能早明白这一点......&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一亩三分地, 够用就好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一路走来, 遇到过, 有些人觉得, 耕好自己的一亩三分地, 学到的内容够用就行; 但是这或许是那个&lt;code&gt;工作十年实际只有一年经验&lt;/code&gt;的梗的出处&lt;/p&gt;
&lt;p&gt;技术每时每刻在发展, 需要一直保持学习的信息, 不能停歇.&lt;/p&gt;
&lt;p&gt;看过&lt;code&gt;异类&lt;/code&gt;, 你会了解到, 每天的一点点差距, 经过时间的放大, 最终会变成鸿沟般的差距&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎么深挖?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;实践&amp;gt;看书&amp;gt;开各种业界资料&lt;/code&gt;, 你刚好在做这块的, 一直在不断实践, 用法/机制/原理/概念等等, 然后通过书籍和资料, 深度挖掘之.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎么成体系?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问自己问题: 1.业界现在的趋势是什么? 自己关注的部分是否是趋势? 或者是否有被淘汰的趋势 2. 自己喜欢的是什么? 职业规划是什么?&lt;/p&gt;
&lt;p&gt;然后, 知识爆炸和知识付费的年代, 我相信获取相关的信息并不难, 很快的, 你可以理清楚一棵技能树, 然后在未来的日子里, 不断去点满之&lt;/p&gt;
&lt;p&gt;过去我一直通过&lt;code&gt;开源&lt;/code&gt;的资料+&lt;code&gt;大牛&lt;/code&gt;的博客去学习, &lt;code&gt;Google&lt;/code&gt; 是个好东西:)&lt;/p&gt;
&lt;p&gt;而基于这些, 你又可以引到各种经典的书籍, 买了, 反复阅读之. 大多是大部头, 需要有耐心.&lt;/p&gt;
&lt;p&gt;这两年流行知识付费, 种类繁多, 良莠不齐, 例如知乎的live, 付费的电子书, 付费视频课程, 极客时间等等. 虽然获取知识有成本了, 但是我很高兴见到这种情况, 因为, 过去距离你很远的&lt;code&gt;大牛&lt;/code&gt;, 往往你只能从其博客和演讲了解和学习到一些东西, 而现在, 你可以成体系的学习这些内容. 而这其中, 我觉得知乎live最水(不成体系, 贵, 效果不行), 付费视频课程更适合短平快的初学者, 而极客时间, 适合体系化及深挖.&lt;/p&gt;
&lt;p&gt;所以我推荐下极客时间&lt;/p&gt;
&lt;p&gt;在这里放个广告, 是我买的课程的推广海报, 扫码购买后你我都有返现:)&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/2018/06/18/geek-time.html"&gt;我购买的课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还是基于我上面的第一条第二条观点, 只关注工作相关的和对自己职业生涯有利的.&lt;/p&gt;
&lt;h2 id="guan-yu-sheng-huo_1"&gt;关于生活&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;生活是美好的, 生活也是操蛋的, 怎么过, 看自己.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="follow-your-heart"&gt;follow your heart&lt;/h4&gt;
&lt;p&gt;我想这个鸡汤大家都喝过&lt;/p&gt;
&lt;p&gt;但是, 遵循内心的想法去做选择, 却又是没错的&lt;/p&gt;
&lt;p&gt;想想我第一次离职转开发, 以及后来想去创业, 都是遵循了自己内心的想法, 虽然有些&lt;code&gt;冲动&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;现在想想, 虽然错过了&lt;code&gt;活得更轻松&lt;/code&gt;或者&lt;code&gt;半财务自由&lt;/code&gt;的机会.&lt;/p&gt;
&lt;p&gt;我们都要为自己的决定负责. 不需要为站在现在看起来是机会, 站在当时局限性无法看到的机会而懊悔.&lt;/p&gt;
&lt;p&gt;绝大多数时候, 你的命运, 你的生活, 都掌握在自己的手上.&lt;/p&gt;
&lt;p&gt;父母朋友等, 或许会给你建议, 但是, 大部分境况, 只有你自己知道, 而且大部分决定, 也只有你自己能做.&lt;/p&gt;
&lt;h4 id="mei-hao-de-xi-jie-yi-ji-zhu-yi-li-xian-jing"&gt;美好的细节以及注意力陷阱&lt;/h4&gt;
&lt;p&gt;生活中有很多美好的细节, 生活也可以过得很精彩.&lt;/p&gt;
&lt;p&gt;例如, 今天天气很好, 那就出去浪, 宅在家里干什么. 阳光很好, 就去公园晒个太阳, 看看书, 我一直很喜欢这项老年人运动:) 想运动了, 就去海边跑跑步, 骑骑车; 想买东西就去逛一逛商场;&lt;/p&gt;
&lt;p&gt;我们的时间, 大部分被手机, ipad, 以及电脑霸占了.&lt;/p&gt;
&lt;p&gt;每天, 都需要这些东西来刺激下神经, 过后有发现什么都没有下, 很空虚.&lt;/p&gt;
&lt;p&gt;你可以统计下, 自己每天花多少时间在刷手机, 每周花多少个小时看剧? 不是说这没有用, 娱乐放松还是需要的, 但是目前娱乐内容的丰富性已经超出了我们的想象.&lt;/p&gt;
&lt;p&gt;我的做法是, 沉迷-反思-限制; 例如, 我以前每天花一个多小时刷微博, 后来直接卸载一年多, 近期装回来了, 取关了百分之九十的号, 现在每天几分钟看完.&lt;/p&gt;
&lt;p&gt;另一个做法, 关掉所有通知, 只根据需要开启必要的应用. 取消所有微信公众号的文章推送, 只关注需要关注的.&lt;/p&gt;
&lt;h4 id="yi-shi-gan"&gt;仪式感&lt;/h4&gt;
&lt;p&gt;生活要有仪式感, 不能过程朝九晚久, 五天工作两天休息的死气沉沉的模式化&lt;/p&gt;
&lt;p&gt;例如: 周末的开始是周五晚上, 那就每周五晚上找些事情做, 例如电影之夜, 或者海边夜跑......&lt;/p&gt;
&lt;h2 id="guan-yu-gong-zuo_1"&gt;关于工作&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;生存, 进步以及自我实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="zhan-zai-ta-ren-de-jiao-du-shang-si-kao-wen-ti"&gt;站在他人的角度上思考问题&lt;/h4&gt;
&lt;p&gt;每个人的立场不一样.&lt;/p&gt;
&lt;p&gt;我们很容易陷入是对是错这种细节. 而往往, 工作中并没有那么绝对, 更多时候, 是&lt;code&gt;是否合适&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;讨论问题, 提问等等, 多站在对方的角度思考下&lt;/p&gt;
&lt;p&gt;另外, 值得一提的是沟通问题, 例如你问一个问题, 该怎么问最好? 如何问沟通效率最高? 如何问对方能100%理解并响应&lt;/p&gt;
&lt;h4 id="qian-xu-jie-shou-yi-jian-fan-sheng-bing-gai-jin"&gt;谦虚, 接受意见反省并改进&lt;/h4&gt;
&lt;p&gt;谦虚很重要, 你我大部分是普通人, 虽然&lt;code&gt;文人相轻&lt;/code&gt;, 但是每个人都有自己的经历, 每个人看待问题的角度并不一样&lt;/p&gt;
&lt;p&gt;所以时刻保持谦虚, 才能在工作中同他人更好的相处, 也能更多地学习一些不同领域的好的内容.&lt;/p&gt;
&lt;p&gt;接受意见-反省-改进. 这是一个需要关注的问题, 很多时候, 人的惯性是很难纠正的, 一个不好的点, 提过, 短时间内好一点, 但是后面又复发, 这样给合作的的感觉是: 这个人不靠谱.&lt;/p&gt;
&lt;p&gt;对就是对, 错就是错, 错了反省, 改进, 然后后面行事多多注意.&lt;/p&gt;
&lt;h4 id="duo-zou-yi-bu"&gt;多走一步&lt;/h4&gt;
&lt;p&gt;不要守着自己的一亩三分地, 凡事多往前走一步, 多思考一点, 往往会取得更好的效果.&lt;/p&gt;
&lt;h4 id="zhuan-ye"&gt;专业&lt;/h4&gt;
&lt;p&gt;首先是专业技能一定要到位, 其实是行事作风以及结果要足够靠谱.&lt;/p&gt;
&lt;p&gt;树立自己的专业口碑.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;偶尔回想, 会想起很多事情, 在北京住过地下室实习的日志, 在杭州每周骑行龙井西湖, 在深圳住过城中村, 往事如烟;&lt;/p&gt;
&lt;p&gt;未来还很长, 生活还在继续.&lt;/p&gt;
&lt;p&gt;杂七杂八写了一些, 这两年由于各种原因, 博客更新少了, 打算重新拾起来, 多写写一些东西.&lt;/p&gt;
&lt;p&gt;就这样吧&lt;/p&gt;
&lt;p&gt;2018-07-01 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>你需要更多的思考时间</title><link href="http://www.wklken.me/posts/2018/06/23/you-need-more-time-to-think-along.html" rel="alternate"></link><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2018-06-23:/posts/2018/06/23/you-need-more-time-to-think-along.html</id><summary type="html">&lt;p&gt;目前每天都七点半准时起, 无论是否工作日, 几个月下来, 觉得时间多了好多.&lt;/p&gt;
&lt;p&gt;最近三个月阅读时间多了很多, 无他, 只因每天要早起坐班车, 下班也坐班车, 每天有大概一个半小时在车上, 只能用kindle打发时间.&lt;/p&gt;
&lt;p&gt;每天比其他同事差不多早了一个小时到公司, 这段时间用来做什么呢?&lt;/p&gt;
&lt;p&gt;我的答案是: 不要立刻开始工作&lt;/p&gt;
&lt;p&gt;当然, 每个人选择不一样, 可能这一个小时没人打扰, 编码效率会高一点.&lt;/p&gt;
&lt;p&gt;但是, 为什么不将这个时间空出来, 做一些其他事情,  这些事情, 可以起到类似杠杆作用, 撬动你的工作, 提升效率, 减少无畏的时间浪费, 以便更好地享受生活呢?&lt;/p&gt;
&lt;h2 id="dang-xia"&gt;当下&lt;/h2&gt;
&lt;p&gt;我们总是被当下的工作所淹没, 即, 注意力被现在的工作抓走. 例如: 昨天有个bug没修, 今天会有个需求会,  下午要和谁对接口,  晚上要上线等等.&lt;/p&gt;
&lt;p&gt;而当一天的工作开始后, 你将马不停蹄, 奔波在各种事务中,  忙累了一天之后, 下班回家洗洗睡, 明天继续&lt;/p&gt;
&lt;p&gt;你可能某天觉得好累, 厌倦, 生活过成了模式&lt;/p&gt;
&lt;h2 id="jia-she-ni-you-geng-duo-de-shi-jian-si-kao"&gt;假设你有更多的时间思考&lt;/h2&gt;
&lt;p&gt;所以, 假设你每天有一小时时间, 用来做什么?&lt;/p&gt;
&lt;p&gt;思考 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;目前每天都七点半准时起, 无论是否工作日, 几个月下来, 觉得时间多了好多.&lt;/p&gt;
&lt;p&gt;最近三个月阅读时间多了很多, 无他, 只因每天要早起坐班车, 下班也坐班车, 每天有大概一个半小时在车上, 只能用kindle打发时间.&lt;/p&gt;
&lt;p&gt;每天比其他同事差不多早了一个小时到公司, 这段时间用来做什么呢?&lt;/p&gt;
&lt;p&gt;我的答案是: 不要立刻开始工作&lt;/p&gt;
&lt;p&gt;当然, 每个人选择不一样, 可能这一个小时没人打扰, 编码效率会高一点.&lt;/p&gt;
&lt;p&gt;但是, 为什么不将这个时间空出来, 做一些其他事情,  这些事情, 可以起到类似杠杆作用, 撬动你的工作, 提升效率, 减少无畏的时间浪费, 以便更好地享受生活呢?&lt;/p&gt;
&lt;h2 id="dang-xia"&gt;当下&lt;/h2&gt;
&lt;p&gt;我们总是被当下的工作所淹没, 即, 注意力被现在的工作抓走. 例如: 昨天有个bug没修, 今天会有个需求会,  下午要和谁对接口,  晚上要上线等等.&lt;/p&gt;
&lt;p&gt;而当一天的工作开始后, 你将马不停蹄, 奔波在各种事务中,  忙累了一天之后, 下班回家洗洗睡, 明天继续&lt;/p&gt;
&lt;p&gt;你可能某天觉得好累, 厌倦, 生活过成了模式&lt;/p&gt;
&lt;h2 id="jia-she-ni-you-geng-duo-de-shi-jian-si-kao"&gt;假设你有更多的时间思考&lt;/h2&gt;
&lt;p&gt;所以, 假设你每天有一小时时间, 用来做什么?&lt;/p&gt;
&lt;p&gt;思考!&lt;/p&gt;
&lt;p&gt;一个人思考!&lt;/p&gt;
&lt;p&gt;不管是上班前, 还是下班后, 不管是在公司, 还是回家了, 你都有必要给思考留一些时间, 如果一小时太多, 十五分钟就够了.&lt;/p&gt;
&lt;p&gt;思考什么呢? 任何事情,  工作或者生活的问题, 抛出来, 思考, 做一些决策和记录&lt;/p&gt;
&lt;p&gt;例如: 工作的风格是不是有需要改进的地方? 昨天与人沟通是不是太过激进了? 今天这个方案有个细节似乎有问题? 今天周五晚上去哪浪?  昨天的bug可能是什么原因?  最近有个手工操作频率很高, 自动化要花多久每次能省多少时间?&lt;/p&gt;
&lt;p&gt;注意, 这时候不要开 vim 或者 IDE, 不要开文档等等, 不要在意细节, 思考, 得到结论, 记录, 该做的加入todo list.&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 将xx操作自动化 =&amp;gt; 加入到trello的近期事项中
- 晚上去xx 吃饭   =&amp;gt; 直接发微信给老婆
- 方案 XX 有问题  =&amp;gt; 记录事项到list, 具体确定时注意
- bug可能原因是:xxx   =&amp;gt; 将猜测记录到对应issues
- xxx需要优化  =&amp;gt; 到对应issue评论
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些都是很发散的问题, 但是有了安静思考的时间, 可以做出更好的决策, 或者有更好的想法.&lt;/p&gt;
&lt;p&gt;每件事情, 都会随着时间推移, 变得更好.&lt;/p&gt;
&lt;p&gt;另外, 还可以针对近期工作做下梳理, 以及对今日的todo list做下排期;&lt;/p&gt;
&lt;p&gt;然后进入第二步&lt;/p&gt;
&lt;h2 id="learn-something"&gt;Learn something&lt;/h2&gt;
&lt;p&gt;第一步, 花的时间可能10分钟不到, 你可以理清楚很多事情.&lt;/p&gt;
&lt;p&gt;那么, 剩下的40-50分钟做什么?&lt;/p&gt;
&lt;p&gt;学习!&lt;/p&gt;
&lt;p&gt;学什么? 跟项目相关的, 跟工作相关, 跟自己思考问题得到结论相关的内容.&lt;/p&gt;
&lt;p&gt;例如, 合作项目对方用的xxx技术, 你从来没有接触过, 昨天接入只是扫了眼文档完成接入, 那么你可以google下这个关键词, 然后开始了解, 甚至深入学习.&lt;/p&gt;
&lt;p&gt;例如, 昨天遇到一个报错, 解决了但是没有来得及深究, 这时候可以开始深究&lt;/p&gt;
&lt;p&gt;你的经验, 主要来自于你的工作, 以及工作相关的领域. 所以,  需要从这些部分学习, 深入, 得到最大化的成长.&lt;/p&gt;
&lt;p&gt;注意, 尽量关注跟工作相关的领域, 那些可能跟你工作相关性很低的领域, 除非0)你在不远的将来会涉及 1) 你想转领域了 2) 你感兴趣或者对你成长有帮助 3) 你对本领域已经很有经验了想尝试下(或许有些激进, 个人观点)&lt;/p&gt;
&lt;p&gt;例如, 你是个初级的前端开发, 每日忙于工作, 工作所涉及的技术还没有吃透, 看到机器学习很火想学, 每天花一两个小时在上面, 但是工作中用不到, 你短期内又不可能转,  绝大多数人, 最终是跑了一大堆开源项目的hello world, 走马观花了下文档和各种公司. 那么, 每天的这一两个小时相当于是损耗时间, 作用很小(性价比不高), 即使最终要转, 一样需要重头学习积累.&lt;/p&gt;
&lt;p&gt;我的经验是:&lt;/p&gt;
&lt;p&gt;跟当前工作相关,  才能事半功倍.  这样或许会有些功利, 但你我以及大部分人都是普通人, 精力有限, 用在刀刃上.&lt;/p&gt;
&lt;p&gt;知行合一, 从工作内容出发去拓展, 未来实践的概率高, 对个人成长提升也大.&lt;/p&gt;
&lt;p&gt;不说那么多,  40分钟过去, 差不多同事都陆续到了, 你只有几分钟时间, 就要进入战斗模式了&lt;/p&gt;
&lt;p&gt;进入战斗模式之前,  建议第三步&lt;/p&gt;
&lt;h2 id="mei-ri-ji-hua"&gt;每日计划&lt;/h2&gt;
&lt;p&gt;近两年, 个人一直在使用 trello 作为个人看板&lt;/p&gt;
&lt;p&gt;每天在开始工作前, review下今天以及本周需要做的事情, 移动下卡片, 标注下deadline, 备注下注意事项等等&lt;/p&gt;
&lt;p&gt;然后, 选择一个, 开始干活.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是容易沉溺于繁杂的事务, 而忘了身在何处.&lt;/p&gt;
&lt;p&gt;每天独处的思考时间, 可以让我们脱出局中, 而无论是工作还是生活, 都会逐步改善&lt;/p&gt;
&lt;p&gt;每天学习, 然后在工作中实践, 才能感受到成长的力量&lt;/p&gt;
&lt;p&gt;每日计划, 效率加成&lt;/p&gt;
&lt;p&gt;2019-06-23 深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>写给新人的沟通建议</title><link href="http://www.wklken.me/posts/2017/04/09/suggestions-about-communication.html" rel="alternate"></link><published>2017-04-09T00:00:00+08:00</published><updated>2017-04-09T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-04-09:/posts/2017/04/09/suggestions-about-communication.html</id><summary type="html">&lt;p&gt;最近也碰上抄袭的号, 转了我几年前两个文章, 只改了标题, 然后删掉每篇文章中我个人的一两段吐槽, 然后发出来. 抄袭当原创, 然后在评论里以作者的角度回复别人, 看着有点恶心. 这种成本还是太低了, 举报两次, 知乎给删掉了, 但是对于我来说还是很不爽的, 举报的成本太高了, 来一篇举报一篇. 这个号下面的文章(&lt;a href="https://www.zhihu.com/people/calj/pins/posts"&gt;入口&lt;/a&gt;), 目测都是直接用别人的文章改个标题了事.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多年前写过一篇在自己博客里面, &lt;a href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html"&gt;后端不高兴——关于协作和沟通&lt;/a&gt;, 做后端的同学可以看看吐槽哈.&lt;/p&gt;
&lt;p&gt;工作也好多年了, 前前后后跟不少新人合作过, 实际合作中不免各种问题, 都是从新人过来的, 所以打算写一些点, 算是一些感受吧&lt;/p&gt;
&lt;h2 id="guan-yu-wen-ti-miao-shu"&gt;关于问题描述&lt;/h2&gt;
&lt;p&gt;好像之前有人也讲过.&lt;/p&gt;
&lt;p&gt;不要发: &lt;code&gt;hi, 在吗&lt;/code&gt;, 你可能会发现过了很久对方回复:&lt;code&gt;在&lt;/code&gt;, 然后你可能也没立即接下一句, 晚一会回复:&lt;code&gt;xxxx问题&lt;/code&gt;, 然后对方又隔了很长一段时间才回....如此来来往往, 一次沟通跨度从一两个小时到好几天&lt;/p&gt;
&lt;p&gt;一般新人会觉得心累, 有点&lt;code&gt;玻璃心&lt;/code&gt;的会觉得委屈, 如果事情紧急, 光自己干着急了.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;老鸟&lt;/code&gt;也很累, 一般事情比较多 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近也碰上抄袭的号, 转了我几年前两个文章, 只改了标题, 然后删掉每篇文章中我个人的一两段吐槽, 然后发出来. 抄袭当原创, 然后在评论里以作者的角度回复别人, 看着有点恶心. 这种成本还是太低了, 举报两次, 知乎给删掉了, 但是对于我来说还是很不爽的, 举报的成本太高了, 来一篇举报一篇. 这个号下面的文章(&lt;a href="https://www.zhihu.com/people/calj/pins/posts"&gt;入口&lt;/a&gt;), 目测都是直接用别人的文章改个标题了事.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多年前写过一篇在自己博客里面, &lt;a href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html"&gt;后端不高兴——关于协作和沟通&lt;/a&gt;, 做后端的同学可以看看吐槽哈.&lt;/p&gt;
&lt;p&gt;工作也好多年了, 前前后后跟不少新人合作过, 实际合作中不免各种问题, 都是从新人过来的, 所以打算写一些点, 算是一些感受吧&lt;/p&gt;
&lt;h2 id="guan-yu-wen-ti-miao-shu"&gt;关于问题描述&lt;/h2&gt;
&lt;p&gt;好像之前有人也讲过.&lt;/p&gt;
&lt;p&gt;不要发: &lt;code&gt;hi, 在吗&lt;/code&gt;, 你可能会发现过了很久对方回复:&lt;code&gt;在&lt;/code&gt;, 然后你可能也没立即接下一句, 晚一会回复:&lt;code&gt;xxxx问题&lt;/code&gt;, 然后对方又隔了很长一段时间才回....如此来来往往, 一次沟通跨度从一两个小时到好几天&lt;/p&gt;
&lt;p&gt;一般新人会觉得心累, 有点&lt;code&gt;玻璃心&lt;/code&gt;的会觉得委屈, 如果事情紧急, 光自己干着急了.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;老鸟&lt;/code&gt;也很累, 一般事情比较多, 各种事情混在一起, 面对这种类型沟通, 无法获取足够多的信息, 自然无法快速解决. 其实心里也想事情快速处理掉.&lt;/p&gt;
&lt;p&gt;这种有点类似&lt;code&gt;打乒乓球&lt;/code&gt;的沟通方式是不对的. 每次没有提供足够的信息, 而又期待对方快速反馈, 然而每个人都有自己忙碌的事情, 势必导致这类沟通十分之低效.&lt;/p&gt;
&lt;p&gt;正确的沟通方式应该是: &lt;code&gt;倾倒式&lt;/code&gt;的沟通.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hi xxxx:
我是xxxxx
目前遇到一个问题
现象
数据
结果

这个问题是xxxxxx?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而对方在看到你的消息后, 一次性就可以全面了解你的问题, 了然于胸, 很快就能解决问题.&lt;/p&gt;
&lt;p&gt;而区别是: 一次传达的有效信息量.&lt;/p&gt;
&lt;h2 id="ru-he-wen-ti"&gt;如何问题&lt;/h2&gt;
&lt;p&gt;建议不管是新手还是老鸟, 都读一读 &lt;a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md"&gt;提问的智慧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际上, 有些时候某些问题看起来十分的&lt;code&gt;无奈&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 系统挂了       -- 一脸懵逼, 什么系统
- 接口返回错误   -- excuse me? 哪个接口? 给的参数是? 返回结果/状态码是?
- 页面有点问题   -- 哪个页面? 什么问题?

......
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很是&lt;code&gt;无奈&lt;/code&gt;, 很多问题看起来&lt;code&gt;言简意赅&lt;/code&gt;, 但是蛋疼的也是这个, 缺乏信息量, 缺乏对问题的准确描述, 往往站在信息接收人的角度是: 一脸懵逼. 然后, 就开始来来往往的&lt;code&gt;沟通&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以: 如何准确描述问题, 算是提问的基本要求了&lt;/p&gt;
&lt;h2 id="ji-chu-wen-ti-bu-yao-wen"&gt;基础问题不要问&lt;/h2&gt;
&lt;p&gt;基础问题, 例如某些库的方法/参数, http状态码, 某个异常堆栈信息.&lt;/p&gt;
&lt;p&gt;很多时候, 拿这类问题去问别人, 是十分低效且有害的!&lt;/p&gt;
&lt;p&gt;因为: 这个时代, 搜索引擎这么强大, 技术资料如此丰富, 各类社区如此多前人踩坑, 团队的wiki如此完善, 你还拿一个如此基础的问题去问别人, 似乎说不过去吧.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAxNzI4MTMwMw==&amp;amp;mid=402360586&amp;amp;idx=1&amp;amp;sn=49ee00777438718a73f519742ed5c5d6#rd"&gt;只要是搜索引擎能回答的就别问别人……&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也不是说不能问, 但是前提是, 自己搜索无果, 无法解决的情况下.(google, 且会基本搜索技巧)&lt;/p&gt;
&lt;p&gt;这类问题, 看起来很简单是吧, 对其他人也许也就一句话的事情, 但是, 这样造成不好的结果是, 对方被你打断了! 无论多短暂, 都是打断, 断点-思考-回答-回到断点.&lt;/p&gt;
&lt;p&gt;因为回答你一个本可以自己解决的问题, 而手头正在做的事情被打断.&lt;/p&gt;
&lt;p&gt;而这个, 对效率影响是非常大的.&lt;/p&gt;
&lt;p&gt;所以, 忠告: 不要把同事当做搜索引擎, 尊重对方.&lt;/p&gt;
&lt;h2 id="yu-dao-wen-ti-xian-cong-zi-ji-cha-qi"&gt;遇到问题, 先从自己查起&lt;/h2&gt;
&lt;p&gt;很多人遇到问题后, 第一意识是, 我的代码是ok的, 你的接口有问题.&lt;/p&gt;
&lt;p&gt;然后, 直接抛给对方(对方大写懵逼)&lt;/p&gt;
&lt;p&gt;而此时, 对方心里肯定第一意识也是: 我的代码是ok的, 一定不是我的问题. 此时心态上会有些变化, 然后去确认接口是不是有问题, 如果有问题也就罢了, 没问题会反向再反馈回来, 自己排查.&lt;/p&gt;
&lt;p&gt;而很多时候, 要么没看文档, 没配host, 配错host, 环境不对, 没有遵循协议, 参数传错等等一系列自己代码的低级错误导致的.&lt;/p&gt;
&lt;p&gt;也许这都是小事, 但当次数多了, 而大多数问题不是对方问题时, 你的信誉点已经降到了最低, 你的任何问题反馈, 无形中会被降级.&lt;/p&gt;
&lt;p&gt;想象一下, 有人说你接口有问题, 然后你确认服务没问题(几分钟), 找对方要参数数据复现没问题(十几分钟), 然后到对方电脑查问题(几分钟), 一折腾半个多小时没了. 最后发现是一个低级问题(例如没配host), 你心里.....&lt;/p&gt;
&lt;p&gt;所以, 先确认错误, 排查下是否是自己的问题&lt;/p&gt;
&lt;h2 id="bu-yao-hu-luan-cai-ce-na-shu-ju-shuo-hua"&gt;不要胡乱猜测, 拿数据说话&lt;/h2&gt;
&lt;p&gt;接上个问题, 当你认为别人系统有问题时, 请拿数据说话. 当别人认为你系统有问题的时候, 请对方提供数据.&lt;/p&gt;
&lt;p&gt;发现自己在跟人沟通时, 问的最多的问题是: 把调用的接口/参数/返回值/状态码/日志等等, 发给我, 谢谢.&lt;/p&gt;
&lt;p&gt;发现有问题, 不要猜, 代码是确定的, 查就是了.&lt;/p&gt;
&lt;p&gt;当看到报错, 从上往下查, 一层层向下跟踪, 确认输入/输出/异常/状态码等. 学会追踪调用是必备技能.&lt;/p&gt;
&lt;p&gt;有足够的数据才能断定是哪的问题&lt;/p&gt;
&lt;p&gt;如果是自己的问题, 修正.&lt;/p&gt;
&lt;p&gt;如果是别人的问题, 拿着数据, 也方便别人定位问题.&lt;/p&gt;
&lt;p&gt;特别忌讳的是: 没有数据的情况下, 猜测, 然后把问题抛出去了, 会造成组织效率低下, 可能你一个小小猜测, 花费别人很多时间. 每个人的时间都需要尊重.&lt;/p&gt;
&lt;h2 id="gai-wen-jiu-wen-bu-yao-hai-pa-da-duan"&gt;该问就问, 不要害怕打断&lt;/h2&gt;
&lt;p&gt;基于上面的几点, 假设问题自己没法解决, 需要求助, 那就求助吧.&lt;/p&gt;
&lt;p&gt;不要害怕打扰别人, 一般程序员都很nice, 有问题, 把问题准备好, 精确描述, 自己的尝试, 目前遇到的点等等, 将信息汇聚, 一次性问, 然后直接去问.&lt;/p&gt;
&lt;p&gt;紧急请当面, 次紧急用电话, 不大紧急, 可以用IM 工具, 对方实在忙, 可以先约个时间.&lt;/p&gt;
&lt;h2 id="xiao-jie"&gt;小结&lt;/h2&gt;
&lt;p&gt;学会基本的沟通技巧, 善用之, 同时, 尊重他人的时间, 他人也会尊重你的时间.&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>也许是一个新的开始</title><link href="http://www.wklken.me/posts/2016/02/16/maybe-a-new-start.html" rel="alternate"></link><published>2016-02-16T00:00:00+08:00</published><updated>2016-02-16T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-16:/posts/2016/02/16/maybe-a-new-start.html</id><summary type="html">&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</summary><content type="html">&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>我为什么要写博客</title><link href="http://www.wklken.me/posts/2015/09/26/why-i-keep-blogging.html" rel="alternate"></link><published>2015-09-26T00:00:00+08:00</published><updated>2015-09-26T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-09-26:/posts/2015/09/26/why-i-keep-blogging.html</id><summary type="html">&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光.&lt;/p&gt;
&lt;p&gt;很快, 工作四年多了, 时间是把杀猪刀, 改变了很多东西.&lt;/p&gt;
&lt;p&gt;工作四年, 经历了三家公司, 不幸的是后面两家夭折了, 庆幸的是, 做了很多事情, 认识了很多朋友.&lt;/p&gt;
&lt;p&gt;做的事情多, 杂, 也接触了很多东西, 感觉遗憾的是没能完完整整地经历一个公司的发展, 或者一套系统的进化过程.&lt;/p&gt;
&lt;p&gt;四年, 改变了很多, 唯独没变的, 是偶尔会更新下博客, 输出一些东西, 吐吐槽神马的.&lt;/p&gt;
&lt;p&gt;写博客的目的, 对我来说, 不外乎如是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;活得越久, 越发现记忆的不靠谱.&lt;/p&gt;
&lt;p&gt;很难会到过去某一刻, 某个时期的所思所想, 当时的心境, 当时的境遇.&lt;/p&gt;
&lt;p&gt;所以, 记录, 写一写小结, 阶段性看看, 过去&lt;code&gt;无知&lt;/code&gt;/&lt;code&gt;青葱&lt;/code&gt;的自己, 也是必须的.&lt;/p&gt;
&lt;p&gt;当然, 更有效的做法是, 每天坚持写写日记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一些坑, 自己踩过就好......&lt;/p&gt;
&lt;p&gt;而有一些观点, 可以发出来一起看看, 或多或少得到一些感受&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理思路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我主要的知识管理工具是gollum, 以及evernote作为辅助, 在工作以及学习的过程中, 会碰到某个问题的方方面面, 各种细节, 散而且乱, 分布在不同地方, 而发个博客出来, 主要是可以花一两个小时, 对某块进行汇总, 然后重新梳理, 得到一个较为完整的内容, 顺手从笔记中清掉.&lt;/p&gt;
&lt;p&gt;总之, 类似于一个精粹的过程.&lt;/p&gt;
&lt;p&gt;还有, 例如在读python源码的时候, 读源码, 做笔记, 写注释, 同时还要参考书籍和文档, 往往当时读懂了, 觉得很清晰, 但是过阵子再回去看下, 面对一堆杂乱无从下手, 而出博文的过程, 会顺着思路走, 绘制一些结构图流程图, 再回头看的时候, 往往几分钟就能全盘了然&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gollum和evernote的搜索其实做的都还不错, 但是有时候搜一个点, 得到不止一篇的结果, 往往要点好多次才能找到, 而发博文后, 顺手笔记中清掉, 此时在脑中已经有个印象, 某个点我详细写过什么东西, 那么剩下的只是一键打开博客, 找到那篇文章即可.&lt;/p&gt;
&lt;p&gt;另一个好处是, gollum和evernote是本地的, 在别人电脑上处理问题的时候, 博客反正到哪都能访问到&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;写博的过程, 更多的是自己记录, 思考, 成长的过程, 坚持下来, 感觉还是收获颇多.&lt;/p&gt;
&lt;p&gt;明确目的, 不要把这个写博客的日常变成功利, 其实这次找工作的过程发现, 写博客或许加分了, 但是就是过简历那个环节而已, 太过功利会没必要, 花费大量时间并不值得. 更多的是, 做事情, 把事情做好, 然后得到一些积累和感悟, 而不是反之. &lt;/p&gt;
&lt;p&gt;PS:  其实github开源也是一样, 做自己感兴趣的事情, 而不是去为了开源而开源&lt;/p&gt;
&lt;p&gt;后续, 会主要关注两方面, 一块是偏底层的东西, 构建基础的知识体系, 另一块是做业务/项目过程中的总结.&lt;/p&gt;
&lt;p&gt;编码不易, 且行且珍惜, 共勉&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-09-26 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>"活动"设计的一些trick</title><link href="http://www.wklken.me/posts/2015/08/28/tricks-about-promotion-codes.html" rel="alternate"></link><published>2015-08-28T00:00:00+08:00</published><updated>2015-08-28T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-28:/posts/2015/08/28/tricks-about-promotion-codes.html</id><summary type="html">&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-de"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="huo-dong-kai-fa-jian-yao-liu-cheng"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-de"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="huo-dong-kai-fa-jian-yao-liu-cheng"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代, 测试&lt;/li&gt;
&lt;li&gt;正式上线&lt;/li&gt;
&lt;li&gt;管理侧/统计侧上线&lt;/li&gt;
&lt;li&gt;推广/监控&lt;/li&gt;
&lt;li&gt;活动结束&lt;/li&gt;
&lt;li&gt;奖品派发/数据统计等&lt;/li&gt;
&lt;li&gt;活动下线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quick-and-maybe-dirty"&gt;quick and maybe dirty&lt;/h3&gt;
&lt;p&gt;由于&lt;code&gt;活动&lt;/code&gt;本身的性质, 这类代码逻辑属于&lt;code&gt;短平快&lt;/code&gt;一类的.&lt;/p&gt;
&lt;p&gt;简而言之: 怎么快怎么来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以不要考虑复用&lt;/li&gt;
&lt;li&gt;当然, 有些代码是复用的, 例如CRUD/get some list/check permission/call base service等等&lt;/li&gt;
&lt;li&gt;不要考虑将来/以后, 很多活动上了就下了, 不会有所谓的&lt;code&gt;将来&lt;/code&gt;, 切忌过渡设计, 空耗费许多精力没有必要&lt;/li&gt;
&lt;li&gt;要快&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="zhu-yi-dai-ma-shu-ju-bu-shu-ge-chi"&gt;注意代码/数据/部署隔离&lt;/h3&gt;
&lt;p&gt;前面说过, 很多活动逻辑没有将来&lt;/p&gt;
&lt;p&gt;所以, 活动的代码尽量独立, 保证随写随测, 随上随下, 尽量隔离于主体代码之外, 这样上下线也方便&lt;/p&gt;
&lt;p&gt;当然, 不可能完全独立, 依赖外部尽量使用独立的服务接口, 被外部依赖提供也尽量通过提供接口解决(情况很少)&lt;/p&gt;
&lt;p&gt;数据独立, 包括, 数据库实例/redis or memcached/文件等, 活动需要记录一些数据, 和主体业务独立开来, 尽量不共用, 有条件的话单独提供实例&lt;/p&gt;
&lt;p&gt;部署隔离, 尽量不要和关键服务在同一台机器或者共用带宽, 由于&lt;code&gt;活动&lt;/code&gt;本身的特质, 可能带来突发的流量, 可能导致带宽/IO/缓存占用/机器负载等变高, 会影响到其他服务.(可以给定独立url, 通过反代定到活动服务)&lt;/p&gt;
&lt;h3 id="kai-fa-zhu-yi"&gt;开发注意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做好缓存&lt;/li&gt;
&lt;li&gt;每个接口做好资质/权限控制, 这类逻辑放在api代码的前面(判断条件放到最前面), fail fast, 验证通过后才进入主体逻辑代码&lt;/li&gt;
&lt;li&gt;友好的异常处理/用户提示&lt;/li&gt;
&lt;li&gt;后端需要考虑&lt;code&gt;防刷&lt;/code&gt;, 前端需要处理下&lt;code&gt;重复提交&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;做好事务控制(并发), 特别是涉及数字增减的情况, 例如奖品数&lt;/li&gt;
&lt;li&gt;涉及步骤的活动, 做好流程限制, 第一步-第二步-第三步......, 防止用户跳过某一步直接进入下一步.(可以通过签加密token的方式)&lt;/li&gt;
&lt;li&gt;图片, 尽量放到 CDN (血的教训, 前端一张背景图导致带宽被跑满, 后续用户进不来)&lt;/li&gt;
&lt;li&gt;需要有一套成熟的统计系统, 活动数据直接发送到统计系统, 由统计系统统一出数据&lt;/li&gt;
&lt;li&gt;对于关键性的步骤/数据, 可以记日志&lt;/li&gt;
&lt;li&gt;有必要的话, 做成一期一期的, 有开始结束时间, 自动切换(有些复杂的活动)&lt;/li&gt;
&lt;li&gt;有必要的话, (传说中的开关)提供方便的配置或者入口, 可以一键上下线活动/奖品(valid/invalid/shutdown)&lt;/li&gt;
&lt;li&gt;对于关键性的代码, 做好注释, 例如一些限制逻辑/数量等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xue-hui-da-shi-jian-chai"&gt;学会打时间差&lt;/h3&gt;
&lt;p&gt;很多活动, 可能是热点? 节日? 等等, 时效性比较强的.&lt;/p&gt;
&lt;p&gt;然而, 当活动逻辑很复杂的时候, 又要在规定时间内上线, 这时候可以仔细切分需求,  分不同时间上线.&lt;/p&gt;
&lt;p&gt;例如, 一个玩游戏/抽奖/兑奖的活动, 可能分为两部分, 用户侧和管理侧, 用户侧逻辑&lt;code&gt;玩游戏/兑奖/查看是否获奖&lt;/code&gt;, 管理侧&lt;code&gt;查看获奖情况/颁奖/新增用户统计/渠道统计/流量统计&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;那么, 可以先保证用户侧完成, 同时加入向统计系统发送统计数据的接口, 然后上线, 保证用户侧主体流程. 上线后开始开发管理侧, 管理侧可以按照运营优先级处理, 例如要查看实时统计信息的话, 先做统计, 保证推广效果, 获奖及颁奖可以稍稍押后, 作为第三阶段上线(如果活动兑奖都是在一个周期结束的话)&lt;/p&gt;
&lt;p&gt;例如, 要发奖数据, 如果没有管理后台, 直接库里导一份出来就是了. 其实这时候应该思考, 要不要花力气做管理后台, 大不了活动结束手工操作一下, 十分钟.&lt;/p&gt;
&lt;h3 id="xia-xian"&gt;下线&lt;/h3&gt;
&lt;p&gt;额, 活动做完, 要下线了.&lt;/p&gt;
&lt;p&gt;如果程序是带日期限制的, 到点了自动结束, 提示用户活动结束, 活动流程无法走下去.&lt;/p&gt;
&lt;p&gt;如果需要人肉, 直接将外网入口去掉即可.&lt;/p&gt;
&lt;p&gt;然后, 可以考虑后续了&lt;/p&gt;
&lt;p&gt;首先, 要确认, 该记录的统计数据记录了, 该分析的分析了, 该发奖的也发奖了......&lt;/p&gt;
&lt;p&gt;首先, 备份代码到活动代码仓库(供后续参考/复用, 防止雷同逻辑/代码要重写), 然后从代码库删除.&lt;/p&gt;
&lt;p&gt;线上, 备份数据到备份服务器, 包括数据库数据/日志/文件等等, 如果缓存中有需要dump的, dump出来. 然后下线数据库, 清空缓存, 日志等&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;活动, 很大程度上是一堆&lt;code&gt;临时&lt;/code&gt;而&lt;code&gt;无用&lt;/code&gt;并且&lt;code&gt;没有技术含量&lt;/code&gt;, 而且非常&lt;code&gt;短命&lt;/code&gt;的代码组成的, 做多了容易烦躁, 最好一个项目组里轮流处理, 当然有人认领更好. &lt;/p&gt;
&lt;p&gt;活动成不成功, 决定因素很多, 但无论如何, 下线前做好review, 防止重复犯错&lt;/p&gt;
&lt;p&gt;就这些&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2015-08-28&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>关于知识管理工具的思考</title><link href="http://www.wklken.me/posts/2015/05/02/about-knowledge-manage-tools.html" rel="alternate"></link><published>2015-05-02T00:00:00+08:00</published><updated>2015-05-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-05-02:/posts/2015/05/02/about-knowledge-manage-tools.html</id><summary type="html">&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="shou-chao-bi-ji"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="shou-chao-bi-ji"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来, 费时费力, 效率极低, 但是就当时环境而言, 不失为一种好的做法(相对于啥都没记来说), &lt;code&gt;好记性不如烂笔头&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;而且, 上课/参加培训等等, 都通过笔记来记录&lt;/p&gt;
&lt;p&gt;手抄的做法, 太过古老, 如果是非技术书籍, 抑或个人喜欢纸质书籍, 不失为一种好的做法. 但是技术书籍, 手抄太过低效, 不易整理, 更不易搜索, 看似积累了很多, 实际沉淀不多.&lt;/p&gt;
&lt;h1 id="word"&gt;word&lt;/h1&gt;
&lt;p&gt;到毕业做测试一年多, 那时大多数情况下是windows系统, 毕业那会刚刚把系统转到ubuntu, 但是工作环境主要还是windows, 用终端连接主机工作.&lt;/p&gt;
&lt;p&gt;正式参加工作, 虽然还经常买纸质书, 但是正儿八经系统啃书的机会相当少, 大部分是工作中碎片化学习的东西, 所以&lt;code&gt;手抄笔记&lt;/code&gt;完全从生活中消失了&lt;/p&gt;
&lt;p&gt;这时候, 开始有意识记录使用电脑记录, 以及整理汇总一些东西.&lt;/p&gt;
&lt;p&gt;这段时间, 系统性整理了linux &amp;amp; shell笔记/vim笔记等, 测试理论, python入门等等.  工作中还是svn, 对git完全没有概念,  更别说markdown了.&lt;/p&gt;
&lt;p&gt;这时候笔记以word形式归总在目录下, 通过金山快盘同步, 后来迁到dropbox了&lt;/p&gt;
&lt;p&gt;那时候evernote/有道笔记还刚刚火起, 对云端没有太多需求, 没怎么关注&lt;/p&gt;
&lt;p&gt;word记录, 相对手抄效率略高, 也方便整理复习, 搜索功能有限.&lt;/p&gt;
&lt;h1 id="you-dao-bi-ji-yin-xiang-bi-ji"&gt;有道笔记 - 印象笔记&lt;/h1&gt;
&lt;p&gt;学习markdown了, 也开始玩github, 这时候云笔记开始火了, 刚好, 开始玩微博, 对各种人各种关注, 天天刷微博, 这个习惯延续至今.&lt;/p&gt;
&lt;p&gt;其实用得最多的只有一个功能: 网页剪藏&lt;/p&gt;
&lt;p&gt;每个人都会经历这么一个阶段, 碰到各种资源信息, 疯狂收集, 不管有用没用, 先搞下来再说.&lt;/p&gt;
&lt;p&gt;然后, 发现有3000+剪藏, 微博上2000+收藏, 后来觉得有道不足够靠谱, 丢过笔记,  本着&lt;code&gt;折腾&lt;/code&gt;的信念, 开始迁移笔记, 3000+剪藏只能以尽量高效的方式废弃: &lt;code&gt;当前不涉及不会接触短期内也不会关注的不管好不好以后有没有用全部删掉&lt;/code&gt;, 这样, 完成了自己的折腾史.&lt;/p&gt;
&lt;p&gt;除了剪藏, 最大的功能就是云同步了, 公司电脑和家里电脑同步. 那时候还在用android机, 移动端记录的需求倒是不怎么强烈&lt;/p&gt;
&lt;p&gt;这期间, 明白了&lt;code&gt;资源再多, 无用就是无用&lt;/code&gt;, 心态上改变了, 微博停止了点&lt;code&gt;收藏&lt;/code&gt;, 那2000+收藏, 也就废弃了. 另外, 也开始进行&lt;code&gt;关注&lt;/code&gt;的整理, 获取有效而稳定的信息流.&lt;/p&gt;
&lt;p&gt;PS: 云笔记最坑的是同步, 然后你发现丢了.....还有, 同步, 你发现冲突了, 然后在两份文件里面diff......都经历过, 心塞&lt;/p&gt;
&lt;h1 id="yin-xiang-bi-ji-ulysess"&gt;印象笔记 - Ulysess&lt;/h1&gt;
&lt;p&gt;印象笔记, 用了一段时间, 这时候也换了&lt;code&gt;mac&lt;/code&gt;和&lt;code&gt;iphone&lt;/code&gt;, 以及后来&lt;code&gt;ipad&lt;/code&gt;, 开始随时记录.&lt;/p&gt;
&lt;p&gt;但是用了一段时间, 发现一个问题: 不支持markdown&lt;/p&gt;
&lt;p&gt;后来, 又有一个问题: 代码高亮也不支持&lt;/p&gt;
&lt;p&gt;后来的后来, 发现: 这编辑功能也太渣了吧&lt;/p&gt;
&lt;p&gt;这时候, 刚好博客都迁移到自己站点, 全markdown静态.&lt;/p&gt;
&lt;p&gt;想着技术部分的笔记是否有一个更好的编辑/展现方式.&lt;/p&gt;
&lt;p&gt;也正好, 这时候对mac app有着一股狂热, 虽然现在过去了, 但是当时刚刚使用mac, 感受到了好处, 开始折腾&lt;code&gt;各类工具&lt;/code&gt;, 正好碰上了&lt;code&gt;ulysess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候, 感觉技术笔记迁移到上面会更好, 然后逐步迁移.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no zuo no die&lt;/code&gt;,  展现不错, 支持markdown, 支持高亮, 对于外貌党来说, 很赞的&lt;code&gt;编辑器&lt;/code&gt;, 是的, 迁完之后, 才想起来, 这货是个编辑器, 不是&lt;code&gt;笔记&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;由于搜索太弱, 不支持多端等等情况, 年前有发生了一次全部笔记给我double了一份, 老天, 几百篇笔记都变成双份了. 我花了一整天时间手工删除重复笔记. (目测可能是icloud的锅)&lt;/p&gt;
&lt;p&gt;死心了, 接着迁移&lt;/p&gt;
&lt;h1 id="wiznote"&gt;WizNote&lt;/h1&gt;
&lt;p&gt;为知笔记, 口碑不错, 试用了几天&lt;/p&gt;
&lt;p&gt;支持markdown, 目测是云笔记系列为数不多能支持这个的.&lt;/p&gt;
&lt;p&gt;然后, 为了&lt;code&gt;弃用&lt;/code&gt; ulysess, 花了点时间迁移完(ulysess作为编辑器还是很赞的, 还在用).&lt;/p&gt;
&lt;p&gt;用着用着, 发现这markdown, 这剪藏, 似乎没有那么&lt;code&gt;理想&lt;/code&gt;, 体验不佳, 用得越多越感觉到&lt;/p&gt;
&lt;p&gt;这时候, 搬了一回家, 发现搬书, 完全是一个自虐的活. 而且很多大部头看过后都不在打开, 很多书被我脱水了也没有阅读价值了......开始转向电子书, 多看&lt;/p&gt;
&lt;p&gt;这时候, 开始思考.......然后, 迁移&lt;/p&gt;
&lt;h1 id="fen-ji-de-zhi-shi-guan-li"&gt;分级的知识管理&lt;/h1&gt;
&lt;p&gt;后来, 到了现在的情况: 分级, 邮件/evernote/gollum&lt;/p&gt;
&lt;h4 id="1-shou-ji"&gt;1. 收集&lt;/h4&gt;
&lt;p&gt;要求: 方便, 阅读格式ok, 不丢&lt;/p&gt;
&lt;p&gt;选择: Evernote国际版, 有条件上个高级版, 别问我为啥不用印象笔记&lt;/p&gt;
&lt;p&gt;专门建立一个笔记本: Inbox, 对于碰到的感兴趣的东西, 一键剪藏, 或者分享到evernote, 简单直接有效, 这点是所有云笔记中做的最好的&lt;/p&gt;
&lt;p&gt;另外, 支持多看读书笔记同步, 感受到这个世界深深地温暖&lt;/p&gt;
&lt;p&gt;PS: 对于微博的处理, 额, 我现在是这么干的: "分享到-邮件", 给自己发邮件, 然后定期处理:), 很有效.(使用unibox, 同一个发件人的邮件都在一个对话窗口里面, 很好处理 )&lt;/p&gt;
&lt;h4 id="2-zheng-li"&gt;2. 整理&lt;/h4&gt;
&lt;p&gt;要求: 易用, 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, mindnode pro, gollum&lt;/p&gt;
&lt;p&gt;主要是一些点, 标注, 做思维导图&lt;/p&gt;
&lt;p&gt;对于观点/经验等等东西, 可以阅读梳理后, 放置到evernote&lt;/p&gt;
&lt;p&gt;对于技术类/干货类东西, 放evernote&lt;/p&gt;
&lt;h4 id="3-chen-dian"&gt;3. 沉淀&lt;/h4&gt;
&lt;p&gt;要求: 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;沉淀是再次提取思考的过程, 还是evernote&lt;/p&gt;
&lt;p&gt;不过, 对于技术类东西, 其实对云同步要求不需要那么高, 所以选择了自建wiki, 写完markdown往目录一扔, 就可以在本地web server上看到, 搜索等等, 是对技术/代码沉淀的最佳工具&lt;/p&gt;
&lt;h4 id="4-sou-suo"&gt;4. 搜索&lt;/h4&gt;
&lt;p&gt;要求: 精准高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;用一下就知道了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这完全是一部&lt;code&gt;折腾&lt;/code&gt;的血泪史, 只有不断经历, 才能进步, 进化, 最终找到适合自己的方式.&lt;/p&gt;
&lt;p&gt;没有最好的方法, 只有最合适的方法, 对工具同理, 所以在整个过程中, 还是建议, 明确自己的需求, 要解决的问题等, 多关注一些东西, 多尝试.&lt;/p&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;
&lt;p&gt;2015-05-02&lt;/p&gt;
&lt;p&gt;wklken 于深圳&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>关于代码调试de那些事</title><link href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html" rel="alternate"></link><published>2014-11-23T00:00:00+08:00</published><updated>2014-11-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-23:/posts/2014/11/23/how-to-debug.html</id><summary type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么 …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么, 保持清醒&lt;/h3&gt;
&lt;p&gt;代码调试有时候会让你陷入无尽的自我怀疑/迷茫/愤怒/沮丧/窘迫/挫败(无限负能量), 很容易被这些情绪左右, 不清醒, 陷入怀疑自我(一定是我调用的方式不对), 或者怀疑一切(一定是数据库问题, 不对, 缓存问题, 不对, 接口问题, 好像不对, 数据问题), 或者胡乱改代码(改-跑-错了-再改-跑-又错-再改, 传说中的随机行走编程), 或者......(挣扎吧......)&lt;/p&gt;
&lt;p&gt;此刻, 保持清醒的自我是非常重要的, 要明确: &lt;code&gt;我在做什么&lt;/code&gt;, &lt;code&gt;问题是什么症状&lt;/code&gt;, &lt;code&gt;原来逻辑是什么&lt;/code&gt;, &lt;code&gt;最有可能出问题的是哪里&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id="2xiang-qing-chu-liao-zai-xie-dai-ma"&gt;2.想清楚了再写代码&lt;/h3&gt;
&lt;p&gt;如果连需求是什么, 想要做什么都没整明白, 就吭哧吭哧开写, 意图在实践中摸索通向胜利的道路, 是很愚蠢的行为.&lt;/p&gt;
&lt;p&gt;需要去理解需求, 自己要做什么, 然后, 在大脑中构造, 现在有什么, 为了完成需求需要做什么, 完成大体的组成结构/步骤流程的思考后, 再着手去做.&lt;/p&gt;
&lt;p&gt;大到整体设计, 小到一个函数, 都可以这么处理&lt;/p&gt;
&lt;p&gt;例如, 遇到复杂问题, 可以先写注释, 完整所有函数整体设计, 然后再填充细节&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dosomething&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="err"&gt;“””&lt;/span&gt;
        &lt;span class="err"&gt;“””&lt;/span&gt;
        &lt;span class="c1"&gt;# step1: call func test()&lt;/span&gt;

        &lt;span class="c1"&gt;# step2: parse url to &lt;/span&gt;

        &lt;span class="c1"&gt;# step3: judge&lt;/span&gt;

        &lt;span class="c1"&gt;# step4: convert and return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3guan-yu-jiao-shou-jia-dai-ma"&gt;3.关于&lt;code&gt;脚手架&lt;/code&gt;代码&lt;/h3&gt;
&lt;p&gt;在逻辑的关键位置, print/assert关键信息, 用于在调试中迅速确认问题. (一些中间值/状态/条件判断结果)&lt;/p&gt;
&lt;p&gt;当然, 信息除了&lt;code&gt;关键&lt;/code&gt;这个特性, 还需要足够&lt;code&gt;丰富&lt;/code&gt;和&lt;code&gt;显眼&lt;/code&gt;, 一遍一次性定位问题. (既要好看又要有用)&lt;/p&gt;
&lt;p&gt;你需要确定下如何用顺手的编辑器快速输入这些代码, 可以用各类语言的snippets&lt;/p&gt;
&lt;p&gt;例如, 在写python时候, 我很喜欢prt&lt;tab&gt;(k-vim自动补全), 快速插入一些需要的信息&lt;/tab&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"TRACK ================= result"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4xie-wan-yi-duan-dai-ma-di-yi-shi-jian-zi-ji-reviewyi-xia"&gt;4.写完一段代码第一时间自己review一下&lt;/h3&gt;
&lt;p&gt;事实证明, review的效果比写完直接跑再来调, 效率高多了.&lt;/p&gt;
&lt;p&gt;刚写完一段代码, 思路还很清晰, 跳到开始, review过程中注意各类变量, 条件判断, 函数调用, 上下文, 一致性, 错误处理等, 花不了多少时间, 却能发现一些&lt;code&gt;显而易见&lt;/code&gt;的问题, 省下很多无谓的调试时间(没问题不需要调试!).&lt;/p&gt;
&lt;h3 id="5reviewzhong-zhu-yi-dai-ma-shi-kou-guo-lai-de-yao"&gt;5.review中注意, 代码是&lt;code&gt;抠&lt;/code&gt;过来的么?&lt;/h3&gt;
&lt;p&gt;很多时候从其他地方copy代码过来(一行或几行, 有时候只是一个函数调用或一个判断), 但是很容易忘了根据当前情况修改一些必要的值, 导致问题&lt;/p&gt;
&lt;p&gt;例如函数调用, 这个地方调用参数可能跟你copy这行代码需要参数不一样, 但是放在这里并不会报错(一切运作正常), 最终结果并不对.....&lt;/p&gt;
&lt;p&gt;好了, 开始调试&lt;/p&gt;
&lt;h3 id="6gao-ming-bai-wen-ti-de-biao-xian-shi-shi-yao-zheng-zhuang"&gt;6.搞明白问题的表现是什么(症状)&lt;/h3&gt;
&lt;p&gt;运行代码, 报错了, 有些人会瞬切回编辑器, 开始改代码(作高效状)......&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;问题是: &lt;code&gt;报错提示你看了么, 看明白了么?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在大部分语言, 其报错提示已经很明显了, 精确到行/变量, 虽然整个异常栈信息可能很长(非常长), 但是都有其特征(在最前或在最后,或在中间靠后, 有关键字), 仔细看下报错信息, 精确制导才是王道.&lt;/p&gt;
&lt;p&gt;所以, 你需要从错误信息中先确认&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;错误类型
发生错误的地方
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很多语法问题可以根据这个信息直接定位&lt;/p&gt;
&lt;h3 id="7diao-shi-guo-cheng-zhong-xu-yao-shi-ke-zhu-yi"&gt;7.调试过程中, 需要时刻注意&lt;/h3&gt;
&lt;p&gt;改的是不是正确的目录下正确的文件?(大坑)&lt;/p&gt;
&lt;p&gt;保存了么(编译了么)?(又一个坑)&lt;/p&gt;
&lt;p&gt;服务重启了么?&lt;/p&gt;
&lt;p&gt;跟数据库有没有关系/跟缓存有没有关系, 要不要清?&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;以上问题, 随便碰上一个你都可能发现, 自己书写的代码和当前运行来调试的代码不一样.(会浪费你巨量的时间)&lt;/p&gt;
&lt;p&gt;自己调试半天怎么还是一样的结果&lt;/p&gt;
&lt;p&gt;我一直在修改, 但是没有什么区别(出现这种情况要自问一下了)&lt;/p&gt;
&lt;p&gt;可以显示在代码头部打印或者故意出错, 确认是同一套代码&lt;/p&gt;
&lt;h3 id="8huan-jing-shu-ju-yi-zhi-xing"&gt;8.环境/数据一致性&lt;/h3&gt;
&lt;p&gt;当你发现在本地无法复现别人报过来的问题(在我电脑上是正常的), 这时候, 需要考虑是否是环境和数据的问题.&lt;/p&gt;
&lt;h3 id="9xian-bu-yao-dong-dai-ma-jia-she-dai-ma-shi-zheng-que-de"&gt;9.先不要动代码, 假设代码是正确的&lt;/h3&gt;
&lt;p&gt;遇到问题, 不要急着修改代码, 需要假设, 代码是正确的, 然后去复现, 复现之后定位.&lt;/p&gt;
&lt;h3 id="10shou-xian-yao-huai-yi-zi-ji"&gt;10.首先要怀疑自己&lt;/h3&gt;
&lt;p&gt;你不能一旦代码跑不动就怀疑是别人的问题, 然后抛给别人, 这样做同样是很不负责任而且很愚蠢的.&lt;/p&gt;
&lt;p&gt;首先, 你需要怀疑自己, 排查问题, 当确定不是自己的问题之后, 将问题定位, 输入, 预期结果, 现在的异常结果都处理好, 生成一个问题, 抛给对应负责人.
(一切没有价值的怀疑都是无意义的)&lt;/p&gt;
&lt;p&gt;程序员都是好人, 每次都在想: &lt;code&gt;一定是我的问题&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="11dui-yu-mo-ming-qi-miao-de-wen-ti-duo-shi-ji-chong-qing-kuang"&gt;11.对于莫名其妙的问题, 多试几种情况&lt;/h3&gt;
&lt;p&gt;有时候碰上一些诡异的问题, 例如有一种情况的输入会报错, 这时候, 再跳过去修改代码前, 可以多尝试几种输入, 涉及边界/异常/正常等情况, 排除法, 精确制导.&lt;/p&gt;
&lt;p&gt;例如, 可以变换输入值的范围(扩大或缩小, 可能用二分法), 变换输入类型和格式&lt;/p&gt;
&lt;h3 id="12xian-hui-dao-zheng-que-de-dai-ma"&gt;12.先回到&lt;code&gt;正确的代码&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果这段代码是由于修改导致的, 可以注掉此次变更代码, 同样的输入再次验证定位&lt;/p&gt;
&lt;h3 id="13ru-guo-yi-duan-dai-ma-shi-mei-dong-guo-de-dai-ma"&gt;13.如果一段代码是&lt;code&gt;没动过&lt;/code&gt;的代码&lt;/h3&gt;
&lt;p&gt;如果你确保&lt;code&gt;确实没动过&lt;/code&gt;, 此时, 先不要怀疑自己, 更大的可能是&lt;code&gt;别人的问题&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;可能情况: 依赖出了问题(调用函数返回数据不对/异常? 依赖请求挂了? ……), 数据出了问题(表结构变更/服务返回数据变更), 环境问题(数据库/缓存)&lt;/p&gt;
&lt;h3 id="14bugzong-shi-qing-xiang-yu-ji-zhong-chu-xian-zai-yi-qi"&gt;14.bug总是倾向于集中出现在一起&lt;/h3&gt;
&lt;p&gt;很多时候, bug是扎堆的, 可以回忆下之前修改的地方, 确认问题.&lt;/p&gt;
&lt;h3 id="15dui-yu-hen-chang-hen-chang-shang-er-fen-fa"&gt;15.对于很长很长, 上&lt;code&gt;二分法&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;可能函数很长, 或者调用链很长, 不易调试.(光打调试信息就得打得手疼)&lt;/p&gt;
&lt;p&gt;找到关键变量, 上&lt;code&gt;二分法&lt;/code&gt;, 无上利器.&lt;/p&gt;
&lt;h3 id="16print-or-debug"&gt;16.print or debug?&lt;/h3&gt;
&lt;p&gt;个人偏好简单粗暴的&lt;code&gt;print&lt;/code&gt;, 主要是用的vim+sinppet, 快速高效.&lt;/p&gt;
&lt;p&gt;当然, 如果用IDE, 用   &lt;code&gt;debug&lt;/code&gt;吧&lt;/p&gt;
&lt;h3 id="17shi-fen-shi-fen-gui-yi-de-wen-ti"&gt;17.十分十分诡异的问题&lt;/h3&gt;
&lt;p&gt;上&lt;code&gt;debug&lt;/code&gt;, 打断点, 一点点调试吧, 只能这样了.&lt;/p&gt;
&lt;h3 id="18dang-yi-ge-wen-ti-chao-guo-ban-xiao-shi"&gt;18.当一个问题超过半小时&lt;/h3&gt;
&lt;p&gt;歇一歇, 走动走动, 打个水, 呼吸下新鲜空气.&lt;/p&gt;
&lt;p&gt;这时候有利于脱出情境, 去掉挫败感/愤怒/迷信等&lt;/p&gt;
&lt;p&gt;很多时候突然灵感一到, 瞬间明了(这种感觉很奇妙)&lt;/p&gt;
&lt;h3 id="19guan-yu-google"&gt;19.关于google&lt;/h3&gt;
&lt;p&gt;有些错误信息, 如果觉得比较独特诡异, 可以google下, 你会找到更多的一些信息的.&lt;/p&gt;
&lt;h3 id="20guan-yu-qiu-zhu"&gt;20.关于求助&lt;/h3&gt;
&lt;p&gt;实在搞不定, google大神也搞不定, 此时可能需要求助了.&lt;/p&gt;
&lt;p&gt;前提, 你自己能把问题想清楚, 并且逻辑清晰地描述出来.(什么业务什么位置的什么逻辑, 报错类型和报错信息, 输入输出, 迄今做了哪些尝试等等) 要学会聪明地问问题, 高效, 尊重自己也尊重别人.&lt;/p&gt;
&lt;p&gt;如果你自己都没整明白怎么问, 别人也无能为力.&lt;/p&gt;
&lt;p&gt;遇到很多人, 直接上来就一句&lt;code&gt;xxx出问题了&lt;/code&gt;, 没有前置条件后置结果中间症状......&lt;/p&gt;
&lt;p&gt;不过, 如果你会聪明地问, 那就放心大胆地问吧, 不用磨磨唧唧的, 程序员大都是善良的孩子.&lt;/p&gt;
&lt;h3 id="21chi-yi-qian-chang-yi-zhi"&gt;21.吃一堑长一智&lt;/h3&gt;
&lt;p&gt;被坑了就要总结总结, 有个记录, 不被同一个问题坑两次.&lt;/p&gt;
&lt;p&gt;如果被坑了就忘, 还需要去反复求助, 那这属于坑队友的行为(鄙视下)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;</content><category term="blabla"></category></entry><entry><title>后端不高兴——关于协作和沟通</title><link href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html" rel="alternate"></link><published>2014-04-24T00:00:00+08:00</published><updated>2014-04-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-24:/posts/2014/04/24/unhappy-about-cooperation-and-communication.html</id><summary type="html">&lt;p&gt;==================&lt;/p&gt;
&lt;p&gt;再过两月毕业三周年，回顾一下，突然想起了一些问题，顺手记录一下&lt;/p&gt;
&lt;p&gt;选择后端的原因之一，代码写得好一些，然后改需求的时候，刷刷刷改几行代码发布，然后泡杯茶站在前端同学后面看他们苦逼地改页面:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhappy" src="/imgs/blabla/unhappyface.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工作那么久，逐渐变得“冷血”，要学会说no，学会排期，学会去“降低”一些人的期望甚至是“无情”扼杀，所以或许初次合作会给人一种不“友好”的印象。&lt;/p&gt;
&lt;p&gt;但是在“友好”和“效率”，我选择了后者，记得当初很菜很菜的时候，我还是很“友好”的。(妈蛋，一天要处理N多问题，跟运营运维产品前端测试等等沟通，还得挤时间码代码测试发布上线，只能高效至上了)&lt;/p&gt;
&lt;p&gt;不扯了，归正题，聊一些平时沟通合作遇到的问题&lt;/p&gt;
&lt;p&gt;PS:这里后端偏指服务端开发，当然，问题普适于各个角色&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-wen-wen-ti-de-fang-shi"&gt;1. 问问题的方式&lt;/h3&gt;
&lt;p&gt;之前在微博看见人说过的一个现象，再次提一下&lt;/p&gt;
&lt;p&gt;假如有人找你咨询一个问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;==================&lt;/p&gt;
&lt;p&gt;再过两月毕业三周年，回顾一下，突然想起了一些问题，顺手记录一下&lt;/p&gt;
&lt;p&gt;选择后端的原因之一，代码写得好一些，然后改需求的时候，刷刷刷改几行代码发布，然后泡杯茶站在前端同学后面看他们苦逼地改页面:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhappy" src="/imgs/blabla/unhappyface.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工作那么久，逐渐变得“冷血”，要学会说no，学会排期，学会去“降低”一些人的期望甚至是“无情”扼杀，所以或许初次合作会给人一种不“友好”的印象。&lt;/p&gt;
&lt;p&gt;但是在“友好”和“效率”，我选择了后者，记得当初很菜很菜的时候，我还是很“友好”的。(妈蛋，一天要处理N多问题，跟运营运维产品前端测试等等沟通，还得挤时间码代码测试发布上线，只能高效至上了)&lt;/p&gt;
&lt;p&gt;不扯了，归正题，聊一些平时沟通合作遇到的问题&lt;/p&gt;
&lt;p&gt;PS:这里后端偏指服务端开发，当然，问题普适于各个角色&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-wen-wen-ti-de-fang-shi"&gt;1. 问问题的方式&lt;/h3&gt;
&lt;p&gt;之前在微博看见人说过的一个现象，再次提一下&lt;/p&gt;
&lt;p&gt;假如有人找你咨询一个问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在? (在么?/在不在?)
B: 额
A: xxx功能你知道么？
B: 知道
A: xxx有个功能有问题了，能帮看下么
B: 什么地方
A: xxxxxxxx
B: 算了你切个图过来吧
A: [图]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个，首先，可能我在写代码，闪动弹窗对有轻微强迫症的人来说，必须要点开的啊（妈蛋），然后，我即时响应了，可能由于你有事什么的，过一会回答，但是这个等待过程中我又很那去投入一件事，很容易投入没几分钟被打断...这几句对话可能跨度是几分钟，甚至几个钟头（跑去吃了个饭回来看到消息给才给回复，哥都快忘了），其次，我真的很吝啬打那么多字&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;效率杀手之一&lt;/p&gt;
&lt;p&gt;最有效率的其实是：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在吗?xxx功能你知道么?现在有问题了，xxx异常，访问链接 http://xxxxxxx，截图如下
   （给力一点的还会圈起来标注说明）
B: ok，稍等我看下
.....
B: 已修复，验证下
A: 好的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;感受下吧&lt;/p&gt;
&lt;p&gt;推荐一篇文章 &lt;a href="http://macshuo.com/?p=367"&gt;如何提问&lt;/a&gt; | 一本书 &lt;a href="http://book.douban.com/subject/20428922/"&gt;学会提问&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2-gao-ming-bai-zhe-shi-shui-de-wen-ti"&gt;2. 搞明白“这事谁的问题”&lt;/h3&gt;
&lt;p&gt;当一个人发现一个问题的时候，总是很兴奋地，迫不及待想要证实&lt;/p&gt;
&lt;p&gt;然后就会有如下&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;系统是不是挂了，我登陆不上去【有时候是页面差异，系统操作失败等】&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;稍等，我看下&lt;/span&gt;
&lt;span class="err"&gt;三分钟后&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;后台正常，刚才重新走了一遍流程，没问题，&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;切图&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="err"&gt;你再试下，可能&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;问题&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我忘改&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;了&lt;/span&gt;&lt;span class="sr"&gt;/登陆超时了/xxx了/&lt;/span&gt;&lt;span class="err"&gt;我忘记做&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;操作了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;吐血的问题，很多时候，都是自己机器的问题，可能是host/网络/浏览器/系统登陆等等因素导致的，但是大多数人已发现问题，总是认为是别人的问题(系统的问题)，然后迫不及待，然后，我们要花费时间来排查各个可能的问题，跳转N多机器，检查N多服务，而且，相信我，这个过程不会很有趣，而且问题本身的种类很难导致很难将其自动化....《论排查问题的复杂性》&lt;/p&gt;
&lt;p&gt;当然，如果是可以自动化而你偏偏要每次人肉查而且乐在其中，那我没办法了。&lt;/p&gt;
&lt;p&gt;后来就变成&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;系统是不是挂了，我点发布了但是前台没更新&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;重做一遍，&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;分钟后没更新通知我&lt;/span&gt; &lt;span class="err"&gt;【够冷血吧】&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这类问题次数少也就忍了，担心的是对应人员新人进来的时候，没有老员工带或者培训，那么系统开发者往往一次又一次成为“义务培训导师”.....&lt;/p&gt;
&lt;p&gt;另外遇到问题也要忍住证实的欲望，先自己确认下&lt;/p&gt;
&lt;p&gt;有一本书推荐《你的灯亮着么》&lt;/p&gt;
&lt;h3 id="3-suprise"&gt;3. Suprise&lt;/h3&gt;
&lt;p&gt;后端最讨厌的是suprise，安排和做事情的节奏都会被打乱。&lt;/p&gt;
&lt;p&gt;我的原则是，不接受&amp;amp;unhappy，紧急的会去配合做，当然心情不会happy&lt;/p&gt;
&lt;p&gt;方案设计，评审，开发，测试那么多环节都没发现，要上线前，需求变更或者xxx有问题，suprise&lt;/p&gt;
&lt;p&gt;然后，上线时间有时候又是固定的，所以必须要配合处理&lt;/p&gt;
&lt;p&gt;当然，作为一枚“有责任感”的后端，肯定都会全力配合处理，不高兴是一回事，把事情完美地搞完是一回事。&lt;/p&gt;
&lt;p&gt;但这时候，往往会发现，时间不等人，所有人都盯着你，瞬间亚历山大，如果没搞好还很容易成为“责任人”，延期什么的很容易落到你头上，属于吃力不讨好的角色，前期按时完成，suprise却要背负所有，心里瞬间失衡(╯‵□′)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;问题是，这个suprise的来源. 才是问题所在，更多的应该反思这里，否则很容易造成后续合作困难。&lt;/p&gt;
&lt;p&gt;另外，suprise很容易导致黑逻辑、补丁、牛皮糖、硬编码等等，将一块干净的自留地变成垃圾桶，而且破窗理论，所以，要控制。&lt;/p&gt;
&lt;h3 id="4-yao-ming-bai-yi-ge-dao-li"&gt;4. 要明白一个道理&lt;/h3&gt;
&lt;p&gt;1个人1个月能干好一件事情，不代表30个人在1天能把这件事做了&lt;/p&gt;
&lt;p&gt;很简单的一个道理，但是很容易被人忽视&lt;/p&gt;
&lt;h3 id="5-guan-yu-gu-shi-jian"&gt;5. 关于估时间&lt;/h3&gt;
&lt;p&gt;后端需要信任，虽然我们有时候估时间不大准，但是基本都能在少于估算的时间内完成，超过的情况并不多。&lt;/p&gt;
&lt;p&gt;而且随着工作经验积累，估算时间会越来越准。(三小时就是三小时，额，上下误差几分钟)&lt;/p&gt;
&lt;p&gt;一般问题过来，很简单顺手做了，复杂的会给个完成时间。&lt;/p&gt;
&lt;p&gt;不要站在自己的角度去给后端的估时间，常见的理由是：“就简单加一个xxx”，“修改一下而已”等，你要知道有些系统并没有那么简单，你要的可能是一个现在能用的东西，但我们需要一个以后无论怎么改都好改而且能用的东西。（相信我，差异很大），同理，不要估工作量啊（2天的量估0.5天，要做完，那另外1.5天怎么破，哥做不到&amp;gt;_&amp;lt;）&lt;/p&gt;
&lt;p&gt;记住，除非火烧眉毛，否则，能在承诺完成时间内搞定的，不要催。&lt;/p&gt;
&lt;p&gt;我们需要的是冷静和清晰的思路。催促和打断于事无补。&lt;/p&gt;
&lt;h3 id="6-shang-di-tong-yi-shi-jian-nei-you-qie-jin-zhi-you-yi-ge"&gt;6. 上帝，同一时间内有且仅只有一个&lt;/h3&gt;
&lt;p&gt;所有人，都认为自己的需求优先级最高。&lt;/p&gt;
&lt;p&gt;对后端来说，合作和沟通的每个人都是上帝。&lt;/p&gt;
&lt;p&gt;但是要记住，上帝，同一时刻内只有一个。&lt;/p&gt;
&lt;p&gt;所以，有了优先级这一说，会排期，一次只做一件事。&lt;/p&gt;
&lt;p&gt;再给力的后端也不是超人，一次处理N件事情效率很低容易出错，非常不明智的&lt;/p&gt;
&lt;p&gt;所以，要学会接受排期，除非排的时间不合理要去沟通。&lt;/p&gt;
&lt;p&gt;你会发现，在截止日期到来的前一刻，后端小伙伴的东西已经搞完提供了。&lt;/p&gt;
&lt;h3 id="7-he-li-shi-yong-xiang-mu-guan-li-gong-ju-you-jian-imdian-hua"&gt;7. 合理使用项目管理工具/邮件/IM/电话&lt;/h3&gt;
&lt;p&gt;综合使用工具进行沟通&lt;/p&gt;
&lt;p&gt;涉及项目跟踪通知等，请用项目管理工具(目前tower)&lt;/p&gt;
&lt;p&gt;极重要事情，请邮件&lt;/p&gt;
&lt;p&gt;极紧急事情，请当面，或者电话&lt;/p&gt;
&lt;p&gt;其他，IM&lt;/p&gt;
&lt;p&gt;小事，确认，疑问，突发奇想？灵机一动？等等，注意除非这个沟通有可能导致你必须要去等，否则不到万不得已不要杀过去打断一个程序员的思路。&lt;/p&gt;
&lt;p&gt;打断是效率杀手，如果不用电话，那恕我只能定期去查，异步回复，所以就不要傻等。&lt;/p&gt;
&lt;h3 id="8-bei-kai-hui"&gt;8. 被开会&lt;/h3&gt;
&lt;p&gt;不重要的会议不要勾选抄送我，谢谢&lt;/p&gt;
&lt;p&gt;冗长无聊相关性不大的会议允许早退，或者过了跟自己相关的部分允许早退&lt;/p&gt;
&lt;p&gt;超紧急临时会议，没问题&lt;/p&gt;
&lt;p&gt;其他临时会议，没提前发邀约提前通知的会议都是耍流氓，要知道本来用来码代码的两小时被突如其来的会议占用，打乱了计划安排，那么晚上就得花一个小时加班补回来【别问我为啥是一个小时】&lt;/p&gt;
&lt;h3 id="9-na-dao-cheng-nuo"&gt;9. 拿到承诺&lt;/h3&gt;
&lt;p&gt;如果有一件事，你提给后端，不说明问题，优先级，截止时间，或者，压根你就扔给后端就不管了。（被动等待会等到海枯石烂的）&lt;/p&gt;
&lt;p&gt;然后你期望他把事情给做了，把结果给你，或者将事情跟完。很多时候，这都是你的幻想。&lt;/p&gt;
&lt;p&gt;如果我们没做出承诺，可能这件事情就被排后了，至于完成的时间，完全与取决于工作安排和工作量。&lt;/p&gt;
&lt;p&gt;所以，一般提给后端的时候，可以多问一句，“什么时候能搞定”，拿到承诺，一般没问题了。&lt;/p&gt;
&lt;h3 id="10-dang-mian-gou-tong-shi-ti-gong-shang-xia-wen"&gt;10. 当面沟通时提供上下文&lt;/h3&gt;
&lt;p&gt;遇到次数不多，但是还是会遇到，干活中都是有“状态”的&lt;/p&gt;
&lt;p&gt;有时候在做一件事情，一半&lt;/p&gt;
&lt;p&gt;然后例如这样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 把xxx字段改成xxxx.... blablablabla.......

B: 啊？（脑补痴呆状）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者这样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 把xxx字段改成xxxx.... blablablabla.......

B: 不合适吧，xxxxxxx.......

A: 我在说xx问题

B: 我以为你说XXX问题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实可以这样:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 关于xx的问题，我们..........
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;你要相信，大部分后端都是善良的孩子......&lt;/p&gt;
&lt;p&gt;而且大部分后端，一个人干N个人的活(N&amp;gt;=2), (╯‵□′)╯︵┻━┻&lt;/p&gt;</content><category term="blabla"></category></entry></feed>