<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>wklken's blog - wklken</title><link>http://www.wklken.me/</link><description></description><lastBuildDate>Sun, 01 Jul 2018 00:00:00 +0800</lastBuildDate><item><title>工作七年小结: 学习,生活及其他</title><link>http://www.wklken.me/posts/2018/07/01/summary-15-work-7-years.html</link><description>&lt;blockquote&gt;
&lt;p&gt;一切经历都是有价值的, 你要从中有所收获&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再有三天, 工作七年了.&lt;/p&gt;
&lt;p&gt;大学毕业前, 实习做了一年多的Java开发;&lt;/p&gt;
&lt;p&gt;因为实习错过了校招, 11年一个人北上北京找工作, 阴差阳错, 找了个测试开发的工作, 没成为北漂, 向南飘到了杭州, 开始了自己的职业生涯.&lt;/p&gt;
&lt;p&gt;在杭州一年多, 塑造我现在行事风格, 高效/专注/细心等等, 过多不表, 区间测试各种后端需要关注各种语言各种技术, 写自动化测试, 学习了shell和python等等, 然而国内测试开发其实更多的是测试, 发现自己并不是很喜欢, 年少冲动, 压不住内心的想法, 投了几个python简历, 之后毅然决然南下.&lt;/p&gt;
&lt;p&gt;在深圳第一家公司, python后台开发, 一直做到14年, 从测试转为开发, 也算如鱼得水, 而且基本不加班, 所以有很多时间倒腾各种东西. 14年由于某些不可抵抗力公司over了, 如果没有over, 或许我现在还在那里. 离职出去浪了一个月, 回来愣头青有个抵挡不住的想法, 我想去创业公司.....&lt;/p&gt;
&lt;p&gt;历时一周顺利入职创业公司, 公司团队都很nice, 从零到一开始做一些事情, 过程中对项目运作/产品开发等等, 都有了新的认识, 奈何天不遂人员, 入职十个月, 公司解散 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 01 Jul 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2018-07-01:/posts/2018/07/01/summary-15-work-7-years.html</guid><category>blabla</category></item><item><title>[分享]bash日常: bash-utils</title><link>http://www.wklken.me/posts/2018/06/30/the-project-bash-utils.html</link><description>&lt;p&gt;早上优化了下自己的一个项目 &lt;a href="https://github.com/wklken/bash-utils"&gt;bash-utils&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I always use the bash as my devops script, while it's boring to write the condition judgement/echo statement/exit.
So, I want to make the bash script short and clear.
I have collected some useful function into this repo, which save me a lot of time in …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 30 Jun 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2018-06-30:/posts/2018/06/30/the-project-bash-utils.html</guid><category>share</category></item><item><title>你需要更多的思考时间</title><link>http://www.wklken.me/posts/2018/06/23/you-need-more-time-to-think-along.html</link><description>&lt;p&gt;目前每天都七点半准时起, 无论是否工作日, 几个月下来, 觉得时间多了好多.&lt;/p&gt;
&lt;p&gt;最近三个月阅读时间多了很多, 无他, 只因每天要早起坐班车, 下班也坐班车, 每天有大概一个半小时在车上, 只能用kindle打发时间.&lt;/p&gt;
&lt;p&gt;每天比其他同事差不多早了一个小时到公司, 这段时间用来做什么呢?&lt;/p&gt;
&lt;p&gt;我的答案是: 不要立刻开始工作&lt;/p&gt;
&lt;p&gt;当然, 每个人选择不一样, 可能这一个小时没人打扰, 编码效率会高一点.&lt;/p&gt;
&lt;p&gt;但是, 为什么不将这个时间空出来, 做一些其他事情,  这些事情, 可以起到类似杠杆作用, 撬动你的工作, 提升效率, 减少无畏的时间浪费, 以便更好地享受生活呢?&lt;/p&gt;
&lt;h2 id="dang-xia"&gt;当下&lt;/h2&gt;
&lt;p&gt;我们总是被当下的工作所淹没, 即, 注意力被现在的工作抓走. 例如: 昨天有个bug没修, 今天会有个需求会,  下午要和谁对接口,  晚上要上线等等.&lt;/p&gt;
&lt;p&gt;而当一天的工作开始后, 你将马不停蹄, 奔波在各种事务中,  忙累了一天之后, 下班回家洗洗睡, 明天继续&lt;/p&gt;
&lt;p&gt;你可能某天觉得好累, 厌倦, 生活过成了模式&lt;/p&gt;
&lt;h2 id="jia-she-ni-you-geng-duo-de-shi-jian-si-kao"&gt;假设你有更多的时间思考&lt;/h2&gt;
&lt;p&gt;所以, 假设你每天有一小时时间, 用来做什么?&lt;/p&gt;
&lt;p&gt;思考 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Jun 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2018-06-23:/posts/2018/06/23/you-need-more-time-to-think-along.html</guid><category>blabla</category></item><item><title>极客时间推广海报</title><link>http://www.wklken.me/posts/2018/06/18/geek-time.html</link><description>&lt;p&gt;&lt;img alt="1" src="/imgs/share/1.jpg"/&gt;
&lt;img alt="2" src="/imgs/share/2.jpg"/&gt;
&lt;img alt="3" src="/imgs/share/3.jpg"/&gt;
&lt;img alt="4" src="/imgs/share/4.jpg"/&gt;
&lt;img alt="5" src="/imgs/share/5.jpg"/&gt;
&lt;img alt="6" src="/imgs/share/6.jpg"/&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 18 Jun 2018 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2018-06-18:/posts/2018/06/18/geek-time.html</guid><category>share</category></item><item><title>2017总结: 予时光以意义</title><link>http://www.wklken.me/posts/2017/12/31/summary-14-2017end-2018begin.html</link><description>&lt;blockquote&gt;
&lt;p&gt;予时光以意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的2017&lt;/p&gt;
&lt;p&gt;这句话， 算是过去一段时间的一个思考; 最初应该是在看三体“给岁月以文明，而不是给文明以岁月”, 后来偶然间, 在匆匆忙忙后, 闲暇时的一个感悟;&lt;/p&gt;
&lt;p&gt;过去的2017, 一如既往地繁忙, 有段时间, 还是陷入了&lt;code&gt;周一到周五&lt;/code&gt;的模式, 时间匆匆流逝, 转眼快2018了, 回首一年, 收获良多.&lt;/p&gt;
&lt;p&gt;絮絮叨叨, 做一次总结, 坚持了好几年的总结, 前两年断了, 这次看能否续上一续.&lt;/p&gt;
&lt;h2 id="guan-yu-gong-zuo"&gt;关于工作&lt;/h2&gt;
&lt;p&gt;效率上, 今年又又又对自己的工作流重构了下; 目前全面使用trello看板在管理自己的任务; 买了个实体番茄钟, 严格按照35分钟工作/5分钟休息, 在持续运转, 每天正常7个番茄钟, 火力全开的时候可以到达11个(不过会很累啊…….)&lt;/p&gt;
&lt;p&gt;沟通交流上, 变得更淡定了吧, 对于一些突发的变更不会再那么慌乱;&lt;/p&gt;
&lt;p&gt;今年对自己做的工作, 大体上只能到70分的样子, 起码没做到优秀;&lt;/p&gt;
&lt;p&gt;盯了一个项目, 一年半了, 非常冗长琐碎, 事情比较多, 虽然经历一次次优化和调整, 也算是走上正轨, 但是后期感觉个人精力上占用比较多,  导致没法全面投入去做其他项目 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 31 Dec 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-12-31:/posts/2017/12/31/summary-14-2017end-2018begin.html</guid><category>总结</category></item><item><title>k8s APIServer源码: api注册详细细节</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-04.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;前面介绍了, api注册过程&lt;/p&gt;
&lt;p&gt;问题: &lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;的&lt;code&gt;route&lt;/code&gt;中, &lt;code&gt;handler&lt;/code&gt;和&lt;code&gt;path&lt;/code&gt;是如何绑定在一起的? &lt;code&gt;handler&lt;/code&gt;在哪里定义的?&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;/api&lt;/code&gt;为例&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-02.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;前面介绍到&lt;code&gt;/api&lt;/code&gt;和&lt;code&gt;/apis&lt;/code&gt;分别注册加入到&lt;code&gt;Container&lt;/code&gt;, 而最终, 二者调用&lt;code&gt;installer.Install(ws)&lt;/code&gt;. 这一步, 我们需要进一步了解细节.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-03.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="webserviceaddroute"&gt;webservice.add(route)&lt;/h2&gt;
&lt;p&gt;问题: 构建Route加入到WebService在哪里处理的?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendor/k8s.io/apiserver/pkg/endpoints/installer.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;APIInstaller …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 15:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-04.html</guid><category>paas</category></item><item><title>k8s APIServer源码: api注册主体流程</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-03.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-register-01.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;k8s使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;, 在前面, 已经介绍了&lt;code&gt;container&lt;/code&gt;如何初始化的.&lt;/p&gt;
&lt;p&gt;这里, 需要关注, api是如何注册进来的. 即, &lt;code&gt;route -&amp;gt; webservice -&amp;gt; container&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="begin"&gt;begin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pkg/master/master.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="nx"&gt;completedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;//  register /api&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallLegacyAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RESTOptionsGetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;legacyRESTStorageProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;//  register /apis&lt;/span&gt;
   &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InstallAPIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APIResourceConfigSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GenericConfig …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 14:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-03.html</guid><category>paas</category></item><item><title>k8s APIServer源码: 服务启动</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-02.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;h2 id="qi-dong-liu-cheng"&gt;启动流程&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/k8s/apiserver-start-01.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/apiserver.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;cmd/kube-apiserver/app/server.go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ServerRunOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 构建master配置信息&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;BuildMasterConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// 调用RunServer&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeverStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sharedInformers&lt;/span&gt; &lt;span class="nx"&gt;informers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SharedInformerFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="kt"&gt;error …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 13:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-02.html</guid><category>paas</category></item><item><title>k8s APIServer源码: go-restful框架</title><link>http://www.wklken.me/posts/2017/09/23/source-apiserver-01.html</link><description>&lt;p&gt;基于版本 1.6.7&lt;/p&gt;
&lt;p&gt;k8s的APIServer, 使用了&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful&lt;/a&gt;作为其处理框架, 注册资源并接收处理 HTTP 请求.&lt;/p&gt;
&lt;p&gt;在阅读APIServer源码之前, 需先理解go-restful主要概念.&lt;/p&gt;
&lt;h2 id="intro"&gt;intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;package for building REST-style Web Services using Google Go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/emicklei/go-restful"&gt;go-restful github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="go-restfu" src="/imgs/k8s/go-restful.png"/&gt;&lt;/p&gt;
&lt;h2 id="concepts"&gt;concepts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Container: 一组WebService的集合, 目的: &lt;code&gt;Containers for WebServices on different HTTP endpoints.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;WebService: Route的集合; 为一组Route定义统一的 root path / 请求类型 / 响应类型&lt;/li&gt;
&lt;li&gt;Route: 定义method/ULR path/调用函数/文档/参数 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Sep 2017 12:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-09-23:/posts/2017/09/23/source-apiserver-01.html</guid><category>paas</category></item><item><title>重构 - 读书笔记(Python示例)</title><link>http://www.wklken.me/posts/2017/06/17/refactoring-07.html</link><description>&lt;p&gt;去年十二月, 重读时, 输出了几篇博文, 主要几章重构技巧梳理 &lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-01.html"&gt;6&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-02.html"&gt;7&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/03/refactoring-03.html"&gt;8&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-04.html"&gt;9&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-05.html"&gt;10&lt;/a&gt;/&lt;a href="http://www.wklken.me/posts/2016/12/04/refactoring-06.html"&gt;11&lt;/a&gt;, 这周重读时, 从另一个角度总结一下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;我们总是想着, 找个时间重构, 额, 其实, 重构更应该放在平时, 每一次去变更代码时处理. 毕竟, 所谓的重构契机有时候太过遥远; 而如果不做重构, 痛苦的是每时每刻维护代码的自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你发现自己需要为程序添加一个特性, 而代码结构使你无法很方便地达成目的, 那就先重构那个程序, 使特性的添加比较容易进行, 然后再添加特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外, 如果可能, 尽量加单元测试, 哪怕一次只增加一两个, 一段时间后, 你会发现, 你会感谢过去的自己&lt;/p&gt;
&lt;h2 id="yuan-ze"&gt;原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小步前进, 频繁测试&lt;/li&gt;
&lt;li&gt;隔离变化&lt;/li&gt;
&lt;li&gt;控制可见范围, 让变量/常量/函数/类等, 在最小的范围内可见. 例如设为私有变量/私有函数, 移除不必要的设值函数&lt;/li&gt;
&lt;li&gt;重构时, 不要关注性能. 到性能优化阶段 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 17 Jun 2017 23:39:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-06-17:/posts/2017/06/17/refactoring-07.html</guid><category>books</category></item><item><title>写给新人的沟通建议</title><link>http://www.wklken.me/posts/2017/04/09/suggestions-about-communication.html</link><description>&lt;p&gt;最近也碰上抄袭的号, 转了我几年前两个文章, 只改了标题, 然后删掉每篇文章中我个人的一两段吐槽, 然后发出来. 抄袭当原创, 然后在评论里以作者的角度回复别人, 看着有点恶心. 这种成本还是太低了, 举报两次, 知乎给删掉了, 但是对于我来说还是很不爽的, 举报的成本太高了, 来一篇举报一篇. 这个号下面的文章(&lt;a href="https://www.zhihu.com/people/calj/pins/posts"&gt;入口&lt;/a&gt;), 目测都是直接用别人的文章改个标题了事.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;很多年前写过一篇在自己博客里面, &lt;a href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html"&gt;后端不高兴——关于协作和沟通&lt;/a&gt;, 做后端的同学可以看看吐槽哈.&lt;/p&gt;
&lt;p&gt;工作也好多年了, 前前后后跟不少新人合作过, 实际合作中不免各种问题, 都是从新人过来的, 所以打算写一些点, 算是一些感受吧&lt;/p&gt;
&lt;h2 id="guan-yu-wen-ti-miao-shu"&gt;关于问题描述&lt;/h2&gt;
&lt;p&gt;好像之前有人也讲过.&lt;/p&gt;
&lt;p&gt;不要发: &lt;code&gt;hi, 在吗&lt;/code&gt;, 你可能会发现过了很久对方回复:&lt;code&gt;在&lt;/code&gt;, 然后你可能也没立即接下一句, 晚一会回复:&lt;code&gt;xxxx问题&lt;/code&gt;, 然后对方又隔了很长一段时间才回....如此来来往往, 一次沟通跨度从一两个小时到好几天&lt;/p&gt;
&lt;p&gt;一般新人会觉得心累, 有点&lt;code&gt;玻璃心&lt;/code&gt;的会觉得委屈, 如果事情紧急, 光自己干着急了.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;老鸟&lt;/code&gt;也很累, 一般事情比较多 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-04-09:/posts/2017/04/09/suggestions-about-communication.html</guid><category>blabla</category></item><item><title>vim 杂谈 - 关于快速编辑</title><link>http://www.wklken.me/posts/2017/03/25/vim-about-edit.html</link><description>&lt;p&gt;在&lt;code&gt;vim&lt;/code&gt;中写代码, 并不是, 我们所见到的代码都要一个个字符输进去, 一定不是这样的.&lt;/p&gt;
&lt;p&gt;这篇, 让我们来谈谈如何进行快速编辑.&lt;/p&gt;
&lt;p&gt;当然, 一篇文章只能概述, 给大家一些参考, 具体每项都可以自行找相关资料. 很多外链, 莫跳丢了&lt;/p&gt;
&lt;p&gt;注意, 其中会涉及到比较多的插件, 而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 用的是 &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, 如果你用得是其他的插件管理工具, 自行转换.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="textobject"&gt;textobject&lt;/h2&gt;
&lt;p&gt;文本对象, 是进行快速编辑的基础秘诀. 将一个单词, 句子, 段落当成一个对象看待, 可以进行快速选中/替换/删除等操作&lt;/p&gt;
&lt;p&gt;有一篇文章解释得很清楚 &lt;a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;Vim Text Objects: The Definitive Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令格式:  操作+范围+对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w  -  word单词
s  -  sentence句子
p  -  paragraph段落 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 25 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-03-25:/posts/2017/03/25/vim-about-edit.html</guid><category>vim</category><category>linux</category></item><item><title>vim 杂谈 - 关于移动</title><link>http://www.wklken.me/posts/2017/03/20/vim-about-move.html</link><description>&lt;p&gt;这个专栏的主要目的, 是介绍后台开发, vim, python, 工具, 效率, 项目等等一些所思所想. 欢迎关注及交流.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个项目, 虽然一年只更新一两次, 但是里面很多配置, 都是基于使用中的痛点, 以及 &lt;code&gt;符合自觉&lt;/code&gt; 的原则进行的变更.&lt;/p&gt;
&lt;p&gt;整体而言, &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 虽然做成了一个开箱即用的配置, 但是很多使用者更想知道一些更具体的说明, 包含配置项, 配置原因等等.&lt;/p&gt;
&lt;p&gt;之前有个blog有提过一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't put anything in your .vimrc you don't understand!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我不是十分赞同(我更倾向于基于一个完备的配置再进行深入了解和 DIY, 毕竟从0打造成本略高).&lt;/p&gt;
&lt;p&gt;但是觉得有必要, 写一写, 谈一谈&lt;code&gt;vim&lt;/code&gt;中的一些配置的原因.&lt;/p&gt;
&lt;p&gt;目测会成系列, 从前到后你也能个性化自己的完整配置. 也可以借鉴一些技巧和插件使用(总共会提及约&lt;code&gt;60+&lt;/code&gt;插件)&lt;/p&gt;
&lt;p&gt;第一篇, 移动.&lt;/p&gt;
&lt;h2 id="hjkl"&gt;HJKL …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 20 Mar 2017 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2017-03-20:/posts/2017/03/20/vim-about-move.html</guid><category>vim</category><category>linux</category></item><item><title>读书笔记-重构: 章11 处理概括关系</title><link>http://www.wklken.me/posts/2016/12/04/refactoring-06.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-11-chu-li-gai-gua-guan-xi"&gt;章11 处理概括关系&lt;/h2&gt;
&lt;p&gt;多是类相关, 浅显易懂, 不写示例代码了, 有兴趣可以看看原书的例子&lt;/p&gt;
&lt;h4 id="111-pull-up-field-zi-duan-shang-yi"&gt;11.1 Pull Up Field 字段上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两个子类拥有相同的字段. 将该字段移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="112-pull-up-method-han-shu-shang-yi"&gt;11.2 Pull Up Method 函数上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;游戏函数, 在各个子类中产生完全相同的结果. 将该函数移至超类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="113-pull-up-constructor-body-gou-zao-han-shu-ben-ti-shang-yi"&gt;11.3 Pull Up Constructor Body 构造函数本体上移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你在各个子类中拥有一些构造函数, 他们的本体几乎完全一致. 在超类中新建一个构造函数, 并在子类的构造函数中调用它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="114-push-down-method-han-shu-xia-yi"&gt;11.4 Push Down Method 函数下移&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;超类中的某个函数只与部分(而非全部)子类有关. 将这个函数移到相关的那些子类中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="115-push-down-field-zi-duan-xia-yi"&gt;11.5 Push …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Dec 2016 20:56:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-06.html</guid><category>books</category></item><item><title>读书笔记-重构: 章10 简化函数调用</title><link>http://www.wklken.me/posts/2016/12/04/refactoring-05.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-10-jian-hua-han-shu-diao-yong"&gt;章10: 简化函数调用&lt;/h2&gt;
&lt;h4 id="101-rename-method-han-shu-gai-ming"&gt;10.1 Rename Method 函数改名&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的名称未能揭示函数的用途. 修改函数名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给函数一个好名字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_office_telephone_numer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;area_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="102-add-parameter-tian-jia-can-shu"&gt;10.2 Add Parameter 添加参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;某个函数需要从调用端得到更多信息. 为此函数添加一个对象参数, 让对象带进函数所需要的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动机: 必须修改一个函数, 而修改后的函数需要一些过去没有的信息, 此时需要添加一个参数&lt;/p&gt;
&lt;h4 id="103-remove-parameter-yi-chu-can-shu"&gt;10.3 Remove Parameter 移除参数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数本体不再需要某个参数. 将该参数去除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序员可能经常添加参数, 却往往不愿意去去除它们.&lt;/p&gt;
&lt;h4 id="104-separate-query-from-modifier-jiang-cha-xun-han-shu-he-xiu-gai-han-shu-fen-chi"&gt;10 …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Dec 2016 20:55:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-05.html</guid><category>books</category></item><item><title>读书笔记-重构: 章9 简化表达式</title><link>http://www.wklken.me/posts/2016/12/04/refactoring-04.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-9-jian-hua-biao-da-shi"&gt;章9: 简化表达式&lt;/h2&gt;
&lt;h4 id="91-decompose-conditional-fen-jie-tiao-jian-biao-da-shi"&gt;9.1 Decompose Conditional 分解条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一个复杂的条件语句(if-then-else). 从if, the, else三个段落中分别提炼出独立函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_START&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SUMMER_END&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_winter_rate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_winter_servioce_charge&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_summer_rate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not_summber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;winter_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summber_charge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="92-consolidate-cnditional-expression-he-bing-tiao-jian-biao-da-shi"&gt;9.2 Consolidate Cnditional Expression 合并条件表达式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一系列条件测试, 都得到相同结果. 将这些测试合并成一个条件表达式, 并将这个条件表达式提炼成为一个独立函数 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Dec 2016 20:50:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-04:/posts/2016/12/04/refactoring-04.html</guid><category>books</category></item><item><title>读书笔记-重构: 章8 重新组织数据</title><link>http://www.wklken.me/posts/2016/12/03/refactoring-03.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-8-zhong-xin-zu-zhi-shu-ju"&gt;章8: 重新组织数据&lt;/h2&gt;
&lt;h4 id="81-self-encapsulate-field-zi-feng-zhuang-zi-duan"&gt;8.1 Self Encapsulate Field 自封装字段&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你直接访问一个字段, 但字段间的耦合关系逐渐变额笨拙. 为这个字段建立取值/设置函数, 并且只以这些函数来访问字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;间接访问的好处是, 可以灵活改变获取数据的途径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;low&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 Dec 2016 11:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-03.html</guid><category>books</category></item><item><title>读书笔记-重构: 章7 在对象之间搬移特性</title><link>http://www.wklken.me/posts/2016/12/03/refactoring-02.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-7-zai-dui-xiang-zhi-jian-ban-yi-te-xing"&gt;章7: 在对象之间搬移特性&lt;/h2&gt;
&lt;h4 id="71-move-method-ban-yi-han-shu"&gt;7.1 Move Method 搬移函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你的程序中, 有个函数与其所驻之外的另一个类进行更多交流: 调用后者, 或者被后者调用. 在该函数最常引用的类中建立一个有着类似行为的新函数. 将就函数变成一个单纯的委托函数, 或是将就函数完全移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# a lot operations with b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 Dec 2016 11:05:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-02.html</guid><category>books</category></item><item><title>读书笔记-重构: 章6 重新组织函数</title><link>http://www.wklken.me/posts/2016/12/03/refactoring-01.html</link><description>&lt;p&gt;重构的读书笔记, 简单转成python版本的code, 供参考&lt;/p&gt;
&lt;h2 id="zhang-6-zhong-xin-zu-zhi-han-shu"&gt;章6: 重新组织函数&lt;/h2&gt;
&lt;h4 id="61-extract-method-ti-lian-han-shu"&gt;6.1 Extract Method 提炼函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你有一段代码可以被组织在一起并独立出来, 将这段代码放进一个独立函数中, 并让函数名称解释该函数的用途&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"this is the detail: "&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"amnount: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_owing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print_banner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="62-inline-method-nei-lian-han-shu"&gt;6 …&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 Dec 2016 11:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-12-03:/posts/2016/12/03/refactoring-01.html</guid><category>books</category></item><item><title>Python 代码规范小结</title><link>http://www.wklken.me/posts/2016/11/03/python-code-style.html</link><description>&lt;hr/&gt;
&lt;p&gt;code review中一些小结, 还没来得及加例子, 简要记录, 供参考&lt;/p&gt;
&lt;h2 id="law"&gt;law&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一: 一切都与复杂度有关
二: 代码应当易于理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对人:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"好程序员”应当竭尽全力, 把程序写得让其他程序员(以及以后的自己)容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对代码:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;代码被阅读的次数远多于编写和修改的次数&lt;/li&gt;
&lt;li&gt;E = mc2 (Error = more codes)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;对项目:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公式: 可行性=(当前价值+未来价值)/(实现成本+维护成本). 即相比降低实现成本, 降低维护成本更加重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ji-chu-feng-ge"&gt;基础: 风格&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;团队成员遵守统一的风格, 保持风格的一致性, 减少理解难度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;遵循基础的编码风格:&lt;/p&gt;
&lt;p&gt;请仔细阅读, 使用对应编辑器插件工具协助检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遵循  &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; 风格
利用pep8工具(编辑器相关插件)来解决这个问题, 在review之前处理. 以避免在review过程中出现此类问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遵循 &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Google …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-11-03:/posts/2016/11/03/python-code-style.html</guid><category>python</category></item><item><title>[分享]关于vim</title><link>http://www.wklken.me/posts/2016/07/24/about-vim.html</link><description>&lt;hr/&gt;
&lt;p&gt;很早之前的小组分享, 整理成pdf&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/about-vim.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/about-vim.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 24 Jul 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-07-24:/posts/2016/07/24/about-vim.html</guid><category>share</category></item><item><title>ElasticSearch集群部署文档</title><link>http://www.wklken.me/posts/2016/06/29/deploy-es.html</link><description>&lt;p&gt;官方es搭建步骤写的很简略, 但是实际搭建过程中, 会涉及一系列环境配置. 以下的流程, 是在搭建过程中梳理出来的详细步骤(实践过3遍以上)&lt;/p&gt;
&lt;p&gt;其实, 这些流程在具体应用的时候, 都可以变成自动化脚本, 或者直接用docker好了, 以便扩容足够快(目前我们用的打包成集成安装包, 实现脚本自动部署)&lt;/p&gt;
&lt;p&gt;只是简单集群的基本设置, 不涉及调优的参数配置, 不涉及&lt;code&gt;client/master/data&lt;/code&gt;节点区分等等. 可以参照搭建的主体流程.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ban-ben-ji-lian-jie"&gt;版本及连接&lt;/h2&gt;
&lt;p&gt;elasticseearch版本: 2.3.3&lt;/p&gt;
&lt;p&gt;相关链接:
- &lt;a href="https://www.elastic.co/products/elasticsearch"&gt;官网&lt;/a&gt;
- &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="xi-tong-yao-qiu"&gt;系统要求&lt;/h2&gt;
&lt;p&gt;如果仅作测试用, 不需要两天机器, 可以将两个节点部署在同一台机器上, 对磁盘/cpu要求不高, 内存大于2g基本足够了&lt;/p&gt;
&lt;p&gt;如果是正式环境, 需要根据日志量进行评估, 例如, 每天日志量占硬盘约约10G, 且保留30天日志, 则磁盘会占用约300g, es设定的阈值是磁盘空间占满85%则日志开始告警. 所以, 需要至少 &lt;code&gt;300/0.85=354g …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 29 Jun 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-06-29:/posts/2016/06/29/deploy-es.html</guid><category>system</category></item><item><title>Logstash+ElasticSearch处理mysql慢查询日志</title><link>http://www.wklken.me/posts/2016/05/24/elk-mysql-slolog.html</link><description>&lt;p&gt;遇到一个需求, 需要查询某些业务的慢查询日志. 结果DBA平台那边提供的慢查询日志不能解决实际的业务场景(上报的字段补全), 无奈, 自己挽起袖子上&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href="https://www.phase2technology.com/blog/adding-mysql-slow-query-logs-to-logstash/"&gt;这篇文章&lt;/a&gt;, 不过自己根据需求做了较多的变更&lt;/p&gt;
&lt;p&gt;开始吧&lt;/p&gt;
&lt;h2 id="1-zhao-dao-ri-zhi-de-wei-zhi"&gt;1. 找到日志的位置&lt;/h2&gt;
&lt;p&gt;先确认是否开启了, 然后找到日志文件的位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; show variables like '%slow%';
+---------------------+-------------------------------------+
| Variable_name       | Value                               |
+---------------------+-------------------------------------+
| log_slow_queries    | ON                                  |
| slow_launch_time    | 2                                   |
| slow_query_log      | ON                                  |
| slow_query_log_file | /data/mysqllog/20000/slow-query.log |
+---------------------+-------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="2-man-cha-xun-ri-zhi"&gt;2. 慢查询日志&lt;/h2&gt;
&lt;p&gt;格式基本是如下, 当然, 格式如果有差异, 需要根据具体格式进行小的修改&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Time: 160524  5:12:29
# User@Host: user_a[xxxx] @  [10.166.140 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 24 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-05-24:/posts/2016/05/24/elk-mysql-slolog.html</guid><category>system</category></item><item><title>[分享]关于代码调试DE那些事</title><link>http://www.wklken.me/posts/2016/05/12/how-to-debug.html</link><description>&lt;hr/&gt;
&lt;p&gt;之前写过一篇博文, 做分享, 重新梳理了下&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;object data="/extra/share/how-to-debug.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/how-to-debug.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 12 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-05-12:/posts/2016/05/12/how-to-debug.html</guid><category>share</category></item><item><title>ELK维护的一些点(二)</title><link>http://www.wklken.me/posts/2016/05/07/elk-about-2.html</link><description>&lt;p&gt;很杂, 涉及到最近处理的一些点&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="gen-ju-stringzhuan-fu-dian-shu-de-mou-ge-zi-duan-pai-xu"&gt;根据string转浮点数的某个字段排序&lt;/h3&gt;
&lt;p&gt;一个字段, &lt;code&gt;resp_time&lt;/code&gt;, mapping中是string, 有需求是, 按照响应时间降序排序, 此时需要构造qsl(在search中使用), 使用该字段转换为浮点数, 降序排列&lt;/p&gt;
&lt;p&gt;第一步, 修改es配置, 增加groovy支持&lt;/p&gt;
&lt;p&gt;elasticsearch.yml中加入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;script.engine.groovy.inline.search: on
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 执行 &lt;a href="http://www.wklken.me/posts/2016/02/16/elk-about-upgrade.html#rolling-restart"&gt;rolling restart&lt;/a&gt;, 逐一重启集群每个节点&lt;/p&gt;
&lt;p&gt;第二步, 构造qsl,  &lt;code&gt;sort&lt;/code&gt;中,  增加&lt;code&gt;_script&lt;/code&gt; 使用groovy脚本, 将对应字段从string转成数字, 再进行排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;'sort': [{'_script': {'lang': 'groovy',
                       'order': 'desc',
                       'script': 'Float.parseFloat(doc["resp_time"].value)',
                       'type' …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-05-07:/posts/2016/05/07/elk-about-2.html</guid><category>system</category></item><item><title>[分享]Python源码剖析-数据结构</title><link>http://www.wklken.me/posts/2016/03/01/python-source-datastructure.html</link><description>&lt;p&gt;&lt;object data="/extra/share/python-source-datastructure.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/python-source-datastructure.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-03-01:/posts/2016/03/01/python-source-datastructure.html</guid><category>python</category></item><item><title>一些Centos Python生产环境的部署命令</title><link>http://www.wklken.me/posts/2016/02/18/python-env-in-centos.html</link><description>&lt;p&gt;Just notes&lt;/p&gt;
&lt;p&gt;拿到一台干净的centos之后, 初始化Python环境, 一些命令和问题记录而已&lt;/p&gt;
&lt;p&gt;可以搞成脚本自动初始化, 当然, 用docker更好&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-chu-huan-jing"&gt;基础环境&lt;/h2&gt;
&lt;h4 id="1-chuang-jian-yong-hu"&gt;1. 创建用户&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser newuser
sudo passwd newuser

&lt;span class="c1"&gt;# 设置授权不需要输入密码&lt;/span&gt;
sudo /usr/sbin/visudo
newuser       &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-epelfedora-extra-packages-for-enterprise-linux-repository"&gt;2. EPEL(Fedora Extra Packages for Enterprise Linux repository )&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat"&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo rpm …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 18 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-18:/posts/2016/02/18/python-env-in-centos.html</guid><category>python</category></item><item><title>摘录&gt;</title><link>http://www.wklken.me/posts/2016/02/17/master-en-in-six-months.html</link><description>&lt;p&gt;在高铁上顺手刷完的一本书, 学习英语的方法论吧, 和学习编程有很多类似的地方, 互相印证.&lt;/p&gt;
&lt;p&gt;还是值得一读的, 建议想掌握英文的同学买一本读一读&lt;/p&gt;
&lt;p&gt;额, 英文这个问题困扰了我很久, 当然, 学习的主要目的是能更快更好的读懂文档以及进行一些基本交流(其实是为了刷电影美剧更方便些ORZ)&lt;/p&gt;
&lt;p&gt;从去年开始就实行&lt;code&gt;泡脑子&lt;/code&gt;的策略, 上下班各半个小时, 反复在听老友记十季的音频(安利app: 喜马拉雅). 然后固定在刷几部美剧, 买了本英文著作一字一句反复读中, 也开始在国外的论坛提问题, 发言, 用kindle开启生词模式在刷书. 当然, 俺的英文还是别别扭扭的.....&lt;/p&gt;
&lt;p&gt;程序员的一大优势是, 文档/搜索, 基本都是英文的, 这个环境还是不错的, 另外, mac/iphone/ipad全部切成英文系统, 取词软件全开, 哈哈哈.....&lt;/p&gt;
&lt;p&gt;然而, 还是不会说啊.....痛定思痛&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以下读书摘要&lt;/p&gt;
&lt;h4 id="guan-dian"&gt;观点&lt;/h4&gt;
&lt;p&gt;本书的观点
- 我特别主张自然规律，你越能理解和运用自然规律，你就越能成功
- 一个大脑健全的成年人完全有能力在6个月内从0掌握任何一种外语！
- 只要掌握规律，跟随规律去练习，一个人能做到的结果，任何人都能做到 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-17:/posts/2016/02/17/master-en-in-six-months.html</guid><category>books</category></item><item><title>ELK 维护的一些点</title><link>http://www.wklken.me/posts/2016/02/16/elk-about-upgrade.html</link><description>&lt;p&gt;去年入职新公司之后, 负责维护平台的elk&lt;/p&gt;
&lt;p&gt;这套东西是2013年搭建的, 年久失修, 所以做了个方案, 开始了批量升级&lt;/p&gt;
&lt;p&gt;将logstash从1.3升级到2.1, 将elasticsearch从1.4.1升级到2.0&lt;/p&gt;
&lt;p&gt;期间踩了很多坑, 搞了一个多月, 总算搞完&lt;/p&gt;
&lt;p&gt;从纯手工落后隔三差五有人找查问题的自行车, 改成自动化最新版本新架构运维便捷上了两个月无人反馈的, 额, 小汽车:) - 集成安装包/shell脚本/fabric实现部署/升级/增删/加黑名单等等功能&lt;/p&gt;
&lt;p&gt;每天日志量大概10G上下, 几十个采集端, 两个redis, 两个indexer, 两台es机器扛起&lt;/p&gt;
&lt;p&gt;以下, 不那么严谨地, 记录一些遇到的问题&lt;/p&gt;
&lt;h4 id="1-logstashsheng-ji-ce-lue"&gt;1. logstash升级策略&lt;/h4&gt;
&lt;p&gt;logstash1.3到2.x, 变化点还是很多的&lt;/p&gt;
&lt;p&gt;所以, 首先第一步要去阅读官方文档, 将所有change log过一遍, 对一些关键性的东西进行了解, 比如, 干掉了哪些语法(旧的功能需要如何实现), 哪些语法有变更, 新增了哪些特性等 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-16:/posts/2016/02/16/elk-about-upgrade.html</guid><category>system</category></item><item><title>也许是一个新的开始</title><link>http://www.wklken.me/posts/2016/02/16/maybe-a-new-start.html</link><description>&lt;p&gt;也许是一个新的开始吧.&lt;/p&gt;
&lt;p&gt;原先写blog都是深思熟虑, 偶尔发发微博, 以及几乎不发朋友圈.....&lt;/p&gt;
&lt;p&gt;年后, 发现, 其实blog就是个个人吐吐槽, 以及一些积累的地方, 深思熟虑个蛋(好多笔记, 半成品等等蹲在wiki里不见天日, 也不见得有时间完善好)&lt;/p&gt;
&lt;p&gt;所以, 打算开启话唠模式. 至于那些不是很"深思熟虑"的东西, 通过长时间不断迭代来优化吧, 然后会有一些吐槽什么的.&lt;/p&gt;
&lt;p&gt;不大确定有多少人订阅了, 可以取关哈:)&lt;/p&gt;
&lt;p&gt;从此, 不想太多, 看看今年的产出吧. 当然, 尽量保质保量.&lt;/p&gt;
&lt;p&gt;从此文开始(够短吧)&lt;/p&gt;
&lt;p&gt;2016-02-16 于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-16:/posts/2016/02/16/maybe-a-new-start.html</guid><category>blabla</category></item><item><title>一些vim的个性化配置</title><link>http://www.wklken.me/posts/2016/02/03/some-vim-configs.html</link><description>&lt;p&gt;在咖啡馆kill time, 时间不多但实在无聊, 随便写写&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;入坑vim, 四年有余了&lt;/p&gt;
&lt;p&gt;自从2012年将自己的配置发布到github后, 持续性的维护着, 逐步解决一些使用中的痛点, 反直觉的东西, 慢慢形成了现有的配置.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下, 就列下, 在k-vim中, 做了哪些配置, 下面这些在 &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc"&gt;vimrc&lt;/a&gt; 中都可以找到&lt;/p&gt;
&lt;p&gt;首先, 一上来就把&lt;code&gt;leader&lt;/code&gt;键改掉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 修改leader键
let mapleader = ','
let g:mapleader = ','
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移动时, 保留到底部的空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义代码折叠toggle&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 代码折叠自定义快捷键 &amp;lt;leader&amp;gt;zz
let g:FoldMethod = 0
map &amp;lt;leader&amp;gt;zz :call ToggleFold()&amp;lt;cr …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 03 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-03:/posts/2016/02/03/some-vim-configs.html</guid><category>vim</category><category>linux</category></item><item><title>读书笔记-调试九法</title><link>http://www.wklken.me/posts/2015/11/29/debugging-9-rules.html</link><description>&lt;p&gt;去年十一月份, 写过一篇blog, 讲了一些自己平时进行代码调试的观点, 列了21条&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html"&gt;关于代码调试de那些事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周多看上买了这本书, 花了两小时读完, 做下笔记, 发现很多观点其实是类似的.&lt;/p&gt;
&lt;p&gt;这本书是九条原则, 即方法论, 了解和学习, 在实践中遵守, 有利于提升自己调试的效率:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug-rules" src="/imgs/books/debug-rules.jpg"/&gt;&lt;/p&gt;
&lt;h4 id="1-li-jie-xi-tong"&gt;1. 理解系统&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须掌握系统的工作原理以及它是如何设计的。在某些情况下，还要知道为什么这样设计。如果你没有理解系统中的某个部分，那么这通常就是出问题的地方。（这不仅仅是“墨菲定律”的问题，如果你不能理解你所设计的系统，你的工作可能会变得一团糟。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理解是怎么设计的, 机制, 原理, 需求等等, 面对的东西才是一个白盒.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解系统的基本方法就是阅读手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手册, 手册, 很多时候, 我们并不能抑制住自己, 去编码, 去调试, 去解决问题, 而忽略了一些重要的东西, 例如: 文档, 我们总以为自己了解一切, 很多时候很诡异的问题查查文档, 才发现, 原来文档有说明:)&lt;/p&gt;
&lt;p&gt;或者, 跳过去看源码也是不错的选择&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解了你自己的系统后，还会获得一个额外的好处 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 29 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-11-29:/posts/2015/11/29/debugging-9-rules.html</guid><category>books</category></item><item><title>这段时间的一些想法</title><link>http://www.wklken.me/posts/2015/11/08/summary-13-some-points.html</link><description>&lt;p&gt;发现自己有一段时间没更新 blog 了, 写一写吧, 至于技术方面的东西, 后面慢慢发吧:)&lt;/p&gt;
&lt;p&gt;这一年经历了很多事情, 休息了一百天, 然后找工作, 入职.&lt;/p&gt;
&lt;p&gt;入职期间还有些波折, offer那边说发了我这边却一直没收到, 还有确认入职事宜后没有发入职通知, 不过波波折折, 也算入职了, 三周, 到了深圳的加班圣地, 开启新的副本.&lt;/p&gt;
&lt;p&gt;工作四年多了, 这是第四家公司了, 这四年发生了很多事情, 阿里上市了, 快播消失了, 甜品也歇业了, 刚到企鹅,  新生, 归零心态, 逐渐适应中, 算是一个新的开始, 重新审视自己, 审视工作, 审视学习, 审视生活,  以刚入行时的状态, 重新开始这趟征程.&lt;/p&gt;
&lt;p&gt;总之, 这许多年, 是一些经历, 做了很多事情, 结识了很多人. 逐步形成了自己现在的样子.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;尽量写得不像鸡汤, 很多东西还是要自己慢慢去感受体悟, 诸君共勉.&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple" src="/imgs/life/simple.png"/&gt;&lt;/p&gt;
&lt;h3 id="wo-zhi-shi-yi-ge-pu-tong-ren"&gt;我只是一个普通人&lt;/h3&gt;
&lt;p&gt;刚毕业那会, 初生牛犊, 总想着去做一些牛逼的事情, 学一些给力的东西, 变得强大 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-11-08:/posts/2015/11/08/summary-13-some-points.html</guid><category>总结</category></item><item><title>Python 源码阅读 - 垃圾回收机制</title><link>http://www.wklken.me/posts/2015/09/29/python-source-gc.html</link><description>&lt;h2 id="gai-shu"&gt;概述&lt;/h2&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了&lt;code&gt;标记-清除&lt;/code&gt;以及&lt;code&gt;分代收集&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h2 id="yin-yong-ji-shu"&gt;引用计数&lt;/h2&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h3 id="ji-shu-cun-chu"&gt;计数存储&lt;/h3&gt;
&lt;p&gt;回顾  &lt;a href="http://www.wklken.me/posts/2014/08/05/python-source-object.html"&gt;Python 的对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyVarObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 29 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-29:/posts/2015/09/29/python-source-gc.html</guid><category>python</category></item><item><title>我为什么要写博客</title><link>http://www.wklken.me/posts/2015/09/26/why-i-keep-blogging.html</link><description>&lt;p&gt;从七月中旬, 到八月底, 彻彻底底休息了一个半月, 九月初开始找工作, 目测国庆节后才能完成入职开始干活.&lt;/p&gt;
&lt;p&gt;周期略长, 主要节点不好, 哎&lt;/p&gt;
&lt;p&gt;最近在想一个问题, 我为什么要写博客?&lt;/p&gt;
&lt;p&gt;开始写博客, 是在大学期间吧, 当时用的是新浪博客, 写了很多杂七杂八生活的点点滴滴, 临毕业前, 应该是刚从北京实习回学校, 2011年的4月1日(没错是愚人节), 注册了CSDN, 开始了写技术博客&lt;/p&gt;
&lt;p&gt;13年7月从 CSDN 迁移走, 到了独立博客, 主要是那时候CSDN不支持markdown, 而且感觉自己维护一个更为便利些, 便买了主机, 申请了域名, 开始了独立博客的时光.&lt;/p&gt;
&lt;p&gt;到现在, 也有两年了吧.&lt;/p&gt;
&lt;p&gt;现在博客, 每个月UV大概1W的样子. 没有任何推广渠道, 全靠用户回访以及搜索引擎带来的流量.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_stats" src="/imgs/blabla/blog_stats.png"/&gt;&lt;/p&gt;
&lt;p&gt;偶尔隔一阵, 便会收到一份donation, 虽不多, 但是每次都会觉得很开心, 就像是隔一阵的惊喜, 也算是给自己的坚持注入了一些动力, 再次感谢各位:)&lt;/p&gt;
&lt;p&gt;回去看了下CSDN, 访问接近90W 次, 排名834......已经放弃维护好久了(两年多了), CSDN 留下了我那一两年青葱的时光 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-26:/posts/2015/09/26/why-i-keep-blogging.html</guid><category>blabla</category></item><item><title>APUE笔记-第一章 UNIX基础知识</title><link>http://www.wklken.me/posts/2015/09/23/apue-note-chapter-1.html</link><description>&lt;hr/&gt;
&lt;p&gt;最近在找工作, 额, 从七月份一直休息到九月初, 开始找, 结果发现快到十月了, 节点不是很好, 要过两个节, 所以估计入职什么的要到节后了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这几个月也在思考一些东西, 顺手也解决掉了&lt;code&gt;Python源码剖析&lt;/code&gt;, 目前在逐步梳理笔记&lt;/p&gt;
&lt;p&gt;发现自己首次做笔记还是太杂太乱, 堆在wiki里面一大坨的感觉, 还是要梳理画图, 思路更清晰些, 静候吧, 还是十篇左右的样子&lt;/p&gt;
&lt;p&gt;读APUE, 做法比较&lt;code&gt;残忍&lt;/code&gt;, 把书切开, 拆成一章一章地装订, 方便携带和阅读, 最后发现画满了一堆东西&lt;/p&gt;
&lt;p&gt;发现还是不方便自己查阅, 所以还是决定重读, 转成笔记, 放到博客上方便搜索/查阅&lt;/p&gt;
&lt;p&gt;对了, 代码之前只是下了看到的时候run下, 这次重读写写注释, 放到github了, &lt;a href="https://github.com/wklken/apue.3e"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此感谢作者W.Richard Stevens :) 这本书五星好评, 建议如果搞linux相关后端, 可以读下&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-zhang-unixji-chu-zhi-shi"&gt;第一章 UNIX基础知识&lt;/h1&gt;
&lt;h2 id="unixti-xi-jie-gou-nei-he-yu-xi-tong-diao-yong"&gt;Unix体系结构: 内核与系统调用&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/apue/1-1.jpg"/&gt;￼&lt;/p&gt;
&lt;p&gt;内核(kernel): 严格意义上, 将操作系统定义为一种软件 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 23 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-23:/posts/2015/09/23/apue-note-chapter-1.html</guid><category>apue</category></item><item><title>Python源码阅读-闭包的实现</title><link>http://www.wklken.me/posts/2015/09/04/python-source-closure.html</link><description>&lt;h3 id="bi-bao"&gt;闭包&lt;/h3&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;

&lt;span class="n"&gt;add_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要回答, 什么是闭包, CPython底层是如何实现的?&lt;/p&gt;
&lt;h3 id="pycodeobject"&gt;PyCodeObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_argcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* #arguments, except *args */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_nlocals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* #local variables */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_stacksize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* #entries needed for evaluation stack */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_flags …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 04 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-04:/posts/2015/09/04/python-source-closure.html</guid><category>python</category></item><item><title>Python源码阅读-内存管理机制(二)</title><link>http://www.wklken.me/posts/2015/08/29/python-source-memory-2.html</link><description>&lt;h2 id="python-de-nei-cun-fen-pei-ce-lue"&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3 id="arena"&gt;arena&lt;/h3&gt;
&lt;p&gt;arena: 多个pool聚合的结果&lt;/p&gt;
&lt;h4 id="arena-size"&gt;arena size&lt;/h4&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;code&gt;obmalloc.c&lt;/code&gt;中代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     &lt;/span&gt;&lt;span class="cm"&gt;/* 256KB */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="arena-jie-gou"&gt;arena 结构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Record keeping for arenas. */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* The address of the arena, as returned by malloc.  Note that 0&lt;/span&gt;
&lt;span class="cm"&gt;     * will never …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 29 Aug 2015 20:54:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-2.html</guid><category>python</category></item><item><title>Python源码阅读-内存管理机制(一)</title><link>http://www.wklken.me/posts/2015/08/29/python-source-memory-1.html</link><description>&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;基本阅读完了, 只是没时间梳理, 趁着这今天时间比较空&lt;/p&gt;
&lt;p&gt;逐步梳理, 发上来......也算是小结下, 要开始准备简历找工作了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这篇略长, 带很多图, 所以一分为二&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-nei-cun-guan-li-jia-gou"&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3 id="ji-ben-fen-ceng"&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python's object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python's raw memory allocator (PyMem_ API …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 29 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-1.html</guid><category>python</category></item><item><title>Python-基础-数据结构小结</title><link>http://www.wklken.me/posts/2015/08/28/python-base-datastructures.html</link><description>&lt;p&gt;只是一篇笔记, 梳理了下&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;h3 id="xu-lie"&gt;序列&lt;/h3&gt;
&lt;h4 id="string"&gt;string&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/10/python-base-string.html"&gt;Python-基础-字符串小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/08/python-source-string.html"&gt;Python源码阅读-String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="list"&gt;list&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2012/12/30/python-base-list.html"&gt;Python-基础-列表及列表解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-list.html"&gt;Python源码阅读-list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tuple"&gt;tuple&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/09/python-base-tuple.html"&gt;Python-基础-元组小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-tuple.html"&gt;Python源码阅读-tuple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="namedtuple"&gt;namedtuple&lt;/h4&gt;
&lt;p&gt;在collections中, 从名字可以看出是命名的tuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;][,&lt;/span&gt; &lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好处, 文档中提到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Named&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;dictionaries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;lightweight&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;no …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 28 Aug 2015 23:59:59 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-28:/posts/2015/08/28/python-base-datastructures.html</guid><category>python</category></item><item><title>"活动"设计的一些trick</title><link>http://www.wklken.me/posts/2015/08/28/tricks-about-promotion-codes.html</link><description>&lt;p&gt;在梳理过去做过的项目&lt;/p&gt;
&lt;p&gt;之前做项目的时候, 十个月期间做了不少活动, 类型比较多, 有推广/抽奖/小游戏等等.&lt;/p&gt;
&lt;p&gt;有些活动需求明确一气呵成, 也有些活动需求模糊一度推倒重来, 还有的活动被刷了&amp;gt;&lt;em&gt;&amp;lt;#&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好吧, 来说说活动&lt;/p&gt;
&lt;p&gt;一些想法, 可以是技术, 非技术&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-de"&gt;目的&lt;/h3&gt;
&lt;p&gt;活动的目的是什么? 有没有存在的意义?&lt;/p&gt;
&lt;p&gt;存在由于没有想清楚, 耗费人力物力搞了结果不尽人意......所以目的应该先想清楚, 并且明学下来&lt;/p&gt;
&lt;h3 id="huo-dong-kai-fa-jian-yao-liu-cheng"&gt;活动开发简要流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需求分析: 整体流程, 用户侧细节, 管理侧需求, 统计需求等等, 对整个流程达成一致, 对每个环节的条件/处理逻辑/后续出口等等明确下来, 对一些资质/数字限制等确定下来&lt;/li&gt;
&lt;li&gt;设计出图/后端建模-逻辑代码-API/前端开发&lt;/li&gt;
&lt;li&gt;测试环境上线&lt;/li&gt;
&lt;li&gt;内部测试, 试玩, 针对活动本身给意见. 测试人员测试, 针对逻辑本身, 同时进行网速测试(2g/3g/wifi) / 浏览器测试 / 不同手机-系统测试&lt;/li&gt;
&lt;li&gt;修正迭代 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 28 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-28:/posts/2015/08/28/tricks-about-promotion-codes.html</guid><category>blabla</category></item><item><title>一些简单的Python测试题</title><link>http://www.wklken.me/posts/2015/08/26/python-some-test-questions.html</link><description>&lt;p&gt;一些简单的测试题, 主要来源是网上:)&lt;/p&gt;
&lt;p&gt;某种程度, 可以从代码中看出一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写代码, 打印1-1亿之内的偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个函数, 用正则表达式清除字符串中[]和其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[lol]你好，帮我把这些markup清掉，[smile]。谢谢！"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;请使用python, 对下面的函数进行处理,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数被调用时打印耗时详情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tom&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timecosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.81469726562e-06&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个函数, 将驼峰命名法字符串转成下划线命名字符串(需考虑各类编码中常见的命名)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;GetItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;getItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;doIT …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-26:/posts/2015/08/26/python-some-test-questions.html</guid><category>python</category></item><item><title>我的tmux配置及说明【k-tmux】</title><link>http://www.wklken.me/posts/2015/08/06/linux-tmux.html</link><description>&lt;p&gt;配置了一份 &lt;a href="https://github.com/wklken/k-tmux"&gt;k-tmux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下快捷键是对这份配置的说明, 大部分为&lt;code&gt;tmux&lt;/code&gt;通用, 部分为修改自定义&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mac
$ brew install tmux
$ brew install reattach-to-user-namespace

ubuntu
$ sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yao-shuo-ming"&gt;简要说明&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux -&amp;gt; session -&amp;gt; window -&amp;gt; pane&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Tmux可以管理多组会话&lt;/li&gt;
&lt;li&gt;一个会话（Session）可以包含多个窗口，一个窗口（Window）可以包含多个窗格（Pane）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作前缀 &lt;code&gt;PREFIX = Ctrl-a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-session"&gt;1. session&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建, tmux new -s &amp;lt;name-of-my-session&amp;gt; 创建一个新的会话&lt;/span&gt;
$ tmux new -s basic

&lt;span class="c1"&gt;# 在tmux中创建一个会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX- …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 06 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-06:/posts/2015/08/06/linux-tmux.html</guid><category>tmux</category><category>linux</category></item><item><title>Review and Restart</title><link>http://www.wklken.me/posts/2015/07/24/summary-12-review-and-restart.html</link><description>&lt;p&gt;7月4日,  想着正式工作四年了
7月9日, 公司这边出了点状况, 歇业, 也从公司离职了
7月10日, 衡山溜达了一圈
7月19日, 想着正好加入甜品十一个月了
7月18日, 生日&lt;/p&gt;
&lt;p&gt;去年的七月,  也刚好离职, 正在一路北上的旅途中. 情况似曾相识.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/road.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="review"&gt;Review&lt;/h2&gt;
&lt;p&gt;一些工作上的review&lt;/p&gt;
&lt;h4 id="1-fan-shi-you-jie-guo-and-fail-fastkuai-su-shi-bai"&gt;1.  凡事有结果 and Fail-fast(快速失败)&lt;/h4&gt;
&lt;p&gt;作为工程师, 似乎很容易陷入, 将做项目, 变成完成任务.&lt;/p&gt;
&lt;p&gt;前置是需求, 有产品帮cover, 但是项目的后置, 是结果, 更多的是依赖自己.&lt;/p&gt;
&lt;p&gt;需求分析后, 系统设计之初, 就应该考虑: 日志/统计, 考虑如何去衡量"结果".&lt;/p&gt;
&lt;p&gt;项目上线后, 要跟!!! 分析及反馈数据, 让更多人了解现状, 以便后续决策.&lt;/p&gt;
&lt;p&gt;做事如果没有结果, 会导致可能错误的不断投入精力处理一些不重要的事情, 甚至根本不需要做, 沉没成本&lt;/p&gt;
&lt;p&gt;事情做了, 要有一个结果 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 24 Jul 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-07-24:/posts/2015/07/24/summary-12-review-and-restart.html</guid><category>总结</category></item><item><title>工作四周年小结</title><link>http://www.wklken.me/posts/2015/07/04/summary-11-work-four-years.html</link><description>&lt;p&gt;一晃, 四年过去了&lt;/p&gt;
&lt;p&gt;每年的7月4日, 都会想到刚毕业入职第一天&lt;/p&gt;
&lt;p&gt;惯例, 写一些东西, 记录过去的这些日子&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;既然选择了远方, 便只顾风雨兼程 -- 汪国真&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近遇到了一些事情, 颇为突然, 也颇为无奈.&lt;/p&gt;
&lt;p&gt;似乎, 也是去年的这阵子, 遭遇了公司的变故, 最终离职, 到北边溜达了一阵. 回来后, 宅了一阵, 花了两天找了工作, 迄今十月有余.&lt;/p&gt;
&lt;p&gt;很多事情很突然, 也就在旦夕之间&lt;/p&gt;
&lt;p&gt;原来没有感觉, 但是回顾, 发现却也是必然的&lt;/p&gt;
&lt;p&gt;十月风雨, 一切美好, 仿佛一场梦&lt;/p&gt;
&lt;p&gt;思考, 总结,  前进&lt;/p&gt;
&lt;p&gt;生活, 总是要继续的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既然选择了远方, 便只顾风雨兼程&lt;/code&gt;, 这是我给每个新入职小伙伴的纸条,  祝好, 也送给自己, hold on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前进, 前进, 不顾一切地前进 -- 三体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;似乎, 之前一直秉承这个信念在做一些事情&lt;/p&gt;
&lt;p&gt;回头却发现, 似乎错放了重点 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 04 Jul 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-07-04:/posts/2015/07/04/summary-11-work-four-years.html</guid><category>总结</category></item><item><title>vim插件: surround &amp; repeat[成对符号编辑]</title><link>http://www.wklken.me/posts/2015/06/13/vim-plugin-surround-repeat.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="surround"&gt;surround&lt;/h2&gt;
&lt;p&gt;作用: 快速给词加环绕符号,例如单引号/双引号/括号/成对标签等&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tpope/vim-surround'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;注意(括号, 左括号会加空格, 右括号不会)&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 替换: cs"'
"Hello world!" -&amp;gt; 'Hello world!'

# 替换-标签(t=tag): cst"
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  -&amp;gt; "abc"

cst&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  -&amp;gt; &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;abc&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

# 删除: ds"
"Hello world!" -&amp;gt; Hello world!

# 添加 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 13 Jun 2015 12:16:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-surround-repeat.html</guid><category>vim</category></item><item><title>vim插件: gundo[时光机]</title><link>http://www.wklken.me/posts/2015/06/13/vim-plugin-gundo.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;有时候编辑一半, 特别是删除了一些东西, 然后想找回, 但是没有存下来(只在脑子里有)
这时候时光机就发挥作用了&lt;/p&gt;
&lt;p&gt;作用: 文件时光机, 可以查看同一个文件之前的历史内容&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/sjl/gundo.vim"&gt;gundo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'sjl/gundo.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;code&gt;&amp;lt;leader&amp;gt;h&lt;/code&gt;作为&lt;code&gt;toggle&lt;/code&gt;, 进入之后&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;j/k   上下选择
p     查看diff
回车  回滚文件到这个时刻的版本
&amp;lt;leader&amp;gt;h  关闭(或者wq关闭gundo打开的窗口)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意, 你可以跳进预览, 复制一些东西出来, 不必走回滚&lt;/p&gt;
&lt;p&gt;&lt;img alt="gundo.gif" src="/imgs/vim/gundo.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nnoremap &amp;lt;leader&amp;gt;h :GundoToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;只要写过的, 都能找回来&lt;/li&gt;
&lt;li&gt;同类插件 …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 13 Jun 2015 10:37:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-gundo.html</guid><category>vim</category></item><item><title>vim插件: expand-region[区域选中]</title><link>http://www.wklken.me/posts/2015/06/13/vim-plugin-expandregion.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 视图模式下可伸缩选中部分，用于快速选中某些块&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/terryma/vim-expand-region"&gt;expand-region&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-expand-region'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-yong"&gt;使用&lt;/h3&gt;
&lt;p&gt;自定义key&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v 增加选中范围
V 减少选中范围
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="expand-region.gif" src="/imgs/vim/expand-region.gif"/&gt;&lt;/p&gt;
&lt;h3 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-expand-region'
vmap v &amp;lt;Plug&amp;gt;(expand_region_expand)
vmap V &amp;lt;Plug&amp;gt;(expand_region_shrink)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yi"&gt;建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;培养使用&lt;code&gt;v&lt;/code&gt;/&lt;code&gt;V&lt;/code&gt;进行区块选中的习惯, 避免每次多敲键位&lt;/li&gt;
&lt;li&gt;可以进行选中规则的自定义, 具体见 &lt;a href="https://github.com/terryma/vim-expand-region#customize-selected-regions"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 13 Jun 2015 10:21:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-expandregion.html</guid><category>vim</category></item><item><title>vim插件: quickrun[快速执行]</title><link>http://www.wklken.me/posts/2015/06/13/vim-plugin-quickrun.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 快速执行当前文件, 例如&lt;em&gt;.py/&lt;/em&gt;.rb/*.sh等等, 用于快速验证一些代码实现&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/thinca/vim-quickrun"&gt;vim-quickrun&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'thinca/vim-quickrun'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;配置使用&lt;code&gt;message&lt;/code&gt;进行结果展示, 即, 展示运行结果后, 按任意键回到vim编辑&lt;/p&gt;
&lt;p&gt;同时, 映射&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt;以及&lt;code&gt;F10&lt;/code&gt;快捷键&lt;/p&gt;
&lt;p&gt;在快速编写验证性代码时非常有用&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="quick-run.gif" src="/imgs/vim/quick-run.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'thinca/vim-quickrun'
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}

let g:quickrun_no_default_key_mappings = 1
nmap &amp;lt;Leader&amp;gt;r &amp;lt;Plug&amp;gt;(quickrun …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 13 Jun 2015 10:09:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-13:/posts/2015/06/13/vim-plugin-quickrun.html</guid><category>vim</category></item><item><title>vim插件: trailing-whitespace[行尾空格处理]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-trailing-whitespace.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;没有什么太多需要讲的, 功能+一个快捷键&lt;/p&gt;
&lt;p&gt;代码洁癖/强迫症必备&lt;/p&gt;
&lt;p&gt;作用: 高亮行末空格(标红), 也可以一键去除文件中所有行行尾空格&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/bronson/vim-trailing-whitespace"&gt;vim-trailing-whitespace&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bronson/vim-trailing-whitespace'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能: 自动标记行尾的空格&lt;/p&gt;
&lt;p&gt;&lt;img alt="trailing-whitespace.png" src="/imgs/vim/trailing-whitespace.png"/&gt;&lt;/p&gt;
&lt;p&gt;主动技能: 绑定&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;space&amp;gt;&lt;/code&gt;为快捷键, 一键去除所有行尾空格
(&lt;code&gt;k-vim&lt;/code&gt;中为&lt;code&gt;,空格&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="trailing-whitespace.gif" src="/imgs/vim/trailing-whitespace.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bronson/vim-trailing-whitespace'
map &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :FixWhitespace&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:16:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-trailing-whitespace.html</guid><category>vim</category></item><item><title>vim插件: closetag[成对标签补全]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-closetag.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;如果日常开发中要编辑xml和html文件, 一个字符一个字符敲是不聪明地, 虽然你可以这么做...&lt;/p&gt;
&lt;p&gt;作用: 编辑xml/html时, 自动补全闭合标签&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/docunext/closetag.vim"&gt;closetag&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'docunext/closetag.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 自动补全&lt;/p&gt;
&lt;p&gt;&lt;img alt="closetag.gif" src="/imgs/vim/closetag.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;被动技能, 越简单越好, 当然如果你要用这个来写前端代码, 是远远不够的, 你可能需要&lt;a href="https://github.com/mattn/emmet-vim"&gt;emmet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:15:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-closetag.html</guid><category>vim</category></item><item><title>vim插件: ctrlp[文件搜索]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-ctrlp.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;使用频率最高的插件之一&lt;/p&gt;
&lt;p&gt;作用: 模糊搜索, 可以搜索文件/buffer/mru/tag等等&lt;/p&gt;
&lt;p&gt;github: 原始&lt;a href="https://github.com/kien/ctrlp.vim"&gt;kien/ctrlp&lt;/a&gt;, 使用的是国人改进版本 &lt;a href="https://github.com/ctrlpvim/ctrlp.vim"&gt;ctrlpvim/ctrlp.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'ctrlpvim/ctrlp.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;-f&lt;/code&gt;模糊搜索最近打开的文件(MRU)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;-p&lt;/code&gt;模糊搜索当前目录及其子目录下的所有文件&lt;/p&gt;
&lt;p&gt;搜索框出来后, 输入关键字, 然后&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl + j/k 进行上下选择

ctrl + x 在当前窗口水平分屏打开文件

ctrl + v 同上, 垂直分屏

ctrl + t 在tab中打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="ctrlp.gif" src="/imgs/vim/ctrlp.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:14:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-ctrlp.html</guid><category>vim</category></item><item><title>vim插件: airline[状态栏增强]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-airline.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 状态栏增强展示&lt;/p&gt;
&lt;p&gt;github:&lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前用过powline, 最终切到airline&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bling/vim-airline'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;状态栏增强, 集成支持ctrlp/nerdtree/tagbar等一些列插件&lt;a href="https://github.com/bling/vim-airline#features"&gt;features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;airline.png&lt;/p&gt;
&lt;p&gt;&lt;img alt="airline_1.png" src="/imgs/vim/airline_1.png"/&gt;
&lt;img alt="airline_2.png" src="/imgs/vim/airline_2.png"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'bling/vim-airline'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:13:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-airline.html</guid><category>vim</category></item><item><title>vim插件: theme[主题]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-theme.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;主题, 在&lt;code&gt;k-vim&lt;/code&gt;中, 默认配置了两个&lt;/p&gt;
&lt;h3 id="1-solarize"&gt;1. solarize&lt;/h3&gt;
&lt;p&gt;github: &lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;solarized&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="solarized.png" src="/imgs/vim/solarized.png"/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'altercation/vim-colors-solarized'
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-molokai"&gt;2. molokai&lt;/h3&gt;
&lt;p&gt;github: &lt;a href="https://github.com/tomasr/molokai"&gt;molokai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="molokai.png" src="/imgs/vim/molokai.png"/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'tomasr/molokai'
" monokai原始背景色
let g:molokai_original = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="qi-yong"&gt;启用:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Bundle&lt;/code&gt;之后安装, 仅仅是安装, 要启用哪个主题, 需要在&lt;code&gt;vimrc&lt;/code&gt;中显式指定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set background …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:12:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-theme.html</guid><category>vim</category></item><item><title>vim插件: tagbar[大纲式导航]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-tagbar.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;tagbar&lt;/code&gt;, 可以将正在编辑的文件生成一个大纲, 包含类/方法/变量等, 可以选中快速跳转到目标位置, 编辑大文件特别有用.&lt;/p&gt;
&lt;p&gt;评价: 五星&lt;/p&gt;
&lt;p&gt;作用: 大纲式快速导航&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;p&gt;首先, vim必须是7.0以上&lt;/p&gt;
&lt;p&gt;安装依赖 &lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant ctags&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ubuntu
sudo apt-get install ctags

# centos
sudo yum install ctags

# mac
brew install ctags
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在vim中安装&lt;code&gt;tagbar&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'majutsushi/tagbar'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;k-vim&lt;/code&gt;中配置快捷键为&lt;code&gt;F9&lt;/code&gt;, 编辑文件时按&lt;code&gt;F9&lt;/code&gt;, 进入, 上下移动 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:11:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-tagbar.html</guid><category>vim</category></item><item><title>vim插件: nerdcommenter[快速注释]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-nerdcommenter.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;最经常用的插件之一&lt;/p&gt;
&lt;p&gt;作用: 快速注释/解开注释&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/nerdcommenter'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;使用默认的快捷键, 不需要自己绑定&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;leader&amp;gt;cc   加注释
&amp;lt;leader&amp;gt;cu   解开注释

&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;  加上/解开注释, 智能判断
&amp;lt;leader&amp;gt;cy   先复制, 再注解(p可以进行黏贴)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="nerdcommenter.gif" src="/imgs/vim/nerdcommenter.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/nerdcommenter'
" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同类插件 &lt;a href="https://github.com/tomtom/tcomment_vim"&gt;tcomment&lt;/a&gt; / &lt;a href="https://github.com/tpope/vim-commentary"&gt;vim-commentary&lt;/a&gt;,  有兴趣的话, 可以对比下后者和nerdcommenter&lt;/li&gt;
&lt;li&gt;常用就三四个快捷键, 更多快捷键自取 …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-nerdcommenter.html</guid><category>vim</category></item><item><title>vim插件: rainbow_parentheses[括号高亮]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-rainbowparentheses.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 括号(小括号/中括号/大括号)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/kien/rainbow_parentheses.vim"&gt;rainbow_parentheses.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'kien/rainbow_parentheses.vim' [DONE]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动(虽然支持主动触发), 可以设定括号高亮展示, 包括&lt;code&gt;()[]{}&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow_parentheses.png" src="/imgs/vim/rainbow_parentheses.png"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue' …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:09:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-rainbowparentheses.html</guid><category>vim</category></item><item><title>vim插件: syntastic[语法检查]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-syntastic.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 语法检查, 支持大部分的语言&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/scrooloose/syntastic"&gt;syntastic&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 设置打开时开启, 则打开对应文件的时候, 会自动进行语法检查, 高亮错误位置&lt;/p&gt;
&lt;p&gt;注意, 针对某些具体语言, 指定了checker, 需要对应安装外部依赖, 例如&lt;code&gt;pyflakes&lt;/code&gt;/&lt;code&gt;pep8&lt;/code&gt;/&lt;code&gt;jshint&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;主动技能, &lt;code&gt;k-vim&lt;/code&gt;中配置绑定了&lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;打开错误列表面板&lt;/p&gt;
&lt;p&gt;&lt;img alt="syntastic.png" src="/imgs/vim/syntastic.png"/&gt;&lt;/p&gt;
&lt;p&gt;默认&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:Errors 显示错误面板
:lnext  到下一个错误
:lprevious 到上一个错误
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='&amp;gt;&amp;gt;'
let g:syntastic_warning_symbol='&amp;gt;'
let …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:08:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-syntastic.html</guid><category>vim</category></item><item><title>vim插件: delimitmate[符号自动补全]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-delimitmate.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 自动补全引号(单引号/双引号/反引号), 括号(&lt;code&gt;()[]{}&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/Raimondi/delimitMate"&gt;delimitMate&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Raimondi/delimitMate'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;被动技能, 在编辑输入的时候触发&lt;/p&gt;
&lt;p&gt;&lt;img alt="delimitmate.gif" src="/imgs/vim/delimitmate.gif"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题: 如何在结束输入后, 自动跳转到符号后面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触发后, 假设你要跳到补全后的符号后面继续编辑, 按&lt;code&gt;Shift-Tab&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 1. 按", 自动补全
"|"

# 2.输入`hello`
"hello|"

# 3. 按 shift-tab, 跳到补全的符号后面, 还是insert-mode
"hello"|
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'

" for python docstring ", 特别有用
au FileType python …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:07:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-delimitmate.html</guid><category>vim</category></item><item><title>vim插件: matchit[成对标签跳转]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-matchit.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这个插件最后一次更新是2008年, 七年前了......&lt;/p&gt;
&lt;p&gt;vim的&lt;code&gt;%&lt;/code&gt;, 会自动跳转到匹配的&lt;code&gt;()[]{}&amp;lt;&amp;gt;&lt;/code&gt;等符号, 但是在编辑&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;xml&lt;/code&gt;的时候, 可能需要在配对标签直接跳转, 这个插件扩展实现了这个功能.&lt;/p&gt;
&lt;p&gt;作用: &lt;code&gt;%&lt;/code&gt;跳转到匹配的标签&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/vim-scripts/matchit.zip"&gt;matchit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'vim-scripts/matchit.zip'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在需要跳转的位置按&lt;code&gt;%&lt;/code&gt;, 跳转到匹配位置&lt;/p&gt;
&lt;p&gt;例如 xml/html中支持成对标签之间的跳转&lt;/p&gt;
&lt;p&gt;&lt;img alt="matchit.gif" src="/imgs/vim/matchit.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 没错, 只有一行
Bundle 'vim-scripts/matchit.zip'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据自己需求确定要不要这个插件, 虽然小, 但是没用的话就不需要装了&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:06:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-matchit.html</guid><category>vim</category></item><item><title>vim插件: easy-align[快速对齐]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-easyalign.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 快速进行对齐/格式化&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/junegunn/vim-easy-align"&gt;vim-easy-align&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'junegunn/vim-easy-align'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;绑定快捷键 &lt;code&gt;&amp;lt;leader&amp;gt;a&lt;/code&gt;, 使用&lt;code&gt;V&lt;/code&gt;进入选择, 选取多行, 之后触发&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;,a=        对齐等号表达
,a:        对齐冒号表达式(json/map等)

# 默认左对齐
,a&amp;lt;space&amp;gt;  首个空格对齐
,a2&amp;lt;space&amp;gt; 第二个空格对齐
,a-&amp;lt;space&amp;gt; 倒数第一个空格对齐
,a-2&amp;lt;space&amp;gt; 倒数第二个空格对齐
,a*&amp;lt;space&amp;gt; 所有空格依次对齐

# 右对齐
,a&amp;lt;Enter&amp;gt;*&amp;lt;space&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="easy-align.gif" src="/imgs/vim/easy-align.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'junegunn/vim-easy-align' …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:05:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-easyalign.html</guid><category>vim</category></item><item><title>vim插件: multiple-cursors[多光标操作]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-multiplecursors.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 类似sublimetext的多光标选中&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim=multiple-cursors&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-multiple-cursors'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;默认快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl+m 选中一个
ctrl+p 放弃一个, 回到上一个
ctrl+x 跳过当前选中, 选中下一个
esc    退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="multiple-cursors.gif" src="/imgs/vim/multiple-cursors.gif"/&gt;&lt;/p&gt;
&lt;p&gt;选中后, 可以进行增删替换&lt;code&gt;a/c/x&lt;/code&gt;等&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='&amp;lt;C-m&amp;gt;'
let g:multi_cursor_prev_key='&amp;lt;C-p …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:03:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-multiplecursors.html</guid><category>vim</category></item><item><title>vim插件: vim-signature[快速标记跳转]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-signature.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作用: 标签展示以及快速跳转(增强vim的书签功能)&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/kshenoy/vim-signature"&gt;signature&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle "kshenoy/vim-signature"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;使用默认快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m[a-zA-Z]   打标签
'[a-zA-Z]   跳转到标签位置

'.          最后一次变更的地方
''          跳回来的地方(最近两个位置跳转)

m&amp;lt;space&amp;gt;    去除所有标签
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="signature.gif" src="/imgs/vim/signature.gif"/&gt;&lt;/p&gt;
&lt;h2 id="zui-zhong-pei-zhi"&gt;最终配置&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle "kshenoy/vim-signature"
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jian-yi"&gt;建议&lt;/h2&gt;
&lt;p&gt;无&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:02:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-signature.html</guid><category>vim</category></item><item><title>vim插件: easymotion[快速跳转]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;说明: &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;全局映射为&lt;code&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;除却&lt;code&gt;hjkl&lt;/code&gt;, &lt;code&gt;gg&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;Ctrl-D/U&lt;/code&gt;, 以及 &lt;code&gt;[f/F]&amp;lt;char&amp;gt;&lt;/code&gt;和&lt;code&gt;[t/T]&amp;lt;char&amp;gt;&lt;/code&gt;这些&lt;code&gt;vim&lt;/code&gt;默认的移动方式&lt;/p&gt;
&lt;p&gt;有没有更高效的移动做法么? 回答是肯定的&lt;/p&gt;
&lt;p&gt;这个插件的唯一目的就是: 快速跳转&lt;/p&gt;
&lt;p&gt;作用: 如何进行更快速的光标移动&lt;/p&gt;
&lt;p&gt;github: &lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'Lokaltog/vim-easymotion'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yong-fa-1-tiao-zhuan-dao-dang-qian-guang-biao-qian-hou-de-wei-zhi-wb"&gt;用法1: 跳转到当前光标前后的位置(w/b)&lt;/h2&gt;
&lt;p&gt;快捷键&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;w&lt;/code&gt;(即&lt;code&gt;,,w&lt;/code&gt;)和&lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;b&lt;/code&gt;(即&lt;code&gt;,,b …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:01:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-easymotion.html</guid><category>vim</category></item><item><title>vim插件: vundle[管理插件]</title><link>http://www.wklken.me/posts/2015/06/07/vim-plugin-vundle.html</link><description>&lt;p&gt;k-vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;第一个需要手动安装的插件, 其他的插件通过这个来进行管理&lt;/p&gt;
&lt;p&gt;作用: 管理其他所有插件(安装/更新/移除)&lt;/p&gt;
&lt;p&gt;github:&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;vundle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang"&gt;安装&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vi
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="shi-yong"&gt;使用&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;.vimrc&lt;/code&gt;中加入/修改/删除自己需要的插件配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle 'scrooloose/syntastic'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 在命令行模式下运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:BundleInstall     install 安装配置的插件
:BundleInstall!    update  更新
:BundleClean       remove plugin not in list 删除本地无用插件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="vundle.png" src="/imgs/vim/vundle.png"/&gt;&lt;/p&gt;
&lt;h2 id="qi-ta"&gt;其他 …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 07 Jun 2015 18:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-06-07:/posts/2015/06/07/vim-plugin-vundle.html</guid><category>vim</category></item><item><title>分享一份 Vim 简介PPT</title><link>http://www.wklken.me/posts/2015/05/10/vim-intro.html</link><description>&lt;p&gt;这是近期做团队分享的一份ppt, 原稿用&lt;code&gt;markdown&lt;/code&gt;仓促写的, 感谢&lt;code&gt;markdown&lt;/code&gt;及&lt;a href="https://github.com/onesuper/weakpoint"&gt;weakpoint&lt;/a&gt;, 可以直接将&lt;code&gt;markdown&lt;/code&gt;转成ppt&lt;/p&gt;
&lt;p&gt;这次分享主要不是讲vim, 更多的是关于工具的使用和思考&lt;/p&gt;
&lt;p&gt;其实, 无非是记住一些东西, 忘记一些东西, 定制和寻找适合自己的工具, 善用工具, 成为主人而不是奴隶&lt;/p&gt;
&lt;p&gt;将markdown原稿放出, 很多实操演示, 在文稿中是看不到的......&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim"&gt;vim&lt;/h2&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim_1"&gt;vim&lt;/h2&gt;
&lt;p&gt;曲线:&lt;/p&gt;
&lt;p&gt;&lt;img alt="learn-diff" src="/imgs/vim/learn_diff.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="vim_2"&gt;vim&lt;/h2&gt;
&lt;p&gt;Vim the Six Billion Dollar editor&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Better, Stronger, Faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成为你最后一个使用的编辑器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h2 id="vim_3"&gt;vim&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文本编辑器 , 不是IDE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能做一些事情, 但是一些事情是做不到的, 不要强求, 该用IDE的时候, 用就是了&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="how"&gt;how&lt;/h2&gt;
&lt;p&gt;步骤:(简明 Vim …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 May 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-05-10:/posts/2015/05/10/vim-intro.html</guid><category>vim</category></item><item><title>k-vim 更新9.0版本</title><link>http://www.wklken.me/posts/2015/05/05/k-vim-update-v9.html</link><description>&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;直达链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;趁着近期有点时间, 将积累几个月的改进/痛点/更新等处理了一把, &lt;code&gt;k-vim&lt;/code&gt;正式更新到9.0版本.&lt;/p&gt;
&lt;p&gt;如果喜欢, 欢迎star/fork, 欢迎提pr.&lt;/p&gt;
&lt;p&gt;本次更新:  &lt;a href="https://github.com/wklken/k-vim/blob/master/UPDATE_LOG.md"&gt;完整更新日志&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;```markdown 
    1. 新增依赖ag(the_silver_searcher)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;安装 [the_silver_searcher](https://github.com/ggreer/the_silver_searcher#installing)

具体见文档

2. 引入 thinca/vim-quickrun

    2.1 以message的方式展示, 同原先的F10行为, 按回车过掉消息
    2.2    F10 运行 / ,r  运行

2. 引入dyng/ctrlsf.vim, 类似 sublimetext的全局搜索

    2.1 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 May 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-05-05:/posts/2015/05/05/k-vim-update-v9.html</guid><category>vim</category></item><item><title>关于知识管理工具的思考</title><link>http://www.wklken.me/posts/2015/05/02/about-knowledge-manage-tools.html</link><description>&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="shou-chao-bi-ji"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 02 May 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-05-02:/posts/2015/05/02/about-knowledge-manage-tools.html</guid><category>blabla</category></item><item><title>Logstash+ElasticSearch+Kibana处理nginx访问日志</title><link>http://www.wklken.me/posts/2015/04/26/elk-for-nginx-log.html</link><description>&lt;p&gt;&lt;code&gt;ELK&lt;/code&gt;似乎是当前最为流行的日志收集-存储-分析的全套解决方案.&lt;/p&gt;
&lt;p&gt;去年年初, 公司里已经在用, 当时自己还&lt;code&gt;山寨&lt;/code&gt;了一个统计系统(postgresql-echarts, 日志无结构化, json形式存储到postgresql, 构建统一前端配置生成, 调用统一查询接口, &lt;a href="http://www.wklken.me/posts/2014/11/16/unit-statistics-system.html"&gt;具体细节&lt;/a&gt;), 已经过了一年有余.&lt;/p&gt;
&lt;p&gt;一年刚好, 发生了很多事, 那套系统不知现在如何了.&lt;/p&gt;
&lt;p&gt;在新的公司, 一切都得从0到1, 近期开始关注日志/数据上报/统计, 以及后续的数据挖掘等.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;搭建, 测试并上线了一套简单的系统, 初期将所有服务器的nginx日志, 以及搜索日志进行处理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="elk" src="/imgs/system/elk.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面主要介绍对nginx日志进行处理的过程, 不是针对&lt;code&gt;elk&lt;/code&gt;的介绍, 所有涉及ip的地方都改成&lt;code&gt;127.0.0.1&lt;/code&gt;了, 根据自己环境进行修改&lt;/p&gt;
&lt;h3 id="1-nginxri-zhi-logstash-shipper-redis"&gt;1. nginx日志 -&amp;gt; logstash shipper -&amp;gt; redis&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;centos&lt;/code&gt;使用&lt;code&gt;yum&lt;/code&gt;安装&lt;code&gt;nginx&lt;/code&gt;后 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 26 Apr 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-04-26:/posts/2015/04/26/elk-for-nginx-log.html</guid><category>system</category></item><item><title>2014, 在变化与坚持中前进</title><link>http://www.wklken.me/posts/2015/03/18/summary-10-2014.html</link><description>&lt;p&gt;每年都来个总结, 似乎好多年了.&lt;/p&gt;
&lt;p&gt;今年的总结拖了三个月, 为什么呢? 不说了, 什么都是理由罢了.  今天在角落里发现了这个, 想想, 还是发出来吧.&lt;/p&gt;
&lt;p&gt;开始, 依旧很杂.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/coding-life.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="gong-zuo"&gt;工作&lt;/h1&gt;
&lt;p&gt;今年(2014, 快一年了), 发生了一件事, 然后公司没了, 囧.&lt;/p&gt;
&lt;p&gt;总之, 不愉快的过程, 见证了快播的终结.&lt;/p&gt;
&lt;p&gt;这或许就是所谓的变化, 以及生活. 安详平和的环境可能瞬间被撕裂. 你永远不知道明天会是什么样的.&lt;/p&gt;
&lt;p&gt;年后回来的时候, 还在愉快的码代码, 写一个统计系统, 然后事情就发生了, 然后依旧继续在优化统计系统, 写了一个月, 然后就结束了.&lt;/p&gt;
&lt;p&gt;一切太过仓促, 没什么时间思考.&lt;/p&gt;
&lt;p&gt;思及自己似乎一年多一直不能说止步不前,  但似乎长进没有预想中的那样大, 所以决定离开. 这个决定主要是从心, 直觉—"做事情总是追求意义"&lt;/p&gt;
&lt;p&gt;善始善终, 逐一交接完毕, 然后离开.&lt;/p&gt;
&lt;p&gt;没什么后悔的. 只是曾经的战友, 如今已各在一方.&lt;/p&gt;
&lt;p&gt;感谢快播, 一年多日子, 一切, 唯有感恩 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 18 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-03-18:/posts/2015/03/18/summary-10-2014.html</guid><category>总结</category></item><item><title>Python-基础-时间日期处理小结</title><link>http://www.wklken.me/posts/2015/03/03/python-base-datetime.html</link><description>&lt;p&gt;好久没写文了, 继续清理笔记, 都是一些小结之类的, 源码分析以及在做系统中一些细节难点等, 后续逐步发&lt;/p&gt;
&lt;p&gt;另外打个广告, &lt;a href="http://www.itianpin.com/join"&gt;甜品礼物&lt;/a&gt;, 坐标深圳, 有兴趣的同学可以给我发邮件, 非python职位会转到对应同事:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      _       _       _   _
     | |     | |     | | (_)
   __| | __ _| |_ ___| |_ _ _ __ ___   ___
  / _` |/ _` | __/ _ \ __| | '_ ` _ \ / _ \
 | (_| | (_| | ||  __/ |_| | | | | | |  __/
  \__,_|\__,_|\__\___|\__|_|_| |_| |_ …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 03 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-03-03:/posts/2015/03/03/python-base-datetime.html</guid><category>python</category></item><item><title>Linux及Bash笔记</title><link>http://www.wklken.me/posts/2015/01/17/linux-notes.html</link><description>&lt;p&gt;第一次接触, 在大学时期, 但是真正去学习和了解, 大概是在刚毕业那年&lt;/p&gt;
&lt;p&gt;到现在, 三年多, 主后端开发, 工具也就是一个command line加vim, 每天开个终端就开始噼里啪啦干活, 兼职一些简单的部署运维工作&lt;/p&gt;
&lt;p&gt;去年, 是变化和积累的一年, 今年, 希望有些产出&lt;/p&gt;
&lt;p&gt;Linux和bash, 记了很多笔记, 逐一梳理出来&lt;/p&gt;
&lt;p&gt;之前的两篇文章 &lt;a href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;LINUX SHELL脚本攻略笔记&lt;/a&gt; 以及 &lt;a href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html"&gt;如何书写SHELL脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也会一并汇总, 这可能是今年唯一产出的一本笔记了, python源码阅读和python基础笔记, 这两个在本地的gitbook上, 工程量太浩大, 后面以博文的形式慢慢发吧:)&lt;/p&gt;
&lt;p&gt;好了, 放到&lt;code&gt;github&lt;/code&gt;上了, 当前10%的样子, 欢迎 &lt;code&gt;star&lt;/code&gt;以及提&lt;code&gt;pr&lt;/code&gt;, 纠正以及丰富之&lt;/p&gt;
&lt;p&gt;地址: &lt;a href="https://github.com/wklken/linux-notes"&gt;https://github.com/wklken/linux-notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先这样......后面开始专注码业余项目去了, 博文产出估计会少点, 当然也不会太少 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 17 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-01-17:/posts/2015/01/17/linux-notes.html</guid><category>linux</category></item><item><title>一些nginx配置</title><link>http://www.wklken.me/posts/2015/01/01/some-nginx-configs.html</link><description>&lt;p&gt;nginx配置&lt;/p&gt;
&lt;p&gt;开年第一篇, 梳理笔记本中....&lt;/p&gt;
&lt;p&gt;没啥, 一些用到以及后面可能用到的&lt;code&gt;nginx&lt;/code&gt;配置, 记录一下, 备查备用&lt;/p&gt;
&lt;p&gt;ps. 之前一篇 &lt;a href="http://www.wklken.me/posts/2013/11/23/nginx-base.html"&gt;nginx基础笔记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="shi-yong-du-li-mu-lu-ran-hou-includeju-ti-pei-zhi"&gt;使用独立目录, 然后include具体配置&lt;/h2&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx.conf
site/
    a.conf
    b.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http {

    .......
    include /etc/nginx/conf.d/*.conf;
    include sites/*.conf;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gzip-on"&gt;gzip on&lt;/h3&gt;
&lt;p&gt;加到&lt;code&gt;http&lt;/code&gt;模块中, 开启&lt;code&gt;gzip&lt;/code&gt;, 注意&lt;code&gt;gzip_types&lt;/code&gt;配置得是压缩的资源类型&lt;/p&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http {


    .....


    gzip on;
    gzip_min_length …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-01-01:/posts/2015/01/01/some-nginx-configs.html</guid><category>linux</category><category>nginx</category></item><item><title>重读&gt;</title><link>http://www.wklken.me/posts/2014/12/06/are-your-lights-on.html</link><description>&lt;p&gt;书今年到是读了不少, 50本的目标目测已然超标了:), 发现今年的博客目标还差11篇(50篇), 目测完不成指标了, 随性写写吧, 能写几篇是几篇&lt;/p&gt;
&lt;p&gt;&lt;img alt="are-your-lights-on" src="/imgs/books/are-your-lights-on.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这本书是原先团队老大推荐的, 看过一遍, 后来自己入了一本, 今天重读(发现我越来越喜欢这类很薄的树)&lt;/p&gt;
&lt;p&gt;做事情本质上就是遇到问题，分析问题，解决问题的过程。而对如何解决问题本身，这本书做了一些讨论
           &lt;/p&gt;
&lt;p&gt;三点：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 问题是什么（期望和体验）
2. 谁的问题（不同人会有不同的解决方式，责任）
3. 问题来源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到了一些原则性的结论，每一点仔细思考分析.&lt;/p&gt;
&lt;p&gt;记得当时总结过一句话: 当”问题”成为问题时, 才是问题.&lt;/p&gt;
&lt;p&gt;值得反复阅读, 以下更多的是做一些摘录&lt;/p&gt;
&lt;h2 id="di-yi-bu-fen-wen-ti-shi-shi-yao"&gt;第一部分: 问题是什么?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是什么类型的问题? 谁碰到了问题? 问题是什么? 或者说, 此时此刻, 问题的本质是什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谁碰到了问题? 问题的本质是什么?&lt;/p&gt;
&lt;p&gt;谁的问题? 如果没有负责人, 那将永远得不到解决. 具体到了细节 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 06 Dec 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-12-06:/posts/2014/12/06/are-your-lights-on.html</guid><category>books</category></item><item><title>重读&gt;</title><link>http://www.wklken.me/posts/2014/11/30/pomodoro-technique-illustrated.html</link><description>&lt;p&gt;最近在执行重读计划, 为年后搬家做准备, 一些书读完珍藏/出给需要的人, 减少搬家那一柜子书的困扰....&lt;/p&gt;
&lt;p&gt;重新读了下这本书, 写写&lt;/p&gt;
&lt;p&gt;大概去年的这个时候, 写了篇 &lt;a href="http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html"&gt;拖拉一点也无妨的读书笔记&lt;/a&gt;, 需要的可以看下&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodoro" src="/imgs/books/pomodoro.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;番茄时间工作法, 意在让人们驻足/观察/醒悟, 并在此过程中改进自我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们往往容易关注未来, 而不是过去, 匆匆忙忙, 只为了尽快达到目标, 却忽视了对整个过程的review, 停留, 观察, 总结, 改进, 然后再前进, 更快更好地前进.&lt;/p&gt;
&lt;p&gt;编程中有一种学习方式叫做&lt;code&gt;刻意练习&lt;/code&gt;, 而在&amp;lt;&amp;lt;一万小时天才理论&amp;gt;&amp;gt;中提到&lt;code&gt;精深练习&lt;/code&gt;, 要&lt;code&gt;慢&lt;/code&gt;, 要去&lt;code&gt;犯错&lt;/code&gt;, 要去实际&lt;code&gt;体悟&lt;/code&gt;, 要&lt;code&gt;总结&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;GTD 里也有review的环节.&lt;/p&gt;
&lt;p&gt;总之, review很重要, 但常常被忽略(例如说我…)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要完成大量工作, 重点不在完成工作上, 而在于能否集中注意力 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-30:/posts/2014/11/30/pomodoro-technique-illustrated.html</guid><category>books</category></item><item><title>关于代码调试de那些事</title><link>http://www.wklken.me/posts/2014/11/23/how-to-debug.html</link><description>&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1ni-de-ming-bai-ni-zai-zuo-shi-yao-bao-chi-qing-xing"&gt;1.你得明白你在做什么 …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 23 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-23:/posts/2014/11/23/how-to-debug.html</guid><category>blabla</category></item><item><title>基于 PostgreSQL 的数据统计系统</title><link>http://www.wklken.me/posts/2014/11/16/unit-statistics-system.html</link><description>&lt;p&gt;看到标题就知道我要写什么了, 这是之前一个项目的小结吧, 自己对统计的一些认识和看法.&lt;/p&gt;
&lt;p&gt;当时从前到后, 包括技术选型, 花了接近一个月的时间, 也在生产上用了两三个月, 一致在持续维护, 做完图表配置化已然接近完工, 无奈后来离开了, 不过目前应该还在运转&lt;/p&gt;
&lt;p&gt;至于源代码, 暂时不考虑开源, 太渣(其中在看了几天js情况下, 自己撸了1000行js的前端框架, 质量堪忧), 全套用python实现.&lt;/p&gt;
&lt;p&gt;提供一种快速实现运营统计需求的思路.&lt;/p&gt;
&lt;p&gt;(图为百度 echarts 示例)&lt;/p&gt;
&lt;p&gt;&lt;img alt="statistics" src="/imgs/system/statistics.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="yi-chang-jing"&gt;一. 场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;统计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所谓统计, 抽象出来就是计数而已(还有各个计数之间的算术运算). 再具体一些, 根据不同维度进行计数.&lt;/p&gt;
&lt;p&gt;而统计后台, 无外乎数据的输入, 处理, 及输出.&lt;/p&gt;
&lt;p&gt;对于实时性, 一般会以天为单位进行统计.&lt;/p&gt;
&lt;p&gt;而在具体业务场景下, 需要计数的数据来源于各个项目和同一个项目的不同机器(分布式部署), 就需要考虑, 如何将日志进行汇聚, 如何更为便捷地进行处理, 存储, 以及展现.&lt;/p&gt;
&lt;p&gt;其中要考虑, 需求是不断在变化的, 如何将成本降到最低?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以往的统计方式:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分析统计需求 -&amp;gt; 修改项目记录日志内容和格式 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 16 Nov 2014 20:58:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-16:/posts/2014/11/16/unit-statistics-system.html</guid><category>system</category></item><item><title>简约之美 &amp; 编写可读代码的艺术</title><link>http://www.wklken.me/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</link><description>&lt;p&gt;最近陆续收到一些donation, 非常感谢哈, blog的文章说多不多说少不少, 大部分是笔记性质的, 主要目的还是积累以及方便自己查询回顾, 分享出来, 希望有所帮助:)&lt;/p&gt;
&lt;p&gt;ps: 昨天将国内ip切到gitcafe了, 加载速度应该快了很多, 在此特别感谢下&lt;a href="https://gitcafe.com/"&gt;gitcafe&lt;/a&gt;. (关于如何国内国外切分访问, google大法)&lt;/p&gt;
&lt;p&gt;今天要提的是&amp;lt;&amp;lt;简约之美—软件设计之道&amp;gt;&amp;gt; 以及 &amp;lt;&amp;lt;编写可读代码的艺术&amp;gt;&amp;gt;, 主要原因是, 经典, 更重要的是, 足够薄:), 建议买了珍藏, 也是属于那种不同时期反复读会有不同感受的书&lt;/p&gt;
&lt;p&gt;———————————&lt;/p&gt;
&lt;h2 id="jian-yue-zhi-mei"&gt;简约之美&lt;/h2&gt;
&lt;p&gt;这本书, 用一百页来说明, 软件开发设计中, 一些十分简单的道理.&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/code-simplicity.jpg"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好的程序员和差的程序员的区别在于理解能力. 差劲的程序员不理解自己做的事情, 优秀的程序员则相反. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;理解能力&lt;/code&gt;, 看起来蛮虚的一个词, 但是在工作中真正进行沟通时, 你会发现区别非常大, 决定了是&lt;code&gt;一次沟通&lt;/code&gt; 还是 &lt;code&gt;反复沟通&lt;/code&gt;; 是&lt;code&gt;直达目标&lt;/code&gt;, 还是&lt;code&gt;不断曲折&lt;/code&gt;; 是一次&lt;code&gt;搞定&lt;/code&gt;, 还是&lt;code&gt;改改改&lt;/code&gt;; 是 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-16:/posts/2014/11/16/code-simplicity-and-the-art-of-readable-code.html</guid><category>books</category></item><item><title>重读Rework</title><link>http://www.wklken.me/posts/2014/11/09/rework.html</link><description>&lt;p&gt;忙碌了一段时间, 终于迎来了久违的周末.&lt;/p&gt;
&lt;p&gt;时间过得很快, 入职快三个月了, 很忙但很充实, 带来的影响是, 时间少了, 读书和写 blog 的进度随之放缓, 但是积累了很多笔记.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;Rework&amp;gt;&amp;gt;&lt;/code&gt;这本书, 是&lt;code&gt;37signals&lt;/code&gt;三本本书中的第二本, 读过很多遍了, 短小精悍, 但是每次重读都会有一些不同的收获, 建议买一本珍藏:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/rework.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;以下是一些摘录和自己的看法, 仅供参考&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一些自己喜欢的事情并从中获得些回报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要思考下自己目前的工作, 是否符合这一点? 如果是, 那就继续努力做好, 如果不是, 就需要思考下, 自己喜欢做什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种普遍的错误认知是: 人要从错误中吸取经验教训.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要学会从错误中吸取经验, 这句话是没错的, 不断尝试, fail fast, 然后得到一些东西, 这也是没问题的. 但是, 不要认为, 不断从错误中吸取教训就能获得成功. 就像通关游戏有一千个坑, 你或许可以一个个试, 然后一次学到一些东西, 但是....有没有想过, 失败不是成功的先决条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你更应该从成功中汲取养分.成功才是真正靠得住的教材 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-11-09:/posts/2014/11/09/rework.html</guid><category>books</category></item><item><title>Vim相关资源</title><link>http://www.wklken.me/posts/2014/10/03/vim-resources.html</link><description>&lt;h1 id="vimzi-yuan-lie-biao"&gt;Vim资源列表&lt;/h1&gt;
&lt;p&gt;之前在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 的readme中写了很多, 本次更新8.0版本后, 对其进行了梳理, 感觉放那并不合适, 所以迁过来这边:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .----------------.  .----------------.  .----------------.
    | .--------------. || .--------------. || .--------------. |
    | | ____   ____  | || |     _____    | || | ____    ____ | |
    | ||_  _| |_  _| | || |    |_   _|   | || ||_   \  /   _|| |
    | |  \ \   / /   | || |      | |     | || |  |   \/   |  | |
    | |   \ \ / /    | || |      | |     | || |  | |\  /| |  | |
    | |    \ ' /     | || |     _| |_    | || | _| |_\/_| |_ | |
    | |     \_/      | || |    |_____|   | || ||_____||_____|| |
    | |              | || |              | || |              | |
    | '--------------' || '--------------' || '--------------' |
    '----------------'  '----------------'  '----------------'
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan-ku"&gt;资源库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://u.memect.com/vim/"&gt;memect vim资源汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/communities/105049811056605918816"&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/vim/"&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimawesome.com/"&gt;插件库 vimawsome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimcolors.com/"&gt;主题库 vim colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openvim.com/tutorial.html"&gt;openvim tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vimgenius.com/"&gt;vim genius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://inside.github.io/vim-presentation/#/"&gt;一个很赞的ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tips"&gt;Tips …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-10-03:/posts/2014/10/03/vim-resources.html</guid><category>vim</category></item><item><title>Python 源码阅读 - dict</title><link>http://www.wklken.me/posts/2014/08/11/python-source-dict.html</link><description>&lt;p&gt;基本类型实现的最后一篇, 先告一段落, 专心找工作去......搞定工作后再开始扫后面的&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/dictobject.h"&gt;Include/dictobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/dictobject.c"&gt;Objects/dictobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectde-cun-chu-ce-lue"&gt;PyDictObject的存储策略&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 使用散列表进行存储

2. 使用开放定址法处理冲突

    2.1 插入, 发生冲突, 通过二次探测算法, 寻找下一个位置, 直到找到可用位置, 放入(形成一条冲突探测链)

    2.2 查找, 需要遍历冲突探测链

    2.3 删除, 如果对象在探测链上, 不能直接删除, 否则会破坏整个结构(所以不是真的删)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 hash表的 &lt;a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ji-ben-jian-zhi-pydictentry"&gt;基本键值PyDictEntry&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    Py_ssize_t me_hash;
    PyObject *me_key;
    PyObject *me_value;
} PyDictEntry;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-11:/posts/2014/08/11/python-source-dict.html</guid><category>python</category></item><item><title>Python 源码阅读 - tuple</title><link>http://www.wklken.me/posts/2014/08/10/python-source-tuple.html</link><description>&lt;p&gt;还差一篇......写完写简历&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; b = ()
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = (1, )
&amp;gt;&amp;gt;&amp;gt; b = (1, )
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/tupleobject.h"&gt;Include/tupleobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/tupleobject.c"&gt;Objects/tupleobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="jie-gou"&gt;结构&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD
    PyObject *ob_item[1];

} PyTupleObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyTupleObject在底层是个变长对象(需要存储列表元素个数).
虽然, 在python中, tuple是不可变对象

2. PyObject *ob_item[1];
指向存储元素的数组

3 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Aug 2014 17:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-tuple.html</guid><category>python</category></item><item><title>Python 源码阅读 - list</title><link>http://www.wklken.me/posts/2014/08/10/python-source-list.html</link><description>&lt;p&gt;还剩 tuple 和 dict就把几个基本类型写完了, 然后歇歇先找工作&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/listobject.h"&gt;Include/listobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/listobject.c"&gt;Objects/listobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ding-yi"&gt;定义&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD

    PyObject **ob_item;

    Py_ssize_t allocated;
} PyListObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyListObject是变长对象

2. PyObject **ob_item;
指向列表元素的指针数组, list[0] 即 ob_item[0]

3. Py_ssize_t allocated;
allocated列表分配的空间, ob_size为已使用的空间
allocated 总的申请到的内存数量
ob_size 实际使用内存数量

等式:

    0 &amp;lt;= ob_size &amp;lt;= allocated
    len(list …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-list.html</guid><category>python</category></item><item><title>Python 源码阅读 - string</title><link>http://www.wklken.me/posts/2014/08/08/python-source-string.html</link><description>&lt;p&gt;本周进展不大(去掉北上, 选择余地太小了), 下周开始投简历:(&lt;/p&gt;
&lt;p&gt;这一章, 就一张图, 代码比较多&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pystringobject"&gt;PyStringObject&lt;/h1&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/stringobject.h"&gt;Include/stringobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/stringobject.c"&gt;Objects/stringobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
  PyObject_VAR_HEAD
  long ob_shash;
  int ob_sstate;
  char ob_sval[1];

  /* Invariants:
   *     ob_sval contains space for 'ob_size+1' elements.
   *     ob_sval[ob_size] == 0.
   *     ob_shash is the hash of the string or -1 if not computed yet …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 08 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-08:/posts/2014/08/08/python-source-string.html</guid><category>python</category></item><item><title>Python 源码阅读 - int</title><link>http://www.wklken.me/posts/2014/08/06/python-source-int.html</link><description>&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;代码我也仅仅是粗粗读了一遍, 可能出现疏漏和理解错误, 发现了望指出哈.&lt;/p&gt;
&lt;p&gt;今天面了一家靠谱的创业公司, 可惜不是Python向的, 想继续玩Python是有代价的, 选择余地太窄了......&lt;/p&gt;
&lt;p&gt;话说写文章很耗时间, 这个花了两个多小时....主要还是自个绘图渣效率低:(&lt;/p&gt;
&lt;p&gt;准备找工作事宜很占时间, 后面只能慢慢来了(好像还很多很多的样子)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 1
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; c = 257
&amp;gt;&amp;gt;&amp;gt; d = 257
&amp;gt;&amp;gt;&amp;gt; id(c) == id(d)
False

#在python2.x中, 对于大的序列生成, 建议使用xrange(100000) 而不是range(100000), why?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/intobject.h"&gt;Include/intobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/intobject.c"&gt;Objects/intobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pyintobject"&gt;PyIntObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-06:/posts/2014/08/06/python-source-int.html</guid><category>python</category></item><item><title>Python 源码阅读 - 类型</title><link>http://www.wklken.me/posts/2014/08/05/python-source-type.html</link><description>&lt;p&gt;这篇主要涉及Python对象的类型机制&lt;/p&gt;
&lt;p&gt;有点绕, 一定要思维清晰的时候再看哦:)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;一个例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; a
1

&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'int'&amp;gt;

#等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(a))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(int)
&amp;lt;type 'type'&amp;gt;

#还是等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(type(a)))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(type(int))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们反向推导一个&lt;code&gt;int&lt;/code&gt;对象是怎么生成的.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-shou-xian-ding-yi-yi-chong-lei-xing-jiao-pytypeobject"&gt;1. 首先, 定义一种类型叫PyTypeObject&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/object.h"&gt;Include/object.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; typedef struct _typeobject {

  /* MARK: base …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 Aug 2014 19:31:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-type.html</guid><category>python</category></item><item><title>Python 源码阅读 - 对象</title><link>http://www.wklken.me/posts/2014/08/05/python-source-object.html</link><description>&lt;p&gt;结束休息期, 开始准备面试事宜了, 发现要准备的东西好多(╯‵□′)╯︵┻━┻,  顺手整理下Python源码阅读笔记(力争在写完前找到工作)&lt;/p&gt;
&lt;p&gt;参考内容: Python源码 + &lt;code&gt;&amp;lt;&amp;lt;Python源码剖析&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;源代码+说明+图解&lt;/code&gt;的方式, 尽量说明白吧, 有一份注释在github上&lt;/p&gt;
&lt;p&gt;内容:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; 对象/类型
-&amp;gt; 各种内建类型对象及机制
-&amp;gt; 虚拟机相关(编译及执行)
-&amp;gt; 内存管理/动态加载/多线程等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: 画图的话google doc很好用&lt;/p&gt;
&lt;p&gt;好的, 第一篇开始&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;一切皆为对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象, 在C语言是如何实现的?&lt;/p&gt;
&lt;p&gt;Python中对象分为两类: 定长(int等), 非定长(list/dict等)&lt;/p&gt;
&lt;p&gt;所有对象都有一些相同的东西, 源码中定义为&lt;code&gt;PyObject&lt;/code&gt;和&lt;code&gt;PyVarObject&lt;/code&gt;, 两个定义都有一个共同的头部定义&lt;code&gt;PyObject_HEAD&lt;/code&gt;(其实PyVarObject有自己的头部定义&lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt;, 但其实际上用的也是&lt;code&gt;PyObject_HEAD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;源码位置 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 Aug 2014 17:32:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-object.html</guid><category>python</category></item><item><title>Python后端相关技术/工具栈</title><link>http://www.wklken.me/posts/2014/07/26/python-tech-stack.html</link><description>&lt;p&gt;整理下目前涉及到的python的技术栈和工具栈(用过或了解的, 其他的后续用到再补充)&lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="/imgs/python/python-logo.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见: vim / &lt;a href="http://www.sublimetext.com/2"&gt;SublimeText2&lt;/a&gt; / &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim有兴趣可以看看 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 适合Python/Golang开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境
pip/easy_install 包管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;viertualenv&lt;/a&gt; + &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 库/版本管理, 环境隔离&lt;/p&gt;
&lt;p&gt;ipython/ipdb&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 框架
Python 的Web 框架非常多......&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人偏好[有分先后]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt; 轻量! 可以灵活组合各类组件进行开发(第三方组件很丰富), 简单高效, 便于快速开发和维护.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tornadoweb.org/en/stable/"&gt;tornado&lt;/a&gt; 异步, 高性能, 最新版本4.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; 有些重, 配置和约定众多, 可以快速开发一些"管理"性质的后台, 其版本更新非常快&lt;/p&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;bottle …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-07-26:/posts/2014/07/26/python-tech-stack.html</guid><category>python</category></item><item><title>读书笔记-软件测试的艺术</title><link>http://www.wklken.me/posts/2014/07/26/the-art-of-software-testing.html</link><description>&lt;p&gt;这本书是三年前毕业时读的, 毕业时的职位是"测试开发工程师".&lt;/p&gt;
&lt;p&gt;好吧, 这本书年龄比我还大:), 毕业那会绝版了, 读的是电子版的. 前阵子看到有在卖就买了一本珍藏, 最近重读了一遍.&lt;/p&gt;
&lt;p&gt;可以作为测试入门读本.(测试界的经典书籍), 摘录一些, 一些关键字感兴趣可以自己google.&lt;/p&gt;
&lt;p&gt;&lt;img alt="software-test" src="/imgs/books/the-art-of-software-testing.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;好吧, 在很多人眼里, 测试只是点点鼠标等没技术含量的工作, 干开发干不了才干测试. But, 这个观点是错误的, 测试还是非常博大精深的, 要求还是非常高的(需要懂各类语言, 需要写各种代码, 需要懂各种业务, 需要懂各类场景, 需要项目管理, 需要......).&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;什么是软件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓软件测试, 就是一个过程或一系列过程, 用来确认计算机代码完成了其应该完成的功能, 不执行其不该有的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意后半段.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的心理学&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是为了发现错误而执行的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人的行为总是倾向于具有高度目的性. 所以需要将目标定为: 证明程序中存在错误(某些情况下, 测试人员的态度可能比实际的测试过程本身还重要)&lt;/p&gt;
&lt;p&gt;所以, 要假设测试的程序是存在错误的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件测试的原则
(直接摘录了, 很多观点值得借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;编号&lt;/th&gt;
&lt;th align="left"&gt;原则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;测试用例中一个必需部分是对预期输出或结果进行定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-07-26:/posts/2014/07/26/the-art-of-software-testing.html</guid><category>books</category></item><item><title>千里行纪&amp;工作三周年小结</title><link>http://www.wklken.me/posts/2014/07/22/summary-09-longjourney-and-three-years.html</link><description>&lt;p&gt;旅行结束好几天了, 狂睡了一天, 刷了三天书(打算把之前没看的看咯), 花一下午去仲裁(囧)......突然想想, 该写写了, 合着之前拖了两周的三周年小结一起.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding-life" src="/imgs/life/coding-life.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="qian-li-xing-ji"&gt;千里行纪&lt;/h2&gt;
&lt;p&gt;7月4日, 毕业工作三周年(三年前的7月4日, 在杭州, 入职第一天), 刚好, 也在不久前正式离职, 还没想好去做什么, 还有些问题没有想清楚, 所以选择出去走走.&lt;/p&gt;
&lt;p&gt;第一站杭州, 打算随走随玩, 无计划无时限, 一路北上, 走完一站再想下一站去哪, 累了就打道回府.&lt;/p&gt;
&lt;p&gt;然后, 带着一个kindle, 一本笔记, 一个背包, 出发.&lt;/p&gt;
&lt;p&gt;最终, 7月4日出发, 17日归, 从深圳, 动车到达杭州, 然后汽车转战安徽, 西递+黄山, 然后去了趟南京, 再转高铁到济南, 回学校逛了逛, 觉得累了, 买了张机票飞回来, 好好地睡了一整天.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;步数&lt;/th&gt;
&lt;th&gt;公里&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-07-22:/posts/2014/07/22/summary-09-longjourney-and-three-years.html</guid><category>总结</category></item><item><title>简单搜索系统组成总结</title><link>http://www.wklken.me/posts/2014/06/09/search-system.html</link><description>&lt;p&gt;最近在进行离职前交接工作了, 对之前做的一些东西也大概进行了下简单总结.&lt;/p&gt;
&lt;p&gt;今天整理了下, 搜索系统组成简要描述, 一些思想, 不涉及太多具体实现.&lt;/p&gt;
&lt;p&gt;这套系统从开始设计到最终完成, 前前后后花了3个月的样子(计算所有时间投入), 也算是做得感觉比较完善的一套系统.&lt;/p&gt;
&lt;p&gt;上线接近一年, 支持快玩游戏搜索业务(快玩盒子/快玩网站/移动端等), 系统每天百万级的搜索(峰值在250w左右, 应用层两台机器负载均衡, 单机核心层, 单机引擎), 很遗憾, 由于业务所限, 一直没有看到这套系统能支持的量上限, 即使在峰值, 核心层qps大概也才50左右, 预计搜索量到千万级应该没什么压力, 当然, 优化的余地还很多.&lt;/p&gt;
&lt;p&gt;外面正在狂风骤雨, 开始吧&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="mu-biao"&gt;目标&lt;/h3&gt;
&lt;p&gt;当系统数据达到一定量时, 搜索就成为了除类目以外的第二大入口.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更好的搜索结果(指标: 召回率, 转化率, 排序效果)&lt;/li&gt;
&lt;li&gt;更好的用户体验(下拉提示点击率,相关搜索准确率等)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="sou-suo-liu-cheng"&gt;搜索流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用户在输入框输入关键词, 此时输入框会下拉提示一些词, 用户可以选择进行搜索&lt;/li&gt;
&lt;li&gt;用户点击, 进行搜索, 前端调用搜索接口&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3 …&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 09 Jun 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-06-09:/posts/2014/06/09/search-system.html</guid><category>system</category></item><item><title>JavaScript学习补充</title><link>http://www.wklken.me/posts/2014/05/25/Learning-JavaScript.html</link><description>&lt;p&gt;以下笔记全部摘录和整理(缩减)自互联网文章, 太多了已然没法找到对应作者, 在此感谢分享者&amp;gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="js-advance" src="/imgs/front/js-advance.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="null-he-undefined"&gt;null 和 undefined&lt;/h3&gt;
&lt;p&gt;Undefined相当于一个变量并没有明确的被赋值(是否被赋值, 可能无心忽略, 逻辑问题)
JS的怪异之处就在于undefined真的是一个可以使用的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; var foo;
&amp;gt; foo
undefined
同理，当缺失参数时 JavaScript 会分配一个 undefined：

&amp;gt; function id(x) { return x }
&amp;gt; id()
undefined

a = 1;
a !== undefined // true

a = undefined
var b
a === b //true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Null相当于变量被明确指定了没有值，而不是由于意外的原因被忽略掉了(赋值null, 正当逻辑)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与运算&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS的null如果进入运算，真的会被解析成为0或false：&lt;/p&gt;
&lt;p&gt;(1 + null …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 25 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-05-25:/posts/2014/05/25/Learning-JavaScript.html</guid><category>javascript</category></item><item><title>我的mac app列表</title><link>http://www.wklken.me/posts/2014/05/24/my-mac-app-list.html</link><description>&lt;hr/&gt;
&lt;p&gt;我曾经说过, 买mac是2013年自己做的最正确的决定之一&lt;/p&gt;
&lt;p&gt;转眼一年多过去了, mac为我节省的时间,带来的便捷,以及给自己工作和生活带来的变化是没法估量的&lt;/p&gt;
&lt;p&gt;整理下自己app列表, 瞅了下连带系统自带的一共125个app&lt;/p&gt;
&lt;p&gt;&lt;img alt="myapps" src="/imgs/resources/my-apps.jpeg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xiao-lu"&gt;效率&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Alfred 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;神器,不解释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEVONthink Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源素材收集整理分类, 知识管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OmniFocus Pro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GTD&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vitanmin-R 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;番茄时间工作法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BetterTouchTool&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;触控板/鼠标功能扩展&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keyboard Maestro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;键盘大师, 门槛较高&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aText&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键字扩展 (准备尝试TextExpander)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Moom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;窗口管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ClipMenu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剪贴板&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PopClip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类iphone选中工具,拥有很多给力的插件,例如打开选中下的链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1Password 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;密码管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bartender&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MenuBar管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HyperSwitch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好的切换工具(better than …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 24 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-05-24:/posts/2014/05/24/my-mac-app-list.html</guid><category>mac</category></item><item><title>读书笔记--你就是极客!软件开发人员生存指南</title><link>http://www.wklken.me/posts/2014/05/03/BeingGeek.html</link><description>&lt;p&gt;BeingGeek:The Software Developer's Carrer Handbook&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/being-geek.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;五一三天,读完五本书.....这本算是重读&lt;/p&gt;
&lt;p&gt;写作风格类似&amp;lt;黑客与画家&amp;gt;&lt;/p&gt;
&lt;p&gt;10分标准,打个7.5&lt;/p&gt;
&lt;p&gt;个人职业生涯面临的种种境遇和问题:跳槽,面试,管理,招聘,危机处理,沟通,合作,团队建设,演讲,绩效考核等,甚至还有一篇是专门写给我们背后的支持者的(例如女朋友,如果有的话.....).&lt;/p&gt;
&lt;p&gt;书上关于 团队管理,沟通,换工作的几章,可以重点看下&lt;/p&gt;
&lt;p&gt;里面包含了很多观点,隔一段时间来重看认识会有不同,摘录几点.....算是读书摘要吧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;阅读时,要不断重复3个问题(明确方向)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.我正在做什么?
2.我真正想做的是什么?
3.我在乎的是什么?我关心的是什么?
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhi-sheng-zhi-dao"&gt;致胜之道&lt;/h3&gt;
&lt;p&gt;系统思维:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们寻找 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 03 May 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-05-03:/posts/2014/05/03/BeingGeek.html</guid><category>books</category></item><item><title>后端不高兴——关于协作和沟通</title><link>http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html</link><description>&lt;p&gt;==================&lt;/p&gt;
&lt;p&gt;再过两月毕业三周年，回顾一下，突然想起了一些问题，顺手记录一下&lt;/p&gt;
&lt;p&gt;选择后端的原因之一，代码写得好一些，然后改需求的时候，刷刷刷改几行代码发布，然后泡杯茶站在前端同学后面看他们苦逼地改页面:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhappy" src="/imgs/blabla/unhappyface.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工作那么久，逐渐变得“冷血”，要学会说no，学会排期，学会去“降低”一些人的期望甚至是“无情”扼杀，所以或许初次合作会给人一种不“友好”的印象。&lt;/p&gt;
&lt;p&gt;但是在“友好”和“效率”，我选择了后者，记得当初很菜很菜的时候，我还是很“友好”的。(妈蛋，一天要处理N多问题，跟运营运维产品前端测试等等沟通，还得挤时间码代码测试发布上线，只能高效至上了)&lt;/p&gt;
&lt;p&gt;不扯了，归正题，聊一些平时沟通合作遇到的问题&lt;/p&gt;
&lt;p&gt;PS:这里后端偏指服务端开发，当然，问题普适于各个角色&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-wen-wen-ti-de-fang-shi"&gt;1. 问问题的方式&lt;/h3&gt;
&lt;p&gt;之前在微博看见人说过的一个现象，再次提一下&lt;/p&gt;
&lt;p&gt;假如有人找你咨询一个问题&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A: 在 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 24 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-04-24:/posts/2014/04/24/unhappy-about-cooperation-and-communication.html</guid><category>blabla</category></item><item><title>JavaScript一站式入门笔记</title><link>http://www.wklken.me/posts/2014/04/20/javascript-base.html</link><description>&lt;p&gt;&lt;img alt="封面" src="/imgs/front/javascript.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;大二开始接触的javascript，到现在，五年过去了，中间断断续续用了一些，但是主要是搞后端的，没有正儿八经“学习”一下。&lt;/p&gt;
&lt;p&gt;对其了解不成系统，最近做了一个系统涉及前端框架，所以借此机会学习总结了下。&lt;/p&gt;
&lt;p&gt;入门笔记，非初学者可以绕道哈:)&lt;/p&gt;
&lt;p&gt;后续打算深入学习一下，顺带去玩玩node.js&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考教程&lt;/p&gt;
&lt;p&gt;入门: 【已完成】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitbookio.github.io/javascript/"&gt;gitbook javascript教程&lt;/a&gt; 【简单】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3school.com.cn/js/index.asp"&gt;w3cschool教程&lt;/a&gt; 【简单，较全】&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.jquery.com/javascript-101/"&gt;Jquery:JavaScript101&lt;/a&gt; 【质量高】&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learn-javascript-tutorial.com/"&gt;JavaScript Tutorial&lt;/a&gt; 【全面，不错】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进阶：【待阅读】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ejohn.org/apps/learn"&gt;Learning Advanced JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;javascript资料大全-superherojs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jstherightway.org/"&gt;javascript the right way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript 权威指南&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：笔记全部来自于以上资料&lt;/p&gt;
&lt;h2 id="mu-lu"&gt;目录&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 第一部分 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 20 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-04-20:/posts/2014/04/20/javascript-base.html</guid><category>javaScript</category></item><item><title>Vim技巧补充</title><link>http://www.wklken.me/posts/2014/04/13/vim-addition-skills.html</link><description>&lt;p&gt;读了一些文章，重新理一理，大部分是平常操作中容易忽视的,很容易忘了其实还可以这么干&lt;/p&gt;
&lt;h3 id="text-object"&gt;Text Object&lt;/h3&gt;
&lt;p&gt;y/d/c + text-object-operation&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    * iw …inner word
    * aw …a word
    * iW …inner WORD
    * aW …a WORD

    * is …inner sentence
    * as …a sentence

    * ip …inner paragraph
    * ap …a paragraph

    -------------------------

    * i( or i) …inner block
    * a( or a) …a block
    * i&amp;lt; or i&amp;gt; …inner block
    * a …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-04-13:/posts/2014/04/13/vim-addition-skills.html</guid><category>vim</category><category>linux</category></item><item><title>读书笔记--高效能人士的七个习惯+执行4原则</title><link>http://www.wklken.me/posts/2014/03/30/highly-effective-and-execution.html</link><description>&lt;p&gt;今天打算写的是，关于两本“成功学”的书&lt;/p&gt;
&lt;p&gt;《高效能人士的七个习惯》和《高效能人士的执行4原则》&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面1" src="/imgs/books/the-7-habits-of-highly-effective-people.jpg"/&gt;
&lt;img alt="封面2" src="/imgs/books/the-4-disciplines-of-execution.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;一直以来对“成功学”都不感冒，“虚”，“扯淡”，“毫无意义”，一直没搞明白为什么那么多人，会专门去花费大量金钱学习和研究这些东西&lt;/p&gt;
&lt;p&gt;以前不感冒，当然，现在也是，一如既往&lt;/p&gt;
&lt;p&gt;以上两本书，一本书是刚毕业那会部门老大推荐的，跳槽之后，新的老大也推了这本书，所以从书堆里翻出来，认认真真地看完了（很惊讶走了那么多地方书还能留着），后面一本是亚马逊kindle上捞到的。&lt;/p&gt;
&lt;p&gt;这两本，算是成功学，也不算，很多东西讲到了点上，有些道理，认同，也会去遵循&lt;/p&gt;
&lt;p&gt;值得一看，能从中能借鉴一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="gao-xiao-neng-ren-shi-de-qi-ge-xi-guan"&gt;高效能人士的七个习惯&lt;/h2&gt;
&lt;p&gt;&lt;img alt="主要概念图1" src="/imgs/books/the-7-habits-of-highly-effective-people-concepts.jpg"/&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;习惯一：积极主动——个人愿景的原则
习惯二：以终为始——自我领导的原则
习惯三：要事第一——自我管理的原则
习惯四：双赢思维——人际领导的原则
习惯五 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-30:/posts/2014/03/30/highly-effective-and-execution.html</guid><category>books</category></item><item><title>Golang笔记-06-struct</title><link>http://www.wklken.me/posts/2014/03/09/06-struct.html</link><description>&lt;h3 id="struct"&gt;struct&lt;/h3&gt;
&lt;p&gt;struct，一组字段的集合，类似其他语言的class&lt;/p&gt;
&lt;p&gt;放弃了大量包括继承在内的面向对象特性，只保留了组合(composition)这个最基础的特性&lt;/p&gt;
&lt;h4 id="1sheng-ming-ji-chu-shi-hua"&gt;1.声明及初始化&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type person struct {
    name string
    age  int
}

//初始化

func main() {
    var P person

    P.name = "tom"
    P.age = 25
    fmt.Println(P.name)

    P1 := person{"Tom1", 25}
    fmt.Println(P1.name)

    P2 := person{age: 24, name: "Tom"}
    fmt.Println(P2 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 09 Mar 2014 06:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-09:/posts/2014/03/09/06-struct.html</guid><category>golang</category></item><item><title>读书笔记——我编程，我快乐</title><link>http://www.wklken.me/posts/2014/03/08/the-passionate-programmer.html</link><description>&lt;p&gt;这是读到的第四本和37signals有联系的书&lt;/p&gt;
&lt;p&gt;春节在回家的动车上读完的(飞机火车阅读效率加成&amp;gt;_&amp;lt;)，有些收获，今天翻出来重读了一次&lt;/p&gt;
&lt;p&gt;一系列观点和方法论，很多还是值得借鉴和思考的&lt;/p&gt;
&lt;p&gt;记录观点以及自己一两句话的总结整理&lt;/p&gt;
&lt;p&gt;这本书还是值得一读的，建议入手&lt;/p&gt;
&lt;p&gt;PS:年后买纸质书需三思再三思，开始多读电子书吧&lt;/p&gt;
&lt;p&gt;简而言之:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选好技术和领域: 通才和专家
2.跟上潮流
3.学会更好更高效地工作：目标，计划，沟通，协作，写作，执行力....很多（重点）
4.避免思维僵固
5.写博客
6.维护自己的开源项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/passionate-programmer.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;帮你成就更卓越、更有意义的人生，工作只是其中的一部分&lt;/p&gt;
&lt;p&gt;如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活&lt;/p&gt;
&lt;p&gt;制定自己的计划&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.选择市场——关注的技术和商业领域
2.投资——知识和技术
3.执行 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 08 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-08:/posts/2014/03/08/the-passionate-programmer.html</guid><category>books</category></item><item><title>Golang笔记-05-函数</title><link>http://www.wklken.me/posts/2014/03/02/05-func.html</link><description>&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;p&gt;Go语言里面的核心设计，通过关键字func来声明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func funcName(input type1, input2 type2) (output1 type1, output2 type2) {
    //logical code
    return value1, value2
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ji-ben-yu-fa"&gt;基本语法&lt;/h3&gt;
&lt;p&gt;1.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//一般函数
func func_name(a int) {
    println(a)
}

//多参数，无返回值
func func_name(a, b int, c string) {
    println(a, b, c)
}

//单个返回值
func func_name(a, b int) int { //同类型，可以省略 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 05:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/05-func.html</guid><category>golang</category></item><item><title>Golang笔记-04-array/slice/map</title><link>http://www.wklken.me/posts/2014/03/02/04-data-structure.html</link><description>&lt;h3 id="yi-array"&gt;一.Array&lt;/h3&gt;
&lt;p&gt;在Go语言中，数组是一个值类型(value type)&lt;/p&gt;
&lt;p&gt;所有的值类型变量在赋值和作为参数传递时都将产生一个复制动作&lt;/p&gt;
&lt;p&gt;如果作为函数的参数类型，则在函数调用时参数发生数据复制，在函数体中无法修改传入数组的内容&lt;/p&gt;
&lt;p&gt;数组相等用 = != 比较，不能用 &amp;lt; &amp;gt;&lt;/p&gt;
&lt;h4 id="1sheng-ming-fu-zhi"&gt;1.声明&amp;amp;赋值&lt;/h4&gt;
&lt;p&gt;初始化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;语法&lt;/span&gt;
&lt;span class="x"&gt;var VarName [n]type     // n&amp;gt;=0&lt;/span&gt;

&lt;span class="x"&gt;e.g.&lt;/span&gt;
&lt;span class="x"&gt;var a [5]int //[0 0 0 0 0]&lt;/span&gt;
&lt;span class="x"&gt;var c [2][3]int //二维&lt;/span&gt;

&lt;span class="x"&gt;var b int = [5]int{1,2,3,4 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 04:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/04-data-structure.html</guid><category>golang</category></item><item><title>Golang笔记-03-控制流</title><link>http://www.wklken.me/posts/2014/03/02/03-control-flow.html</link><description>&lt;p&gt;控制结构分为： 条件+选择+循环&lt;/p&gt;
&lt;h3 id="if"&gt;IF&lt;/h3&gt;
&lt;p&gt;1.说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;条件表达式没有括号
支持一个初始化表达式（可以是多变量初始化语句）
初始化语句中定义的都是只能在block级别中使用的局部变量，不能在block之外使用
左大括号必须和条件语句在同一行(必须与if/else在同一行)
go没有三元运算符

if判断语句条件不需要括号
在判断语句里卖弄允许声明一个变量，其作用域只在逻辑块内，其他地方不起作用
花括号一定存在，且必须与if/else在同一行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//基本
if a &amp;gt; 0 {  //无括号
     dosomething()
} else if a == 0 { //必须用花括号
     doothertings()
} else {
     donothing()
}

//单行模式
if a &amp;gt; 0 { a += 100 } else { a -= 100 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.示例 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 03:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/03-control-flow.html</guid><category>golang</category></item><item><title>Golang笔记-02-类型、变量、常量</title><link>http://www.wklken.me/posts/2014/03/02/02-type-var-const.html</link><description>&lt;h3 id="ji-ben-lei-xing"&gt;基本类型&lt;/h3&gt;
&lt;p&gt;1.基本类型列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;类型&lt;/span&gt;        &lt;span class="err"&gt;长度&lt;/span&gt;     &lt;span class="err"&gt;说明&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;默认&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;不能把非&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;值当做&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;不用数字代表&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;byte&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="nx"&gt;uint8&lt;/span&gt; &lt;span class="err"&gt;别名&lt;/span&gt;
&lt;span class="nx"&gt;rune&lt;/span&gt;         &lt;span class="mi"&gt;4&lt;/span&gt;      &lt;span class="nx"&gt;int32&lt;/span&gt;&lt;span class="err"&gt;别名。&lt;/span&gt; &lt;span class="err"&gt;代表一个&lt;/span&gt;&lt;span class="nx"&gt;unicode&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;
&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;unit&lt;/span&gt;            &lt;span class="err"&gt;一来所运行的平台，&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;
&lt;span class="nx"&gt;int8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
&lt;span class="nx"&gt;int16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;uint16&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32768&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;32767 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 02:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/02-type-var-const.html</guid><category>golang</category></item><item><title>Golang笔记-01-简介</title><link>http://www.wklken.me/posts/2014/03/02/01-intro.html</link><description>&lt;h3 id="goyu-yan-zui-zhu-yao-de-te-xing"&gt;Go语言最主要的特性&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;自动垃圾回收
更丰富的内置类型
函数多返回值
错误处理
匿名函数和闭包
类型和接口
并发编程
反射
语言交互性

高性能/高效开发
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;p&gt;安装说明 &lt;a href="http://golang.org/doc/install"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;包下载 &lt;a href="https://code.google.com/p/go/downloads/list"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;确认是否安装成功&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;go version //查看版本
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huan-jing-bian-liang-she-zhi"&gt;环境变量设置&lt;/h3&gt;
&lt;h3 id="zheng-ti-mu-lu-jie-gou"&gt;整体目录结构&lt;/h3&gt;
&lt;p&gt;通过package组织，只有package名称为main的可以包含main函数&lt;/p&gt;
&lt;p&gt;一个程序有且仅有一个main包&lt;/p&gt;
&lt;p&gt;通过import 关键字导入其他非main包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/
    |- mathapp
pkg/
    |- 平台名
        |- xxx.a
src/
    |- mathapp
        |- main.go
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;Helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;声明文件的&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fmt"&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;包，不能包含没有用到的包，否则而编译错误&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;func …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 01:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/01-intro.html</guid><category>golang</category></item><item><title>读书笔记——写给大家看的设计书</title><link>http://www.wklken.me/posts/2014/03/02/the-non-designers-design-book.html</link><description>&lt;p&gt;&lt;img alt="cover" src="/imgs/books/design-book.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对设计，知之甚少，战5渣&lt;/p&gt;
&lt;p&gt;读到这本书，感觉蛮有收获的，起码会有一个基本的设计意识和概念，有些作用&lt;/p&gt;
&lt;p&gt;这本书主要围绕设计的四个基本原则展开说明，有详细的说明和对比案例&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="she-ji-yuan-ze"&gt;设计原则&lt;/h3&gt;
&lt;p&gt;得到优秀的设计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.学习四大基本原则
2.认识到自己没有运用这些原则
3.应用基本原则
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="1qin-mi-xing"&gt;1.亲密性&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;将相关项目组织在一起：移动这些项，使它们的物理位置互相靠近。
相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段

亲密性意味着存在关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，人们查看时的视觉感受，顺序(视线如何移动的，起点-路径-结束)、停留、重点。将有很近的亲密性的多个项目放一起，成为一个视觉单元&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应当有关联
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;亲密性也同时意味着，对非亲密项进行隔离（利用空白、线、图等）,使孤立&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;位置是否靠近可以体现出元素之间是否存在关系
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要对所有元素有一个分类组织的过程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲密性的根本目的是视线组织性(条理性)

条理，意味着更容易被阅读和记住
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要避免的问题 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-03-02:/posts/2014/03/02/the-non-designers-design-book.html</guid><category>books</category></item><item><title>Golang笔记-00-说明及资源</title><link>http://www.wklken.me/posts/2014/02/23/golang-base-intro.html</link><description>&lt;p&gt;&lt;img alt="golang" src="/imgs/golang/golang.png"/&gt;&lt;/p&gt;
&lt;p&gt;这份笔记是在学习golang过程中，汇集几本书以及网络视频、博客等资料汇总而成的，记录，方便查询&lt;/p&gt;
&lt;p&gt;已经基本完成，逐步发上来&lt;/p&gt;
&lt;h4 id="she-ji-nei-rong"&gt;涉及内容&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;说明-资源 done
基础知识 done
类型 - 常量 - 变量 - 运算符 done
控制流 done
数据结构：数组，切片，map done
函数 done
结构struct
接口
字符串
文件
异常处理
数学计算
并发
反射
正则
数据库
时间日期
配置文件
日志logging
json/xml文件处理
测试
项目及项目结构
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-yuan"&gt;资源&lt;/h4&gt;
&lt;p&gt;书籍：
    &lt;a href="https://github.com/astaxie/build-web-application-with-golang"&gt;Go web编程&lt;/a&gt;|
    &lt;a href="https://github.com/Unknwon/the-way-to-go_ZH_CN"&gt;Go 入门指南(The …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 23 Feb 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-02-23:/posts/2014/02/23/golang-base-intro.html</guid><category>golang</category></item><item><title>读书笔记——追随你的心，用思想改变世界</title><link>http://www.wklken.me/posts/2014/01/19/follow-your-heart.html</link><description>&lt;p&gt;乔布斯的十大演讲&lt;/p&gt;
&lt;p&gt;&lt;img alt="封面" src="/imgs/books/follow-your-heart.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;很喜欢封面的设计，这本书的纸质也很赞，摸起来蛮有质感的，书买了应该有两年了，一直带着，但是没怎么看&lt;/p&gt;
&lt;p&gt;今天又重新翻出来，书的边缘，已经有了岁月的痕迹，微微泛黄&lt;/p&gt;
&lt;p&gt;封面是乔帮主，还有那句经典的"Follow your heart"&lt;/p&gt;
&lt;p&gt;曾几何时，对帮主不是很了解，即使是帮主走的那年，12年十月，看了乔布斯传，对apple有了基本的认识&lt;/p&gt;
&lt;p&gt;12年后，逐渐的，变成了果粉，没有刻意去追求什么，只是，apple的产品，逐一进入的我的生活&lt;/p&gt;
&lt;p&gt;我曾经说过，买macbook是2013年最正确的决定之一，然后，运气爆表年会中了一个ipad air，变成了今年最幸运的事情之一。用了一天，下了多看,kindle,知乎，网易公开课，还有google浏览器，微博，pocket,evernote。以后不用抱着电脑累了，相信会为我的生活带来些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;整本书，看看第一章第二章即可&lt;/p&gt;
&lt;p&gt;第一章，语录 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-19:/posts/2014/01/19/follow-your-heart.html</guid><category>books</category></item><item><title>如何书写shell脚本</title><link>http://www.wklken.me/posts/2014/01/12/shell-script-base.html</link><description>&lt;p&gt;关于Linux基础命令，可以查看另一篇博文 &lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下内容，主要是，了解书写shell脚本所需要的大部分知识,主要内容来自于书籍和网络&lt;/p&gt;
&lt;p&gt;目的是，能快速书写出需要的shell脚本&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;p&gt;version 0.1 2014-01-12 基本内容, 完成度30%&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/shell.xml"&gt;google shell style guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/48717/"&gt;Linux Shell编程实战技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kodango.com/bash-pitfalls-part-1"&gt;Bash编程易犯的错误 1234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/16604/"&gt;关于shell脚本编程的10个最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bash.cumulonim.biz/BashPitfalls.html"&gt;Bash Pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-yi-xie-gai-nian"&gt;第一部分 一些概念&lt;/h2&gt;
&lt;p&gt;标准IO&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文件描述符
0 标准输入 默认键盘
1 标准输出 默认终端
2 标准错误 默认终端
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; 输出重定向
&amp;gt;&amp;gt; 追加到输出重定向
&amp;lt; 输入重定向
&amp;lt;&amp;lt; 追加到输入重定向

ls …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 12 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-12:/posts/2014/01/12/shell-script-base.html</guid><category>linux</category></item><item><title>读书笔记-程序员的思维训练</title><link>http://www.wklken.me/posts/2014/01/05/pragmatic-thinking-and-learning.html</link><description>&lt;p&gt;================&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;程序员的思维修炼——开发认知潜能的九堂课&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;不是教你学习如何写代码之类的，而是，如何使用大脑，培养习惯，训练自己的思维&lt;/p&gt;
&lt;p&gt;当然，不仅限于程序员，我觉得对大多数人都有适用性&lt;/p&gt;
&lt;p&gt;方法论，有点类似程序员的成功学的味道，选择性阅读和实践&lt;/p&gt;
&lt;p&gt;以下是摘录&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;诀窍汇总:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;诀窍一：始终关注情境
诀窍二：新手使用规则，专家使用直觉
诀窍三：知道你不知道什么
诀窍四：通过观察和模仿来学习
诀窍五：保持实践以维持专家水平
诀窍六：如果你需要创造力，直觉或者独创技能，避免使用形式方法
诀窍七：学习如何学习的技能
诀窍八：捕获所有的想法以从中获益更多
诀窍九：综合学习与分析学习并重
诀窍十：争取好的设计，它真的很有效
诀窍十一：重新连线大脑，坚信这一点并不断实践
诀窍十二：增加感官体验以促进大脑的使用
诀窍十三：R型开路，L型紧跟
诀窍十四：使用隐喻作为L型和R型相融之处
诀窍十五 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-05:/posts/2014/01/05/pragmatic-thinking-and-learning.html</guid><category>books</category></item><item><title>电影人生</title><link>http://www.wklken.me/posts/2014/01/01/movies.html</link><description>&lt;blockquote&gt;
&lt;p&gt;每一部电影，都是一种人生，感悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每周五是我的电影之夜，以后有了自己小窝之后一定要搞个影院&lt;/p&gt;
&lt;p&gt;会记录一些看过的，个人喜欢的电影&lt;/p&gt;
&lt;p&gt;每部电影，都能看到什么，获得些什么&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;无人区&lt;/p&gt;
&lt;p&gt;饥饿游戏1 饥饿游戏2&lt;/p&gt;
&lt;p&gt;地心引力&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;时空恋旅人&lt;/p&gt;
&lt;p&gt;意外的恋爱时光&lt;/p&gt;
&lt;p&gt;一座城池&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;和summer的500天/好好先生&lt;/p&gt;
&lt;p&gt;黄铜茶壶&lt;/p&gt;
&lt;p&gt;光的棍&lt;/p&gt;
&lt;p&gt;哈利波特4-7(Luna)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-01:/posts/2014/01/01/movies.html</guid><category>life</category></item><item><title>2013年终总结</title><link>http://www.wklken.me/posts/2014/01/01/summary-08-2013end-2014begin.html</link><description>&lt;p&gt;每年写总结，总是一拖在拖，早几天就在想，今年做了些什么&lt;/p&gt;
&lt;p&gt;目测这篇总结要从今年写到明年：）&lt;/p&gt;
&lt;p&gt;好了，开始，依旧很杂，仅供看看......&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="jiao-bu"&gt;脚步&lt;/h3&gt;
&lt;p&gt;今年，去过两次海南（一次骑行一次公司旅游），一趟厦门（离老家一两小时的地方第一次去竟然是——从深圳杀过去的）.&lt;/p&gt;
&lt;p&gt;去海南，不在计划内的，突然想去，就去了......一路上都是大家在等我，胃出问题了，体能又不行。一路经历蛮多的，行走路上，看到异地，那里的人们是怎么生活的，感受一下。话说看海看到审美疲劳.......&lt;/p&gt;
&lt;p&gt;不记得太多，最深刻，莫过于最后一天到三亚，找青旅的路上，一个人，手机没电了，买了张地图，误打误撞骑到了鹿回头岭上，半山顶的一个平台，骑不动了把车停了躺在台阶上，看日落，对面是大海，有小岛，有轮船，夕阳，阳光透过云朵，照到海上，斑驳，海面，灿烂，摇曳 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-01-01:/posts/2014/01/01/summary-08-2013end-2014begin.html</guid><category>总结</category></item><item><title>[翻译]Python中staticmethod和classmethod的差异</title><link>http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</link><description>&lt;p&gt;原文地址 &lt;a href="http://www.pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很短，顺手一翻&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="class-vs-static-methods-in-python"&gt;Class vs static methods in Python&lt;/h3&gt;
&lt;p&gt;这篇文章试图解释：什么事staticmethod/classmethod,并且这两者之间的差异.&lt;/p&gt;
&lt;p&gt;staticmethod和classmethod均被作为装饰器，用作定义一个函数为"staticmethod"还是"classmethod"&lt;/p&gt;
&lt;p&gt;如果想要了解Python装饰器的基础，可以看 &lt;a href="http://www.pythoncentral.io/python-decorators-overview/"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="simple-static-and-class-methods"&gt;Simple, static and class methods&lt;/h3&gt;
&lt;p&gt;类中最常用到的方法是 实例方法(instance methods), 即，实例对象作为第一个参数传递给函数&lt;/p&gt;
&lt;p&gt;例如，下面是一个基本的实例方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 22 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-22:/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</guid><category>python</category></item><item><title>[翻译]Python中如何使用*args和**kwargs</title><link>http://www.wklken.me/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</link><description>&lt;p&gt;不知道有没有人翻译了，看到了，很短，顺手一翻&lt;/p&gt;
&lt;p&gt;原文地址 &lt;a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;或者可以叫做，在Python中如何使用可变长参数列表&lt;/p&gt;
&lt;h3 id="han-shu-ding-yi"&gt;函数定义&lt;/h3&gt;
&lt;p&gt;这是一种特殊的语法，在函数定义中使用*args和&lt;strong&gt;kwargs传递可变长参数.  *args用作传递非命名键值可变长参数列表（位置参数）; &lt;/strong&gt;kwargs用作传递键值可变长参数列表&lt;/p&gt;
&lt;p&gt;下面的例子传递一个位置参数以及两个可变长参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;formal arg: 1
another arg: two
another arg: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个键值的例子，传递一个位置参数和两个键值参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</guid><category>python</category></item><item><title>Python招聘需求与技能体系</title><link>http://www.wklken.me/posts/2013/12/21/python-jd.html</link><description>&lt;p&gt;目前国内的招聘Python，基本都是偏向web后台开发，偶有高大上的数据挖掘&amp;amp;机器学习&lt;/p&gt;
&lt;p&gt;这是之前(2012年)找工作整理的一些JD，在梳理几年来的笔记，顺带理一理&lt;/p&gt;
&lt;p&gt;可以以此建立自己的技能体系&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-bu-fen-yi-xie-yao-qiu"&gt;第一部分: 一些要求&lt;/h3&gt;
&lt;p&gt;1.学历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式： 计算机及相关专业本科及以上学历.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不解释，不说明&lt;/p&gt;
&lt;p&gt;毕业后很少再看学历了，更多的是看能力吧（我会告诉你第一年周围都是硕士博士海龟么，俺学历最低，自卑啊）&lt;/p&gt;
&lt;p&gt;见过数学系、物理系、信息自动化系的跑过来当码农，唯一遗憾的是还没有见到中文系的.....&lt;/p&gt;
&lt;p&gt;2.经验&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：拥有X年以上经验，至少独立负责过X个项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很蛋疼的东西，见过一年经验用N年的，也见过一年拥有N年经验的&lt;/p&gt;
&lt;p&gt;受环境影响，但更多的是取决于个人&lt;/p&gt;
&lt;p&gt;听过一句话：人和人的唯一区别，就是有木有主观能动性（略有些偏激，但是有道理）&lt;/p&gt;
&lt;p&gt;3.基础素质&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：具有良好的XXXX

编码规范/风格
文档书写习惯
沟通与表达能力 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-jd.html</guid><category>python</category></item><item><title>Python模板-Jinja2</title><link>http://www.wklken.me/posts/2013/12/21/python-template-jinja2.html</link><description>&lt;p&gt;&lt;img alt="jinja" src="/imgs/python/jinja.png"/&gt;&lt;/p&gt;
&lt;p&gt;Jinja2的一些使用摘要&lt;/p&gt;
&lt;p&gt;Jinja2作为flask的默认页面模板，感觉蛮强大的，可适用于各种模板类相关的项目&lt;/p&gt;
&lt;p&gt;特别是模板继承，写页面很舒服&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;文档 http://jinja.pocoo.org/docs/&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install jinja2
sudo pip install jinja2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhong-duan-ban-helloworld"&gt;终端版helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello {{ name }}!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="he"&gt;{%和{{&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;navigation&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-template-jinja2.html</guid><category>python</category></item><item><title>Python模板-Mako</title><link>http://www.wklken.me/posts/2013/12/14/python-template-mako.html</link><description>&lt;p&gt;&lt;img alt="mako" src="/imgs/python/mako.png"/&gt;&lt;/p&gt;
&lt;p&gt;一直使用Jinja2，前段时间听说mako，一试&lt;/p&gt;
&lt;p&gt;大同小异，天下模板都差不多&lt;/p&gt;
&lt;p&gt;要写代码测试，文档先行&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;官网 http://www.makotemplates.org/&lt;/p&gt;
&lt;p&gt;文档 http://docs.makotemplates.org/en/latest/&lt;/p&gt;
&lt;p&gt;文档翻译 Mako模板入门 http://help.42qu.com/code/mako.html&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mako
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;HelloWorld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-------------------------&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 14 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-14:/posts/2013/12/14/python-template-mako.html</guid><category>python</category></item><item><title>Git操作小结</title><link>http://www.wklken.me/posts/2013/12/01/git-base.html</link><description>&lt;p&gt;git操作小结，资料来源于网络&lt;/p&gt;
&lt;h3 id="jiao-cheng-zi-yuan"&gt;教程资源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在线教程(重点推荐)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://try.github.io/levels/1/challenges/1"&gt;TryGit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pcottle.github.io/learnGitBranching/"&gt;LearnGitBranchin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gitbook.io/book/lvwzhen/Git-Tutorial"&gt;廖雪峰git教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Gazler/githug"&gt;githug&lt;/a&gt; (通关游戏，&lt;a href="http://fancyoung.com/blog/githug-cheat-sheet/"&gt;攻略&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorial/git-basics"&gt;Git Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gitimmersion.com/"&gt;Git Immersion&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://gitref.org/zh/basic/"&gt;Git 参考手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/book/zh"&gt;Pro git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1230000000561/index.html"&gt;Git Pocket Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ikandou.com/io/book/48272048/"&gt;git自下而上方法-爱看豆&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50603/"&gt;写给Git初学者的7个建议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git简易指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html"&gt;图解git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://youngsterxyf.github.io/2013/09/28/learning-git-internals-by-example/"&gt;通过示例学习git构造&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/07/git.html"&gt;git分支管理策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://luolei.org/2013/09/git-config-advanced/"&gt;Git log diff config高级进阶&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oschina.net/translate/10-useful-advanced-git-commands"&gt;10个很有用的高级git命令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ux.etao.com/posts/711"&gt;高富帅们的git技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/43288/"&gt;一些实用的GitHub模式&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="git-config"&gt;git config&lt;/h3&gt;
&lt;p&gt;git配置文件~/.gitconfig&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#查看帮助
git config --help

git config --global user.name …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 01 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-01:/posts/2013/12/01/git-base.html</guid><category>git</category></item><item><title>[摘要]Python 最佳实践指南</title><link>http://www.wklken.me/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</link><description>&lt;p&gt;文档地址 &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's Guide to Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份文档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;目标对象：入门后，有一定基础的Pythonista
关键词：最佳实践，Pythonic，各类工具介绍
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;粗粗粗略地过了一遍，大体捞了一些东西出来，大段大段英文太费眼了，回头细读在更新进来&lt;/p&gt;
&lt;p&gt;浓缩版，20分钟可大体过完，然后根据自己需要去看详细的吧&lt;/p&gt;
&lt;p&gt;整体内容还是很不错的，建议细读英文&lt;/p&gt;
&lt;p&gt;PS:文档含有巨量的TODO(没写空白着待补充的)，不过但从目录上来看还是很强大滴，相信完善后，会成为一份很牛逼的指南(难度比官方指南高一点点)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-ling-bu-fen-getting-started"&gt;第零部分 Getting Started&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/#getting-started"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不解释，不翻译，自个看....真的没啥(每本入门书籍第一章...)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-bu-fen-writing-great-code"&gt;第一部分 Writing Great Code&lt;/h1&gt;
&lt;h3 id="structuring-your-project"&gt;Structuring Your Project&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#structuring-your-project"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 最佳实践&lt;/p&gt;
&lt;p&gt;Very …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 25 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-25:/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</guid><category>python</category></item><item><title>读书笔记-程序员的职业素养</title><link>http://www.wklken.me/posts/2013/11/24/the-clean-coder.html</link><description>&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="xu"&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3 id="qian-yan"&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3 id="yin-yan"&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨, note about that)&lt;/p&gt;
&lt;h3 id="di-yi-zhang-zhuan-ye-zhu-yi"&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 24 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-24:/posts/2013/11/24/the-clean-coder.html</guid><category>books</category></item><item><title>Nginx基础笔记</title><link>http://www.wklken.me/posts/2013/11/23/nginx-base.html</link><description>&lt;p&gt;nginx小结&lt;/p&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx &lt;a href="http://nginx.org/"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx &lt;a href="http://nginx.org/en/download.html"&gt;官方下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx最佳实践配置项目 &lt;a href="https://github.com/Umkus/nginx-boilerplate"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx Configuration &lt;a href="http://wiki.nginx.org/Configuration"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;教程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;agentzh的Nginx教程 &lt;a href="http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx开发从入门到精通 &lt;a href="http://tengine.taobao.org/book/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx战斗准备-优化指南 &lt;a href="http://www.oschina.net/translate/nginx-setup"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx模块开发入门 &lt;a href="http://blog.codinglabs.org/articles/intro-of-nginx-module-development.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解析Nginx负载均衡 &lt;a href="http://stblog.baidu-tech.com/?p=2027"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nginx Rewrite研究笔记 &lt;a href="http://blog.cafeneko.info/2010/10/nginx_rewrite_note/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="an-zhuang_1"&gt;安装&lt;/h2&gt;
&lt;h3 id="ubuntuxia"&gt;ubuntu下&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx

启动
sudo /etc/init.d/nginx start       #通过init.d下的启动文件启动。
sudo service nginx start#通过ubuntu的服务管理器启动

配置文件位置
/etc/nginx …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 23 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-23:/posts/2013/11/23/nginx-base.html</guid><category>linux</category><category>nginx</category></item><item><title>读书笔记-拖拉一点也无妨</title><link>http://www.wklken.me/posts/2013/11/17/the-art-of-procrastination.html</link><description>&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;facebook效应&amp;gt;&amp;gt;和这本 &amp;lt;&amp;lt;拖拉一点也无妨&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="procrastination" src="/imgs/books/the-art-of-procrastination.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后天能做的事情，就别赶着明天做了——马克吐温 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——结构化拖延法则正是一门关于如何利用这一消极特性、让它为你服务的艺术&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情(拖延，并不等于什么都不做)&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;利用这种心态，给必须完成的任务梳理一个结构
将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面,将另外一些重要的值得做的事情排在后面

于是，完成这些任务，就会变成避免去做清单最上方任务的一种手段

-&amp;gt; 拖延的人变成有用的人
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要的是，一个排序得当的任务结构&lt;/p&gt;
&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 17 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-17:/posts/2013/11/17/the-art-of-procrastination.html</guid><category>books</category></item><item><title>Redis基础笔记</title><link>http://www.wklken.me/posts/2013/10/19/redis-base.html</link><description>&lt;h2 id="zi-yuan-lian-jie"&gt;资源链接&lt;/h2&gt;
&lt;p&gt;推荐书籍:《Redis入门指南》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源列表:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis命令速查&lt;a href="http://redis.io/commands"&gt;command&lt;/a&gt; |
             &lt;a href="http://redis.cn/commands.html"&gt;CMD索引-中文&lt;/a&gt; |
             &lt;a href="http://redis.readthedocs.org/en/latest/"&gt;CMD树-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码&lt;a href="https://github.com/antirez/redis"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href="http://redis.io/download"&gt;redis.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Little Redis book &lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料概要 @江南白衣 &lt;a href="https://github.com/springside/springside4/wiki/redis"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料汇总专题 &lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;nosqlfan&lt;/a&gt; (这个站有很多文章)&lt;/p&gt;
&lt;p&gt;redis的设计与实现 &lt;a href="http://www.redisbook.com/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis2.6带注释源码 &lt;a href="https://github.com/huangz1990/annotated_redis_source"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis 各种语言clients&lt;a href="http://redis.io/clients"&gt;clients&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python redis cli &lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络文章汇总 &lt;a href="http://www.redis.cn/article.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十五分钟介绍Redis数据结构  &lt;a href="http://blog.nosqlfan.com/html/3202.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis的订阅与发布 &lt;a href="http://www.redisbook.com/en/latest/feature/pubsub.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis之七种武器 &lt;a href="http://blog.nosqlfan.com/html/2942.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Redis的五个注意事项 &lt;a href="http://blog.nosqlfan.com/html/3705.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码分析系列文章 &lt;a href="http://blog.nosqlfan.com/html/2949.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Largest …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 19 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-10-19:/posts/2013/10/19/redis-base.html</guid><category>redis</category><category>python</category></item><item><title>博客程序TODO列表</title><link>http://www.wklken.me/posts/2013/10/15/blog-todo-list.html</link><description>&lt;p&gt;blog使用的是pelican，主题是拿开源的进行自己修改的，具体见底部&lt;/p&gt;
&lt;p&gt;之前做的时候，列了一份修改的计划，种种原因，只完成了部分&lt;/p&gt;
&lt;p&gt;记下来，后续抽空修改吧&lt;/p&gt;
&lt;p&gt;需要学习html/css/js基础知识&lt;/p&gt;
&lt;p&gt;==================================&lt;/p&gt;
&lt;p&gt;update: 2014-05-11&lt;/p&gt;
&lt;p&gt;新增主题,取名luna, 类似iawrite专注模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 文章系列
2. markdown nav 侧边栏
3. 更漂亮的翻页
4. 分类页
5. archive页   区分年份, 加timeline
6. aboutme页面,使用imporess.js
7. tags标签展示
8. 分享到?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在更倾向于,极简, 阅读和用户体验更好,需要背景色和字体选择更好&lt;/p&gt;
&lt;p&gt;==================================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TODO List&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.分类页，优化展示
2.专题页 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-10-15:/posts/2013/10/15/blog-todo-list.html</guid><category>blog</category><category>todo</category></item><item><title>搜索下拉提示框实现(python/golang)</title><link>http://www.wklken.me/posts/2013/10/13/search-suggestion.html</link><description>&lt;p&gt;在百度，google，taobao.com的搜索框，输入某个关键字时，会存在下拉提示，提示关键字列表&lt;/p&gt;
&lt;p&gt;国庆的时候，想了下如何实现这个功能&lt;/p&gt;
&lt;p&gt;用python和golang搞了个基本版本，国庆后直接上到线上了&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://github.com/wklken/suggestion
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo地址：(30w关键字，每天约三百万次请求)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://s.kuaiwan.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本机制：离线给出关键字和权重，用trie数据结构，逐一加入，建立一棵树，请求进来时，遍历树，获取节点，排序返回&lt;/p&gt;
&lt;p&gt;2013-10-13&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-10-13:/posts/2013/10/13/search-suggestion.html</guid><category>python</category><category>golang</category></item><item><title>小记-搭建discourse</title><link>http://www.wklken.me/posts/2013/09/14/discourse.html</link><description>&lt;p&gt;早上，花了点时间，在刚买的digital ocean vps上尝试搭建了下&lt;a href="http://www.discourse.org/"&gt;discourse&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上的教程N多，最终决定使用官方的搭建 &lt;a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-ubuntu.md"&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对我这个ruby盲来说，第一次接触ruby环境，第一个感觉，这安装流程也太TM多了吧，要配的东西老多了，但另一方面，
也发现，python的环境配置相关的东西，体验上和ruby比起来还是有差距的,&lt;/p&gt;
&lt;p&gt;一个半小时，轻轻松松，也有点莫名其妙，搭建完了&lt;/p&gt;
&lt;p&gt;后端ruby resultful API，我在思考，貌似用Python也可以实现，就是不知道迁移这玩意儿耗时几何，&lt;/p&gt;
&lt;p&gt;研究研究，可以的话用python+flask实现一把&lt;/p&gt;
&lt;p&gt;好了，哥的博客有了discourse，地址 &lt;a href="http://bbs.wklken.me/"&gt;http://bbs.wklken.me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后续捣鼓下，研究下ruby&lt;/p&gt;
&lt;p&gt;2013-09-14&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 14 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-09-14:/posts/2013/09/14/discourse.html</guid><category>discourse</category></item><item><title>Flask使用小结</title><link>http://www.wklken.me/posts/2013/09/09/python-framework-flask.html</link><description>&lt;p&gt;&lt;img alt="flask" src="/imgs/python/flask.png"/&gt;&lt;/p&gt;
&lt;p&gt;flask 使用的一些整理&lt;/p&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;Flask  &lt;a href="https://dormousehole.readthedocs.org/en/latest/"&gt;文档&lt;/a&gt;|&lt;a href="http://flask.pocoo.org/docs/"&gt;英文&lt;/a&gt;|
       &lt;a href="http://exploreflask.com/"&gt;expore flask&lt;/a&gt;|
       &lt;a href="http://www.oschina.net/translate/the-flask-mega-tutorial-part-i-hello-world"&gt;快速教材&lt;/a&gt;|
       &lt;a href="http://flask-admin.readthedocs.org/en/latest/"&gt;flask-admin&lt;/a&gt;|
       &lt;a href="http://flask-debugtoolbar.readthedocs.org/en/latest/"&gt;Flask-DebugToolbar&lt;/a&gt;|
       &lt;a href="http://flask-login.readthedocs.org/en/latest/"&gt;Flask-Login&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Cache/"&gt;Flask-Cache&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-SQLAlchemy/"&gt;flask-sqlalchemy&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Security/"&gt;flask-security&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Mako/"&gt;Flask-mako&lt;/a&gt;|
       &lt;a href="http://pythonhosted.org/Flask-Genshi/"&gt;Flask-Genshi&lt;/a&gt;|
       &lt;a href="http://wtforms.simplecodes.com/docs/1.0.1/index.html"&gt;WTForms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/extensions/"&gt;Flask Extensions&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zui-jian-dan-de-hello-world"&gt;最简单的hello world&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#app …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 09 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-09-09:/posts/2013/09/09/python-framework-flask.html</guid><category>flask</category></item><item><title>[翻译]快速Python性能优化要点</title><link>http://www.wklken.me/posts/2013/09/07/quick-python-performance-optimization.html</link><description>&lt;p&gt;翻译，两篇博文 Quick Python Performance Optimization&lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-i/"&gt;一&lt;/a&gt; &lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-ii/"&gt;二&lt;/a&gt;, 很短&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仅是解释,如何用正确并且高效的方式完成在日常Python编码中简单的事情&lt;/p&gt;
&lt;p&gt;1.在ipython交互shell中使用%timeit (per line) 和 %prun (cProfile)&lt;/p&gt;
&lt;p&gt;测量你的代码，并且找到性能的瓶颈.这和"过早优化是一切罪恶的根源"并不矛盾.这是第一级的性能优化，而不是重量级的性能优化序列.&lt;/p&gt;
&lt;p&gt;更多的测量Python代码性能，可参考 &lt;a href="http://www.huyng.com/posts/python-performance-analysis/"&gt;http://www.huyng.com/posts/python-performance-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一个有趣的库，line_profiler,逐行的性能测量&lt;a href="https://bitbucket.org/robertkern/line_profiler"&gt;https://bitbucket.org/robertkern/line_profiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.减少函数调用次数.如果你需要处理一个列表，传递整个列表，而不是遍历列表，调用函数传递每个元素并获取返回值&lt;/p&gt;
&lt;p&gt;3 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 07 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-09-07:/posts/2013/09/07/quick-python-performance-optimization.html</guid><category>python</category></item><item><title>Python-进阶-编码处理小结</title><link>http://www.wklken.me/posts/2013/08/31/python-extra-coding-intro.html</link><description>&lt;p&gt;整理下python编码相关的内容&lt;/p&gt;
&lt;p&gt;注意: 以下讨论为Python2.x版本, Py3k的待尝试&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="kai-shi"&gt;开始&lt;/h2&gt;
&lt;p&gt;用python处理中文时，读取文件或消息，http参数等等&lt;/p&gt;
&lt;p&gt;一运行，发现乱码(字符串处理，读写文件，print)&lt;/p&gt;
&lt;p&gt;然后，大多数人的做法是，调用encode/decode进行调试，并没有明确思考为何出现乱码&lt;/p&gt;
&lt;p&gt;所以调试时最常出现的错误&lt;/p&gt;
&lt;p&gt;错误1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;错误2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 31 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-31:/posts/2013/08/31/python-extra-coding-intro.html</guid><category>python</category></item><item><title>Python资源入口汇总</title><link>http://www.wklken.me/posts/2013/08/27/python-sources.html</link><description>&lt;p&gt;整理中，进度30%&lt;/p&gt;
&lt;h3 id="guan-wang"&gt;官网&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.python.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="guan-fang-wen-dang"&gt;官方文档&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;英文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;document 2.7.6  &lt;a href="http://docs.python.org/2/index.html"&gt;入口&lt;/a&gt;|
                &lt;a href="http://docs.python.org/2/library/"&gt;标准库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;document 3.x    &lt;a href="http://docs.python.org/3/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Hitchhiker’s Guide to Python  &lt;a href="http://docs.python-guide.org/en/latest/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python Monk &lt;a href="https://pythonmonk.com/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;document 2.7 &lt;a href="http://www.pythondoc.com/pythontutorial27/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非官方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;google的python文档 &lt;a href="https://developers.google.com/edu/python/"&gt;Google's Python Class入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pep8 &lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;zetcode &lt;a href="http://zetcode.com/lang/python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;building skills in Python &lt;a href="http://www.itmaybeahack.com/book/python-2.6/html/index.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;风格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google Python 风格指南 &lt;a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/"&gt;入口 …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 27 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-27:/posts/2013/08/27/python-sources.html</guid><category>sources</category></item><item><title>Python-进阶-itertools模块小结</title><link>http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html</link><description>&lt;p&gt;这货很强大, 必须掌握&lt;/p&gt;
&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pymotw &lt;a href="http://pymotw.com/2/itertools/"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本是基于文档的翻译和补充，相当于翻译了&lt;/p&gt;
&lt;p&gt;itertools用于高效循环的迭代函数集合&lt;/p&gt;
&lt;h2 id="zu-cheng"&gt;组成&lt;/h2&gt;
&lt;p&gt;总体，整体了解&lt;/p&gt;
&lt;p&gt;无限迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器         参数         结果                                                例子
count()     start, [step]   start, start+step, start+2*step, ...                count(10) --&amp;gt; 10 11 12 13 14 ...
cycle()     p               p0, p1, ... plast, p0, p1, ...                      cycle('ABCD') --&amp;gt; A B C D A B C D …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 20 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-20:/posts/2013/08/20/python-extra-itertools.html</guid><category>python</category></item><item><title>Python-进阶-functools模块小结</title><link>http://www.wklken.me/posts/2013/08/18/python-extra-functools.html</link><description>&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/functools.html"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="functoolspartial"&gt;functools.partial&lt;/h3&gt;
&lt;p&gt;作用:&lt;/p&gt;
&lt;p&gt;functools.partial 通过包装手法，允许我们 "重新定义" 函数签名&lt;/p&gt;
&lt;p&gt;用一些默认参数包装一个可调用对象,返回结果是可调用对象，并且可以像原始对象一样对待&lt;/p&gt;
&lt;p&gt;冻结部分函数位置函数或关键字参数，简化函数,更少更灵活的函数参数调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#args/keywords 调用partial时参数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#合并，调用原始函数，此时用了partial的参数&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;newfunc …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 18 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-18:/posts/2013/08/18/python-extra-functools.html</guid><category>python</category></item><item><title>[翻译]130+vim基本命令</title><link>http://www.wklken.me/posts/2013/08/17/130-essential-vim-commands.html</link><description>&lt;p&gt;文章  &lt;a href="http://www.catswhocode.com/blog/130-essential-vim-commands"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从八十年代起，vi和vim在程序员中十分流行.5年前，我写了《程序员必须知道的100个vim命令》，这是重写更新版本，希望你喜欢!&lt;/p&gt;
&lt;h3 id="ji-chu"&gt;基础&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e filename     在编辑器中打开一个文件
:w              保存文件
:q              退出vim
:q!             退出但不保存
:x              写文件(如果有做修改)并退出
:sav filename   保存为
.               在正常模式中重复执行上一个变更
5.              重复五次
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="yi-dong"&gt;移动&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;k or Up Arrow   上移一行
j or Down Arrow 下移一行
e               移动到单词末尾
b               移动到单词开头
0               移动到行首
G               移动到文件末尾
gg              移动到文件开头 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-17:/posts/2013/08/17/130-essential-vim-commands.html</guid><category>vim</category></item><item><title>Mysql基础笔记</title><link>http://www.wklken.me/posts/2013/08/11/mysql-base.html</link><description>&lt;p&gt;update: 2013-08-11, 笔记录了一半不到，还没码完....&amp;gt;&amp;lt;
update: 2013-11-23, DONE&lt;/p&gt;
&lt;p&gt;mysql速查&lt;/p&gt;
&lt;p&gt;参考： Mysql必知必会,网络blog, stackoverflow&lt;/p&gt;
&lt;p&gt;注； 基础部分sql参考 《mysql必知必会》, 还不错的一本书，菜鸟入门级，需要的话可以入手&lt;/p&gt;
&lt;p&gt;在浏览器中使用查找&lt;/p&gt;
&lt;p&gt;寻找一个好的mysql开源gui工具&lt;/p&gt;
&lt;h2 id="huan-jing-pei-zhi"&gt;环境配置&lt;/h2&gt;
&lt;p&gt;ubuntu安装mysql&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server mysql-client
netstat -nltp | grep mysql
配置文件 /etc/mysql/my.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;数据库基础：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InnoDB是一个可靠地事务处理引擎，不支持全文本搜索
MyISAM是一个性能极高的引擎，支持全文本搜索，不支持事务处理
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据库-database&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;保存有组织的数据的容器（通常是一个文件或一组文件）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表-table&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;某种特定类型数据的结构化清单
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式-schema&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;关于数据库和表的布局及特性的信息 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 11 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-11:/posts/2013/08/11/mysql-base.html</guid><category>linux</category><category>mysql</category></item><item><title>[翻译]vim入门指南</title><link>http://www.wklken.me/posts/2013/08/04/translation-vim-introduction-and-tutorial.html</link><description>&lt;p&gt;今天稍微整理了下vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文链接 &lt;a href="http://blog.interlinked.org/tutorials/vim_tutorial.html"&gt;Vim Introduction and Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜了下没发现中文版,顺手翻译下, 建议读原版&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="vimjian-jie-ji-ru-men-zhi-nan"&gt;vim简介及入门指南&lt;/h1&gt;
&lt;p&gt;我经常试图去学习Emac编辑器/IDE/OS. 我最后一次尝试时，我花了一些时间去适应，直到我想去配置一个自己的.emacs文件&lt;/p&gt;
&lt;p&gt;在我用vi打开.emacs文件那一刻，我意识到我做了什么，vim早已经赢得了我的青睐.&lt;/p&gt;
&lt;p&gt;所以，我将vim作为我的首选编辑器[注1]&lt;/p&gt;
&lt;p&gt;另一个动机是，我发现我最喜欢的shell(&lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;)有很酷的 vi-mode 包含命令模式(使得，你可以在命令和插入模式之间切换)&lt;/p&gt;
&lt;p&gt;Vim有一系列给力的特性，并且学习它们需要花费一些时间.当然，现在有很多在线指南和技巧文章，但是帮助文档同样很优秀！有概览页面，总结页面和一些注释&lt;/p&gt;
&lt;p&gt;我开始使用官网的指南和帮助系统学习(输入 :help &lt;command&gt; 可以从命令模式获取帮助)， 我喜欢在测试文件中测试命令，并且对重要的命令写下简短的说明&lt;/command&gt;&lt;/p&gt;
&lt;p&gt;另一个我使用Vim的原因是，使用Vim比Emacs更加健康(使用默认键映射).健康 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 04 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-04:/posts/2013/08/04/translation-vim-introduction-and-tutorial.html</guid><category>vim</category><category>linux</category></item><item><title>[翻译整理]stackoverflow python 百问</title><link>http://www.wklken.me/posts/2013/07/20/python-stackoverflow-vote-top.html</link><description>&lt;p&gt;更新到github了，地址：https://github.com/wklken/stackoverflow-py-top-qa &lt;/p&gt;
&lt;p&gt;后续这里不更新了哈&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;进度40%，最近有点犯懒&lt;/p&gt;
&lt;p&gt;刚刚注册，好东西&lt;/p&gt;
&lt;p&gt;查看了下前面(vote前15页,挑了下,vote都是100+的样子,大概120个)的问题，&lt;a href="http://stackoverflow.com/questions/tagged/python?page=1&amp;amp;sort=votes&amp;amp;pagesize=15"&gt;链接&lt;/a&gt;, 大体梳理了下,本来想放一页搞定，奈何排版太乱，按类型分了下&lt;/p&gt;
&lt;p&gt;第一页的前几个比较长，目测都有中文翻译版本，大家可以网上搜下&lt;/p&gt;
&lt;p&gt;其他问题相对比较杂，有些简单，有些复杂，拉过来参考参考也不错&lt;/p&gt;
&lt;p&gt;总结整理，复习印证(注意，合并了每个问题的多个答案，但是时间仓促，疏漏难免，感兴趣问题直接点链接看原文吧)&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-shu-ju-jie-gou-lie-biao-yuan-zu-zi-dian-deng"&gt;基本数据结构(列表，元组，字典等)&lt;/h2&gt;
&lt;h3 id="pan-duan-yi-ge-lie-biao-wei-kong-de-zui-jia-shi-jian"&gt;判断一个列表为空得最佳实践&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/53513/python-what-is-the-best-way-to-check-if-a-list-is-empty"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答案:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not a:
    print …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 20 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-20:/posts/2013/07/20/python-stackoverflow-vote-top.html</guid><category>python</category><category>translation</category></item><item><title>[翻译]理解python中的装饰器</title><link>http://www.wklken.me/posts/2013/07/19/python-translate-decorator.html</link><description>&lt;p&gt;有人翻译过了，很多转载，暂时没找到原文，各个地方的排版不一样，排版（代码格式），代码注解等都不怎么好&lt;/p&gt;
&lt;p&gt;练练手，顺手一翻吧，权当加深理解&lt;/p&gt;
&lt;p&gt;来源stackoverflow上的问题  &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很长哦(应该是巨长...分了三次搞完)，要有耐心看完&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-han-shu-shi-dui-xiang"&gt;python的函数是对象&lt;/h2&gt;
&lt;p&gt;要理解装饰器，首先，你必须明白，在python中，函数是对象. 这很重要.&lt;/p&gt;
&lt;p&gt;简单例子来理解为什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def shout(word="yes"):
    return word.capitalize()+"!"

print shout()
# outputs : 'Yes!'

# 作为一个对象，你可以讲函数赋值给另一个对象
scream = shout

# 注意到这里我们并没有使用括号：我们不是调用函数，而是将函数'shout'赋给变量'scream'
# 这意味着，你可以通过'scream'调用'shout'

print scream()
# outputs : 'Yes!'

# 不仅如此，你可以删除老的名称'shout' …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 19 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-19:/posts/2013/07/19/python-translate-decorator.html</guid><category>python</category><category>translation</category></item><item><title>[翻译]Python中yield的解释</title><link>http://www.wklken.me/posts/2013/07/18/python-translate-yield.html</link><description>&lt;p&gt;翻译&lt;/p&gt;
&lt;p&gt;来源于stackoverflow问答，原文链接 &lt;a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SN上面看到的，顺手翻译下，第一次翻译，好多地方翻的不是很好 :)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python中yield关键字的作用是什么？它做了什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，我想理解以下代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def node._get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &amp;lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &amp;gt;= self._median:
        yield self._rightchild
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是调用者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result, candidates = list(), [self]
while candidates:
    node …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 18 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-18:/posts/2013/07/18/python-translate-yield.html</guid><category>python</category><category>translation</category></item><item><title>Linux Shell脚本攻略笔记[速查]</title><link>http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html</link><description>&lt;p&gt;Linux Shell脚本攻略的笔记，markdown编写，可以速查(ctrl+f)&lt;/p&gt;
&lt;p&gt;2013-09-08 从历史网摘中补充
 2014-02-16 增加&amp;lt;&lt;shell脚本指南&gt;&amp;gt;笔记补充&lt;/shell脚本指南&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9104.html"&gt;sed简明教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9070.html"&gt;awk简明教程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="shell-script"&gt;shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="run-shell-script"&gt;run shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh script.sh

or

chmod a+x script.sh
./script.sh
# 会读取首行的解释器, 执行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmd&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1; cmd2

or

cmd1
cmd2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="echo"&gt;echo&lt;/h3&gt;
&lt;p&gt;echo  的功能正如其名，就是基于标准输出打印一段文本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "welcome to bash …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-04:/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html</guid><category>linux</category><category>shell</category></item><item><title>工作两周年小结</title><link>http://www.wklken.me/posts/2013/07/04/summary-07-worktwoyear.html</link><description>&lt;p&gt;两年了，又到了总结的时候，都成习惯了&lt;/p&gt;
&lt;p&gt;从哪说起呢，有点散，有点乱，还有错别字，囧&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;2011年的7月4号，是毕业后工作的第一天&lt;/p&gt;
&lt;p&gt;2012年的7月4号，满一年，记得那天太阳很大，坐在靠窗的位置，外面的天空很蓝，偶尔战斗机飞过，划出一道白，现在偶尔发呆，望着高楼外墙反射的阳光，想着身后是那片橙，那些人&lt;/p&gt;
&lt;p&gt;感谢那些可爱的人:)&lt;/p&gt;
&lt;p&gt;那时候的日子，简单快乐，周一到周五，工作，加加班，晚上回去看看书什么的，周六，有一段时间常来公司，写一些东西，学一些东西&lt;/p&gt;
&lt;p&gt;周日骑车出去溜溜，山里转一圈，然后绕西湖一圈，在湖边静静坐着，回公司蹭蹭水，上上网&lt;/p&gt;
&lt;p&gt;周末的公司，很安静，让人很是怀念，如今，已经没有了那种环境&lt;/p&gt;
&lt;p&gt;那时候的节奏，像在冬天里晒太阳，很幸福，家的感觉&lt;/p&gt;
&lt;p&gt;现在的节奏，像大夏天太阳底下登山，天热山陡 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-04:/posts/2013/07/04/summary-07-worktwoyear.html</guid><category>总结，程序人生</category></item><item><title>我的vim配置及说明【k-vim】</title><link>http://www.wklken.me/posts/2013/06/11/linux-my-vim.html</link><description>&lt;p&gt;ps: k-vim github地址 : https://github.com/wklken/k-vim&lt;/p&gt;
&lt;h3 id="vimcha-jian-fen-lei-ji-kuai-jie-jian"&gt;vim插件分类及快捷键&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给人一条Vim 命令，他能折腾一晚上；告诉他怎么自定义Vim 命令，他能捣腾一辈子&lt;/p&gt;
&lt;p&gt;生命不息,折腾不止 (╯‵□′)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;编辑器之神 = 生产力(效率为王) + 性感(界面快捷键) + 装x神器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="vimji-ben-yong-fa"&gt;vim基本用法&lt;/h3&gt;
&lt;p&gt;初学者: &lt;a href="http://blog.csdn.net/wklken/article/details/7533272"&gt;vim训练稿&lt;/a&gt;
几年前的三月份,第一次正儿八经开始使用vim,后来整理了一份,对着敲几遍,训练稿&lt;/p&gt;
&lt;p&gt;推荐: 耗子叔的 &lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者,玩游戏 &lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shi-yong-shuo-ming"&gt;使用说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;能熟练使用原生vim,最好先熟悉了再来使用插件扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下插件,仅介绍用途优点等,可以在github中搜索查看详细用途和配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前vim使用配置,在vimrc中查看&lt;/p&gt;
&lt;p&gt;快捷键为插件默认/或者当前配置vimrc定义的,如果需要修改,查看vimrc中对插件配置进行修改 [sd …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 11 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-06-11:/posts/2013/06/11/linux-my-vim.html</guid><category>vim</category><category>linux</category></item><item><title>shell下小抄速查工具cmdcheatsheet[python实现]</title><link>http://www.wklken.me/posts/2013/05/17/shell-cheat-sheet.html</link><description>&lt;h3 id="githubdi-zhi"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="you-hua"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="xiao-guo"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="shi-xian-fang-fa"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="hou-xu-gai-jin"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 17 May 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-05-17:/posts/2013/05/17/shell-cheat-sheet.html</guid><category>python</category><category>linux</category></item><item><title>Python fabric实现远程操作和部署</title><link>http://www.wklken.me/posts/2013/03/25/python-tool-fabric.html</link><description>&lt;h2 id="fabric"&gt;fabric&lt;/h2&gt;
&lt;p&gt;title是开发，但是同时要干开发测试还有运维的活 (o(╯□╰)o)&lt;/p&gt;
&lt;p&gt;近期接手越来越多的东西，发布和运维的工作相当机械，加上频率还蛮高，导致时间浪费还是优点多。&lt;/p&gt;
&lt;p&gt;修复bug什么的，测试，提交版本库(2分钟)，ssh到测试环境pull部署（2分钟），rsync到线上机器A,B,C,D,E（1分钟），分别ssh到ABCDE五台机器，逐一重启(8-10分钟) =  13-15分钟&lt;/p&gt;
&lt;p&gt;其中郁闷的是，每次操作都是相同的，命令一样，要命的是在多个机器上，很难在本机一个脚本搞定，主要时间都浪费在ssh，敲命令上了，写成脚本，完全可以一键执行，花两分钟看下执行结果&lt;/p&gt;
&lt;p&gt;直到，发现了fabric这货&lt;/p&gt;
&lt;p&gt;官方文档 &lt;a href="http://fabric.readthedocs.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="zuo-yong"&gt;作用&lt;/h3&gt;
&lt;p&gt;很强大的工具&lt;/p&gt;
&lt;p&gt;可以将自动化部署或者多机操作的命令固化到一个脚本里&lt;/p&gt;
&lt;p&gt;和某些运维工具很像，用它主要是因为，python…..&lt;/p&gt;
&lt;p&gt;简单好用易上手&lt;/p&gt;
&lt;p&gt;当然，shell各种命令组合起来也可以，上古神器和现代兵器的区别&lt;/p&gt;
&lt;h3 id="huan-jing-pei-zhi"&gt;环境配置 …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 25 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-25:/posts/2013/03/25/python-tool-fabric.html</guid><category>python</category></item><item><title>Python-基础-内置函数小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-builtins.html</link><description>&lt;h2 id="nei-zhi-han-shu"&gt;内置函数&lt;/h2&gt;
&lt;h3 id="chang-yong-han-shu"&gt;常用函数&lt;/h3&gt;
&lt;h4 id="1shu-xue-xiang-guan"&gt;1.数学相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;abs()返回一个数字的绝对值。如果给出复数，返回值就是该复数的模。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;print abs(-100)
100
&amp;gt;&amp;gt;&amp;gt;print abs(1+2j)
2.2360679775
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;divmod(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;divmod(x,y)函数完成除法运算，返回商和余数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; divmod(10,3)
(3, 1)
&amp;gt;&amp;gt;&amp;gt; divmod(9,3) (3, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pow(x,y[,z])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pow()函数返回以x为底，y为指数的幂。如果给出z值，该函数就计算x的y次幂值被z取模的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print pow(2 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-builtins.html</guid><category>python</category></item><item><title>Python-基础-文件处理小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-file.html</link><description>&lt;h2 id="wen-jian-chu-li"&gt;文件处理&lt;/h2&gt;
&lt;p&gt;python常用，主要是用于文件操作，配合字符串操作，数值计算等，完成数据处理。&lt;/p&gt;
&lt;h3 id="wen-jian-mo-shi"&gt;文件模式&lt;/h3&gt;
&lt;p&gt;打开一个文件，返回一个文件对象。可以用open()或者file()，建议使用前者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_object = open(file_name, access_mode = ‘r’, buffering = -1)
file_name：打开的文件名,若非当前路径，需指出具体路径
mode:可选参数，文件打开模式
bufsize:可选参数，是否使用缓存
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="mode"&gt;mode&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;模式      描述
r       以读方式打开文件，可读取文件信息.文件必须已存在
w       以写方式打开文件，可向文件写入信息。存在则清空，不存在创建
a       以追加方式打开文件，文件指针自动移到文件尾。追加
r+      以读写方式打开文件，可对文件进行读和写操作。
w+      消除文件内容 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-file.html</guid><category>python</category></item><item><title>Python-基础-函数小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-function.html</link><description>&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;h4 id="jian-jie-ji-ding-yi"&gt;简介及定义&lt;/h4&gt;
&lt;h5 id="jian-jie"&gt;简介&lt;/h5&gt;
&lt;p&gt;函数是可重用的程序段&lt;/p&gt;
&lt;p&gt;它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次地运行这个语句块。&lt;/p&gt;
&lt;p&gt;函数作用：最大程度重用和最小化代码冗余，流程分解&lt;/p&gt;
&lt;h5 id="ding-yi"&gt;定义&lt;/h5&gt;
&lt;p&gt;使用def可以声明一个函数，完整的函数由函数名，参数以及函数实现语句组成。&lt;/p&gt;
&lt;p&gt;一般形式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def &amp;lt;函数名&amp;gt; (参数列表):
   &amp;lt;函数语句&amp;gt;
   return &amp;lt;返回值&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中参数和返回值非必须&lt;/p&gt;
&lt;p&gt;注意，没有返回值的return语句等价于return None&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="nb"&gt;sum …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-function.html</guid><category>python</category></item><item><title>Python-基础-简介/入门</title><link>http://www.wklken.me/posts/2013/03/16/python-base-introduction.html</link><description>&lt;h2 id="pythonjian-jie-ji-ru-men"&gt;Python简介及入门&lt;/h2&gt;
&lt;h3 id="python"&gt;python&lt;/h3&gt;
&lt;p&gt;为什么是python&lt;/p&gt;
&lt;p&gt;选择自己喜欢的语言，这往往不容易，更多的是根据需求&lt;/p&gt;
&lt;p&gt;话说，之前是java，大学用了三年+实习半年，后来入职做测试开发后，碰到了python&lt;/p&gt;
&lt;p&gt;到最后，转python开发了&lt;/p&gt;
&lt;p&gt;写起来快，缩进，不用打花括号，省手指，读起来舒服…..&lt;/p&gt;
&lt;p&gt;喜欢，貌似不需要什么太牛的理由，用着顺手舒服就行&lt;/p&gt;
&lt;p&gt;什么语言之争，编辑器之战啥的，能忽略就忽略吧，能无视就无视吧，工具，够用，用这舒服就ok了，浪费口水精力争来争去图个啥呢&lt;/p&gt;
&lt;p&gt;Life is short, I use python!&lt;/p&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python介绍: 到官网自个看&lt;/p&gt;
&lt;p&gt;有兴趣可以看看: 解释性语言+动态类型语言+强类型语言&lt;/p&gt;
&lt;p&gt;优点缺点: 自己google&lt;/p&gt;
&lt;p&gt;国际惯例&lt;/p&gt;
&lt;p&gt;交互模式:(主要拿来试验，可以试试 &lt;a href="http://ipython.org/"&gt;ipython …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-introduction.html</guid><category>python</category></item><item><title>Python-基础-数字处理相关模块</title><link>http://www.wklken.me/posts/2013/03/10/python-base-extra-math.html</link><description>&lt;h2 id="shu-zi-chu-li-xiang-guan-mo-kuai"&gt;数字处理相关模块&lt;/h2&gt;
&lt;h3 id="math"&gt;math&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;#这句可查看所有函数名列表&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;#查看具体定义及函数0原型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.常用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceil(x) 取顶
floor(x) 取底
fabs(x) 取绝对值
factorial (x) 阶乘
hypot(x,y)  sqrt(x*x+y*y)
pow(x,y) x的y次方
sqrt(x) 开平方
log(x)
log10(x)
trunc(x)  截断取整数部分
isnan (x …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-extra-math.html</guid><category>python</category></item><item><title>Python-基础-集合小结</title><link>http://www.wklken.me/posts/2013/03/10/python-base-set.html</link><description>&lt;h2 id="ji-he"&gt;集合&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.&lt;/p&gt;
&lt;p&gt;sets 支持 x in set, len(set), 和 for x in set。&lt;/p&gt;
&lt;p&gt;集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.&lt;/p&gt;
&lt;p&gt;作为一个无序的集合，sets 不记录元素位置或者插入点。因此，sets 不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。&lt;/p&gt;
&lt;p&gt;set为可变集合&lt;/p&gt;
&lt;p&gt;frozenset为固定集合&lt;/p&gt;
&lt;p&gt;可变集合特有的方法: add, remove, discard, pop, clear, 这些接受对象的方法, 参数必须是可哈希的&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;用集合的工厂方法 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-set.html</guid><category>python</category></item><item><title>Python-基础-字符串小结</title><link>http://www.wklken.me/posts/2013/03/10/python-base-string.html</link><description>&lt;h2 id="zi-fu-chuan"&gt;字符串&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;字符串序列
用于表示和存储文本，python中字符串是不可变的，一旦声明，不能改变&lt;/p&gt;
&lt;p&gt;通常由单引号(' )，双引号(" )，三引号('''   """)包围&lt;/p&gt;
&lt;p&gt;其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。便捷的多行注释&lt;/p&gt;
&lt;p&gt;Python实际三类字符串：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.通常意义字符串(str)
2.原始字符串，以大写R 或 小写r开始，r''，不对特殊字符进行转义
3.Unicode字符串，u'' basestring子类
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Python 中，字符串是“不可改变的序列”&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不可变

2.满足序列基本操作，按位置存取，切片及索引
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-fu-chuan_1"&gt;字符串&lt;/h4&gt;
&lt;p&gt;1.获得帮助:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(str)
&amp;gt;&amp;gt;&amp;gt; dir(str …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-string.html</guid><category>python</category></item><item><title>Python-基础-字典小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-dict.html</link><description>&lt;h2 id="zi-dian"&gt;字典&lt;/h2&gt;
&lt;h3 id="ding-yi"&gt;定义&lt;/h3&gt;
&lt;p&gt;dictionary&lt;/p&gt;
&lt;p&gt;1.键值对的集合(map)&lt;/p&gt;
&lt;p&gt;2.字典是以大括号“{}”包围的数据集合&lt;/p&gt;
&lt;p&gt;3.字典是无序的，在字典中通过键来访问成员。
  可变的，可嵌套，可以原处修改扩展等，不产生新的字典&lt;/p&gt;
&lt;p&gt;4.字典的键，可以是字符串(大小写敏感)，数字常量或元组（不可变类型），同一个字典的键可以混用类型。字典的键必须是可哈希的&lt;/p&gt;
&lt;p&gt;元组作为键的条件是，元组内的值都是不可变类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  a = (1,2)  #可以作为键
  b = (1,2,[3,4])  #不可以
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.字典的值可以是任意类型，可以嵌套，可以自由修改&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;创建字典的几种方式:&lt;/p&gt;
&lt;p&gt;1.基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;#空字典&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age' …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-dict.html</guid><category>python</category></item><item><title>Python-基础-数字小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-math.html</link><description>&lt;h2 id="shu-zi"&gt;数字&lt;/h2&gt;
&lt;p&gt;python中的数字类型完整工具：
整数&amp;amp;浮点数，复数，固定精度十进制数，有理分数，集合，布尔类型，无穷的整数精度，各种数字内置函数和模块&lt;/p&gt;
&lt;h3 id="shu-lei-xing"&gt;数类型&lt;/h3&gt;
&lt;p&gt;Python中有四种类型的数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;整数：一般意义上的数，包含十进制(无前缀),八进制(0开头)，十六进制(0x开头),二进制(0b开头)
eg.  2

长整数：无限大小的数,表示范围和内存有关
eg.   2012121200

浮点数：小数或用e/E(10的幂)表示的幂,默认，浮点数学缺乏精确性,可以使用decimal
eg.   3.23      50.2E2

复数：复数的虚部以字母J 或 j结尾
eg.    2+3i …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-math.html</guid><category>python</category></item><item><title>Python-基础-元组小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-tuple.html</link><description>&lt;h2 id="yuan-zu"&gt;元组&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;tuple&lt;/p&gt;
&lt;p&gt;1.元组是以圆括号“()”包围的数据集合，不同成员以“,”分隔。通过下标进行访问&lt;/p&gt;
&lt;p&gt;2.不可变序列，可以看做不可变的列表，与列表不同：元组中数据一旦确立就不能改变（所以没有类似列表的增删改操作，只有基本序列操作）&lt;/p&gt;
&lt;p&gt;3.支持任意类型，任意嵌套以及常见的序列操作&lt;/p&gt;
&lt;p&gt;4.元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变&lt;/p&gt;
&lt;h3 id="sheng-ming-ji-shi-yong"&gt;声明及使用&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#空元组&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  &lt;span class="c1"&gt;#单个元素元组，注意逗号必须&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c1"&gt;#判断&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="c1"&gt;#其他同序列基本操作：分片，索引&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-tuple.html</guid><category>python</category></item><item><title>写在2012结尾，2013的开始</title><link>http://www.wklken.me/posts/2013/01/02/summary-06-2012end2013begin.html</link><description>&lt;p&gt;本来已经关电脑了，发现似乎落了些什么，想着昨晚似乎没有像以往写下总结，记录一些东西。&lt;/p&gt;
&lt;p&gt;看了下去年的总结: &lt;a href="http://wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html"&gt;地址&lt;/a&gt;,那时刚工作不久，感觉写的还是很不错的。每每回顾，总感觉过去的自己做得比现在好。难道老了么。。。。。&lt;/p&gt;
&lt;p&gt;既然去年标题，今年也俗一下，写在2012的结尾，2013的开始。虽然是补的。
思维有些跳跃，很少吃油条，纯粹是跳跃 &amp;gt; - &amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这一年做了什么呢？&lt;/p&gt;
&lt;p&gt;十月以前，没日没夜没心没肺开开心心过了玩玩整整的十个月，工作生活学习，充实，开心。&lt;/p&gt;
&lt;p&gt;工作上逐渐熟悉大部分东西了，做事效率什么的也上去了，所以过的也还算轻松。&lt;/p&gt;
&lt;p&gt;工具是提高生产力的方式之一。期间继续捣鼓一些工具脚本，有几个还算满意，有几个折戟沉沙颇为可惜。搞完了vim第一版本配置，搞完第一版alias。搞完了sublimetext2首个配置，开始玩github，dropbox+金山快盘+有道笔记。&lt;/p&gt;
&lt;p&gt;也瞎折腾了一些东西，注册SAE，搞了个开发者身份，迁移东西，搞了自己的域名和博客，瞎折腾。&lt;/p&gt;
&lt;p&gt;然后就是，感觉毕业快一年了，好多东西生疏了，买了几本数据结构和算法的书，同时开始看开放课 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 02 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-01-02:/posts/2013/01/02/summary-06-2012end2013begin.html</guid><category>总结，程序人生</category></item><item><title>Python-基础-列表及列表解析小结</title><link>http://www.wklken.me/posts/2012/12/30/python-base-list.html</link><description>&lt;h2 id="lie-biao-ji-lie-biao-jie-xi"&gt;列表及列表解析&lt;/h2&gt;
&lt;p&gt;发现要到2013了，这两个月，离职入职，忙七忙八的，博文少了好多，笔记到是一大堆。
最近开始整理书签，微博收藏以及笔记梳理
采用删的方式，就是在evernote中新建一片，然后捞对应的笔记，一点点总结梳理，删除原有的笔记，发现这样效率高些（原来是在原有笔记之上直接修改总结，发现有用的信息其实并不多，效率有点低）&lt;/p&gt;
&lt;p&gt;相对而言比较全和有用，会持续优化。&lt;/p&gt;
&lt;p&gt;2013，发完这个系列的博客之后，将会整个博客迁移到自己的博客（刚开始写...），后续将同步吧，不过csdn可能会慢一些，自己blog会更自由些。后续将会是python&amp;amp;框架,linux后台开发，Go等等其他。&lt;/p&gt;
&lt;p&gt;不扯了，看正题
以下是对列表笔记梳理的第一个版本，仅供参考&lt;/p&gt;
&lt;p&gt;资料来源于书籍，网络，个人练习等等&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#author:wklken
#version: 1.0
#date: 2012-12-30
#history:
  2012-12-30  created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-yi"&gt;定义：&lt;/h3&gt;
&lt;p&gt;列表是Python中使用最频繁的数据类型 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Dec 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-12-30:/posts/2012/12/30/python-base-list.html</guid><category>python</category></item><item><title>关于测试开发及其他——写在离职之前</title><link>http://www.wklken.me/posts/2012/11/28/summary-05-quitfirstjob.html</link><description>&lt;p&gt;前面&lt;/p&gt;
&lt;p&gt;在入职一周年的时候，写过一些东西，有过一些思考。&lt;/p&gt;
&lt;p&gt;而在一个月前，花了六天，投了下简历，花了五天，思考，抉择。&lt;/p&gt;
&lt;p&gt;虽然要投身入另一个地方，不再搞测试开发，但是，工作十六个月迄今，还是有一些感受的。&lt;/p&gt;
&lt;p&gt;所以，想针对这个，说说一些个人看法，仅供参考。&lt;/p&gt;
&lt;p&gt;（SDET，测试开发，但是貌似实际工作和字面理解还是有些差距的，工作时，角色更像QA+Tester，实际工作中，被称为QA......其实我还是喜欢SDET多些）&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;作为测试这一年多（准确来说16个月）：&lt;/p&gt;
&lt;p&gt;有为了赶进度，和开发一起加班到凌晨两点的时候&lt;/p&gt;
&lt;p&gt;有深夜上线，一大早又起来冒烟的时候(冬天很痛苦)&lt;/p&gt;
&lt;p&gt;有要开发帮忙搭环境，拉数据，查问题的时候&lt;/p&gt;
&lt;p&gt;有经历各种问题，挖出一个潜伏很深的bug的时候&lt;/p&gt;
&lt;p&gt;有误提bug导致开发查老半天的时候（面壁面壁）&lt;/p&gt;
&lt;p&gt;有搭环境搭到抓狂的时候&lt;/p&gt;
&lt;p&gt;有为了提高效率（不加班），狂写工具的时候&lt;/p&gt;
&lt;p&gt;也会偶尔测漏，郁闷的时候&lt;/p&gt;
&lt;p&gt;当然，也会吐吐槽 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 28 Nov 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-11-28:/posts/2012/11/28/summary-05-quitfirstjob.html</guid><category>总结，程序人生</category></item><item><title>Python-进阶-魔术方法小结(方法运算符重载)</title><link>http://www.wklken.me/posts/2012/10/29/python-base-magic.html</link><description>&lt;h2 id="mo-zhu-fang-fa"&gt;魔术方法&lt;/h2&gt;
&lt;p&gt;对定制及重载做了下梳理，还没消化完，后续补全&lt;/p&gt;
&lt;h3 id="ji-ben-ding-zhi"&gt;基本定制&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__init__(self[, arg1, ...]) 构造器（带一些可选的参数）
C.__new__(self[, arg1, ...]) 构造器（带一些可选的参数）；通常用在设置不变数据类型的子类
C.__del__(self) 解构器
C.__str__(self) 可打印的字符输出；内建str()及print 语句
C.__repr__(self) 运行时的字符串输出；内建repr()  ‘‘  和 操作符
C.__unicode__(self)b Unicode 字符串输出；内建unicode()
C.__call__(self, *args) 表示可调用的实例
C …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 29 Oct 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-10-29:/posts/2012/10/29/python-base-magic.html</guid><category>python</category></item><item><title>Python-进阶-装饰器小结</title><link>http://www.wklken.me/posts/2012/10/27/python-base-decorator.html</link><description>&lt;p&gt;想找个地方快乐的coding，貌似不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;一时冲动，不过后路已断，做自己想做的事情，总要付出一些代价的，坚持吧，只能。&lt;/p&gt;
&lt;p&gt;吐槽下，本周各种事情，搞得如越级打怪般艰难。周六，去三小时，回来三小时，大败而归，但是还是学到不少东西。&lt;/p&gt;
&lt;p&gt;差距还是有的，虽然自信可以在最短时间补上，但是，需要成本。&lt;/p&gt;
&lt;p&gt;总之，貌似时机不对，哎
以上废话，进入正题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上周六碰到了，一周忙碌，今天稍微理下，待补全，资料主要来源于书籍，网络&amp;amp;self.coding()。有任何问题，请指正哈&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan"&gt;资源&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;具体概念自己google&lt;/p&gt;
&lt;p&gt;装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理, Web权限校验, Cache等。&lt;/p&gt;
&lt;p&gt;很有名的例子，就是咖啡，加糖的咖啡，加牛奶的咖啡 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 27 Oct 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-10-27:/posts/2012/10/27/python-base-decorator.html</guid><category>python</category></item><item><title>如何进行shell脚本正确性测试</title><link>http://www.wklken.me/posts/2012/09/15/how-to-test-shell.html</link><description>&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？
  用于检查是否有遗漏逻辑，或有悖于需求。
B.具体语法，变量，判断语句
  语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-09-15:/posts/2012/09/15/how-to-test-shell.html</guid><category>python</category><category>shell</category></item><item><title>Python通用邮件发送[smtplib]</title><link>http://www.wklken.me/posts/2012/09/02/python-email-smtplib.html</link><description>&lt;p&gt;使用到的模块 &lt;a href="http://docs.python.org/2/library/smtplib.html"&gt;smtplib&lt;/a&gt;,  &lt;a href="http://docs.python.org/2/library/email"&gt;email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;1.发送邮件&lt;/p&gt;
&lt;p&gt;2.不需要登录任何邮箱等等&lt;/p&gt;
&lt;p&gt;3.支持多接收人&lt;/p&gt;
&lt;p&gt;4.支持附件&lt;/p&gt;
&lt;p&gt;5.支持命令行+方法调用&lt;/p&gt;
&lt;h3 id="ji-yu-ban-ben"&gt;基于版本&lt;/h3&gt;
&lt;p&gt;2.4
使用2.7和3.x的童鞋，可能需要修改下import信息&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;p&gt;使用官网一份代码进行重新修改，扩增功能&lt;/p&gt;
&lt;p&gt;代码托管地址 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#@author : wklken@yeah.ent&lt;/span&gt;
&lt;span class="c1"&gt;#@version : 0.1&lt;/span&gt;
&lt;span class="c1"&gt;#@desc: for mail sending.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getopt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-09-02:/posts/2012/09/02/python-email-smtplib.html</guid><category>python</category><category>smtplib</category></item><item><title>入职一周年小结</title><link>http://www.wklken.me/posts/2012/07/04/summary-04-workoneyear.html</link><description>&lt;p&gt;@author: wklken
@date: 2012-07-04
@version: 0.1
@desc: 入职一年，算作小结&lt;/p&gt;
&lt;p&gt;2012-07-04&lt;/p&gt;
&lt;p&gt;皓月当空，很久没有停下来好好望望月。&lt;/p&gt;
&lt;p&gt;从去年毕业入职到现在，正好一周年。&lt;/p&gt;
&lt;p&gt;一年中，不变的很多，改变的也很多。&lt;/p&gt;
&lt;p&gt;记得去年的7月4日，背着包挤公交去入职，认识新同事，打了两个礼拜酱油（熟悉各种...），然后开工。&lt;/p&gt;
&lt;p&gt;上班，培训，上课，写作业，加班，outing,新人秀.......&lt;/p&gt;
&lt;p&gt;回想一年，过得还算充实。&lt;/p&gt;
&lt;p&gt;时间流逝，生活也是一个不断发展的过程，是过程而非结果，这中间，得到什么，失去什么，迷茫，信念，思考，欢乐，失落，看过，走过，遗忘的，铭记的，遇到的事情，见到的人 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-07-04:/posts/2012/07/04/summary-04-workoneyear.html</guid><category>总结，程序人生</category></item><item><title>数据结构&amp;算法实践—【排序|选择排序】堆排序</title><link>http://www.wklken.me/posts/2012/06/02/python-ds-09-sort-heap.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;堆排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.堆排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/zh-cn/%E5%A0%86%E7%A9%8D%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;heapSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;max_heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;make_max_heap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;#构建一个最大堆&lt;/span&gt;
    &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;   &lt;span class="err"&gt;#当堆中还存在值&lt;/span&gt;
        &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 02 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-06-02:/posts/2012/06/02/python-ds-09-sort-heap.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|插入排序】插入排序</title><link>http://www.wklken.me/posts/2012/06/02/python-ds-10-sort-insert.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+示例分析
1.插入排序实现
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;插入排序，简单来说就是每次拿一个新的数，将其插入到有序序列中.&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[8, 4, 3, 1, 6, 9, 2, 7]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index- 1  #从第二个数开始&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move 1 , change-&amp;gt; [4, 8, 3, 1 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 02 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-06-02:/posts/2012/06/02/python-ds-10-sort-insert.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|交换排序】地精排序及改进</title><link>http://www.wklken.me/posts/2012/05/27/python-ds-06-sort-gnome.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;地精排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.地精排序实现
2.改进
3.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科:http://en.wikipedia.org/wiki/Gnome_sort(目前只有英文版的)&lt;/p&gt;
&lt;p&gt;地精排序又称侏儒排序，类似于插入排序，但是将一个数放入其正确位置的交换同冒泡排序（一系列交换）&lt;/p&gt;
&lt;p&gt;简单，只有一层循环，&lt;/p&gt;
&lt;p&gt;时间复杂度O(n^2)，最优复杂度O(n),平均时间复杂度O(n^2)&lt;/p&gt;
&lt;p&gt;其实思想很简单,往前冒泡，一旦发生数据交换，就往回冒泡，直到把被交换数字放入正确位置，之后，继续前进&lt;/p&gt;
&lt;p&gt;伪代码(来自于维基百科)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;procedure gnomeSort(a …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 27 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-27:/posts/2012/05/27/python-ds-06-sort-gnome.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|交换排序】Bogo排序</title><link>http://www.wklken.me/posts/2012/05/27/python-ds-07-sort-bogo.html</link><description>&lt;p&gt;维基百科上排序算法表里的算法基本都实现完了，陆续发出来&lt;/p&gt;
&lt;p&gt;有几个排序只有英文维基说明，有几个有中文，但是压根对不上，例如臭皮匠排序.....晕死，查找中....&lt;/p&gt;
&lt;p&gt;另外快排不敢轻易发出，等完全所有实现版本都搜罗分析完了再来.&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;地精排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念(木有啥伪代码)
2.bogo排序实现
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是一个比较蛋碎的排序算法.....囧&lt;/p&gt;
&lt;p&gt;原理：将一堆卡片撒到地上，查看是否已排序好，若没有，捡起来再撒一次，直到有序情况出现.&lt;/p&gt;
&lt;p&gt;维基百科:http://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;有兴趣看看无限猴子定理:http://zh.wikipedia.org/wiki/%E7%84%A1 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 27 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-27:/posts/2012/05/27/python-ds-07-sort-bogo.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|选择排序】选择排序</title><link>http://www.wklken.me/posts/2012/05/27/python-ds-07-sort-select.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;选择排序&amp;gt;&amp;gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.选择排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E9%81%B8%E6%93%87%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#共有&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;次选择&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;max_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;
        &lt;span class="k"&gt;for …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 27 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-27:/posts/2012/05/27/python-ds-07-sort-select.html</guid><category>python-ds-algorithm</category></item><item><title>Python修改xml任意内容[xml.etree.ElementTree]</title><link>http://www.wklken.me/posts/2012/05/25/python-xml-etree.html</link><description>&lt;p&gt;使用库 &lt;a href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;xml.etree.ElementTree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在实际应用中，需要对xml配置文件进行实时修改，&lt;/p&gt;
&lt;p&gt;1.增加、删除 某些节点&lt;/p&gt;
&lt;p&gt;2.增加，删除，修改某个节点下的某些属性&lt;/p&gt;
&lt;p&gt;3.增加，删除，修改某些节点的文本&lt;/p&gt;
&lt;h3 id="shi-yong-xmlwen-dang"&gt;使用xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;framework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;processers&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/A.so"&lt;/span&gt;
            &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"/tmp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fordelete"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 25 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-25:/posts/2012/05/25/python-xml-etree.html</guid><category>python</category><category>xml</category></item><item><title>数据结构&amp;算法实践—【排序|交换排序】奇偶排序</title><link>http://www.wklken.me/posts/2012/05/17/python-ds-04-sort-oddeven.md.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;奇偶排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.奇偶排序实现
2.Question
3.后续扩展
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;odd_even&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="nx"&gt;whie&lt;/span&gt; &lt;span class="nx"&gt;has_swap&lt;/span&gt;:
        &lt;span class="kt"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 17 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-17:/posts/2012/05/17/python-ds-04-sort-oddeven.md.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|交换排序】梳子排序</title><link>http://www.wklken.me/posts/2012/05/17/python-ds-05-sort-comb.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;梳子排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.梳子排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E6%A2%B3%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comb_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;
    &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.3&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//更新间距&lt;/span&gt;
        &lt;span class="nx"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;gap …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 17 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-17:/posts/2012/05/17/python-ds-05-sort-comb.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|交换排序】冒泡排序及改进</title><link>http://www.wklken.me/posts/2012/05/16/python-ds-02-sort-bubble.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;冒泡排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.基本冒泡排序
2.冒泡排序改进1
3.冒泡排序改进2——局部冒泡排序
4.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码：(来自百科)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubblesort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; : &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 16 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-16:/posts/2012/05/16/python-ds-02-sort-bubble.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践—【排序|交换排序】鸡尾酒排序</title><link>http://www.wklken.me/posts/2012/05/16/python-ds-03-sort-cocktail.html</link><description>&lt;blockquote&gt;
&lt;p&gt;排序&amp;gt;&amp;gt;交换排序&amp;gt;&amp;gt;鸡尾酒排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.概念+伪代码+示例分析
1.鸡尾酒排序实现
2.Question
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本概念:&lt;/p&gt;
&lt;p&gt;维基百科http://zh.wikipedia.org/wiki/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cocktail_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;: &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;f …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 16 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-16:/posts/2012/05/16/python-ds-03-sort-cocktail.html</guid><category>python-ds-algorithm</category></item><item><title>数据结构&amp;算法实践-Python——序章</title><link>http://www.wklken.me/posts/2012/05/10/python-ds-01-start.html</link><description>&lt;p&gt;很久很久之前的blog，没写完的系列，当时想写完来着，有点用，先转过来&lt;/p&gt;
&lt;p&gt;数据结构&amp;amp;算法实践——Python &lt;/p&gt;
&lt;p&gt;--------------------------------------目录 START------------------------------------------------&lt;/p&gt;
&lt;p&gt;第一部分列表(目录主要来自于维基百科)&lt;/p&gt;
&lt;p&gt;模块一：经典排序实现&lt;/p&gt;
&lt;p&gt;交换排序法&lt;/p&gt;
&lt;p&gt;冒泡排序 |鸡尾酒排序 |奇偶排序 |梳排序 |地精排序(gnome_sort) |Bogo排序|快速排序&lt;/p&gt;
&lt;p&gt;选择排序法&lt;/p&gt;
&lt;p&gt;选择排序 | 堆排序&lt;/p&gt;
&lt;p&gt;插入排序法&lt;/p&gt;
&lt;p&gt;插入排序 | 希尔排序 | 二叉查找树排序 | Library sort | Patience sorting&lt;/p&gt;
&lt;p&gt;归并排序法&lt;/p&gt;
&lt;p&gt;归并排序 | Strand sort&lt;/p&gt;
&lt;p&gt;非比较排序法&lt;/p&gt;
&lt;p&gt;基数排序 | 桶排序 | 计数排序 | 鸽巢排序 | Burstsort | Bead sort&lt;/p&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;拓扑排序 | 排序网络 | Bitonic …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 10 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-10:/posts/2012/05/10/python-ds-01-start.html</guid><category>python-ds-algorithm</category></item><item><title>Python解析xml大文件[sax]</title><link>http://www.wklken.me/posts/2012/04/07/python-xml-sax.html</link><description>&lt;p&gt;使用到的包：xml.sax &lt;a href=""&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;读取xml数据文件，文件较大，需要实时处理插入到数据库&lt;/p&gt;
&lt;h3 id="xmlwen-dang"&gt;xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PERSONS&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;100000&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sex&amp;gt;&lt;/span&gt;男&lt;span class="nt"&gt;&amp;lt;/sex&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;北京，海淀区&lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;fansNum&amp;gt;&lt;/span&gt;437&lt;span class="nt"&gt;&amp;lt;/fansNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;1989&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;wbNum&amp;gt;&lt;/span&gt;333&lt;span class="nt"&gt;&amp;lt;/wbNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;gzNum&amp;gt;&lt;/span&gt;242&lt;span class="nt"&gt;&amp;lt;/gzNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;blog&amp;gt;&lt;/span&gt;null&lt;span class="nt"&gt;&amp;lt;/blog&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edu&amp;gt;&lt;/span&gt;大学&lt;span class="nt"&gt;&amp;lt;/edu&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;work&amp;gt;&amp;lt;/work&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;renZh&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/renZh&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;brithday&amp;gt;&lt;/span&gt;2月14日&lt;span class="nt"&gt;&amp;lt;/brithday&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/person …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 07 Apr 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-04-07:/posts/2012/04/07/python-xml-sax.html</guid><category>python</category><category>xml</category></item><item><title>Python读取修改ini配置文件[ConfigParser]</title><link>http://www.wklken.me/posts/2012/02/19/python-ini-configparser.html</link><description>&lt;p&gt;使用到的包：ConfigParser &lt;a href="http://docs.python.org/2/library/configparser.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;写个项目，用到数据库，多个地方使用，不能硬编码。很类似java的properties文件&lt;/p&gt;
&lt;p&gt;Python支持ini文件的读取&lt;/p&gt;
&lt;h3 id="iniwen-jian"&gt;ini文件&lt;/h3&gt;
&lt;p&gt;db_config.ini&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[baseconf]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3306&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;evaluting_sys&lt;/span&gt;
&lt;span class="k"&gt;[concurrent]&lt;/span&gt;
&lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-li-dai-ma"&gt;示例代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to db ops&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Feb 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-02-19:/posts/2012/02/19/python-ini-configparser.html</guid><category>python</category><category>ini</category></item><item><title>Python解析xml[xml.dom]</title><link>http://www.wklken.me/posts/2012/02/18/python-xml-dom.html</link><description>&lt;p&gt;用到的包：xml.dom.minidom &lt;a href="http://docs.python.org/2/library/xml.dom.minidom.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;有一个表，里面数据量比较大，每天一更新，其字段可以通过xml配置文件进行配置，即，可能每次建表的字段不一样。&lt;/p&gt;
&lt;p&gt;上游跑时会根据配置从源文件中提取，到入库这一步需要根据配置进行建表。&lt;/p&gt;
&lt;h3 id="jie-jue"&gt;解决&lt;/h3&gt;
&lt;p&gt;写了一个简单的xml，配置需要字段及类型&lt;/p&gt;
&lt;p&gt;上游读取到对应的数据&lt;/p&gt;
&lt;p&gt;入库这一步，先把原表删除，根据配置建新表&lt;/p&gt;
&lt;h3 id="xmlwen-jian"&gt;XML文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 表名 ,数据库名   可灵活配置插入哪个库哪个表 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"top_query"&lt;/span&gt; &lt;span class="na"&gt;db_name=&lt;/span&gt;&lt;span class="s"&gt;"evaluting_sys"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 非业务主键，自增长,可配名，其他 INTEGER UNSIGNED AUTO_INCREMENT  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;primary_key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;id&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/primary_key …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 18 Feb 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-02-18:/posts/2012/02/18/python-xml-dom.html</guid><category>python</category><category>xml</category></item><item><title>半年工作成长小结</title><link>http://www.wklken.me/posts/2012/02/05/summary-03-workhalfyear.html</link><description>&lt;p&gt;自去年毕业工作至今，满打满算，七个月&lt;/p&gt;
&lt;p&gt;这七个月思考不断接触新的东西，学习很多，思考很多，却也依旧很是迷茫&lt;/p&gt;
&lt;p&gt;很多问题还没想好，所以，继续思考&lt;/p&gt;
&lt;p&gt;收获还是很多的，主要是一些前辈的建议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术与业务的关系？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A. 业务是目的，技术是手段。要在业务的设计开发中沉淀出通用的技术产品，要不断了解出现的技术，是否能为我所用，形成敏锐的判断力&lt;/p&gt;
&lt;p&gt;B. 业务分析能力更多的是经验、思考和坚持&lt;/p&gt;
&lt;p&gt;C. 技术研究与创新要与团队的整体目标紧密相连，才能得到更好地认同和发展&lt;/p&gt;
&lt;p&gt;刚毕业，对于技术，还是相当有热情的，理所当然，所谓的业务在心里的占比，就不是那么大了。去啃shell，啃python，回过头来发现似乎不太对劲。&lt;/p&gt;
&lt;p&gt;对于这几点，迄今还不是很能理解。起码对技术热情依然盖过了业务。&lt;/p&gt;
&lt;p&gt;很多问题，需要去深入学习和思考，或许只能慢慢来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要形成自己的知识体系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;术业有专攻，东西那么多，人的精力总是有限的，需要对自己整体的技术体系和业务体系有一个规划，形成体系。&lt;/p&gt;
&lt;p&gt;盲目通吃，多而不精，浅尝则止 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 05 Feb 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-02-05:/posts/2012/02/05/summary-03-workhalfyear.html</guid><category>总结，程序人生</category></item><item><title>写在2011的结尾，2012的开始</title><link>http://www.wklken.me/posts/2011/12/31/summary-02-2011end-2012begin.html</link><description>&lt;p&gt;写在2011的结尾，2012的开始&lt;/p&gt;
&lt;p&gt;2011-12-31 22:50&lt;/p&gt;
&lt;p&gt;今天是2011的最后一天。&lt;/p&gt;
&lt;p&gt;本来已经绝了写点东西的念头，但是想想，还是写点东西吧，算是对过去一年的一个总结吧。&lt;/p&gt;
&lt;p&gt;有点长，估计得写到明年才能写完&lt;/p&gt;
&lt;p&gt;从哪开始呢&lt;/p&gt;
&lt;p&gt;还是从头来吧&lt;/p&gt;
&lt;p&gt;2010年最后一天，也就是去年的今天，我正在北京，什么区来着，额，丰台区，四环外的一个小区，程庄路程庄北里八号楼，一个半地下室，和同来实习的一群哥们在一起。&lt;/p&gt;
&lt;p&gt;那时候实习，是来学校招的，大三时候也没想太多，面上了便来了。七八个人住半地下室，刚来第一个月是培训，什么都不管，早上五点半起，倒两个小时车，到北三环学院路一个大厦里上课，一天的课，那时起，对北京4毛的公交印象深刻，对一堵堵成列车的公交迄今难忘。&lt;/p&gt;
&lt;p&gt;上课那段只是复习而已，个人而言，还没自己看十天书敲十天代码来得强，主要是快餐式地灌输J2EE快速开发的一些内容，当然，也学到了不少东西，起码在学校接触不到。&lt;/p&gt;
&lt;p&gt;那时候，没想那么多，实习而已嘛，没想到我们几个实习生却承担了很大部分的工作，当做正式员工使 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 31 Dec 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2011-12-31:/posts/2011/12/31/summary-02-2011end-2012begin.html</guid><category>总结，程序人生</category></item><item><title>Python通用数据格式转换工具</title><link>http://www.wklken.me/posts/2011/12/10/python-dataformat.html</link><description>&lt;hr/&gt;
&lt;p&gt;已独立成项目在github上面 &lt;a href="https://github.com/wklken/dataformat"&gt;dataformat&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;涉及模块 os, getopt, sys&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在进行hadoop测试时，需要造大量数据，例如某个表存在56列，但实际程序逻辑只适用到某几列，我们造的数据 也只需要某几列&lt;/p&gt;
&lt;p&gt;构造几列数据，转化为对应数据表格式&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#dataformat.py&lt;/span&gt;
&lt;span class="c1"&gt;#   wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script change data from your source to the dest data format&lt;/span&gt;
&lt;span class="c1"&gt;#2011-08-05 created version0.1&lt;/span&gt;
&lt;span class="c1"&gt;#2011-10-29 add row-row mapping ,default row value …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 10 Dec 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2011-12-10:/posts/2011/12/10/python-dataformat.html</guid><category>python</category></item><item><title>Python实现ftp常用操作[ftplib]</title><link>http://www.wklken.me/posts/2011/12/10/python-ftp-ftplib.html</link><description>&lt;p&gt;使用到的模块  &lt;a href="http://docs.python.org/2/library/ftplib.html"&gt;ftplib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;快速进行ftp上传 ，下载，查询文件&lt;/p&gt;
&lt;p&gt;原来直接在shell下操作：需要【连接，输用户名，输密码，单文件操作，存在超时限制】&lt;/p&gt;
&lt;p&gt;太过于繁琐，容易操作失败&lt;/p&gt;
&lt;h3 id="gai-jin"&gt;改进&lt;/h3&gt;
&lt;p&gt;一句命令，搞定多文件上传，下载，查询，列表等操作&lt;/p&gt;
&lt;p&gt;后期可以加入更强大的功能&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#ftp.py&lt;/span&gt;
&lt;span class="c1"&gt;#    wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script is used to do some operations more convenient via ftp&lt;/span&gt;
  &lt;span class="c1"&gt;#1.[p]upload …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 10 Dec 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2011-12-10:/posts/2011/12/10/python-ftp-ftplib.html</guid><category>python</category><category>ftplib</category></item><item><title>虽有遗憾，不曾后悔——写在离校之前</title><link>http://www.wklken.me/posts/2011/06/18/summary-01-leaveschool.html</link><description>&lt;p&gt;即将离开学校了，突然想写点什么，既然是CSDN，就写写这四年是咋过的吧。&lt;/p&gt;
&lt;p&gt;高考一分之差，错过了自己报的本省大学，机缘巧合，补录到了离家两千多公里外的这个大学。&lt;/p&gt;
&lt;p&gt;大一，只身北上，两千五百多公里，二十七个钟头火车，来到了学校。&lt;/p&gt;
&lt;p&gt;话说那时候挺猛，一个人杀到学校注册，结果到的时候发现就自己是一个人来的，囧。&lt;/p&gt;
&lt;p&gt;注册，军训，然后开始了正儿八经的大学生活。&lt;/p&gt;
&lt;p&gt;大一，中规中矩，大一教的编程语言是Java，其实一直到现在对这个一直抱有怨念，坑爹的应该教C才对。虽然简单易学，但是毕竟属于比较非底层的语言。但毕竟有自己的优点，也就是那时候，开始使用Java。&lt;/p&gt;
&lt;p&gt;记得那时候的实验课，是感觉最具有挑战性的，题目都是实验老师临时出的，一晚上一个，做出来交上就完事，呵呵，记得写print第一个画图形的程序花了两个多钟头，还记得另一个写日历程序，那时候压根还不知道Java自带的日历，坑爹的拿纸整整演算了两大页，用算法愣是搞出来了。呵呵，回头看，似乎没啥，但是人总是存在一个成长的过程，经历了。&lt;/p&gt;
&lt;p&gt;晕晕乎乎，把Java学完了，那时候做习题，以及考试 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 18 Jun 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2011-06-18:/posts/2011/06/18/summary-01-leaveschool.html</guid><category>总结，程序人生</category></item></channel></rss>