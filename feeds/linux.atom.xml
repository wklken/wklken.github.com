<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog - linux</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/linux.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2017-03-25T00:00:00+08:00</updated><entry><title>vim 杂谈 - 关于快速编辑</title><link href="http://www.wklken.me/posts/2017/03/25/vim-about-edit.html" rel="alternate"></link><published>2017-03-25T00:00:00+08:00</published><updated>2017-03-25T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-03-25:/posts/2017/03/25/vim-about-edit.html</id><summary type="html">&lt;p&gt;在&lt;code&gt;vim&lt;/code&gt;中写代码, 并不是, 我们所见到的代码都要一个个字符输进去, 一定不是这样的.&lt;/p&gt;
&lt;p&gt;这篇, 让我们来谈谈如何进行快速编辑.&lt;/p&gt;
&lt;p&gt;当然, 一篇文章只能概述, 给大家一些参考, 具体每项都可以自行找相关资料. 很多外链, 莫跳丢了&lt;/p&gt;
&lt;p&gt;注意, 其中会涉及到比较多的插件, 而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 用的是 &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, 如果你用得是其他的插件管理工具, 自行转换.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="textobject"&gt;textobject&lt;/h2&gt;
&lt;p&gt;文本对象, 是进行快速编辑的基础秘诀. 将一个单词, 句子, 段落当成一个对象看待, 可以进行快速选中/替换/删除等操作&lt;/p&gt;
&lt;p&gt;有一篇文章解释得很清楚 &lt;a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;Vim Text Objects: The Definitive Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令格式:  操作+范围+对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w  -  word单词
s  -  sentence句子
p  -  paragraph段落 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;在&lt;code&gt;vim&lt;/code&gt;中写代码, 并不是, 我们所见到的代码都要一个个字符输进去, 一定不是这样的.&lt;/p&gt;
&lt;p&gt;这篇, 让我们来谈谈如何进行快速编辑.&lt;/p&gt;
&lt;p&gt;当然, 一篇文章只能概述, 给大家一些参考, 具体每项都可以自行找相关资料. 很多外链, 莫跳丢了&lt;/p&gt;
&lt;p&gt;注意, 其中会涉及到比较多的插件, 而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 用的是 &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;, 如果你用得是其他的插件管理工具, 自行转换.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="textobject"&gt;textobject&lt;/h2&gt;
&lt;p&gt;文本对象, 是进行快速编辑的基础秘诀. 将一个单词, 句子, 段落当成一个对象看待, 可以进行快速选中/替换/删除等操作&lt;/p&gt;
&lt;p&gt;有一篇文章解释得很清楚 &lt;a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;Vim Text Objects: The Definitive Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;命令格式:  操作+范围+对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w  -  word单词
s  -  sentence句子
p  -  paragraph段落
' " ) ] } &amp;gt; 等成对的
t  -  Tag标签
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;范围&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i  -  在里面
a  -  所有, 包括成对的引号等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d  -  删除
v  -  选中
c  -  替换
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子, &lt;code&gt;|&lt;/code&gt;代表光标位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;123(a|bc)456

di)   删除引号内的内容   =&amp;gt; 123()456
da)   删除引号内容, 包括引号  =&amp;gt; 123456
vi)   选中引号内内容 abc
....
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="textobjectzeng-qiang"&gt;textobject增强&lt;/h2&gt;
&lt;p&gt;vim自带了很多文本对象, 但是还可以进一步增强, 例如, 以行&lt;code&gt;l&lt;/code&gt;(&lt;code&gt;line&lt;/code&gt;)/以文件&lt;code&gt;e&lt;/code&gt;(&lt;code&gt;entire file&lt;/code&gt;)/以缩进&lt;code&gt;i&lt;/code&gt;(&lt;code&gt;indent&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 中, 加了如下的几个文本对象, 这样, 在写&lt;code&gt;python&lt;/code&gt;代码时, 你可以很方便的批量选中同一个缩进里面的所有代码块, 即使代码之间有空行.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904505226654.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;还有很多插件, 提供了更加丰富的文本对象, 例如, 函数中的参数等. 可以根据需要自行加入&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="dai-ma-bu-quan"&gt;代码补全&lt;/h2&gt;
&lt;p&gt;代码补全, 是必需品, 也是提升效率的大杀器.&lt;/p&gt;
&lt;p&gt;对比试用过非常多的补全插件之后, 最终选定了 &lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt;. 快速提示/模糊匹配/跳转到函数定义等等, 总之, 非常流畅, 体验很好.&lt;/p&gt;
&lt;p&gt;这个插件唯一缺点是: &lt;code&gt;太难装&lt;/code&gt;. 没错, 就是太难装, 对&lt;code&gt;vim&lt;/code&gt;版本有要求, 然后在天朝这种网络环境下要拉接近&lt;code&gt;300M&lt;/code&gt;的文件下来不是一件很容易的事情, 下完之后还得编译&lt;code&gt;&amp;gt;_&amp;lt;#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是, 历经千辛万苦之后, 你会发现这是值得的, 有了 &lt;code&gt;YCM&lt;/code&gt;, 写代码的速度和质量能提升非常非常非常非常多.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plug 'Valloric/YouCompleteMe'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L368"&gt;k-vim vimrc.bundles#L368&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;几个常用快捷键&lt;code&gt;,jd&lt;/code&gt;/&lt;code&gt;,gd&lt;/code&gt;跳转到定义处, &lt;code&gt;ctrl+空格&lt;/code&gt;主动触发补全(默认输入2个字符以上自动补, 可以什么都没输入触发补全), &lt;code&gt;ctrl+j/k&lt;/code&gt;或者&lt;code&gt;ctrl+p/n&lt;/code&gt;进行补全上下选中&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904511192878.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;golang&lt;/code&gt;, 使用 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dai-ma-pian-duan"&gt;代码片段&lt;/h2&gt;
&lt;p&gt;代码片段, 是代码补全的互补. 当你预先定义一些常用的片段, 就能输入关键字后, 触发补全整个代码片段&lt;/p&gt;
&lt;p&gt;这里推荐的插件是 &lt;a href="https://github.com/SirVer/ultisnips"&gt;ultisnips&lt;/a&gt;(代码片段补全工具) 配合 &lt;a href="https://github.com/honza/vim-snippets"&gt;vim-snippets&lt;/a&gt;(常用代码片段, 包含各类预研)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L410"&gt;k-vim vimrc.bundles#L410&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意, &lt;code&gt;ultisnips&lt;/code&gt;快捷键和&lt;code&gt;YCM&lt;/code&gt;冲突, 所以配置两个插件时需注意&lt;/p&gt;
&lt;p&gt;举个栗子: 输入&lt;code&gt;class&lt;/code&gt; 然后 &lt;code&gt;Tab&lt;/code&gt; 触发补全, 就能进行类似完形填空的流程, 一路输入, 然后&lt;code&gt;Tab&lt;/code&gt;到下一个框, 几下就能完成一段代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904519598794.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;当然, 可以自己添加补充代码片段. &lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以&lt;code&gt;python&lt;/code&gt;为例, 除了&lt;code&gt;vim-snippets&lt;/code&gt;中带的那些补全关键字, 我还配置了很多单字符直接补全&lt;code&gt;python&lt;/code&gt;关键字(&lt;a href="https://github.com/wklken/k-vim/blob/master/UltiSnips/python.snippets"&gt;github python.snippets&lt;/a&gt;)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;t -&amp;gt; True
f -&amp;gt; False
n -&amp;gt; None
r -&amp;gt; return
p -&amp;gt; print
....
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="yin-hao-gua-hao-deng-ji-html-biao-qian-bu-quan"&gt;引号括号等及 html 标签不全&lt;/h2&gt;
&lt;p&gt;另一个必须品, 当我们输入引号(&lt;code&gt;'' ""&lt;/code&gt;), 括号(&lt;code&gt;() [] {}&lt;/code&gt;) 以及 &lt;code&gt;html&lt;/code&gt;的标签&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, 这类都是成对出现的, &lt;/p&gt;
&lt;p&gt;当我们输入一半, 自动补全另一半字符. 这里用到的插件是 &lt;a href="https://github.com/Raimondi/delimitMate"&gt;delimitMate&lt;/a&gt; 和 &lt;a href="https://github.com/docunext/closetag.vim"&gt;closetag.vim&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后, 针对Python做了个优化, 可以快速补全&lt;code&gt;docstring&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"""
"""
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L442"&gt;k-vim vimrc.bundles#L442&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前一篇博客: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-delimitmate.html"&gt;VIM插件: DELIMITMATE(符号自动补全)&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="duo-guang-biao-bian-ji"&gt;多光标编辑&lt;/h2&gt;
&lt;p&gt;在编辑一段代码时, 例如, 想修改函数体内某个变量名, 除了用替换(查找+替换相对复杂), 还可以用 &lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt;, 之前写的一篇博客 &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-multiplecursors.html"&gt;VIM插件: MULTIPLE-CURSORS(多光标操作)&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-edit/14904526993739.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L518"&gt;k-vim vimrc.bundles#L518&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配合 &lt;a href="https://github.com/dyng/ctrlsf.vim"&gt;ctrlsf&lt;/a&gt; 插件, 搜索后多光标直接编辑保存, 简直是重构神器, 后面细说&lt;/p&gt;
&lt;h2 id="kuai-su-zhu-shi"&gt;快速注释&lt;/h2&gt;
&lt;p&gt;很多时候要注释多行的代码, 或者解开注释. 你需要 &lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;nerdcommenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你只需要 &lt;code&gt;选中&lt;/code&gt;(&lt;code&gt;shift+v+j/k&lt;/code&gt;) 然后 &lt;code&gt;,cc&lt;/code&gt;.  如果仅注释当前行的话, 可以省了&lt;code&gt;选中&lt;/code&gt;这一步, 直接&lt;code&gt;,cc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解开注释 &lt;code&gt;,cu&lt;/code&gt;(注意, 这里的&lt;code&gt;,&lt;/code&gt;等于&lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;键)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" quick edit
" 快速注释
Plug 'scrooloose/nerdcommenter'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示博客: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-nerdcommenter.html"&gt;VIM插件: NERDCOMMENTER(快速注释)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="xiu-gai-huan-rao-zi-fu"&gt;修改环绕字符&lt;/h2&gt;
&lt;p&gt;场景: 给单词加引号, 给十个单词加引号, 删除某一对引号/括号, 加&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;将字符串括起来&lt;/p&gt;
&lt;p&gt;用到两个插件 &lt;a href="https://github.com/tpope/vim-surround"&gt;vim-surround&lt;/a&gt;(负责环绕字符编辑) 和 &lt;a href="https://github.com/tpope/vim-repeat"&gt;vim-repeat&lt;/a&gt;(负责重复)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 快速加入修改环绕字符
" for repeat -&amp;gt; enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;吐槽下, &lt;code&gt;vim-surround&lt;/code&gt;快捷键特别感人.....&lt;/p&gt;
&lt;p&gt;博客说明: &lt;a href="http://www.wklken.me/posts/2015/06/13/vim-plugin-surround-repeat.html"&gt;VIM插件: SURROUND &amp;amp; REPEAT(成对符号编辑)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dui-qi"&gt;对齐&lt;/h2&gt;
&lt;p&gt;偶尔的需求, 需要根据&lt;code&gt;=&lt;/code&gt;或&lt;code&gt;,&lt;/code&gt;或者空格, 将多行数据对齐, 之前的一篇博客说明 &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easyalign.html"&gt;VIM插件: EASY-ALIGN(快速对齐)&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" easyalign
" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相关配置: &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc.bundles#L466"&gt;k-vim vimrc.bundles#L466&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="qu-xing-wei-kong-ge"&gt;去行尾空格&lt;/h2&gt;
&lt;p&gt;轻微强迫症, 忍不了每行代码行尾没用的空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" trailingwhitespace
" 快速去行尾空格 [, + &amp;lt;Space&amp;gt;]
Plug 'bronson/vim-trailing-whitespace'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配了 &lt;code&gt;,+空格&lt;/code&gt;, 一键去除当前文件所有的行尾空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" trailingwhitespace {{{
    map &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :FixWhitespace&amp;lt;cr&amp;gt;
" }}}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后面文章会提及&lt;code&gt;vim中那些被动技能&lt;/code&gt;, 会提到如何配置保存时自动去除行尾空格&lt;/p&gt;
&lt;h2 id="suo-jin"&gt;缩进&lt;/h2&gt;
&lt;p&gt;写代码时, 有时候要进行缩进, 选中后, 例如&lt;code&gt;shift-v&lt;/code&gt;加&lt;code&gt;jk&lt;/code&gt;上下选中多行, &lt;code&gt;&amp;lt;&lt;/code&gt;或者&lt;code&gt;&amp;gt;&lt;/code&gt;可以进行整体缩进, 但是遇到个问题, 有时候需要多次缩进, 而默认, 缩进一次后, 选中消失, 要操作, 得再次选中.....(&lt;code&gt;&amp;gt;_&amp;lt;#&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;增加如下配置, 缩进完自动选中, 可以再次缩进&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 调整缩进后自动选中，方便再次操作
vnoremap &amp;lt; &amp;lt;gv
vnoremap &amp;gt; &amp;gt;gv
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="kuai-su-ti-huan-shan-chu-zui-jin-cha-ru-de-nei-rong"&gt;快速替换/删除最近插入的内容&lt;/h2&gt;
&lt;p&gt;当我们插入一段内容, 然后切换到普通模式后, 相对插入的内容进行快速选中, 然后删除或者替换, 可以&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 选中并高亮最后一次插入的内容
nnoremap gv `[v`]
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pythonkai-fa"&gt;python开发&lt;/h2&gt;
&lt;p&gt;两个插件推荐&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;" 改变编辑时缩进行为, 更友好的缩进&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'hynek/vim-python-pep8-indent'&lt;/span&gt;

&lt;span class="s2"&gt;" import 排序, 强迫症福音&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'fisadev/vim-isort'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预告: 下一篇, 将快速导航, 如何在项目维度导航跳转&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>vim 杂谈 - 关于移动</title><link href="http://www.wklken.me/posts/2017/03/20/vim-about-move.html" rel="alternate"></link><published>2017-03-20T00:00:00+08:00</published><updated>2017-03-20T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2017-03-20:/posts/2017/03/20/vim-about-move.html</id><summary type="html">&lt;p&gt;这个专栏的主要目的, 是介绍后台开发, vim, python, 工具, 效率, 项目等等一些所思所想. 欢迎关注及交流.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个项目, 虽然一年只更新一两次, 但是里面很多配置, 都是基于使用中的痛点, 以及 &lt;code&gt;符合自觉&lt;/code&gt; 的原则进行的变更.&lt;/p&gt;
&lt;p&gt;整体而言, &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 虽然做成了一个开箱即用的配置, 但是很多使用者更想知道一些更具体的说明, 包含配置项, 配置原因等等.&lt;/p&gt;
&lt;p&gt;之前有个blog有提过一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't put anything in your .vimrc you don't understand!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我不是十分赞同(我更倾向于基于一个完备的配置再进行深入了解和 DIY, 毕竟从0打造成本略高).&lt;/p&gt;
&lt;p&gt;但是觉得有必要, 写一写, 谈一谈&lt;code&gt;vim&lt;/code&gt;中的一些配置的原因.&lt;/p&gt;
&lt;p&gt;目测会成系列, 从前到后你也能个性化自己的完整配置. 也可以借鉴一些技巧和插件使用(总共会提及约&lt;code&gt;60+&lt;/code&gt;插件)&lt;/p&gt;
&lt;p&gt;第一篇, 移动.&lt;/p&gt;
&lt;h2 id="hjkl"&gt;HJKL …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;这个专栏的主要目的, 是介绍后台开发, vim, python, 工具, 效率, 项目等等一些所思所想. 欢迎关注及交流.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 这个项目, 虽然一年只更新一两次, 但是里面很多配置, 都是基于使用中的痛点, 以及 &lt;code&gt;符合自觉&lt;/code&gt; 的原则进行的变更.&lt;/p&gt;
&lt;p&gt;整体而言, &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 虽然做成了一个开箱即用的配置, 但是很多使用者更想知道一些更具体的说明, 包含配置项, 配置原因等等.&lt;/p&gt;
&lt;p&gt;之前有个blog有提过一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don't put anything in your .vimrc you don't understand!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我不是十分赞同(我更倾向于基于一个完备的配置再进行深入了解和 DIY, 毕竟从0打造成本略高).&lt;/p&gt;
&lt;p&gt;但是觉得有必要, 写一写, 谈一谈&lt;code&gt;vim&lt;/code&gt;中的一些配置的原因.&lt;/p&gt;
&lt;p&gt;目测会成系列, 从前到后你也能个性化自己的完整配置. 也可以借鉴一些技巧和插件使用(总共会提及约&lt;code&gt;60+&lt;/code&gt;插件)&lt;/p&gt;
&lt;p&gt;第一篇, 移动.&lt;/p&gt;
&lt;h2 id="hjkl"&gt;HJKL&lt;/h2&gt;
&lt;p&gt;一谈到移动, 首先想到的是&lt;code&gt;hjkl&lt;/code&gt;, 最基本的上下左右&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h 左移
l 右移

k 上移
j 下移 (记忆 jump)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然, 左右只是字符间移动, 上下是行之间的移动&lt;/p&gt;
&lt;h2 id="you-hua-hjkl"&gt;优化HJKL&lt;/h2&gt;
&lt;p&gt;首先, 为了防止自己&lt;code&gt;情不自禁&lt;/code&gt;使用 &lt;code&gt;上下左右&lt;/code&gt; 方向键, 可以禁用之.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 关闭方向键, 强迫自己用 hjkl
map &amp;lt;Left&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Right&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Up&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Down&amp;gt; &amp;lt;Nop&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次, 当一行超长之后, &lt;code&gt;se wrap&lt;/code&gt;, 一行就显示为多行(一个物理行 - 多个展示行), 如果是默认配置, 使用 &lt;code&gt;jk&lt;/code&gt; 移动时, 将会是物理行维度的, 而直觉上应该在展示行维度跳转(视觉上), 所以加配置, 使得&lt;code&gt;jk&lt;/code&gt;在展示行之间上下跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外, 当上下移动时, 默认光标到顶/到底后, 再用&lt;code&gt;jk&lt;/code&gt;时, 光标是贴着终端顶部或底部的, 需要配置, 保证光标距离顶部或底部一定行数, 这样显示视觉效果更好.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="dan-ci-jian-yi-dong"&gt;单词间移动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wbe&lt;/code&gt;, 原先是&lt;code&gt;wWbBeE&lt;/code&gt;, 大小写都是有各自含义的, 但是, 更懒的做法, 只用小写&lt;code&gt;wbe&lt;/code&gt;, 毕竟, 使用大写&lt;code&gt;WBE&lt;/code&gt;, 你还得多按一个&lt;code&gt;shift&lt;/code&gt;键, 以及, 肌肉记忆下, 操作的一瞬间, 你很难将你想要的和&lt;code&gt;使用大写还是小写分别代表什么动作, 句子里哪个是标点&lt;/code&gt;关联起来.&lt;/p&gt;
&lt;p&gt;所以, 直接无视大写吧&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w 移到下一个单词 (记忆 next word)
b 移动到单词开头 (记忆 back)
e 移动到单词尾部
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="guan-yu-0he-yi-ji-hml-de-you-hua"&gt;关于 0和$, 以及 HML 的优化&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;, 分别是&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 移动到行首
$ 移动到行尾
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而, &lt;code&gt;0&lt;/code&gt;, 需要手指离开字母区, &lt;code&gt;$&lt;/code&gt;更惨, 还得多按一个&lt;code&gt;shift&lt;/code&gt;. 另外其实还有个&lt;code&gt;^&lt;/code&gt;的, 实在按不着&lt;code&gt;&amp;gt;_&amp;lt;#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HML&lt;/code&gt; 是同屏间, 快速移动到屏幕&lt;code&gt;顶部&lt;/code&gt;/&lt;code&gt;中间&lt;/code&gt;/&lt;code&gt;底部&lt;/code&gt;, 顶部和底部还好, 中间到底在哪? 具体哪一行, 这个是比较范的操作, 非精确操作(不能一次性移动到想要的位置), 所以我的结论是: 废掉&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;H&lt;/code&gt;映射成&lt;code&gt;移动到行首(最左边)&lt;/code&gt;, 将&lt;code&gt;L&lt;/code&gt;映射成&lt;code&gt;移动到行尾(最右边)&lt;/code&gt;, 和原先&lt;code&gt;hjkl&lt;/code&gt;意义同, 且在字母区. 更符合直觉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Go to home and end using capitalized directions
noremap H ^
noremap L $
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="xing-nei-fftt"&gt;行内: fFtT&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;f/F&lt;/code&gt;, 同一行内向前/向后跳转, 而&lt;code&gt;t/T&lt;/code&gt;同, 只是会调到目标位置的前面一个字符&lt;/p&gt;
&lt;p&gt;我的做法是, 忘掉&lt;code&gt;tT&lt;/code&gt;, &lt;code&gt;fF&lt;/code&gt;更符合直觉, 真正的&lt;code&gt;指哪到哪&lt;/code&gt;, 而且&lt;code&gt;f=find&lt;/code&gt;也好记&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f  跳转到向前搜索的字母位置
F  跳转到向后搜索的字母位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里, 推荐一个插件(被动生效), 可以高亮显示目标字母: &lt;a href="https://github.com/unblevable/quick-scope"&gt;quick-scope&lt;/a&gt; A Vim plugin that highlights which characters to target for f, F and family. No mappings are needed.&lt;/p&gt;
&lt;h2 id="wen-jian-guan-yu-ctrl-fbud"&gt;文件: 关于 ctrl + fbud&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ctrl + f/b&lt;/code&gt; 下翻/上翻一页,  而&lt;code&gt;ctrl + u/d&lt;/code&gt; 下翻/上翻半页.&lt;/p&gt;
&lt;p&gt;我的做法是, 忘掉&lt;code&gt;ctrl + f/b&lt;/code&gt;, 只用&lt;code&gt;ctrl + u/d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们经常做的操作是, 不停的上翻/下翻, 连续动作, 一整页太多, 看内容很容易思维上&lt;code&gt;断开&lt;/code&gt;, 需要返回去重看, 而半页有一半的东西是连着的; 而对于使用&lt;code&gt;压掌大法&lt;/code&gt;按&lt;code&gt;ctrl&lt;/code&gt;的人来说,  按住&lt;code&gt;ctrl&lt;/code&gt;再反复&lt;code&gt;fb&lt;/code&gt;, 特别是 &lt;code&gt;b&lt;/code&gt;, 特别难按, &lt;code&gt;fb&lt;/code&gt;都在左边, 左手太累&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;ud&lt;/code&gt;, 可以将操作放到两手, 也方便(肌肉)记忆&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl + u 上翻半页(记忆 up)
ctrl + d 下翻半页(记忆 down)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen-jian-tou-wei-he-mou-yi-xing"&gt;文件: 头尾和某一行&lt;/h2&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gg  跳转到文件头
G   跳转到文件尾

:n  精确移动到第几行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;记住这三个, 基本够了吧?&lt;/p&gt;
&lt;h2 id="fen-ping-yi-dong"&gt;分屏移动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ctrl + w + hjkl&lt;/code&gt; 是默认分分屏的快捷键, 去掉&lt;code&gt;w&lt;/code&gt;更快些&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 分屏窗口移动, Smart way to move between windows
map &amp;lt;C-j&amp;gt; &amp;lt;C-W&amp;gt;j
map &amp;lt;C-k&amp;gt; &amp;lt;C-W&amp;gt;k
map &amp;lt;C-h&amp;gt; &amp;lt;C-W&amp;gt;h
map &amp;lt;C-l&amp;gt; &amp;lt;C-W&amp;gt;l
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="cha-jian-biao-ji-tiao-zhuan-zeng-qiang-vim-signature"&gt;插件: 标记跳转增强 &lt;code&gt;vim-signature&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;默认, &lt;code&gt;m + 字母&lt;/code&gt;, 可以在当前打一个标记, 然后 &lt;code&gt;反引号+字母&lt;/code&gt; 可以跳转到标记行&lt;/p&gt;
&lt;p&gt;但是存在的缺点是: 标记不可见, 且反引号实在难按&lt;/p&gt;
&lt;p&gt;所以做了些增强&lt;/p&gt;
&lt;p&gt;安装这个插件: &lt;a href="https://github.com/kshenoy/vim-signature"&gt;vim-signature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体安装/配置/演示: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-signature.html"&gt;VIM插件: VIM-SIGNATURE(快速标记跳转)&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 交换 单引号/反引号, 使得可以快速使用 单引号 跳到marked位置
nnoremap ' `
nnoremap ` '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其常用的几个快捷键&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m&amp;lt;Space&amp;gt;  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" src="/imgs/vim/vim-about-move/14899311413274.gif"/&gt;&lt;/p&gt;
&lt;h2 id="cha-jian-zhong-ji-tiao-zhuan-easymotion"&gt;插件: 终极跳转 easymotion&lt;/h2&gt;
&lt;p&gt;有一个插件, 对跳转做了深入的定制, 那就是: &lt;a href="https://github.com/easymotion/vim-easymotion"&gt;vim-easymotion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装了之后, 简直想怎么跳就怎么跳. 作为一个必备插件, 大家有必要深入学习下用法, 跳转效率翻倍&lt;/p&gt;
&lt;p&gt;之前写的一篇博文介绍: &lt;a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html"&gt;VIM插件: EASYMOTION(快速跳转)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法1: 跳转到当前光标前后的位置(w/b)&lt;/li&gt;
&lt;li&gt;用法2: 搜索跳转(s)&lt;/li&gt;
&lt;li&gt;用法3: 行级跳转(jk)&lt;/li&gt;
&lt;li&gt;用法4: 行内跳转(hl)&lt;/li&gt;
&lt;li&gt;用法5: 重复上一次动作(.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体配置及演示见博文&lt;/p&gt;
&lt;h2 id="qi-ta"&gt;其他&lt;/h2&gt;
&lt;p&gt;vim中跳转的配置大抵这些就够用了.&lt;/p&gt;
&lt;p&gt;下一篇, 将介绍如何快速编辑. 后续还有搜索替换等等一系列内容&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>一些vim的个性化配置</title><link href="http://www.wklken.me/posts/2016/02/03/some-vim-configs.html" rel="alternate"></link><published>2016-02-03T00:00:00+08:00</published><updated>2016-02-03T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2016-02-03:/posts/2016/02/03/some-vim-configs.html</id><summary type="html">&lt;p&gt;在咖啡馆kill time, 时间不多但实在无聊, 随便写写&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;入坑vim, 四年有余了&lt;/p&gt;
&lt;p&gt;自从2012年将自己的配置发布到github后, 持续性的维护着, 逐步解决一些使用中的痛点, 反直觉的东西, 慢慢形成了现有的配置.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下, 就列下, 在k-vim中, 做了哪些配置, 下面这些在 &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc"&gt;vimrc&lt;/a&gt; 中都可以找到&lt;/p&gt;
&lt;p&gt;首先, 一上来就把&lt;code&gt;leader&lt;/code&gt;键改掉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 修改leader键
let mapleader = ','
let g:mapleader = ','
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移动时, 保留到底部的空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义代码折叠toggle&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 代码折叠自定义快捷键 &amp;lt;leader&amp;gt;zz
let g:FoldMethod = 0
map &amp;lt;leader&amp;gt;zz :call ToggleFold()&amp;lt;cr …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;在咖啡馆kill time, 时间不多但实在无聊, 随便写写&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;入坑vim, 四年有余了&lt;/p&gt;
&lt;p&gt;自从2012年将自己的配置发布到github后, 持续性的维护着, 逐步解决一些使用中的痛点, 反直觉的东西, 慢慢形成了现有的配置.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下, 就列下, 在k-vim中, 做了哪些配置, 下面这些在 &lt;a href="https://github.com/wklken/k-vim/blob/master/vimrc"&gt;vimrc&lt;/a&gt; 中都可以找到&lt;/p&gt;
&lt;p&gt;首先, 一上来就把&lt;code&gt;leader&lt;/code&gt;键改掉&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 修改leader键
let mapleader = ','
let g:mapleader = ','
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移动时, 保留到底部的空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义代码折叠toggle&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 代码折叠自定义快捷键 &amp;lt;leader&amp;gt;zz
let g:FoldMethod = 0
map &amp;lt;leader&amp;gt;zz :call ToggleFold()&amp;lt;cr&amp;gt;
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ctrl-n&lt;/code&gt;进行相对行号/绝对行号切换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 相对行号: 行号变成相对，可以用 nj/nk 进行跳转
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&amp;amp;relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
nnoremap &amp;lt;C-n&amp;gt; :call NumberToggle()&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;quickfix的使用, 回车跳转到报错点, &lt;code&gt;s&lt;/code&gt;或&lt;code&gt;v&lt;/code&gt;分屏打开&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" In the quickfix window, &amp;lt;CR&amp;gt; is used to jump to the error under the
" cursor, so undefine the mapping there.
autocmd BufReadPost quickfix nnoremap &amp;lt;buffer&amp;gt; &amp;lt;CR&amp;gt; &amp;lt;CR&amp;gt;
" quickfix window  s/v to open in split window,  ,gd/,jd =&amp;gt; quickfix window =&amp;gt; open it
autocmd BufReadPost quickfix nnoremap &amp;lt;buffer&amp;gt; v &amp;lt;C-w&amp;gt;&amp;lt;Enter&amp;gt;&amp;lt;C-w&amp;gt;L
autocmd BufReadPost quickfix nnoremap &amp;lt;buffer&amp;gt; s &amp;lt;C-w&amp;gt;&amp;lt;Enter&amp;gt;&amp;lt;C-w&amp;gt;K
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开vim, 自动定位到上次最后变更位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") &amp;gt; 1 &amp;amp;&amp;amp; line("'\"") &amp;lt;= line("$") | exe "normal! g'\"" | endif
endif
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;干掉方向键, 强迫自己使用&lt;code&gt;hjkl&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 关闭方向键, 强迫自己用 hjkl
map &amp;lt;Left&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Right&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Up&amp;gt; &amp;lt;Nop&amp;gt;
map &amp;lt;Down&amp;gt; &amp;lt;Nop&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;swap&lt;/code&gt;换行展示时, 使用&lt;code&gt;hjkl&lt;/code&gt;体验更好&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;F键区的映射&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" F2 行号开关，用于鼠标复制代码用
" 为方便复制，用&amp;lt;F2&amp;gt;开启/关闭行号显示:
function! HideNumber()
  if(&amp;amp;relativenumber == &amp;amp;number)
    set relativenumber! number!
  elseif(&amp;amp;number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap &amp;lt;F2&amp;gt; :call HideNumber()&amp;lt;CR&amp;gt;

" F3 显示可打印字符开关
nnoremap &amp;lt;F3&amp;gt; :set list! list?&amp;lt;CR&amp;gt;
" F4 换行开关
nnoremap &amp;lt;F4&amp;gt; :set wrap! wrap?&amp;lt;CR&amp;gt;

set pastetoggle=&amp;lt;F5&amp;gt;            "    when in insert mode, press &amp;lt;F5&amp;gt; to go to
                                "    paste mode, where you can paste mass data
                                "    that won't be autoindented

" disbale paste mode when leaving insert mode
au InsertLeave * set nopaste

" F6 语法开关，关闭语法可以加快大文件的展示
nnoremap &amp;lt;F6&amp;gt; :exec exists('syntax_on') ? 'syn off' : 'syn on'&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分屏窗口切换时, 直接使用&lt;code&gt;ctrl-h/j/k/l&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 分屏窗口移动, Smart way to move between windows
map &amp;lt;C-j&amp;gt; &amp;lt;C-W&amp;gt;j
map &amp;lt;C-k&amp;gt; &amp;lt;C-W&amp;gt;k
map &amp;lt;C-h&amp;gt; &amp;lt;C-W&amp;gt;h
map &amp;lt;C-l&amp;gt; &amp;lt;C-W&amp;gt;l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多窗口编辑时, 临时放大某个窗口, 编辑完再切回原来的布局&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') &amp;amp;&amp;amp; t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap &amp;lt;silent&amp;gt; &amp;lt;Leader&amp;gt;z :ZoomToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分号映射为冒号, 省得要进入命令模式需要按&lt;code&gt;shift&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt;和&lt;code&gt;L&lt;/code&gt;跳转到行首行末, 实在不想按&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;, 太远&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Go to home and end using capitalized directions
noremap H ^
noremap L $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令行模式快捷键, &lt;code&gt;ctrl-a/e&lt;/code&gt;跳转到行首行尾&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap &amp;lt;C-j&amp;gt; &amp;lt;t_kd&amp;gt;
cnoremap &amp;lt;C-k&amp;gt; &amp;lt;t_ku&amp;gt;
cnoremap &amp;lt;C-a&amp;gt; &amp;lt;Home&amp;gt;
cnoremap &amp;lt;C-e&amp;gt; &amp;lt;End&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;空格进入搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 搜索相关
" Map &amp;lt;Space&amp;gt; to / (search) and Ctrl-&amp;lt;Space&amp;gt; to ? (backwards search)
map &amp;lt;space&amp;gt; /
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜索时, 进入下一个上一个始终放在屏幕中间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Keep search pattern at the center of the screen.
nnoremap &amp;lt;silent&amp;gt; n nzz
nnoremap &amp;lt;silent&amp;gt; N Nzz
nnoremap &amp;lt;silent&amp;gt; * *zz
nnoremap &amp;lt;silent&amp;gt; # #zz
nnoremap &amp;lt;silent&amp;gt; g* g*zz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;leader-/&lt;/code&gt; 关闭掉上次搜索的高亮&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 去掉搜索高亮
noremap &amp;lt;silent&amp;gt;&amp;lt;leader&amp;gt;/ :nohls&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;交换&lt;code&gt;#&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;更近&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" switch # *
nnoremap # *
nnoremap * #
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python 写入注释&lt;code&gt;#&lt;/code&gt;号时, 不每次都跳到行首&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" for # indent, python文件中输入新行时#号注释不切回行首
autocmd BufNewFile,BufRead *.py inoremap # X&amp;lt;c-h&amp;gt;#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;buffer切换相关, 使用不多&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;" 切换前后buffer&lt;/span&gt;
&lt;span class="n"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bprevious&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nl"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bnext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;" 使用方向键切换buffer&lt;/span&gt;
&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tab操作....看个人喜好, 不过自从用了crtlspace之后, 逐渐很少用了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" tab 操作
" http://vim.wikia.com/wiki/Alternative_tab_navigation
" http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim

" tab切换
map &amp;lt;leader&amp;gt;th :tabfirst&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tl :tablast&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;tj :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tk :tabprev&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tn :tabnext&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tp :tabprev&amp;lt;cr&amp;gt;

map &amp;lt;leader&amp;gt;te :tabedit&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;td :tabclose&amp;lt;cr&amp;gt;
map &amp;lt;leader&amp;gt;tm :tabm&amp;lt;cr&amp;gt;

" normal模式下切换到确切的tab
noremap &amp;lt;leader&amp;gt;1 1gt
noremap &amp;lt;leader&amp;gt;2 2gt
noremap &amp;lt;leader&amp;gt;3 3gt
noremap &amp;lt;leader&amp;gt;4 4gt
noremap &amp;lt;leader&amp;gt;5 5gt
noremap &amp;lt;leader&amp;gt;6 6gt
noremap &amp;lt;leader&amp;gt;7 7gt
noremap &amp;lt;leader&amp;gt;8 8gt
noremap &amp;lt;leader&amp;gt;9 9gt
noremap &amp;lt;leader&amp;gt;0 :tablast&amp;lt;cr&amp;gt;

" Toggles between the active and last active tab "
" The first tab is always 1 "
let g:last_active_tab = 1
" nnoremap &amp;lt;leader&amp;gt;gt :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
" nnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
" vnoremap &amp;lt;silent&amp;gt; &amp;lt;c-o&amp;gt; :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;tt :execute 'tabnext ' . g:last_active_tab&amp;lt;cr&amp;gt;
autocmd TabLeave * let g:last_active_tab = tabpagenr()

" 新建tab  Ctrl+t
nnoremap &amp;lt;C-t&amp;gt;     :tabnew&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-t&amp;gt;     &amp;lt;Esc&amp;gt;:tabnew&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选中后, 调整缩进, 可能需要多次调整, 默认调整一次后退出了选中, 需要再次选.&lt;/p&gt;
&lt;p&gt;这个变更, 保证调整缩进后, 还是选中状态&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 调整缩进后自动选中，方便再次操作
vnoremap &amp;lt; &amp;lt;gv
vnoremap &amp;gt; &amp;gt;gv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制动作的变更, &lt;code&gt;Y&lt;/code&gt;, 复制到行末&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" y$ -&amp;gt; Y Make Y behave like other capitals
map Y y$

" 复制选中区到系统剪切板中
vnoremap &amp;lt;leader&amp;gt;y "+y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选中全部/选中段落&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" select all
map &amp;lt;Leader&amp;gt;sa ggVG"

" select block
nnoremap &amp;lt;leader&amp;gt;v V`}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存, 没权限的时候&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" w!! to sudo &amp;amp; write a file
cmap w!! w !sudo tee &amp;gt;/dev/null %
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;kj&lt;/code&gt;, 替换&lt;code&gt;ESC&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" kj 替换 Esc
inoremap kj &amp;lt;Esc&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调整&lt;code&gt;Ctrl-e/y&lt;/code&gt;滚动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 滚动Speed up scrolling of the viewport slightly
nnoremap &amp;lt;C-e&amp;gt; 2&amp;lt;C-e&amp;gt;
nnoremap &amp;lt;C-y&amp;gt; 2&amp;lt;C-y&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷保存和退出&lt;code&gt;leader-q/w&lt;/code&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" Quickly close the current window
nnoremap &amp;lt;leader&amp;gt;q :q&amp;lt;CR&amp;gt;

" Quickly save the current file
nnoremap &amp;lt;leader&amp;gt;w :w&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;交换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 交换 ' `, 使得可以快速使用'跳到marked位置
nnoremap ' `
nnoremap ` '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变更&lt;code&gt;U&lt;/code&gt;, 撤销重做的时候更快&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" remap U to &amp;lt;C-r&amp;gt; for easier redo
nnoremap U &amp;lt;C-r&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存文件时, 自动移除多余空格&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;" 保存python文件时删除多余空格&lt;/span&gt;
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;StripTrailingWhitespaces&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;%s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="c1"&gt;//e&lt;/span&gt;
    &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;endfun&lt;/span&gt;
&lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;FileType&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;rust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;twig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;BufWritePre&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;StripTrailingWhitespaces&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shell和python文件新建时, 自动插入行头&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &amp;amp;filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &amp;amp;filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义一些高亮的关键字&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 设置可以高亮的关键字
if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version &amp;gt; 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
  endif
endif
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他一些设置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI

" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
" 好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=

" 鼠标暂不启用, 键盘党....
set mouse-=a

" 回车即选中当前项, 慎用
inoremap &amp;lt;expr&amp;gt; &amp;lt;CR&amp;gt;       pumvisible() ? "\&amp;lt;C-y&amp;gt;" : "\&amp;lt;CR&amp;gt;"
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>我的tmux配置及说明【k-tmux】</title><link href="http://www.wklken.me/posts/2015/08/06/linux-tmux.html" rel="alternate"></link><published>2015-08-06T00:00:00+08:00</published><updated>2015-08-06T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-08-06:/posts/2015/08/06/linux-tmux.html</id><summary type="html">&lt;p&gt;配置了一份 &lt;a href="https://github.com/wklken/k-tmux"&gt;k-tmux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下快捷键是对这份配置的说明, 大部分为&lt;code&gt;tmux&lt;/code&gt;通用, 部分为修改自定义&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mac
$ brew install tmux
$ brew install reattach-to-user-namespace

ubuntu
$ sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yao-shuo-ming"&gt;简要说明&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux -&amp;gt; session -&amp;gt; window -&amp;gt; pane&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Tmux可以管理多组会话&lt;/li&gt;
&lt;li&gt;一个会话（Session）可以包含多个窗口，一个窗口（Window）可以包含多个窗格（Pane）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作前缀 &lt;code&gt;PREFIX = Ctrl-a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-session"&gt;1. session&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建, tmux new -s &amp;lt;name-of-my-session&amp;gt; 创建一个新的会话&lt;/span&gt;
$ tmux new -s basic

&lt;span class="c1"&gt;# 在tmux中创建一个会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX- …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;配置了一份 &lt;a href="https://github.com/wklken/k-tmux"&gt;k-tmux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下快捷键是对这份配置的说明, 大部分为&lt;code&gt;tmux&lt;/code&gt;通用, 部分为修改自定义&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mac
$ brew install tmux
$ brew install reattach-to-user-namespace

ubuntu
$ sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="jian-yao-shuo-ming"&gt;简要说明&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux -&amp;gt; session -&amp;gt; window -&amp;gt; pane&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Tmux可以管理多组会话&lt;/li&gt;
&lt;li&gt;一个会话（Session）可以包含多个窗口，一个窗口（Window）可以包含多个窗格（Pane）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作前缀 &lt;code&gt;PREFIX = Ctrl-a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="1-session"&gt;1. session&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建, tmux new -s &amp;lt;name-of-my-session&amp;gt; 创建一个新的会话&lt;/span&gt;
$ tmux new -s basic

&lt;span class="c1"&gt;# 在tmux中创建一个会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-:&lt;span class="o"&gt;]&lt;/span&gt; new -s &amp;lt;name-of-my-session&amp;gt;

&lt;span class="c1"&gt;# 分离会话 detach&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-d&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;detached &lt;span class="o"&gt;(&lt;/span&gt;from session basic&lt;span class="o"&gt;)]&lt;/span&gt;
or
$ tmux detach
or
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-Ctrl-z&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 查看已有会话列表(list-session)&lt;/span&gt;
$ tmux ls
basic: &lt;span class="m"&gt;1&lt;/span&gt; windows &lt;span class="o"&gt;(&lt;/span&gt;created Wed Aug  &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:54:04 &lt;span class="m"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;200x49&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 在tmux中查看会话列表并切换&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-s&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 连接会话(只有一个)&lt;/span&gt;
$ tmux attach
$ tmux attach -t basic
$ tmux a -t basic

&lt;span class="c1"&gt;# 杀掉会话&lt;/span&gt;
$ tmux kill-session -t

&lt;span class="c1"&gt;# 重命名会话&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-$&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-window"&gt;2. window&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建一个新的窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-c&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 重命名一个窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-,&lt;span class="o"&gt;]&lt;/span&gt; 之后输入名字回车

&lt;span class="c1"&gt;# 切换到下一个窗口, k-tmux另外配置了PREFIX-t/T&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-n&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 切换到对应窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-1/2/3&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 可视化选择切换到的窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-w&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 查找窗口&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-f&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 退出窗口&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; or
&lt;span class="o"&gt;[&lt;/span&gt;PREFIX-&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; 会有确认
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-pane"&gt;3. pane&lt;/h3&gt;
&lt;p&gt;分割
原先未修改键位的分割方式是&lt;code&gt;[PREFIX-%]&lt;/code&gt;和&lt;code&gt;[PREFIX-"]&lt;/code&gt;
重新映射为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 垂直/水平分割窗口
[PREFIX-\] / [PREFIX--]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭pane&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 关闭一个面板, 要确认
[PREFIX-x]

或者
exit [面板里执行]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-hjkl] pane之间移动

[Ctrl-hjkl]   pane之间移动
[Ctrl-\]      最近使用两个窗口之间切换
[PREFIX-q]    展示窗口数字并选择跳转
[PREFIX-o]    循环切换
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大小调整&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Ctrl-HJKL] pane大小调整
[PREFIX-z]  trigger暂时把窗口变大
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭及移动&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-x] 关闭当前pane, 需确认
[PREFIX-}] 当前pane移到左边
[PREFIX-{] 当前pane移到右边
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-!]     当前pane在新的window中打开
[PREFIX-space] 会自动切换依次使用这些布局(几种窗口布局轮流切换)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4-fu-zhi-nian-tie"&gt;4. 复制粘贴&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-[] 进入复制模式

=&amp;gt; 可以进行的操作
space/v    开始选择
Ctrl-v     整块选择
hjkl       方向键移动
w/b        向前向后移动一个单词
fx/Fx      行内移动到下一个字符位置
ctrl-b/f   在缓冲区里面翻页
g/G        到缓冲区最顶/底端
/ ?        向下, 向上查找
n/N        查找后下一个, 上一个
Enter/y    复制
[PREFIX-]] 粘贴
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他增强:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 复制整个pane可见区域
[PREFIX-:] capture-pane

# 查看缓冲区内容
[PREFIX-:] show-buffer

# 列出缓冲区列表
[PREFIX-:] list-buffers

# 从缓冲区列表选择并插入到当期面板
[PREFIX-:] choose-buffer =&amp;gt; 回车
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="5-qi-ta"&gt;5. 其他&lt;/h3&gt;
&lt;p&gt;获得快捷键列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[PREFIX-?]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入命令模式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[PREFIX-:]&lt;/span&gt;

&lt;span class="na"&gt;一些命令模式下的命令&lt;/span&gt;
&lt;span class="c1"&gt;# 新建窗口&lt;/span&gt;
&lt;span class="na"&gt;new-window -n console&lt;/span&gt;

&lt;span class="c1"&gt;# 新建并执行命令&lt;/span&gt;
&lt;span class="na"&gt;new-window -n processes "top"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="6-zeng-qiang"&gt;6. 增强&lt;/h3&gt;
&lt;h4 id="1-tmuxinator"&gt;1. Tmuxinator&lt;/h4&gt;
&lt;p&gt;Tmuxinator 是一个 Ruby 的 gem 包，可用于创建 Tmux 的会话。它的工作方式是先在配置文件中定义会话中的细节，然后用 1 条命令创建出这些会话&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install tmuxinator
tmuxinator new &lt;span class="nv"&gt;project_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; ~/.tmuxinator/project_a.yml &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; 配置

启动: tmuxinator start project_a
可以别名: mux start project_a
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-vimcha-jian"&gt;2. vim插件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;christoomey/vim-tmux-navigator&lt;/code&gt;, 安装更便捷的导航跳转&lt;/p&gt;
&lt;h3 id="7-zi-yuan-ji-can-kao_1"&gt;7. 资源及参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-plugins"&gt;tmux plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/index.html"&gt;《tmux: Productive Mouse-Free Development》中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tmux"></category><category term="linux"></category></entry><entry><title>Linux及Bash笔记</title><link href="http://www.wklken.me/posts/2015/01/17/linux-notes.html" rel="alternate"></link><published>2015-01-17T00:00:00+08:00</published><updated>2015-01-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-01-17:/posts/2015/01/17/linux-notes.html</id><summary type="html">&lt;p&gt;第一次接触, 在大学时期, 但是真正去学习和了解, 大概是在刚毕业那年&lt;/p&gt;
&lt;p&gt;到现在, 三年多, 主后端开发, 工具也就是一个command line加vim, 每天开个终端就开始噼里啪啦干活, 兼职一些简单的部署运维工作&lt;/p&gt;
&lt;p&gt;去年, 是变化和积累的一年, 今年, 希望有些产出&lt;/p&gt;
&lt;p&gt;Linux和bash, 记了很多笔记, 逐一梳理出来&lt;/p&gt;
&lt;p&gt;之前的两篇文章 &lt;a href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;LINUX SHELL脚本攻略笔记&lt;/a&gt; 以及 &lt;a href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html"&gt;如何书写SHELL脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也会一并汇总, 这可能是今年唯一产出的一本笔记了, python源码阅读和python基础笔记, 这两个在本地的gitbook上, 工程量太浩大, 后面以博文的形式慢慢发吧:)&lt;/p&gt;
&lt;p&gt;好了, 放到&lt;code&gt;github&lt;/code&gt;上了, 当前10%的样子, 欢迎 &lt;code&gt;star&lt;/code&gt;以及提&lt;code&gt;pr&lt;/code&gt;, 纠正以及丰富之&lt;/p&gt;
&lt;p&gt;地址: &lt;a href="https://github.com/wklken/linux-notes"&gt;https://github.com/wklken/linux-notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先这样......后面开始专注码业余项目去了, 博文产出估计会少点, 当然也不会太少 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;第一次接触, 在大学时期, 但是真正去学习和了解, 大概是在刚毕业那年&lt;/p&gt;
&lt;p&gt;到现在, 三年多, 主后端开发, 工具也就是一个command line加vim, 每天开个终端就开始噼里啪啦干活, 兼职一些简单的部署运维工作&lt;/p&gt;
&lt;p&gt;去年, 是变化和积累的一年, 今年, 希望有些产出&lt;/p&gt;
&lt;p&gt;Linux和bash, 记了很多笔记, 逐一梳理出来&lt;/p&gt;
&lt;p&gt;之前的两篇文章 &lt;a href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;LINUX SHELL脚本攻略笔记&lt;/a&gt; 以及 &lt;a href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html"&gt;如何书写SHELL脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也会一并汇总, 这可能是今年唯一产出的一本笔记了, python源码阅读和python基础笔记, 这两个在本地的gitbook上, 工程量太浩大, 后面以博文的形式慢慢发吧:)&lt;/p&gt;
&lt;p&gt;好了, 放到&lt;code&gt;github&lt;/code&gt;上了, 当前10%的样子, 欢迎 &lt;code&gt;star&lt;/code&gt;以及提&lt;code&gt;pr&lt;/code&gt;, 纠正以及丰富之&lt;/p&gt;
&lt;p&gt;地址: &lt;a href="https://github.com/wklken/linux-notes"&gt;https://github.com/wklken/linux-notes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先这样......后面开始专注码业余项目去了, 博文产出估计会少点, 当然也不会太少&lt;/p&gt;
&lt;p&gt;2015-01-17&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</content><category term="linux"></category></entry><entry><title>Vim技巧补充</title><link href="http://www.wklken.me/posts/2014/04/13/vim-addition-skills.html" rel="alternate"></link><published>2014-04-13T00:00:00+08:00</published><updated>2014-04-13T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-13:/posts/2014/04/13/vim-addition-skills.html</id><summary type="html">&lt;p&gt;读了一些文章，重新理一理，大部分是平常操作中容易忽视的,很容易忘了其实还可以这么干&lt;/p&gt;
&lt;h3 id="text-object"&gt;Text Object&lt;/h3&gt;
&lt;p&gt;y/d/c + text-object-operation&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    * iw …inner word
    * aw …a word
    * iW …inner WORD
    * aW …a WORD

    * is …inner sentence
    * as …a sentence

    * ip …inner paragraph
    * ap …a paragraph

    -------------------------

    * i( or i) …inner block
    * a( or a) …a block
    * i&amp;lt; or i&amp;gt; …inner block
    * a …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;读了一些文章，重新理一理，大部分是平常操作中容易忽视的,很容易忘了其实还可以这么干&lt;/p&gt;
&lt;h3 id="text-object"&gt;Text Object&lt;/h3&gt;
&lt;p&gt;y/d/c + text-object-operation&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    * iw …inner word
    * aw …a word
    * iW …inner WORD
    * aW …a WORD

    * is …inner sentence
    * as …a sentence

    * ip …inner paragraph
    * ap …a paragraph

    -------------------------

    * i( or i) …inner block
    * a( or a) …a block
    * i&amp;lt; or i&amp;gt; …inner block
    * a&amp;lt; or i&amp;gt; …a block
    * i{ or i} …inner block
    * a{ or a} …a block

    * i" …inner block
    * a" …a block
    * i` …inner block
    * a` …a block
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ti-huan"&gt;替换&lt;/h3&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:[range]s/pattern/string/[c,e,g,i]

range,范围， 1,7指从第一行到第七行  1,$第一行到最后一行
pattern,被替换字符串，可以用regexp来表示
string,替换成的字符串

c: confirm，每次替换前询问
e: 不提示error
g: globe, 不询问，整行替换[默认只替换第一个]
i: ignore,不区分大小写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:s/vivian/sky/
替换当前行第一个vivian为sky

:s/vivian/sky/g
替换当前行所有vivian为sky，g表示global

:n,$s/vivian/sky/
替换第n行开始到最后一行中每一行的第一个vivian为sky，n为数字

:.,$s/vivian/sky/g
替换当前行开始到最后一行中每一行所有vivian为sky

:%s/vivian/sky/g（等同于 :g/vivian/sky/g）
替换每一行中所有 vivian 为 sky

:s/vivian\//sky\//
替换当前行第一个vivian/为sky/，可以使用\作为转义符

:1,$s/^/some string/
在文件的第一行至最后一行的行首前插入some string

:%s/$/some string/g
在整个文件每一行的行尾添加some string

:%s/\s\+$//
去掉所有的行尾空格，“\s”表示空白字符（空格和制表符），“\+”对前面的字符匹配一次或多次（越多越好），“$”匹配行尾（使用“\$”表示单纯的“$”字符）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;反向引用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xiu-gai"&gt;修改&lt;/h3&gt;
&lt;p&gt;1.字符修改-大小写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v选中, U切换大写，u切花小写
~      光标所在之处字符大小写呼唤
guw    光标下的单词变为小写
gUw    光标下的单词变为大写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.字符互换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xp  左右交换光标处两字符的位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.行-合并&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;J   上下两行连起来
选中多行，然后 J    多行连起来
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.操作&lt;/p&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c{motion}
删除并进入输入模式 c$  ct!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ciw  change inner word, 修改当前光标下单词
cis  change inner sentence, 修改一整个句子

#text-object
ci"
ci(

cw   修改一个单词
cc   change the whole line,剪切光标所在行并进入插入模式

ctx  剪切光标至字符x，进入插入模式
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shan-chu"&gt;删除&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dG 删除至文件末尾
dgg 删除只文件开头
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cha-zhao-he-tiao-zhuan"&gt;查找和跳转&lt;/h3&gt;
&lt;p&gt;跳转到当前行某个位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fx  到第一个x
2fx 到第二个x

Fx  往回查找
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跳转到某行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;50G 移动到 50行
:50
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;标记并跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#对26个字母有效
ma 标记书签
'a 跳到书签
'.  最后一次编辑的地方
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;段落跳转&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{   上一段(以空白行分隔)
}   下一段(以空白行分隔)

) 下一个句子
( 上一个句子
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xuan-zhong"&gt;选中&lt;/h3&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v   按字符
V   按行
ctrl+v 按块
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;va&amp;lt;object&amp;gt; or vi&amp;lt;object&amp;gt;

object ：
    w 一个单词， W 一个以空格为分隔的单词，
    s 一个句子，
    p 一个段落。
    也可以是一个特别的字符："、 '、 )、 }、 ]。
注意，这里v换成d/y就成了删除，拷贝的命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;假设你有一个字符串
    (map (+) ("foo")).

而光标键在第一个 o 的位置。
vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))'"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选中括号里的内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v% 光标在一侧括号
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全选&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ggVG
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bao-cun-he-tui-chu"&gt;保存和退出&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:e file 打开文件
ZQ  无条件退出
ZZ  存盘退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存部分内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:1,10 w a.txt
:1,10 w &amp;gt;&amp;gt; a.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另存为&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:saveas new_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行外部命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:!cmd
:r!cmd  指向外部命令的结果插入到当前
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="guan-yu-vimxue-xi-de-jian-yi"&gt;关于vim学习的建议&lt;/h3&gt;
&lt;p&gt;来自网上两篇文章&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;更多的是技能而非知识
更多的是双手而非头脑
Vim技巧
不贪图一下子掌握
不断实践
不是由头脑来搜索该用哪条操作技巧
而是建立手指的自然反应
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一定要阅读一下Bram Moolenaar(vim的作者)写的Seven habits of effective text editing(七个有效的文本编辑习惯)&lt;/p&gt;
&lt;p&gt;七个习惯&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;快速移动
不要两次键入同样的东西
错误修复
经常需要编辑不止一个文件
协同作业
文本是结构化的
养成习惯
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;p&gt;大写的&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D 删除当前到行尾，不要用d$
Y 复制整行，建议改写成复制当前到行尾
C 修改当前到行尾
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;repeat:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;. → (小数点) 可以重复上一次的命令
N&amp;lt;command&amp;gt; → 重复某个命令N次
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;宏录制和使用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;待补充
&lt;/pre&gt;&lt;/div&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>如何书写shell脚本</title><link href="http://www.wklken.me/posts/2014/01/12/shell-script-base.html" rel="alternate"></link><published>2014-01-12T00:00:00+08:00</published><updated>2014-01-12T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-01-12:/posts/2014/01/12/shell-script-base.html</id><summary type="html">&lt;p&gt;关于Linux基础命令，可以查看另一篇博文 &lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下内容，主要是，了解书写shell脚本所需要的大部分知识,主要内容来自于书籍和网络&lt;/p&gt;
&lt;p&gt;目的是，能快速书写出需要的shell脚本&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;p&gt;version 0.1 2014-01-12 基本内容, 完成度30%&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/shell.xml"&gt;google shell style guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/48717/"&gt;Linux Shell编程实战技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kodango.com/bash-pitfalls-part-1"&gt;Bash编程易犯的错误 1234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/16604/"&gt;关于shell脚本编程的10个最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bash.cumulonim.biz/BashPitfalls.html"&gt;Bash Pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-yi-xie-gai-nian"&gt;第一部分 一些概念&lt;/h2&gt;
&lt;p&gt;标准IO&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文件描述符
0 标准输入 默认键盘
1 标准输出 默认终端
2 标准错误 默认终端
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; 输出重定向
&amp;gt;&amp;gt; 追加到输出重定向
&amp;lt; 输入重定向
&amp;lt;&amp;lt; 追加到输入重定向

ls …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;关于Linux基础命令，可以查看另一篇博文 &lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下内容，主要是，了解书写shell脚本所需要的大部分知识,主要内容来自于书籍和网络&lt;/p&gt;
&lt;p&gt;目的是，能快速书写出需要的shell脚本&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;p&gt;version 0.1 2014-01-12 基本内容, 完成度30%&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;资源&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/shell.xml"&gt;google shell style guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html"&gt;Linux Shell脚本攻略笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/48717/"&gt;Linux Shell编程实战技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kodango.com/bash-pitfalls-part-1"&gt;Bash编程易犯的错误 1234&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/16604/"&gt;关于shell脚本编程的10个最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bash.cumulonim.biz/BashPitfalls.html"&gt;Bash Pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-yi-bu-fen-yi-xie-gai-nian"&gt;第一部分 一些概念&lt;/h2&gt;
&lt;p&gt;标准IO&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文件描述符
0 标准输入 默认键盘
1 标准输出 默认终端
2 标准错误 默认终端
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; 输出重定向
&amp;gt;&amp;gt; 追加到输出重定向
&amp;lt; 输入重定向
&amp;lt;&amp;lt; 追加到输入重定向

ls -l &amp;gt; /tmp/a

cmd &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 #输出到垃圾桶
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;管道&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;前后连接两个命令

ls -l | grep test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;双引号：可以除了字符$`\外地任何字符或字符串
单引号：忽略任何引用值，将引号里的所有字符作为一个字符串 $var 不能被解析
反引号：设置系统命令输出到变量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shell脚本识别三种基本命令：内建命令，shell函数和外部命令&lt;/p&gt;
&lt;p&gt;基本的命令查找:shell会沿着查找路径$PATH来寻找命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $PATH

可以在.profile文件中修改
export PATH=$PATH:$HOME/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and/or&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;expression1 &amp;amp;&amp;amp; expression2 &amp;amp;&amp;amp; expression3
只有前面一条命令执行成功，才执行下一条
expression1执行成功，才执行expression2
串联的

expression1 || expression2 || expression3
执行命令，直到有一条成功为止
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-er-bu-fen-shelljiao-ben"&gt;第二部分 shell脚本&lt;/h2&gt;
&lt;p&gt;首行声明使用bash(声明脚本执行解释器)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# do something&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;/n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh xx.sh
bash xx.sh #大部分情况下两个一样，某些命令只有bash有，只能用这个

or

chmod u+x xx.sh
./xx.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#查看运行时，每个命令回显，执行之后回显
sh -x xx.sh

#执行之前回显
sh -v xx.sh

#检查语法错误，不执行
sh -n xx.sh

#如果使用了未定义的变量，给出错误信息
sh -u xx.sh

#调试部分脚本
echo "Hello $USER,"
set -x
echo "Today is $(date %Y-%m-%d)"
set +x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;判断执行结果&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;N=$?  #0 &amp;lt;= N &amp;lt;= 255

0 无错误，正常执行结束
非0 异常
    1-125命令不成功退出
    126命令成功，但文件无法执行
    127命令找不到
    &amp;gt;128命令因收到信号而死亡
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取目录名和文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# To find base directory
APP_ROOT=`dirname "$0"`

# To find the file name
filename=`basename "$filepath"`

# To find the file name without extension
filename=`basename "$filepath" .html`

e.g.
BASEDIR=$(dirname $0)
cd $BASEDIR
CURRENT_DIR=`pwd`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TODAY=`date +%Y%m%d`
DAY_1_AGO=`date -d "$TODAY 1 days ago" +%Y%m%d`

常用接受日期/使用默认日期处理

if [ -n "$1" ]
then
    TODAY="$1"
else
    TODAY=`date +%Y%m%d`
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;crontab调度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;查看
crontab -l
编辑
crontab -e

格式
* * * * * command_path

字段      含义     范围
1        分钟         0-59
2        小时         0-23
3        日期         1-31
4        月份         1-12
5        星期几，0=周日   0-6
6        具体命令,可以是调用脚本

*任意时刻
n1,n2  分割，n1和n2
*/n  每隔n单位
n1-n2   时段，一个时段内

0 */2 * * * sh run.sh     每隔两小时
20 7 * * * sh run.sh 每天7:20
0 1,5 * * * sh run.sh 每天1点和5点
* * * * * sh run.sh 每分钟执行一次
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-san-bu-fen-bian-liang"&gt;第三部分 变量&lt;/h2&gt;
&lt;h4 id="1bian-liang-fu-zhi"&gt;1.变量赋值&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;varname="value"
varname=`expression`

注意，等号两边必须不能包含空格
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2fen-lei"&gt;2.分类&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;四种变量：环境变量、本地变量、位置变量、特定变量参数

环境变量可作用于所有子进程
本地变量在用户现在的shell 生命期的脚本中使用，仅存在于当前进程
位置变量：作为程序参数
特定变量：特殊作用
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3huan-jing-bian-liang"&gt;3.环境变量&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置
MYVAR="test"
expirt MYVAR
or
export MYVAR="test"

只读
MYVAR="test"
readonly MYVAR
or
readonly MYVAR="test"

显示
export -p
env #查看所有环境变量
$MYVAR #获取

消除
unset MYVAR
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="4ben-di-bian-liang"&gt;4.本地变量&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置
LOCAL_VAR="test"
or
LOCAL_VAR="test"
readonly LOCAL_VAR #设置只读

还可以使用declare命令定义
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="5wei-zhi-bian-liang"&gt;5.位置变量&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$0 脚本名称
$# 传递到脚本参数个数
$$ shell脚本运行当前进程ID
$? 退出状态
$N N&amp;gt;=1，第n个参数
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="6zi-fu-chuan-chu-li"&gt;6.字符串处理&lt;/h4&gt;
&lt;p&gt;长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#VARIABLE_NAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; 可以给出字符串的长度。

if [ &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#authy_api_key&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; != 32 ]
then
    return &lt;span class="nv"&gt;$FAIL&lt;/span&gt;
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拼接字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "$x$y"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串切片&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="err"&gt;变量名&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;起始&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;长度&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;得到子字符串

$ test='I love china'
$ echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
e china
$ echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
e china

str="hello world"
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;  # &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串替换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="err"&gt;变量&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;查找&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;替换值&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; 一个“/”表示替换第一个，”//”表示替换所有,当查找中出现了：”/”请加转义符”\/”表示
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #首个
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #所有
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正则匹配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if [[ $str =~ [0-9]+\.[0-9]+ ]]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="7shu-zhi-chu-li"&gt;7.数值处理&lt;/h4&gt;
&lt;p&gt;自增&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a=1
a=`expr a + 1`

or

a=1
let a++
let a+=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;let&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;no1=4
no2=5
let result=no1+no2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expr&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=`expr 3 + 4`
result=$(expr $no1 + 5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=$[ no1 + no2 ]
result=$[ $no + 5 ]

result=$(( no1 + 5 ))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浮点数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "4 * 0.56" | bc
设定精度
echo "scale=2;3/8" | bc
进制转换
echo "obase=2;100" | bc
平方
echo "sqrt(100)" | bc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组和map&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="di-si-bu-fen-kong-zhi-liu_1"&gt;第四部分 控制流&lt;/h2&gt;
&lt;h4 id="1tiao-jian-ce-shi"&gt;1.条件测试&lt;/h4&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test condition
[ condition ] #注意两边加空格

$? #获取判断结果，0表示condition=true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;条件测试中的逻辑&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a 与
-o 或
!  非
&amp;amp;&amp;amp;
||

if [ -n "$str" -a -f "$file" ]
if [ -n "$str" ] &amp;amp;&amp;amp; [ -f "$file" ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=   两字符串相等
!=  两字符串不等
-z  空串 [zero]
-n  非空串 [nozero]

[ -z "$EDITOR" ]
[ "$EDITOR" = "vi" ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数值测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-eq  数值相等（equal）
-ne  不等（not equal）
-gt  A&amp;gt;B（greater than）
-lt  A&amp;lt;B（less than）
-le  A&amp;lt;=B（less、equal）
-ge  A&amp;gt;=B（greater、equal）

N=130
[ "$N" -eq 130 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d目录
-f 普通文件（Regular file）

-e 文件存在
-z 文件长度=0
-s 文件长度大于0，非空

-b 块专用文件
-c 字符专用文件
-L 符号链接

-r Readable（文件、目录可读）
-w Writable（文件、目录可写）
-x Executable（文件可执行、目录可浏览）

-g 如果文件的set-group-id位被设置则结果为真
-u 文件有suid位设置
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2fen-zhi-if-elsecase"&gt;2.分支if-else/case&lt;/h4&gt;
&lt;p&gt;if-else语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if condition1
then
    //do thing a
elif condition2
then
    //do thing b
else
    //do thing c
fi

or

if condition; then
# do something
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;case语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;case $VAR in
    1)
        echo "abc"
        ;;
    2|3|4)
        echo "def"
        ;;
    *)
        echo "last"
        ;;
esac
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="3xun-huan-forwhileuntil"&gt;3.循环for/while/until&lt;/h4&gt;
&lt;p&gt;for语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for VARIABLE in 1 2 3 4 5 .. N
do
    //commands
done

for OUTPUT in $(Linux-Or-Unix-Command-Here)
do
    //commands on $OUTPUT
done

#bash
for (( EXP1; EXP2; EXP3 ))
do
    //commands
done

例子

for i in 1 2 3 4 5; do
    echo $i
done

for i in `seq 1 5`; do
    echo $i
done

#!/bin/bash
echo "Bash version"
for i in $(seq 1 2 20)
do
   echo "Welcome $i times"
done

for i in {1..5}; do
    echo $i
done

#!/bin/bash
echo "Bash version"
for i in {0..10..2}
do
    echo "Welcome $i times"
done

for ((i=1; i&amp;lt;=10; i++)); do
    echo $i
done

#无限循环
#!/bin/bash
for (( ; ; ))
do
   echo "infinite loops [ hit CTRL+C to stop]"
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while condition
do
    //do something
done

COUNTER=0
while [ $COUNTER -lt 5 ]
do
    COUNTER=`expr $COUNTER + 1`
    echo $COUNTER
done


无限循环
while [ 1 ]
do
    //
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;until&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#执行命令，直到条件为真，至少执行一次，可以用来做监控，condition每次都回去检查
until condition
do
    //do something
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;break/continue&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;break
允许跳出循环，通常在进行一些列处理后退出循环或case语句
若多重循环，可指定跳出的循环个数，如跳出两重循环  break 2

continue
不会跳出循环，只是跳过此循环步
命令是程序在本循体内忽略下面的语句,从循环头开始执行
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="di-wu-bu-fen-han-shu_1"&gt;第五部分 函数&lt;/h2&gt;
&lt;h4 id="1han-shu-ding-yi"&gt;1.函数定义&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func_name() {&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;func_name() {&lt;/span&gt;
    &lt;span class="c1"&gt;//do some thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;函数名，在脚本中必须唯一
函数必须，先定义，后使用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;return&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;equal() {&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;equal&lt;/span&gt;
&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2can-shu-chuan-di_1"&gt;2.参数传递&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#位置参数&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyfile() {&lt;/span&gt;
    &lt;span class="nx"&gt;cp&lt;/span&gt; &lt;span class="nx"&gt;$1&lt;/span&gt; &lt;span class="nx"&gt;$2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;调用&lt;/span&gt;

&lt;span class="nx"&gt;copyfile&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="err"&gt;获取返回值&lt;/span&gt;
&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`copyfile /tmp/a /tmp/b`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;位置参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$1 - $9，当参数超过10个时，需要使用&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
$# 参数个数
$* 将所有参数视为一个字符串="$1 $2 ..."
$@ 将所有参数视为个体="$1" "$2" "$3"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3fan-hui-zhi-he-tui-chu-zhuang-tai"&gt;3.返回值和退出状态&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#返回值&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func_a() {&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`func_a`&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;then&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;span class="nx"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#退出状态&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func_b() {&lt;/span&gt;
    &lt;span class="c1"&gt;//do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;func_b&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;then&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;span class="nx"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#更简洁&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;func_b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;span class="nx"&gt;fi&lt;/span&gt;

&lt;span class="nx"&gt;func_b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Success"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Error"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-si-bu-fen-gao-ji_1"&gt;第四部分 高级&lt;/h2&gt;
&lt;p&gt;bash中参数展开-展开运算符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果变量未定义，返回默认值&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;noexist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s s-Atom"&gt;返回0&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s s-Atom"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;如果变量未定义，设置变量为默认值&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;noexists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="s s-Atom"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s s-Atom"&gt;noexists&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="s s-Atom"&gt;得到0&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;?message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;若未定义，显示varname:message并退出当前的命令或脚本&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nn"&gt;varname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s s-Atom"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s s-Atom"&gt;若存在且非null，返回word，否则返回null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模式匹配&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="c1"&gt;##pattern&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="di-wu-bu-fen-qi-ta"&gt;第五部分 其他&lt;/h2&gt;
&lt;p&gt;读文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while read -r line; do
    echo $line
done &amp;lt; file

保留首尾字符
while IFS= reaad -r line; do
    echo $line
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一些内置命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:
空命令，类似python的pass

.
相当于source

\
用于跨行命令

echo
输出，类似println

exec

exit n
脚本以n作为退出码退出

export
设置或显示环境变量

expr
简单计算
x=`expr $x + 1`
x=$(expr $x + 1)

let
d=111
let d=$d+1; echo $d
112

printf
格式化输出

return
函数返回

set

shift
所有参数变量左移一个位置

unset
从环境变量中删除变量或函数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BP:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用$() 代替反引号``
$(()) 代替expr运算符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GNU Bash 主页
http://www.gnu.org/software/bash/
GNU Bash 手册
http://www.gnu.org/software/bash/manual/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的特性&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$((3 + 4))          而不需要 expr 3 + 4, 算术展开
/usr/{bin,local/bin}  而不需要 /usr/bin /usr/local/bin
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;       而不需要 echo &lt;span class="nv"&gt;$str&lt;/span&gt; | sed ”s/&lt;span class="nv"&gt;$src&lt;/span&gt;/&lt;span class="nv"&gt;$dst&lt;/span&gt;/”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更方便的语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for (( expr1; expr2; expr3 )); do
        commands
done
for (( i = 0; i &amp;lt; 100; i++ )); do … done
echo a{b,c,d}e  ==&amp;gt; abe ace ade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表达式求值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$[]    []$中间可以加表达式  eg: echo $[$a+$b]
$(())   (())中间可以加表达式。Eg： total=$(($a*$b))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash的正则表达式
str='hello, world'
if [[ $str =~ '\s+world$' ]]; then
    echo match!
fi
if echo "$str" | grep -E '[ ]+world$'; then
    echo match!
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取软连接指向的真实文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#注:有些系统没有这个命令
readlink /usr/bin/python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加debug&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debug() {&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="nx"&gt;$DEBUG&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="nx"&gt;then&lt;/span&gt;
        &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt;&amp;gt; $*"&lt;/span&gt;
    &lt;span class="nx"&gt;fi&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;debug&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt; &lt;span class="s2"&gt;"Trying to find config file"&lt;/span&gt;

&lt;span class="err"&gt;还有来自于一些很酷的&lt;/span&gt;&lt;span class="nx"&gt;Geeks&lt;/span&gt;&lt;span class="err"&gt;的单行&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="err"&gt;函数：&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debug() {&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt;&amp;gt; $*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debug() {&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"$DEBUG"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt;&amp;gt; $*"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将执行日志全部写到某个文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exec &amp;gt;&amp;gt;"$LOGPATH"/xx.log.$TODAY 2&amp;gt;&amp;amp;1
#begin of code
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;</content><category term="linux"></category></entry><entry><title>[翻译]vim入门指南</title><link href="http://www.wklken.me/posts/2013/08/04/translation-vim-introduction-and-tutorial.html" rel="alternate"></link><published>2013-08-04T00:00:00+08:00</published><updated>2013-08-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-08-04:/posts/2013/08/04/translation-vim-introduction-and-tutorial.html</id><summary type="html">&lt;p&gt;今天稍微整理了下vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文链接 &lt;a href="http://blog.interlinked.org/tutorials/vim_tutorial.html"&gt;Vim Introduction and Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜了下没发现中文版,顺手翻译下, 建议读原版&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="vimjian-jie-ji-ru-men-zhi-nan"&gt;vim简介及入门指南&lt;/h1&gt;
&lt;p&gt;我经常试图去学习Emac编辑器/IDE/OS. 我最后一次尝试时，我花了一些时间去适应，直到我想去配置一个自己的.emacs文件&lt;/p&gt;
&lt;p&gt;在我用vi打开.emacs文件那一刻，我意识到我做了什么，vim早已经赢得了我的青睐.&lt;/p&gt;
&lt;p&gt;所以，我将vim作为我的首选编辑器[注1]&lt;/p&gt;
&lt;p&gt;另一个动机是，我发现我最喜欢的shell(&lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;)有很酷的 vi-mode 包含命令模式(使得，你可以在命令和插入模式之间切换)&lt;/p&gt;
&lt;p&gt;Vim有一系列给力的特性，并且学习它们需要花费一些时间.当然，现在有很多在线指南和技巧文章，但是帮助文档同样很优秀！有概览页面，总结页面和一些注释&lt;/p&gt;
&lt;p&gt;我开始使用官网的指南和帮助系统学习(输入 :help &lt;command&gt; 可以从命令模式获取帮助)， 我喜欢在测试文件中测试命令，并且对重要的命令写下简短的说明&lt;/command&gt;&lt;/p&gt;
&lt;p&gt;另一个我使用Vim的原因是，使用Vim比Emacs更加健康(使用默认键映射).健康 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天稍微整理了下vim配置 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文链接 &lt;a href="http://blog.interlinked.org/tutorials/vim_tutorial.html"&gt;Vim Introduction and Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜了下没发现中文版,顺手翻译下, 建议读原版&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="vimjian-jie-ji-ru-men-zhi-nan"&gt;vim简介及入门指南&lt;/h1&gt;
&lt;p&gt;我经常试图去学习Emac编辑器/IDE/OS. 我最后一次尝试时，我花了一些时间去适应，直到我想去配置一个自己的.emacs文件&lt;/p&gt;
&lt;p&gt;在我用vi打开.emacs文件那一刻，我意识到我做了什么，vim早已经赢得了我的青睐.&lt;/p&gt;
&lt;p&gt;所以，我将vim作为我的首选编辑器[注1]&lt;/p&gt;
&lt;p&gt;另一个动机是，我发现我最喜欢的shell(&lt;a href="http://www.zsh.org/"&gt;ZSH&lt;/a&gt;)有很酷的 vi-mode 包含命令模式(使得，你可以在命令和插入模式之间切换)&lt;/p&gt;
&lt;p&gt;Vim有一系列给力的特性，并且学习它们需要花费一些时间.当然，现在有很多在线指南和技巧文章，但是帮助文档同样很优秀！有概览页面，总结页面和一些注释&lt;/p&gt;
&lt;p&gt;我开始使用官网的指南和帮助系统学习(输入 :help &lt;command&gt; 可以从命令模式获取帮助)， 我喜欢在测试文件中测试命令，并且对重要的命令写下简短的说明&lt;/command&gt;&lt;/p&gt;
&lt;p&gt;另一个我使用Vim的原因是，使用Vim比Emacs更加健康(使用默认键映射).健康?很多命令可以简单地通过一次敲击完成 - 模式编辑器的优点，不需要使用由很多修改关键字组成的长命令串.即使你有一个正常的键盘，敲击Ctrl，Alt等键很显然不是那么正常&lt;/p&gt;
&lt;p&gt;只需要记住:Vim的命令都非常简单，但是简单命令组合起来将变得十分强大&lt;/p&gt;
&lt;h2 id="mo-shi"&gt;模式&lt;/h2&gt;
&lt;p&gt;Vim有3种模式：&lt;/p&gt;
&lt;p&gt;1.命令行模式：所有键盘输入都是命令&lt;/p&gt;
&lt;p&gt;2.插入模式:大部分键盘输入作为文本插入(出了少部分特殊键)&lt;/p&gt;
&lt;p&gt;3.可视模式：用于帮助选中文本，可以看做是命令行模式的子模式&lt;/p&gt;
&lt;p&gt;&lt;img alt="模式转换图" src="https://github.com/wklken/gallery/blob/master/vim/vim-modes.png?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;从插入模式或可视模式切换到命令模式,按&lt;esc&gt;&lt;/esc&gt;&lt;/p&gt;
&lt;p&gt;从命令模式切换到插入模式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* i  在当前位置之前插入
* a  在当前位置之后插入(追加)
* I  调到当前行第一个非空白字符之前插入
* A  调到当前行最后一个字符之后插入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从命令模式到可视模式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* v  切换到可视模式(字符级别)
* V  切换到可视模式(行级别)
* ctrl-v  切换到块可视模式(块级别的)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有操作，比如替换，删除，拷贝或排版，在可视模式下同样适用&lt;/p&gt;
&lt;h2 id="yi-dong"&gt;移动&lt;/h2&gt;
&lt;p&gt;简单的移动命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* h 左移
* l 右移
* k 上移
* j 下移
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很显然，这几个命令只在命令模式下可用，当然，你可以用方向键(在所有模式下适用)&lt;/p&gt;
&lt;p&gt;Vim有很多移动命令，我只是学习了一部分，但是如果你需要一些特殊的移动方式，可以看看帮助，我确定你会找到有用的方法&lt;/p&gt;
&lt;p&gt;&lt;img alt="移动说明图" src="https://github.com/wklken/gallery/blob/master/vim/vim-movement.png?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;Vim distinguishes between screen-lines (those shown on the monitor) and real lines (those ended with a new-line).
Vim区分逻辑行(频幕上展示的)和物理行(实际以\n结尾的)&lt;/p&gt;
&lt;p&gt;以下是一些重要的命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 当前行第一列
^ 当前行第一个非空白字符
w 移到下一个单词
W 移到下一个单词，忽略标点
e 移动到单词尾部
E 移动到单词尾部，忽略标点
b 移动到单词开头
B 移动到单词开头，忽略标点
ge 移动到前一个词尾部
gE 移动到前一个词尾部，忽略标点
g_ 移动到最后一个非空白字符
$  移动到最后一列
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你记住一部分，你将学会如何快速从A移动到B！另一个重要的事实是，这些命令说明了基本命令的定义方式&lt;/p&gt;
&lt;h2 id="bian-ji"&gt;编辑&lt;/h2&gt;
&lt;p&gt;在Vim中，插入文本是很简单的事情，只需要敲i并且开始输入.但是vim提供了相当丰富的文本编辑命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d 删除当前光标位置到下一个命令哪个提供位置之间的字符(例如: d$删除当前行光标位置到最后一列的所有字符)
c 修改
x 删除光标位置字符
X 删除光标之前的字符(相当于回退)
y 拷贝
p 在当前光标之后黏贴拷贝的内容
P 在当前光标之前黏贴拷贝的内容
r 替换当前字符
s 用输入替换当前位置到下一个命令给出位置的字符
. 重复上一个命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dd, cc 或yy 将操作整行，例如yy拷贝当前行&lt;/p&gt;
&lt;p&gt;需要注意的是，很多命令比我在这里描述的额更为强大.例如你可以 输入"ayy 拷贝当前行道一个寄存器a,可以使用 "ap 黏贴a中的内容. Vim自动保存最后几个复制或删除的内容,要查看寄存器的内容，输入:registers, 你可以使用它们去黏贴一些老的文本&lt;/p&gt;
&lt;h2 id="ke-shi-kuai"&gt;可视块&lt;/h2&gt;
&lt;p&gt;可视块使得能够在选中文本每一行某个位置插入一个字符&lt;/p&gt;
&lt;p&gt;假设你选中了一块代码(Ctrl-v),你可以键入I，在代码块之前插入文本(切换到插入模式).当你离开插入模式时，输入的文本将作用于选中的每一行.使用A在代码块之后进行插入&lt;/p&gt;
&lt;p&gt;另一个有用的特性是，你可以用新文本替换整个代码块.选中代码块，输入s，vim进入插入模式，然后输入内容.离开插入模式时，vim将输入的内容插入到剩余行&lt;/p&gt;
&lt;p&gt;如果你想追加文本到某些行后边，使用Ctrl-v$选中需要修改的行选中需要修改的行. 这个和上一个命令不同的是，$表示"行尾",ctrl-v选中行的行尾，忽略文本&lt;/p&gt;
&lt;p&gt;使用 Ctrl-v:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a testNEWLY INSERTED
This is a     NEWLY INSERTED
This is       NEWLY INSERTED
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 Ctrl-v$:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a testNEWLY INSERTED
This is aNEWLY INSERTED
This isNEWLY INSERTED
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wen-ben-dui-xiang"&gt;文本对象&lt;/h2&gt;
&lt;p&gt;Vim命令操作文本对象(字符，单词，括号分割的字符，句子等等)&lt;/p&gt;
&lt;p&gt;对我来说，最重要的一个是 在单词中: iw. 要选中当前的单词，只需要键入 viw (v可视模式，iw选中光标所在词),同样的，删除: diw&lt;/p&gt;
&lt;p&gt;inner-word/block和a-word/block的区别在于，前者只选中单词的字符(不包括空白字符) 或者括号中的内容(不包括括号本身).后者包括括号本身或者单词后的空白字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iw 单词
aw 单词+后面空白
iW …inner WORD
aW …a WORD
is 句子
as 句子+后面空白
ip 段落
ap 段落+段落后空白
i( or i) 括号中
a( or a) 括号中+括号
i&amp;lt; or i&amp;gt;
a&amp;lt; or i&amp;gt;
i{ or i}
a{ or a}
i" 引号中
a" 引号中+引号
i`
a`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是命令命令的展示，[]表示选中的文本:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iw&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;aw&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;iW&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;aW&lt;/span&gt;   &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;is&lt;/span&gt;   &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;as&lt;/span&gt;   &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;ip&lt;/span&gt;   &lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;

     &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;ap&lt;/span&gt;   &lt;span class="n"&gt;End&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

     &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;     &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;     &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="s"&gt;"   The "&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;"   The[ “best”]&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;   &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;   &lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以尝试使用，熟悉并记住(对我而言，iw和i() 真正地节省了时间)&lt;/p&gt;
&lt;h2 id="undohe-redo"&gt;Undo和Redo&lt;/h2&gt;
&lt;p&gt;不要害怕使用一系列命令，你可以在命令模式下撤销，用u - 甚至用ctrl-r撤销刚才的撤销操作&lt;/p&gt;
&lt;p&gt;Vim7.0 介绍了撤销分支，但我没有时间去深入了解&lt;/p&gt;
&lt;h2 id="wai-bu-ming-ling"&gt;外部命令&lt;/h2&gt;
&lt;p&gt;Vim很容易加入外部命令的输出,或者通过外部过滤器过滤整行或部分&lt;/p&gt;
&lt;p&gt;使用外部命令 :!command    输出将会展现出来&lt;/p&gt;
&lt;p&gt;通过外部命令过滤文本，可以使用  :!sort %&lt;/p&gt;
&lt;p&gt;将外部命令的输出插入到当前文件  :r!command (例如 :r!which ls)&lt;/p&gt;
&lt;p&gt;查看更多关于filter的信息 :h filter&lt;/p&gt;
&lt;h2 id="sou-suo-he-ti-huan"&gt;搜索和替换&lt;/h2&gt;
&lt;p&gt;在Vim中搜索非常简单，在命令模式下输入 / ，然后填入你要搜索的词，然后vim会搜索这个文件(当前位置向前)&lt;/p&gt;
&lt;p&gt;使用? 进行向后搜索&lt;/p&gt;
&lt;p&gt;在搜索结果中，使用n或N进行重复搜索(和前一个搜索同一个方向)&lt;/p&gt;
&lt;p&gt;如果设置了"incsearch", Vim会立刻跳到匹配文本位置，如果设置了"hlsearch", 将会高亮所有匹配文本. 要去除高亮，:nohl&lt;/p&gt;
&lt;p&gt;替换同样不是很难，但是你需要对正则表达式有所了解&lt;/p&gt;
&lt;p&gt;使用正则替换某些文本，输入 :%s/old/new/gc 这个命令将会遍历整个文件%, 用单词"new"替换所有"old". g代表替换行中所有匹配文本，c代表替换前询问&lt;/p&gt;
&lt;p&gt;如果只需要替换选中区域中的某些文本，选中区域，输入 :s/old/new/g.&lt;/p&gt;
&lt;p&gt;这个就像&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:'&amp;lt;,'&amp;gt;s/old/new/g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在标签一节之后，你将会知道 '&amp;lt;'和'&amp;gt;'的意思&lt;/p&gt;
&lt;h2 id="bu-quan"&gt;补全&lt;/h2&gt;
&lt;p&gt;在你输入时，反复输入同一个词是很正常的事情. 使用Ctrl-p，vim会反向搜索最近输入过的拥有相同开头的词, ctrl-x ctrl-l补全整个词&lt;/p&gt;
&lt;p&gt;如果你不确定如何拼写某个词，并且你设置了拼写检查(:set spell),你可以使用 Ctrl-x Ctrl-k 到字典中查询已经输入的词.Vim自动补全系统在7.0后得到了很大的改善.&lt;/p&gt;
&lt;p&gt;注意，自动补全命令仅在插入模式下有效，在命令模式有其他的作用&lt;/p&gt;
&lt;h2 id="biao-qian"&gt;标签&lt;/h2&gt;
&lt;p&gt;你可以在文档中设置标签，实现在文档中不同位置的快速跳转&lt;/p&gt;
&lt;p&gt;vim自动设置的标签&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{0-9} 关闭文件的最近10个位置(0 最后一个, 1 倒数第二个)
&amp;lt; and &amp;gt; 标记文本左边/右边的位置
( and ) 当前句子的开始/结束
{ and } 当前段落的开始/结束
[ and ] 拷贝或修改文本的第一/最后一个字符的位置
. 最后修改点位置
' or ` 上次跳转点位置
" 退出文件前的最后一个位置
^ 最后插入/修改位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要设置自定义标签，使用 m{a-zA-Z} (例如 ma ), 如果要跳转到某个标签(自定义或预定义),可以使用 ' 和 `&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;' 将光标移到标记行首个非空字符位置
` 移到设置标签时得准确位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大写和小写标记之间有些区别&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{a-z} 文件维度
{A-Z} 会话维度，和文件关联，可以跨文件跳转
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，可以使用 L 标记work-log 使用T标记time-table ,然后进行快速跳转&lt;/p&gt;
&lt;p&gt;例如，你可以键入 '" 跳转到文件关闭前光标所在位置(Vim可以通过配置实现)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;列出标签列表 :marks

删除 :delmarks a b c

删除所有  :delmarks!
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="biao-qian-ye-tab-huan-chong-buffer-he-chuang-kou-window"&gt;标签页(tab) ，缓冲(buffer) 和 窗口(window)&lt;/h2&gt;
&lt;p&gt;Vim 7.0介绍过tabs. 我们都知道并喜欢tabs,所以这里不多提. (注意: vim中的tabs和其他程序中的tabs略有不同.不同点在于，每个tab页可以拥有自己的布局, 例如我可以在第一个tab中切分窗口，在第二个tab中不切分)&lt;/p&gt;
&lt;p&gt;命令行中用vim一次性打开多个tab  vim -p *.txt&lt;/p&gt;
&lt;p&gt;切换tab, 可以使用鼠标(gVim) 或者输入 gt&lt;/p&gt;
&lt;p&gt;创建一个新的空tab,输入 :tabnew&lt;/p&gt;
&lt;p&gt;或者在一个新tab中打开文件  :tabe xyz&lt;/p&gt;
&lt;p&gt;buffer和window有些不好理解，window是打开vim时你看到的，当你打开帮助(:help bufers), 你将会得到两个window.并非真正的窗口，是vim提供的展示视图&lt;/p&gt;
&lt;p&gt;你可以打开一个window,切分成水平两个 :sp 或者竖直两个 :vsp. 通过这个方法，vim将同一个buffer放在两个不同的window. 你可以打开文件, :sp filea  或者 :vsp fileb. 在窗口之间跳转，命令模式下使用 Ctrl-w {hjkl}&lt;/p&gt;
&lt;p&gt;buffer大多数情况下是一个文件，但是不要求可见. 所以通常一个window中有多个buffer, 要在当前window中展现不同的buffer , 使用 :b NUMBER, 可以使用 :buffers查看对应buffer的编号，通常情况下，vim要求你在切换到另一个buffer之前，保存当前buffer, 所以切换报错时不要太过惊讶(可以 :set hidden 使未保存buffer生效，但需谨慎使用)&lt;/p&gt;
&lt;p&gt;下面是我的笔记:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:b N 切换到buffer N
:buffers 展示buffer列表, 字符含义
    % 当前window
    # 替换buffer (使用 :e# or :b#切换)
    a 活动的(加载并可见)
    h 隐藏的(加载但不可见)
    + 修改的
:bd 关闭buffer并从buffer列表移除(不关闭vim,即使最后一个buffer关闭)
:bun 关闭buffer但留存在bufferlist
:sp #N 分屏并编辑buffer N
:w 保存当前buffer
:e 重新加载当前文件
:q 退出
:new 新的空window
:on 关闭除当前活动window之外的所有window(Ctrl-W o)
Ctrl-W {h,j,k,l} 窗口之间切换
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置'hidden'后，允许修改未保存的buffer隐藏，buffer会自动保存如果未设置'hidden'，设置了'autowrite'&lt;/p&gt;
&lt;h2 id="hong"&gt;宏&lt;/h2&gt;
&lt;p&gt;Vim允许使用点. 重复某些命令，当存在多个命令时，使用宏&lt;/p&gt;
&lt;p&gt;你可以开始 录制宏， 使用 q和{0-9a-zA-Z}， 例如 qq  录制用于buffer"q"的宏，完成录制后，键入q退出&lt;/p&gt;
&lt;p&gt;现在你可以使用 @q 在任何时候调用宏&lt;/p&gt;
&lt;h2 id="zui-hou"&gt;最后&lt;/h2&gt;
&lt;p&gt;我希望可以帮助你开始学习vim. 我可以做的最后一件事是，提供我的vim配置文件.  使用 :help ... 去学习vim更强大的功能并在后续写一篇指南&lt;/p&gt;
&lt;p&gt;可以将&lt;a href="http://blog.interlinked.org/static/files/vimrc"&gt;vimrc&lt;/a&gt;文件放入你的home目录(~/.vimrc),但是要先确定这个目录下还没有这个文件&lt;/p&gt;
&lt;p&gt;注解1： Vim是一个编辑器，不是IDE 或者操作系统. 不要通过其试图创建一个IDE,如果你喜欢IDE,挑一个来用！当然，vim可以将很多任务自动化,例如编译，跳转到编译错误处，要实现这些，关注下vim的插件&lt;/p&gt;
&lt;p&gt;Emacs is a good operating system, but it lacks a good editor.
— Old saying.&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>Linux Shell脚本攻略笔记[速查]</title><link href="http://www.wklken.me/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html" rel="alternate"></link><published>2013-07-04T00:00:00+08:00</published><updated>2013-07-04T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-07-04:/posts/2013/07/04/note-of-linux-shell-scripting-cookbook.html</id><summary type="html">&lt;p&gt;Linux Shell脚本攻略的笔记，markdown编写，可以速查(ctrl+f)&lt;/p&gt;
&lt;p&gt;2013-09-08 从历史网摘中补充
 2014-02-16 增加&amp;lt;&lt;shell脚本指南&gt;&amp;gt;笔记补充&lt;/shell脚本指南&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9104.html"&gt;sed简明教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9070.html"&gt;awk简明教程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="shell-script"&gt;shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="run-shell-script"&gt;run shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh script.sh

or

chmod a+x script.sh
./script.sh
# 会读取首行的解释器, 执行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmd&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1; cmd2

or

cmd1
cmd2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="echo"&gt;echo&lt;/h3&gt;
&lt;p&gt;echo  的功能正如其名，就是基于标准输出打印一段文本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "welcome to bash …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Linux Shell脚本攻略的笔记，markdown编写，可以速查(ctrl+f)&lt;/p&gt;
&lt;p&gt;2013-09-08 从历史网摘中补充
 2014-02-16 增加&amp;lt;&lt;shell脚本指南&gt;&amp;gt;笔记补充&lt;/shell脚本指南&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9104.html"&gt;sed简明教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/9070.html"&gt;awk简明教程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="shell-script"&gt;shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="run-shell-script"&gt;run shell script&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh script.sh

or

chmod a+x script.sh
./script.sh
# 会读取首行的解释器, 执行
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cmd&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1; cmd2

or

cmd1
cmd2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="echo"&gt;echo&lt;/h3&gt;
&lt;p&gt;echo  的功能正如其名，就是基于标准输出打印一段文本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "welcome to bash"
echo welcome to bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用不带引号的echo时，无法显示分号&lt;/p&gt;
&lt;p&gt;使用单引号echo时，bash不会对单引号中变量求值  '$var'&lt;/p&gt;
&lt;p&gt;echo 中转义换行符&lt;/p&gt;
&lt;p&gt;默认情况，echo将换行标志追加到文本尾部，可以忽略结尾换行符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -n 'test\n'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对字符串进行转义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -e '1\t2\t3'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印彩色输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;文字颜色码
    重置0
    黑色30
    红色31
    绿色32
    黄色33
    蓝色34
    洋红35
    青色36
    白色37

echo -e "\e[1;31m This is red test \e[0m"

背景颜色码
    重置0
    黑色40
    红色41
    绿色42
    黄色43
    蓝色44
    洋红45
    青色46
    白色47

echo -e "\e[1;42m Green Background \e[0m"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="printf"&gt;printf&lt;/h3&gt;
&lt;p&gt;可以格式化字符串, 使用参数同c中printf一样&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;printf "hello world"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认不会加换行符, 需要手动添加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;printf "%-5s %-10s %-4.2f\n" 3 Jeff 77.564

3    Jeff      77.56
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="huan-jing-bian-liang-he-bian-liang"&gt;环境变量和变量&lt;/h3&gt;
&lt;p&gt;bash中，每个变量的值都是字符串，无论你给变量赋值时是否使用引号，值都会以字符串的形式存储&lt;/p&gt;
&lt;p&gt;环境变量&lt;/p&gt;
&lt;p&gt;查看所有与此终端进程相关的环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看某个进程的环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/$PID/environ
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变量赋值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var=value
var='the value'
var="the &lt;span class="nv"&gt;$PARAM&lt;/span&gt;"

echo &lt;span class="nv"&gt;$var&lt;/span&gt;
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;

var = value非变量赋值是相等操作
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;未在当前进程中定义，而是从父进程中继承而来的变量
export 设置环境变量,之后,从当前shell 执行的任何程序都会继承这个变量

export PYTHONPATH=$PYTHONPATH:/home/ken/workspace
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的环境变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PATH 查找可执行文件路径, 通常定义在/etc/environment or /ect/profile or ~/.bashrc
修改:        export PATH=$PATH:/new/path/
HOME
PWD
USER
UID
SHELL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取字符串长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;length=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;识别当前shell版本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $SHELL
    /bin/bash
echo $0
    bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查是否为超级用户 or 普通用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root的UID=0

if [ $UID -ne 0 ]
then
    echo "not root user"
else
    echo "root"
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改bash的提示字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;设置PS1变量
\u用户名
\h主机名
\w当前工作目录
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pgrep"&gt;pgrep&lt;/h3&gt;
&lt;p&gt;获取某个进程名对应进程id&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep gedit
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shellshu-xue-yun-suan"&gt;shell数学运算&lt;/h3&gt;
&lt;p&gt;整数运算&lt;/p&gt;
&lt;p&gt;let&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;no1=4
no2=5
let result=no1+no2

let no1++
let no2--
let no1+=7
let no2-=7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expr(少用)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=`expr 3 + 4`
result=$(expr $no1 + 5)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result=$[ no1 + no2 ]
result=$[ $no + 5 ]

result=$(( no1 + 5 ))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浮点数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "4 * 0.56" | bc
设定精度
echo "scale=2;3/8" | bc
进制转换
echo "obase=2;100" | bc
平方
echo "10^10" | bc
平方根
echo "sqrt(100)" | bc
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ming-ling-zhuang-tai"&gt;命令状态&lt;/h3&gt;
&lt;p&gt;当命令成功完成, 返回0&lt;/p&gt;
&lt;p&gt;发生错误并退回, 返回非0&lt;/p&gt;
&lt;p&gt;可以从$?中获取  cmd; echo $?&lt;/p&gt;
&lt;h3 id="wen-jian-miao-shu-fu-he-zhong-ding-xiang"&gt;文件描述符和重定向&lt;/h3&gt;
&lt;p&gt;文件描述符: 与文件输入/输出相关联的整数, 用来跟踪已打开的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 stdin  标砖输入
1 stdout 标准输出
2 stderr 标准错误
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向到文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;清空文件写入新内容
echo "test" &amp;gt; temp.txt
追加
echo "test" &amp;gt;&amp;gt; temp.txt

&amp;gt;等价于1&amp;gt;
&amp;gt;&amp;gt;等价于 1&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出分离或合并&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;分离
cmd 2&amp;gt;stderr.txt  1&amp;gt;stdout.txt

合并
cmd &amp;gt; output.txt 2&amp;gt;&amp;amp;1
or
cmd &amp;amp;&amp;gt; output.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扔到垃圾桶&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/dev/null 特殊设备文件, 接收到的任何数据都会被丢弃(位桶/黑洞)

只有标准错误
cmd 2 &amp;gt; /dev/null

标准输出和标准错误
cmd &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时输出到终端和文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd | tee file1

tee默认覆盖，可以-a选项追加
cmd | tee -a file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将stdin作为命令参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd1 | cmd2 | cmd3 -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将文件重定向到命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd &amp;lt; file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义文件描述符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;使用文件描述符3打开并读取文件
exec 3&amp;lt;input.txt
cat &amp;lt;&amp;amp;3

使用文件描述符4进行写入
exec 4&amp;gt;output.txt
echo newline &amp;gt;&amp;amp;4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cat"&gt;cat&lt;/h3&gt;
&lt;p&gt;cat, concatenate(拼接)&lt;/p&gt;
&lt;p&gt;“cat”代表了连结（Concatenation），连接两个或者更多文本文件或者以标准输出形式打印文件的内容&lt;/p&gt;
&lt;p&gt;一般格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file1 file2 file3

从管道中读取
OUTPUT_FROM_SOME_CMDS | cat

echo "test" | cat - file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩空白行, 多个连续空行变成单个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat -s  file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配合tr移除空白行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | tr -s '\n' #连续多个\n -&amp;gt; \n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加行号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat -n file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示制表符等&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat -T file

cat f &amp;gt; t
注意：“&amp;gt;&amp;gt;”和“&amp;gt;”调用了追加符号。它们用来追加到文件里，而不是显示在标准输出上。
“&amp;gt;”符号会删除已存在的文件，然后创建一个新的文件。
所以因为安全的原因，建议使用“&amp;gt;&amp;gt;”，它会写入到文件中，而不是覆盖或者删除。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入多行文字(CTRL + d 退出)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt; test.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shu-zu-he-guan-lian-shu-zu"&gt;数组和关联数组&lt;/h3&gt;
&lt;p&gt;普通数组，整数作为数组索引, 借助索引将多个独立的数据存储为一个集合(list)&lt;/p&gt;
&lt;p&gt;关联数组，可以使用字符串作为索引(map)&lt;/p&gt;
&lt;p&gt;数组&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;array_var=(1 2 3 4 5)

or
array_var[0]="test1"
array_var[3]="test3"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以清单形式打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#array_var[*]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取索引列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;array_var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关联数组&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;declare -A ass_array

内嵌索引-值
ass_array=([index1]=value1 [index2]=value2)

独立
ass_array[index3]=value3

echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ass_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="alias"&gt;alias&lt;/h3&gt;
&lt;p&gt;alias是一个系统自建的shell命令，允许你为名字比较长的或者经常使用的命令指定别名。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias new_command='command seq'
unalias new_command

使用原生命令
\new_command
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="date"&gt;date&lt;/h3&gt;
&lt;p&gt;“date”命令使用标准的输出打印当前的日期和时间，也可以深入设置&lt;/p&gt;
&lt;p&gt;读取日期&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间戳&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date +%s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日期转换为时间戳&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date --date "Thu Nov 18 08:07:21 IST 2010" +%s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;日期格式化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;星期  %a  Sat
      %A  Saturday
月    %b  Nov
      %B  November
日    %d  31
固定日期格式mm/dd/yy     %D
年    %y  10
      %Y  2010
小时  %I/%H    08
分钟  %M  33
秒    %S  10
纳秒  %N  696308515
Unix纪元时  %s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;格式化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date "+%Y %B %d"

date +%Y-%m-%d
输出： 2011-07-28
date +"%Y-%m-%d %H:%M:%S"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置日期和时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date -s "格式化日期字符串"

date -s "21 June 2009 11:01:22"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;延时&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sleep number_of_seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两天后及两天前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date -d '2 days' +%Y%m%d
date -d '2 days ago' +%Y%m%d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;某一天的几天前&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TODAY=`date +%Y%m%d`
DAY_1_AGO=`date -d "$TODAY 1 days ago" +%Y%m%d`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间戳日期转换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;@1193144433&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;@1193144433&lt;/span&gt; &lt;span class="s"&gt;"+%Y-%m-%d %T"&lt;/span&gt;

&lt;span class="err"&gt;反向&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s"&gt;"2007-10-23 15:00:23"&lt;/span&gt; &lt;span class="s"&gt;"+%s"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值给变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATE=$(date +%Y%m%d)
DATE=`date +%Y%m%d`
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="diao-shi-jiao-ben"&gt;调试脚本&lt;/h3&gt;
&lt;p&gt;打印出所执行的每一行命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash -x script.sh
sh -x script.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在脚本中设置开关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set -x 在执行时显示参数和命令
set +x 关闭调试
set -v 当命令进行读取时显示输入
set +v 禁止打印输入
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;直接修改脚本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -xv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="han-shu-he-can-shu"&gt;函数和参数&lt;/h3&gt;
&lt;p&gt;定义函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;or&lt;/span&gt;
&lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fname;
传参
fname arg1 arg2;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接收参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;第一个参数&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;第二个参数&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;第&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;个参数&lt;/span&gt;

&lt;span class="s"&gt;"$@"&lt;/span&gt;&lt;span class="err"&gt;被扩展成&lt;/span&gt; &lt;span class="s"&gt;"$1"&lt;/span&gt; &lt;span class="s"&gt;"$2"&lt;/span&gt; &lt;span class="s"&gt;"$3"&lt;/span&gt;
&lt;span class="s"&gt;"$*"&lt;/span&gt;&lt;span class="err"&gt;扩展成&lt;/span&gt;&lt;span class="s"&gt;"$1c$2c$3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;其中&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="n"&gt;IFS&lt;/span&gt;&lt;span class="err"&gt;第一个字符&lt;/span&gt;

&lt;span class="s"&gt;"$@"&lt;/span&gt;&lt;span class="err"&gt;使用最多&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;将所有的参数当做单个字符串&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bash支持递归&lt;/p&gt;
&lt;p&gt;导出函数,可以作用到子进程中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export -f fname
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数及命令返回值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmd;
echo $?

退出状态，成功退出，状态为0，否则，非0

cmd
if [ $? -eq 0 ]
then
    echo "success"
else
    echo "fail"
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="guan-dao"&gt;管道&lt;/h3&gt;
&lt;p&gt;前一个命令的输出作为后一个命令的输入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$cmd1 | cmd2 | cmd3
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="du-qu-ming-ling-shu-chu"&gt;读取命令输出&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;子shell&lt;/span&gt;  &lt;span class="err"&gt;subshell&lt;/span&gt;
&lt;span class="nv"&gt;cmd_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;COMMANDS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;or&lt;/span&gt;
&lt;span class="err"&gt;反引用&lt;/span&gt;
&lt;span class="nv"&gt;cmd_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;COMMANDS&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子shell本身是独立进程, 不会对当前shell有任何影响&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pwd;
(cd /bin; ls)
pwd #同上一个pwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留空格和换行符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;out=$(cat text.txt)
echo $out  #丢失所有换行符

out="$(cat text.txt)"
echo $out  #保留

cat a
1
2
3
echo $(cat a)
1 2 3
echo "$(cat a)"
1
2
3
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="read"&gt;read&lt;/h3&gt;
&lt;p&gt;read, 用于从键盘或标准输入中读取文本&lt;/p&gt;
&lt;p&gt;读取n个字符存入变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -n number_of_chars variable_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不回显的方式读取密码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -s var
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示提示信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -p "Enter input:" var
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限时输入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -t  timeout var
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置界定符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read -d delim_char var
read -d ":" var
hello:
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zi-duan-fen-ge-fu-he-die-dai-qi"&gt;字段分隔符和迭代器&lt;/h3&gt;
&lt;p&gt;内部字段分隔符，Internal Field Separator, IFS&lt;/p&gt;
&lt;p&gt;IFS默认为空白字符（换行符，制表符，空格）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data="name,sex,rollno"
oldIFS=$IFS
IFS=,
for item in $data
do
        echo $item
done

IFS=$oldIFS
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xun-huan"&gt;循环&lt;/h3&gt;
&lt;p&gt;for循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo {1..50}

for i in {a..z}; do actions; done;

or

for((i=0;i&amp;lt;10;i++))
{
    commands;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while condition
do
    commands;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;until循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;until condition
do
    commands;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bi-jiao-he-ce-shi"&gt;比较和测试&lt;/h3&gt;
&lt;p&gt;if条件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if condition;
then
    commands;
elif condition;
then
    commands;
else
    commands;
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑运算符进行简化, 短路运算更简洁&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ condition ] &amp;amp;&amp;amp; action;
[ condition ] || action;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算术比较&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-gt 大于
-lt 小于
-ge 大于等于
-le 小于等于
-ne 不等于
-eq 等于

注意[]和操作数之间的空格
[ $var -eq 0 ]

and
[ $var -ne 0 -a $var2 -ge 2 ]
or
[ $var -ne 0 -o $var2 -ge 2 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件测试&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ -f $file_var ] 正常文件路径或文件名
[ -x $var ] 可执行
-d 目录
-e 存在
-c 字符设备文件
-b 块设备文件
-w 可写
-r 可读
-L 符号链接
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串比较&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[ $str1 = $str2 ]]&lt;/span&gt;
&lt;span class="k"&gt;[[ $str1 == $str2 ]]&lt;/span&gt;

&lt;span class="na"&gt;[[ $str1 !&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$str2 ]] 不等&lt;/span&gt;

&lt;span class="k"&gt;[[ $str1 &amp;gt; $str2 ]]&lt;/span&gt;
&lt;span class="k"&gt;[[ $str1 &amp;lt; $str2 ]]&lt;/span&gt;

&lt;span class="na"&gt;[[ -z $str1 ]]  空&lt;/span&gt;
&lt;span class="na"&gt;[[ -n $str1 ]]  非空&lt;/span&gt;

&lt;span class="na"&gt;if [[ -n $str1 ]] &amp;amp;&amp;amp; [[ -z $str2 ]]&lt;/span&gt;
&lt;span class="na"&gt;then&lt;/span&gt;
    &lt;span class="na"&gt;commands;&lt;/span&gt;
&lt;span class="na"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="find"&gt;find&lt;/h3&gt;
&lt;p&gt;搜索指定目录下的文件，从开始于父目录，然后搜索子目录&lt;/p&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find base_path

# 打印文件和目录列表
find . -print  #默认\n分割文件名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find path -name "*.txt" -print
          -iname  忽略大小写

多个条件 or
find . \( -name "*.txt" -o -name "*.py" \)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;通配符
find /home/users -path "*slynux*" -print

正则
find . -regex ".*\(\.py\|\.sh\)$"
       -iregex 忽略大小写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;否定参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . ! -name "*.txt" -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据文件类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type d -print
f 普通文件
l 符号链接
d 目录
c 字符设备
b 块设备
s 套接字
p Fifo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定目录深度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -maxdepth 1 -type f -print
find . -mindepth 2 -type f -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据文件时间搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;计量单位 天
-atime 最近一次访问时间
-mtime 最后一次被修改时间
-ctime 文件元数据，最近一次修改时间

find . -type f -atime -7 -print #最近七天内被访问的
find . -type f -atime 7 -print  #恰好在七天前
                      +7 -print #超过七天

计量单位 分钟
-amin 访问时间
-mmin 修改时间
-cmin 变化时间

find . -type f -amin +7 -print #访问时间超过7分钟的

find . -type f -newer file.txt -print  #用于比较时间戳的参考文件，比参考文件更新的文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基于文件大小的搜索&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -size +2k
+ 大于  -小于   无符号，恰好等于

b 块
c 字节
w 字（2字节）
k 千字节
M 兆字节
G 吉字节
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除匹配的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -name "*.swp" -delete
#注意：-delete位置一定是最后
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件权限及所有权&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -perm 644 -print

find . -type f -user slynux -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行命令或动作(最强大的命令)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -user root -exec chown slynux {} \;
find . -type f -exec cp {} OLD \;
find . -iname "abc.txt" -exec md5sum {} \;

{} 江北替换成对应文件名
exec无法结合多个命令，可以将多个命令放入脚本，调用之
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跳过指定目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . \( -name ".git" -prune \) -name '*.txt'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xargs"&gt;xargs&lt;/h3&gt;
&lt;p&gt;将标准输入数据转化成命令行参数&lt;/p&gt;
&lt;p&gt;将stdin接收到的数据重新格式化，再将其作为参数传给其他命令&lt;/p&gt;
&lt;p&gt;多行输入转化成单行输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat  example.txt | xargs  #空格替换掉\n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切成多行，每行n个参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat examplet.txt | xargs -n 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以指定分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "aaaXbbbXccc" | xargs -d 'X'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将参数传递给脚本(类似循环)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat args.txt | xargs -n 1 ./cecho.sh

./cecho.sh -p arg1 1
需要变更
cat args.txt | xargs -I {} ./cecho.sh -p {} 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;find与xargs组合&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type f -name "*.txt" -print | xargs rm -rf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | ( while read arg; do cat $arg; done )
cat file | xargs -I {} cat {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tr"&gt;tr&lt;/h3&gt;
&lt;p&gt;tr可以对来自标准输入的字符进行替换，删除以及压缩(translate, 可以将一组字符变成另一组字符)&lt;/p&gt;
&lt;p&gt;tr只能通过stdin，无法通过其他命令行进行接收参数&lt;/p&gt;
&lt;p&gt;格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tr [options] source-char-set replace-char-set
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选项&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-c 取source-char-set补集，通常与-d/-s配合
-d 删除字source-char-set中的所列的字符
-s 浓缩重复字符，连续多个变成一个
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符替换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/12501/environ | tr '\0' '\n'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大小写替换&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo  "HELLO" | tr 'A-Z' 'a-z'
cat text | tr '\t' ' '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "hello 123 world 456"| tr -d '0-9'
hello  world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符集补集&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "hello 1 char 2" | tr -d -c '0-9'  #删除非0-9
12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩字符&lt;/p&gt;
&lt;p&gt;连续的重复字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "GNU is    not UNix" | tr -s ' '
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符类&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alnum 字母和数字
alpha 字母
cntrl 控制字符
digit 数字
graph 图形字符
lower 小写字母
print 可打印字符
punct 标点符号
space 空白字符
upper 大写字母
xdigit 十六进制字符

tr '[:lower:]' '[:upper:]'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="md5sum"&gt;md5sum&lt;/h3&gt;
&lt;p&gt;32个字符的十六进制串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;md5sum filename
md5sum filename1 filename2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sha1sum"&gt;sha1sum&lt;/h3&gt;
&lt;p&gt;40个字符十六进制串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sha1sum file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dui-mu-lu-jin-xing-xiao-yan"&gt;对目录进行校验&lt;/h3&gt;
&lt;p&gt;需安装md5deep软件包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;md5deep/sha1deep
md5deep -rl dirname
         r递归，l相对路径
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sort"&gt;sort&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort [options] [file(s)]

-c 检查是否已排序
-u 丢弃所有具有相同键值的记录

-b 忽略开头空白
-d 字典序
-g 一般数值，以浮点数类型比较字段，仅支持gnu
-i 忽略无法打印的字符

-k 定义排序键值字段
-n 以整数类型比较字段
-r 倒转
-o 输出到指定文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort file1 &amp;gt; file1.sorted
sort -o file1.sored file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按数字, 要明确&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -n file1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逆序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -r file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试一个文件是否已经被排过序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -C file
if [ $? -eq 0 ]; then
    echo ssss
fi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;合并两个排过序的文件，并不需要对合并后的文件进行再排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -m sorted1 sorted2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据键或者列排序(按照哪一个列)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -k 1 data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限定特定范围内一组字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;key=char4-char8
sort -k 2,3 data

sort -k2.4,5.6 file
第二个字段的第四个字符开始比较，直到第五个字段的第六个字符
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忽略前导空白及字典序排序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort -bd unsorted.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;去重&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sort a.txt | uniq
sort -u a.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="uniq"&gt;uniq&lt;/h3&gt;
&lt;p&gt;用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只显示未重复的记录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq -u file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;找出重复的行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq -d file
-s 可指定跳过前N个字符
-w 指定用于比较的最大字符数
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计各行出现的次数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uniq -c file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p57&lt;/p&gt;
&lt;h3 id="tempfile"&gt;tempfile&lt;/h3&gt;
&lt;p&gt;只有在基于Debian的发布版才有(Ubuntu/Debian)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;temp_file=$(tempfile)
等同
temp_file="/tmp/file-$RANDOM"

#$$为进程id
temp_file="/tmp/var.$$"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="split"&gt;split&lt;/h3&gt;
&lt;p&gt;按大小分割文件, 单位k(KB), M, G, c(byte), w(word)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -b 10k data.file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-d数字后缀，-a后缀长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -b 10k data.file -d -a 4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分割后指定文件名前缀&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;split -b 10k data.file file_prefix

设置后缀格式
split -b 10k data.file -d -a 4 file_prefix
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据行数分割&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spilt -l 10 data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其扩展是csplit，可根据文件特性切分，关注&lt;/p&gt;
&lt;h3 id="bashbian-liang-pi-pei-qie-fen"&gt;bash变量匹配切分&lt;/h3&gt;
&lt;p&gt;sample.jpg&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_jpg="sample.jpg"

从右向左匹配
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_jpg&lt;/span&gt;&lt;span class="o"&gt;%.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
#sample

从左向右匹配
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_jpg&lt;/span&gt;&lt;span class="c1"&gt;#.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
#jpg

% # 属于非贪婪
%% ## 属于贪婪
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;贪婪非贪婪&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var=hack.fun.book.txt
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;%.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #hack.fun.book
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;%%.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #hack

&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="c1"&gt;#.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #fun.book.txt
&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="c1"&gt;##.*&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; #txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="expect"&gt;expect&lt;/h3&gt;
&lt;p&gt;实现自动化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spawn ./ineractive.sh
expect "Enter the number"
send "1\n"
expect "Enter name:"
send "hello\n"
expect eof

spawn指定需要自动化的命令
expect提供需要等待的消息
send发送消息
expect eof指明命令交互结束
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dd"&gt;dd&lt;/h3&gt;
&lt;p&gt;生成任意大小的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 创建一个1M大小的文件junk.data
bs=2M count=2 则文件大小4M

dd if=/dev/zero of=junk.data bs=1M count=1
   输入文件     输出文件     块大小   复制块数

块大小单位
字节(1B) c
字(2B)   w
块(512B)   b
千字节(1024B) k
兆字节(1024KB) M
吉字节(1024MB) G
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="comm"&gt;comm&lt;/h3&gt;
&lt;p&gt;两个文件之间比较，输出三列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;onleA \t onlyB \t bothAB

comm A B -1 -2 #删除第一第二列
-3 删除第三列

可以得到A^B  A-B B-A
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mkdir"&gt;mkdir&lt;/h3&gt;
&lt;p&gt;“mkdir”(Make directory)命令在命名路径下创建新的目录。然而如果目录已经存在了，那么它就会返回一个错误信息”不能创建文件夹，文件夹已经存在了”(“cannot create folder, folder already exists”)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir dirpath

mkdir -p dirpath1/dirpath2

#一次多个目录
mkdir -p /home/user/{test,test1,test2}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：目录只能在用户拥有写权限的目录下才能创建&lt;/p&gt;
&lt;h3 id="ls"&gt;ls&lt;/h3&gt;
&lt;p&gt;ls命令是列出目录内容(List Directory Contents)的意思。运行它就是列出文件夹里的内容，可能是文件也可能是文件夹&lt;/p&gt;
&lt;p&gt;ls文件的内容关系&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- 普通文件
d 目录
c 字符设备
b 块设备
l 符号链接
s 套接字
p 管道

文件权限序列
rwx
rwS  setuid(S)，特殊权限, 出现在x的位置, 允许用户以其拥有者的权限来执行文件, 即使这个可执行文件是由其他用户运行的

目录
r,允许读取目录中文件和子目录列表
w,允许在目录中创建或删除文件或目录
x,指明是否可以访问目录中的文件和子目录
rwt/rwT 粘滞位，只有创建该目录的用户才能删除目录中的文件，即使用户组和其他用户也有写权限，典型例子/tmp, 写保护
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -d */
ls -F | grep "/$"
ls -l | grep "^d"
find . -type d -maxdepth 1 -print
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l    命令已详情模式(long listing fashion)列出文件夹的内容
ls -a    命令会列出文件夹里的所有内容，包括以”.”开头的隐藏文件
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chmod"&gt;chmod&lt;/h3&gt;
&lt;p&gt;设置文件权限&lt;/p&gt;
&lt;p&gt;“chmod”命令就是改变文件的模式位。chmod会根据要求的模式来改变每个所给的文件，文件夹，脚本等等的文件模式（权限）。&lt;/p&gt;
&lt;p&gt;设置权限&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user group others all
u    g     o      a

chmod u=rwx g=rw o=r filename

chmod u+x filename
chomd a+x filename #所有

chmod a-x filename

chmod 764 filename

#设置粘滞位
chmod a+t dirname

#递归改变

chmod 777 . -R
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：对于系统管理员和用户来说，这个命令是最有用的命令之一了。在多用户环境或者服务器上，对于某个用户，如果设置了文件不可访问，那么这个命令就可以解决，如果设置了错误的权限，那么也就提供了为授权的访问。&lt;/p&gt;
&lt;h3 id="chown"&gt;chown&lt;/h3&gt;
&lt;p&gt;每个文件都属于一个用户组和一个用户“chown”命令用来改变文件的所有权，所以仅仅用来管理和提供文件的用户和用户组授权。&lt;/p&gt;
&lt;p&gt;改变所有权&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown user.group filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown -R user.group .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次都以其他用户身份执行(允许其他用户以文件所有者的身份来执行)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chomod +s executable_file

chown root.root executable_file
chmod +s executable_file
./executable_file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="chattr"&gt;chattr&lt;/h3&gt;
&lt;p&gt;创建不可修改文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chattr +i file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一旦被设置为不可修改, 任何用户包括超级用户都不能删除该文件, 除非其不可修改的属性被移除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chattr -i file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="touch"&gt;touch&lt;/h3&gt;
&lt;p&gt;“touch”命令代表了将文件的访问和修改时间更新为当前时间。&lt;/p&gt;
&lt;p&gt;touch命令只会在文件不存在的时候才会创建它(空白文件)。如果文件已经存在了，它会更新时间戳，但是并不会改变文件的内容。&lt;/p&gt;
&lt;p&gt;空白文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch filename

for name {1..100}.txt
do
    touch $name
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改文件访问时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch -a "Fri Jun 25 20:50:14 IST 1999" filename
touch -m #修改文件内容的修改时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改文件或目录的时间戳(YYMMDDhhmm)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch -t 0712250000 file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：touch 可以用来在用户拥有写权限的目录下创建不存在的文件。&lt;/p&gt;
&lt;h3 id="ln"&gt;ln&lt;/h3&gt;
&lt;p&gt;建立软连接&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s target symbolic_link_name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果目的路径已经存在，而没有指定 -f 标志，ln 命令不会创建新的链接，而是向标准错误写一条诊断消息并继续链接剩下的 SourceFiles。&lt;/p&gt;
&lt;p&gt;-f 促使 ln 命令替换掉任何已经存在的目的路径&lt;/p&gt;
&lt;h3 id="readlink"&gt;readlink&lt;/h3&gt;
&lt;p&gt;读取链接对应真是路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;readlink web

 readlink ~/.vim
 /Users/ken/github/k-vim
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="file"&gt;file&lt;/h3&gt;
&lt;p&gt;通过查看文件内容来找出特定类型的文件&lt;/p&gt;
&lt;p&gt;打印文件类型信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印不包含文件名在内&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file -b filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file /etc/passwd
/etc/passwd: ASCII English text

file -b /etc/passwd
ASCII English text
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="du-wen-jian"&gt;读文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while read line;
do
    something
done &amp;lt; filename
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="diff"&gt;diff&lt;/h3&gt;
&lt;p&gt;生成文件差异&lt;/p&gt;
&lt;p&gt;非一体化&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff version1.txt version2.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一体化, 可读性更好&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -u version.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用patch将命令应用于任意一个文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -u version1.txt version2.txt &amp;gt; version.patch&lt;/span&gt;
patch -p1 version1.txt &amp;lt; version.patch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归作用于目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -Naur directory1 directory2&lt;/span&gt;

&lt;span class="gd"&gt;-N 所有缺失的文件作为空文件&lt;/span&gt;
&lt;span class="gd"&gt;-a 所有文件视为文本文件&lt;/span&gt;
&lt;span class="gd"&gt;-u 一体化输出&lt;/span&gt;
&lt;span class="gd"&gt;-r 递归遍历&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="head"&gt;head&lt;/h3&gt;
&lt;p&gt;前10行打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前n行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -n 4 file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扣除最后N行之外的所有行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head -n -5 file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tail"&gt;tail&lt;/h3&gt;
&lt;p&gt;最后10行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印最后五行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -n 5 file
tail -5 file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扣除前n行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -n +(N+1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实时动态打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -f growing_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当某个给定进程结束后,  tail随之终结&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -f file --PID $PID
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pushdpopd"&gt;pushd/popd&lt;/h3&gt;
&lt;p&gt;将当前路径压入栈&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压入某个路径&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushd /home/ken
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看当前路径列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dirs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;切换到某一个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#dirs从左到右编号 0 -
pushd +3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移除最近压入栈的路径并切换到下一个目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;popd
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cd"&gt;cd&lt;/h3&gt;
&lt;p&gt;经常使用的“cd”命令代表了改变目录。它在终端中改变工作目录来执行，复制，移动，读，写等等操作&lt;/p&gt;
&lt;p&gt;切换到上一目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会到HOME目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd
cd ~
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会到上一级目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ..
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wc"&gt;wc&lt;/h3&gt;
&lt;p&gt;Word Count&lt;/p&gt;
&lt;p&gt;统计行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -l file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计单词数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -w file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计字符数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -c file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计所有&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计最长行的长度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc file -L
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tree"&gt;tree&lt;/h3&gt;
&lt;p&gt;以图形化的树状结构打印文件和目录的结构，需要自行安装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree ~/unixfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重点标记出匹配某种样式的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree PATH -P "*.sh"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只标记符合样式之外的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree path -I PATTERN
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时打印文件和目录大小&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tree -h
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="grep"&gt;grep&lt;/h3&gt;
&lt;p&gt;文本搜索工具, 支持正则表达式和通配符&lt;/p&gt;
&lt;p&gt;‘grep‘命令搜索指定文件中包含给定字符串或者单词的行&lt;/p&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep "match_pattern" file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用颜色重点标记&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep word filename --color=auto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扩展型使用正则&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -E "[a-z]+"
egrep "[a-z]+"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只输出匹配到的文本部分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -o word filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除匹配行外的所有行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -v word filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计匹配行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -c 'text' filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印出包含匹配字符串的行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep linux -n filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印样式匹配所位于的字符或字节的偏移&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "gnu is not unix" | grep -b -o "not"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搜索多个文件，找出匹配文本位于哪个文件中&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -l linux file1 file2
取反
grep -L
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归搜索目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -R "text" dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;忽略大小写&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -i "hello" filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匹配多个样式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -e "pattern1" -e "pattern2" file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行匹配脚本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -f pattern_file source_file

pattern_file:
hello
cool
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在搜索中包含、排除文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep --include *.{c,cpp} word file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep --exclude "Readme" filename
--exclude-dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;静默输出，用于判断(不会产生任何输出)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -q word file
if [ $? -eq 0 ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印匹配行之前，之后的行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -A 3 之后3行
grep -B 3 之前
grep -C 3 前后
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用行缓冲&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在使用tail -f命令时是可以及时看到文件的变化的，但是如果再加上一个grep命令，可能看到的就不那么及时了，
因为grep命令在buffer写不满时就不输出，可以通过选项  --line-buffered 来搞定，如：

tail -f file.txt | grep something  --line-buffered
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cut"&gt;cut&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -c list [ file ... ]
cut -f list [ -d delim ] [ file ...]

-c list 以字符为主，作剪切操作
-f list 以字段为主，作剪切操作
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取字段或列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#第一列
cut -f1 filenam

#第二三列
cut -f2,3 filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取补集&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -f1 --complement filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定字段分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -d ";" -f2 filename
cut -d : -f 1,5 /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-b 字节
-c 字符
-f 字段

cut -c1-5 filename
N-
N-M
-M

ls -l | cut -c 1-10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定输出分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cut -c1-3,6-9 --output-delimiter ","
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="join"&gt;join&lt;/h3&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;join [options] file1 file2

选项
-1 field1
-2 field2
-o file.field
-t separator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;join file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="sed"&gt;sed&lt;/h3&gt;
&lt;p&gt;sed(Stream editor)流编辑器, 可以配合正则使用, 进行替换等&lt;/p&gt;
&lt;p&gt;sed替换语法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's/pattern/replace_string/' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将结果直接运用于源文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-i 用于, 直接修改源文件

替换第一个
sed -i 's/pattern/replace_string/' file

替换第二个
sed -i 's/pattern/replace_string/2' file

替换所有
sed -i 's/pattern/replace_string/g' file

从第N处开始替换
sed -i 's/pattern/replcae_string/2g' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移除空白行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed '/^$/d' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;已匹配字符串标记&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;引用匹配到的
sed 's/\w\+/[&amp;amp;]/g' filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组合多个表达式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 'exp1' | sed 'exp2'
等价
sed 'exp1;exp2'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用引用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed "s/$text/HELLO/"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子串匹配标记(后向引用，最多9个)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's/\([a-z]\+\)' \([A-Z\]\+\)/\2 \1/' filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存到文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's/pattern/replacement/' -i outfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用其他分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed 's#/home/#/tmp/#'
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="awk"&gt;awk&lt;/h3&gt;
&lt;p&gt;基本结构&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F '-' 'BEGIN{statements} {statements} END{statements}' file
表达式中单引号可以换成双引号
BEGIN -&amp;gt; 每一行，执行statements, 执行END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印某一列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F '-' '{print $0}' file #全部
awk -F '-' '{print $2}' file #第二列
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;print拼接字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk '{var="v1"; var1="v2"; print var1"-"var2;}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特殊变量&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NR nuber of records, 记录数
NF number of fields, 字段数
$0 当前行文本
$1 第一字段
$2 第二字段
$NF 最后一个字段

FILENAME 当前输入文件的名称
FNR 当前输入文件记录数
FS 字段分隔字符
OFS 输出字段分隔符，默认" "
ORS 输出记录分隔符，默认"\n"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;统计行数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk 'END{print NF}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将外部变量值传递给awk&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -v VARIABLE=$VAR '{ print VARIABLE }'
awk '{print v1, v2}' v1=$var1 v2=$var2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;seq 5 | awk '{ getline var; print var}'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行行过滤&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk 'NR&amp;lt;5' #行号小于5
awk 'NR==1,NR==4' #行号在1到5之间
awk '/linux/' #包含样式linux
awk '!/linux/' #不包含
awk '$1 ~/jones/' #第一个字段包含jones

tail file
awk 'NR &amp;lt;= 10' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F: '{ print $NF }' file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设定输出分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F: -v "OFS=-" '{print $1,$2}' /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印空行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk 'NF&amp;gt;0 {print $0}'
or
awk 'NF&amp;gt;0' #未指定action默认打印
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;print和printf&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk -F: '{print "User", $1, "is really", $5}' /etc/passwd
awk -F: '{printf "User %s is really %s\n", $1, $5}' /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;awk中使用循环&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for(i=0;i&amp;lt;10;i++) { print $i; }

for(i in array) { print array[i] }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内建函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;length(str)
index(str,search_str)
split(str,array,delimiter) 用界定符生成一个字符串列表
substr(string, start, end) #子串
sub(regex, replacement_str, str) #正则替换首个匹配位置
gsub(regex, replacement_str, string) #最后一个匹配位置
match(string, regex) #检查是否能够匹配字符串
tolower(string) #转小写
toupper(string) #转大写
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写成脚本文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BEGIN {}
pattern1 {action1}
pattern2 {action2}
END {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wen-jian-die-dai"&gt;文件迭代&lt;/h3&gt;
&lt;p&gt;读文件行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while read line;
do
    echo $line;
done &amp;lt; file.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;迭代每个单词&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for word in $line;
do
    echo $word;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;迭代每一个字符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for((i=0;i&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#word&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;;i++))
do
    echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; ;
done
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="paste"&gt;paste&lt;/h3&gt;
&lt;p&gt;按列合并文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;paste file1 file2 file3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定分隔符&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;paste file1 file2 -d ','
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tac"&gt;tac&lt;/h3&gt;
&lt;p&gt;逆序打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tac file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rev"&gt;rev&lt;/h3&gt;
&lt;p&gt;接收一个文件或stdin作为输入, 逆序打印每一行内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo "abc" | rev
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wget"&gt;wget&lt;/h3&gt;
&lt;p&gt;Wget是用于非交互式（例如后台）下载文件的免费工具.支持HTTP, HTTPS, FTP协议和 HTTP 代理(选项多, 用法灵活)&lt;/p&gt;
&lt;p&gt;一个用于文件下载的命令行工具&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget URL1 URL2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定保存文件名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget URL -O local.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定日志，默认达到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget URL -O local.txt -o log.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定重复尝试次数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -t 5 URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载限速&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --limit-rate 20k url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定限额&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -Q 100m url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;断点续传&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -c URL

$ wget -c -t 100 -T 120 http://www.linux.com/xxxx.data

当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。
wget的断点续传是自动的。
-c 选项的作用为断点续传。
-t 参数表示重试次数(例如重试100次，-t 100，如果设成-t 0，表示无穷次重试，直到连接成功)
-T 参数表示超时等待时间，例如-T 120，表示等待120秒连接不上就算超时
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复制或镜像整个网站&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --mirror exampledomain.com
wget -r -N -l DEPTH URL
     递归，允许对文件使用时间戳，层级
$ wget -r -np -nd http://www.linux.com/packs/

-np 的作用是不遍历父目录
-nd 表示不在本机重新创建目录结构
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问需要认证的HTTP/FTP&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget --user username --password pass URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;post请求&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget url -post-data "name=value" -O output.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;批量下载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -i downloads.txt #将文件地址写入一个文件
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用wget命令执行ftp下载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -m ftp://username:password@hostname
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="curl"&gt;curl&lt;/h3&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url &amp;gt; index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不显示进度信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --slient
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将内容写入文件，而非标准输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --slient -O
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写入指定文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --slient -o filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示进度条&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url -o index.html --progress
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;断点续传&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -C - URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置参照页字符串&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --referer Referer_URL target_URL
跳转到target_URL,其头部referer为Referer_URL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置cookie&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url --cookie "user=slynux;pass=hack"
另存为一个文件

curl URL --cookie-jar cookie_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置用户代理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL --user-agent "Mozilla/5.0"
头部信息
curl -H "Host: www.slynux.org" -H "Accept-language: en" url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限定下载带宽&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url --limit-rate 20k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定最大下载量(可下载的最大文件大小)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl url --max-filesize bytes
超出限制的话，返回非0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行认证&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -u user:pass url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只打印头部信息,不下载远程文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -I url
curl -head url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发送post请求&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl URL -d "va1=1&amp;amp;va2=2"
         --data
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lynx"&gt;lynx&lt;/h3&gt;
&lt;p&gt;将网页以ascii字符形式下载&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lynx -dump URL &amp;gt; webpage_as_text.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印出网站的文本板块而非html&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lynx -dump url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成信息文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lynx -traversal url
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="tar"&gt;tar&lt;/h3&gt;
&lt;p&gt;“tar”命令是磁带归档(Tape Archive)，对创建一些文件的的归档和它们的解压很有用。&lt;/p&gt;
&lt;p&gt;将多个文件和文件夹保存成单个文件, 同时还能保留所有的文件属性&lt;/p&gt;
&lt;p&gt;对文件进行归档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-c create file,创建文件
-f specify filename,指定文件名

tar -cf output.tar file1 file2 file3
tar -cf output.tar *.txt

tar -cvf output.tar *.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;向归档中追加文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -rvf original.tar new_file
-r,追加
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看过程中更多信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -tvvf archive.tar
-v/-vv, verbose
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取文件或文件夹&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-x, exact
tar -xf archive.tar

-C,指定文件
tar -xf archive.tar -C /path/to/extraction_directory


tar -xvf archive.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取指定文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvf file.tar file1 file4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拼接两个归档文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -Af file1.tar file2.tar
#file2合并到file1中
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只有在文件内容修改时间更新(newer),才进行添加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -uvvf archive.tar filea
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比较归档文件与文件系统中的内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -df archive.tar filename1 filename2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从归档文件中删除文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -f archive.tar --delete file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取到某个目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; tar zxvf package.tar.gz -C new_dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩归档文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzip/gunzip -&amp;gt; .gz
f.tar.gz   -z
tar -czvf 
tar -xzvf

bzip/bunzip -&amp;gt; .bz2
f.tar.bz2  -j

f.tar.lzma --lzma
f.tar.lzo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从归档中排除部分文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cf arch.tar * --exclude "*.txt"
cat list
   filea
   fileb
tar -cf arch.tar * -X list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除版本控制文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar --exclude-vcs -czvvf source.tar.gz files
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印总字节数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cf arc.tar * --exclude "*.txt" --totals
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cpio"&gt;cpio&lt;/h3&gt;
&lt;p&gt;使用频率不高&lt;/p&gt;
&lt;p&gt;归档，保留文件属性（权限、所有权等）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo file1 file2 | cpio -ov &amp;gt; archive.cpio
-o 指定输出
-v 打印归档文件列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出cpio中的文件内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cpio -it &amp;lt; archive.cpio
-i指定输入
-t列出归档文件中的内容
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="gzip"&gt;gzip&lt;/h3&gt;
&lt;p&gt;压缩，会删除源文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzip filename
#got filename.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunzip filename.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列出文件属性信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzip -l text.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stdin读入文件并写出到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | gzip -c &amp;gt; file.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩归档文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -czvvf archive.tar.gz [files]
or
tar -cvvf archive.tar.gz [files]
gzip archive.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1-9,1最低，但速度最快
gzip -9 test.img
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zcat"&gt;zcat&lt;/h3&gt;
&lt;p&gt;无需解压缩，直接从.gz中提取内容&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zcat test.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="bzip"&gt;bzip&lt;/h3&gt;
&lt;p&gt;更大的压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bzip2 filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压缩&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bunzip2 filename.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stdin到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file &amp;gt; bzip2 -c &amp;gt; file.tar.bz2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩归档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cjvvf archive.tar.bz2 [files]
or
tar -cvvf archive.tar [files]
bzip2 archive.tar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留输入文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bunzip2 test.bz2 -k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bzip2 -9 test.img
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lzma"&gt;lzma&lt;/h3&gt;
&lt;p&gt;比gzip/bzip2更好的压缩率&lt;/p&gt;
&lt;p&gt;压缩&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lzma filename
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unlzma filename.lzma
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stdin到stdout&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat file | lzma -c &amp;gt; file.lzma
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建归档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -cavvf archive.tar.lzma [files]
    -xavf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保留输入文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lzma test.bz2 -k
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩率&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lzma -9 test.img
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zip"&gt;zip&lt;/h3&gt;
&lt;p&gt;压缩&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip archive_name.zip [source files/dirs]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对目录和文件进行递归操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zip -r archive.zip folder1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="base64"&gt;base64&lt;/h3&gt;
&lt;p&gt;编码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base64 filename &amp;gt; outfile
cat file | base64 &amp;gt; outfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base64 -d file &amp;gt; outfile
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="md5sum_1"&gt;md5sum&lt;/h3&gt;
&lt;p&gt;“md5sum”就是计算和检验MD5信息签名。
md5 checksum(通常叫做哈希)使用匹配或者验证文件的文件的完整性，因为文件可能因为传输错误，磁盘错误或者无恶意的干扰等原因而发生改变。&lt;/p&gt;
&lt;p&gt;单向散列&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;md5sum file
sha1sum file
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rsync"&gt;rsync&lt;/h3&gt;
&lt;p&gt;可以对位于不同位置的文件和目录进行备份, 借助差异计算和压缩技术实现最小化数据传输量&lt;/p&gt;
&lt;p&gt;要确保远端安装了 openssh&lt;/p&gt;
&lt;p&gt;从一个目录复制到另一个目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -av source_path dest_path
-a 进行归档  -v打印细节
路径可以使本地，也可以是远端路径

e.g.
rsync -av /home/test /home/backups/ #复制到backups目录下
rsync -av /home/test /home/backups  #创建backups目录, 复制
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份到远程服务器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -av source_path user@host:PATH
可以反向
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改善传输速度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -avz source destination
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -avz source dest --exclude "*.txt"
                       --exclude-from FILEPATH
FILEPATH:
*.bak
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新备份时，删除不存在的文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsync -avz source dest --delete
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="git"&gt;git&lt;/h3&gt;
&lt;p&gt;初始化目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置用户信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global user.name "wklken"
git config --global user.email "wklken@yeah.net"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加到远端&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin user@remotehost:/home/backup/backup.git
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add *
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm *.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;标记一个检查点&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit -m "Commit message"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看日志&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回滚到某个版本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout hashid [ filename ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;克隆&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone url
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dd_1"&gt;dd&lt;/h3&gt;
&lt;p&gt;Dtat Definiton, 要注意参数顺序, 错误的参数会损毁所有数据&lt;/p&gt;
&lt;p&gt;可以用来转换和复制文件，大多数时间是用来复制iso文件(或任何其它文件)到一个usb设备(或任何其它地方)中去，所以可以用来制作USB启动器&lt;/p&gt;
&lt;p&gt;语法说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd if=SOURCE of=TARGET bs=BLOCK_SIZE count=COUNT
if/of  输入/输出文件或设备路径
bs块大小
count 限制复制到目标的字节数

dd if=/dev/zero of=/dev/sda1

#制作iso 从cdrom设备读取所有数据, 创建iso文件
dd if=/dev/cdrom of=cdrom.iso
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备份恢复&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dd if=/dev/sda1 of=x.img

dd if=x.img of=/dev/sda1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mount"&gt;mount&lt;/h3&gt;
&lt;p&gt;mount 是一个很重要的命令，用来挂载不能自动挂载的文件系统。你需要root权限挂载设备。
在插入你的文件系统后，&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount --bind /source /destination

首先运行”lsblk”命令，识别出你的设备，然后把分配的设备名记下来。
root@tecmint:~# lsblk
创建一个任何名字的目录，但是最好和引用相关。

root@tecmint:~# su
Password:
root@tecmint:~# cd /dev
root@tecmint:~# mkdir usb
现在将“sdb1”文件系统挂载到“usb”目录.
root@tecmint:~# mount /dev/sdb1 /dev/usb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;挂载镜像&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -o loop file.img /mnt/mount_point
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="wang-luo-xiang-guan_1"&gt;网络相关&lt;/h2&gt;
&lt;h3 id="ifconfig"&gt;ifconfig&lt;/h3&gt;
&lt;p&gt;显示网络接口、子网掩码等详细信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig
/sbin/ifconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印某个特定网络接口&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig iface_name

e.g.
ifconfig en1

HWaddr     MAC地址
inet addr  ip地址
Bcast      广播地址
Mask       子网掩码
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置网络接口ip&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ifconfig wlan0 192.168.0.80
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dns&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/resolv.conf

host google.com #Dns查找

nslookup google.com #更详细信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改dns/host&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo nameserver IP_ADDRESS &amp;gt;&amp;gt; /etc/resolv.conf

echo ip domain &amp;gt;&amp;gt; /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ping&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping www.baidu.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;路由信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;显示路由表
route

以数字形式显示地址
route -n
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置默认网关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;route add default gw 192.168.0.1 wlan0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;trace_route, 显示分组途径的所有网关的地址&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;traceroute google.com
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ping"&gt;ping&lt;/h3&gt;
&lt;p&gt;基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping ADDRESS  #主机名，域名或ip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PING命令可以得到RTT(Round Trip Time), 分组从源到目的主机的往返时间, 单位ms&lt;/p&gt;
&lt;p&gt;限制发送分组数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping ADDRESS -c COUNT

ping
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fping"&gt;fping&lt;/h3&gt;
&lt;p&gt;同时ping一组ip, 而且响应非常快&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fping -a ip1 ip2 -g
fping -a 192.160.1/24 -g
fping -a &amp;lt; ip.list

-a, 所有活动主机的ip
-g, 从IP/mask生成的ip地址范围
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行dns查询&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fping -a -d 2 &amp;gt; /dev/null  &amp;lt; ip.list
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lftp"&gt;lftp&lt;/h3&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lftp username@ftphost
cd dir
lcd改变本地主机目录
mkdir 创建目录
get/put 下载上传
quit退出
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="scp"&gt;scp&lt;/h3&gt;
&lt;p&gt;scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。&lt;/p&gt;
&lt;p&gt;linux的scp命令可以在linux服务器之间复制文件和目录.&lt;/p&gt;
&lt;p&gt;拷贝文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp filename user@remotehost:/home/pat
ip或主机名均可

scp SOURCE DESTINATION
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;递归复制&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp -r dir1 user@remotehost:/home/backup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提高拷贝速度&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp  -c arcfour -r -P20755 dir/ 192.168.2.*:/**/**/data/
-c arcfour 这个算法没有加校验不保证完整性，注意慎用，内网1000M带宽，默认算法速度只能达到30M/s，用arcfour这个算法速度可以达到50-80M/s
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ssh"&gt;SSH&lt;/h3&gt;
&lt;p&gt;连接远程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh username@remote_host

ssh -p port username@remote_host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh username@remote_host 'cmd1; cmd2' &amp;gt; stdout.txt 2&amp;gt;errors.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;压缩功能&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -C user@hostname 'cmds'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打通ssh&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.创建SSH密钥
  ssh-keygen -t rsa
  公钥, ~/.ssh/id_rsa.pub
2.登陆远端服务器, 将公钥写入 ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="lsof"&gt;lsof&lt;/h3&gt;
&lt;p&gt;列出系统中开放端口及运行在端口上的服务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lsof -i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配合grep, 获取需要的信息&lt;/p&gt;
&lt;h3 id="netstat"&gt;netstat&lt;/h3&gt;
&lt;p&gt;查看开放端口和服务&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netstat -tnp
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ci-pan-he-xi-tong_1"&gt;磁盘和系统&lt;/h2&gt;
&lt;h3 id="du"&gt;du&lt;/h3&gt;
&lt;p&gt;du = disk usage&lt;/p&gt;
&lt;p&gt;估计文件的空间占用。 逐层统计文件（例如以递归方式）并输出摘要。&lt;/p&gt;
&lt;p&gt;查看占用磁盘空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du FILENAME1 FILENAME2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -a dir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以KB,MB或块为单位展示&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -h FILENAME1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示总计情况&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -c FILENAME1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只显示合计&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -s FILENAME1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以特定单位打印&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -b/-k/-m/-B FILES
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排除部分文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du --exclude "*.txt" DIR
   --exclude-from EXCLUDE.txt DIR
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定最深层级&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du --max-depth 2 DIR
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定目录最大的10个文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -ak S_DIR | sort -nrk 1 | head
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="df"&gt;df&lt;/h3&gt;
&lt;p&gt;df = disk free&lt;/p&gt;
&lt;p&gt;报告系统的磁盘使用情况。在跟踪磁盘使用情况方面对于普通用户和系统管理员都很有用。 ‘df‘ 通过检查目录大小工作，但这一数值仅当文件关闭时才得到更新。&lt;/p&gt;
&lt;p&gt;查看磁盘可用空间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df
df -h
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="time"&gt;time&lt;/h3&gt;
&lt;p&gt;计算命令执行时间&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time COMMAND

real 挂钟时间, 从开始执行到结束的时间
user 进程花费在用户模式中的cpu时间, 真正用于执行进程所花得时间
sys  进程花费在内核模式中的cpu时间
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写入文件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time -o output.txt COMMAND
time -a output.txt COMMAND #追加
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;格式化输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time -f "Time: %U"  -a -o timing.log uname
real %e
user %U
sys %S
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="who"&gt;who&lt;/h3&gt;
&lt;p&gt;获取当前用户登陆信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;who / w
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当前登陆主机的用户列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;users
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="uptime"&gt;uptime&lt;/h3&gt;
&lt;p&gt;查看系统已经通电运行多长时间了&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uptime
#也可以看到负载
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="last"&gt;last&lt;/h3&gt;
&lt;p&gt;显示上次用户登录信息- 前一次启动会话信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;last
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取单个用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;last USER
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="watch"&gt;watch&lt;/h3&gt;
&lt;p&gt;在终端中以固定间隔监视命令输出&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#default 2s
watch ls

# 5s
watch -n 5 ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;颜色标示&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;watch -d 'COMMAND'
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="jin-cheng-he-xian-cheng_1"&gt;进程和线程&lt;/h2&gt;
&lt;h3 id="ps"&gt;ps&lt;/h3&gt;
&lt;p&gt;ps命令给出正在运行的某个进程的状态，每个进程有特定的id成为PID。&lt;/p&gt;
&lt;p&gt;ps命令主要查看系统中进程的状态&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USER              PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND
USER表示启动进程用户
PID表示进程标志号

%CPU表示运行该进程占用CPU的时间与该进程总的运行时间的比例
%MEM表示该进程占用内存和总内存的比例。

VSZ表示占用的虚拟内存大小，以KB为单位。
RSS为进程占用的物理内存值，以KB为单位。

TTY表示该进程建立时所对应的终端，"?"表示该进程不占用终端。
STAT表示进程的运行状态，包括以下几种代码：
    D，不可中断的睡眠；
    R，就绪（在可运行队列中）；
    S，睡眠；
    T，被跟踪或停止；
    Z，终止（僵死）的进程，Z不存在，但暂时无法消除；
    W，没有足够的内存分页可分配；&amp;lt;高优先序的进程；
    N，低优先序的进程；
    L，有内存分页分配并锁在内存体内（实时系统或I/O）。

START为进程开始时间。
TIME为执行的时间。
COMMAND是对应的命令名。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看进程信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#当前终端
ps

PID TTY TIME CMD
PID  进程ID
TTY  终端
TIME 进程启动后过去的时间
CMD  进程对应的命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示更多信息&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#当前终端
ps -f
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看所有进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps aux
ps -ef
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看某个用户的所有进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps U ken
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OTHER&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;par1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;par2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;par3&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eo&lt;/span&gt; &lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pcpu&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
&lt;span class="n"&gt;pmem&lt;/span&gt; &lt;span class="err"&gt;内存使用率，&lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="err"&gt;可执行文件名&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;启动进程的用户&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;etime&lt;/span&gt;&lt;span class="err"&gt;启动后度过的时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置升序降序&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -eo comm,pcpu --sort -pcpu | head
+升序，-降序
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;找出给定命令名对应进程ID&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -C COMMAND_NAME
ps -C bash -o pid=
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进程线程相关&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -eLf --sort -nlwp | head
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看子进程树&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps axwef
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：当你要知道有哪些进程在运行或者需要知道想杀死的进程PID时ps命令很管用。你可以把它与‘grep‘合用来查询指定的输出结果，例如：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ps -A | grep -i ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pgrep_1"&gt;pgrep&lt;/h3&gt;
&lt;p&gt;pgrep只需要命令名的一部分, ps需要准确的全名&lt;/p&gt;
&lt;p&gt;基本用法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定进程的用户&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep -u root,slynux COMMAND
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回匹配进程数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pgrep -c COMANND
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="top"&gt;top&lt;/h3&gt;
&lt;p&gt;查看占用cpu最多的进程列表&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;top
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="kill"&gt;kill&lt;/h3&gt;
&lt;p&gt;kill是用来杀死已经无关紧要或者没有响应的进程,杀死一个进程需要知道进程的PID&lt;/p&gt;
&lt;p&gt;列出可用信号&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;终止一个进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill PROCESS_ID_LIST
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;强杀进程&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill -9 PROCESS_ID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;杀死一组命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;killall process_name
killall -9 process_name

指定用户
killall -u USERNAME process_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pkill"&gt;pkill&lt;/h3&gt;
&lt;p&gt;杀，接受进程名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkill process_name
pkill -s SIGNAL process_name
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="which"&gt;which&lt;/h3&gt;
&lt;p&gt;查找PATH下某个命令位置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which ls
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="whereis"&gt;whereis&lt;/h3&gt;
&lt;p&gt;whereis的作用是用来定位命令的二进制文件\资源\或者帮助页.举例来说,获得ls和kill命令的二进制文件/资源以及帮助页:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;whereis ls
whereis kill
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似which，多了命令手册位置，源代码位置&lt;/p&gt;
&lt;p&gt;注意:当需要知道二进制文件保存位置时有用.&lt;/p&gt;
&lt;h3 id="file_1"&gt;file&lt;/h3&gt;
&lt;p&gt;确定文件类型&lt;/p&gt;
&lt;h3 id="whatis"&gt;whatis&lt;/h3&gt;
&lt;p&gt;对命令的简短描述&lt;/p&gt;
&lt;h3 id="hostname"&gt;hostname&lt;/h3&gt;
&lt;p&gt;当前主机名&lt;/p&gt;
&lt;h3 id="uname"&gt;uname&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主机名
uname -n

#内核版本，硬件架构等
uname -a

#内核发行版本
uname -r

主机类型(32位/64位)
uname -m

cpu相关信息
cat /proc/cpuinfo

内存信息
cat /proc/meminfo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#uname -a
Linux tecmint 3.8.0-19-generic #30-Ubuntu SMP Wed May 1 16:36:13 UTC 2013 i686 i686 i686 GNU/Linux

1. “Linux“: 机器的内核名
2. “tecmint“: 机器的分支名
3. “3.8.0-19-generic“: 内核发布版本
4. “#30-Ubuntu SMP“: 内核版本
5. “i686“: 处理器架构
6. “GNU/Linux“: 操作系统名
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="crontab"&gt;crontab&lt;/h3&gt;
&lt;p&gt;格式&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* * * * * cmd
分钟(0-59)，小时(0-23)，天(1-31)，月份(1-12)，工作日(0-6)

A,B  A and B
*/C  every C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -l
crontab -l -u slynux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编辑&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -e
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;移除&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -r
crontab -u slynux -r
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以在crontab 中加入环境变量&lt;/p&gt;
&lt;h3 id="getopts"&gt;getopts&lt;/h3&gt;
&lt;p&gt;命令行参数处理&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while getopts :f:vql opt
do
    case $opt in
    f)  file=$OPTARG
        ;;
    v)  verbose=true
        ;;
    ....
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="history"&gt;history&lt;/h3&gt;
&lt;p&gt;“history”命令就是历史记录。它显示了在终端中所执行过的所有命令的历史&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;history
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：按住“CTRL + R”就可以搜索已经执行过的命令，它可以你写命令时自动补全&lt;/p&gt;
&lt;h3 id="sudo"&gt;sudo&lt;/h3&gt;
&lt;p&gt;“sudo”(super user do)命令允许授权用户执行超级用户或者其它用户的命令。通过在sudoers列表的安全策略来指定。&lt;/p&gt;
&lt;p&gt;注意：sudo 允许用户借用超级用户的权限，然而”su”命令实际上是允许用户以超级用户登录。所以sudo比su更安全。
并不建议使用sudo或者su来处理日常用途，因为它可能导致严重的错误如果你意外的做错了事，这就是为什么在linux社区流行一句话：&lt;/p&gt;
&lt;p&gt;“To err is human, but to really foul up everything, you need root password.”
“人非圣贤孰能无过，但是拥有root密码就真的万劫不复了。”&lt;/p&gt;
&lt;h3 id="cal"&gt;cal&lt;/h3&gt;
&lt;p&gt;“cal”（Calender），它用来显示当前月份或者未来或者过去任何年份中的月份&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cal
cal 02 1835
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cp"&gt;cp&lt;/h3&gt;
&lt;p&gt;“copy”就是复制。它会从一个地方复制一个文件到另外一个地方&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp file1 file2
cp -r dir1 dir2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快速备份一个文件：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp some_file_name{,.bkp}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意： cp，在shell脚本中是最常用的一个命令，而且它可以使用通配符（在前面一块中有所描述），来定制所需的文件的复制。&lt;/p&gt;
&lt;h3 id="mv"&gt;mv&lt;/h3&gt;
&lt;p&gt;“mv”命令将一个地方的文件移动到另外一个地方去。&lt;/p&gt;
&lt;p&gt;“mv”命令将一个地方的文件移动到另外一个地方去。&lt;/p&gt;
&lt;h3 id="pwd"&gt;pwd&lt;/h3&gt;
&lt;p&gt;“pwd”（print working directory），在终端中显示当前工作目录的全路径。&lt;/p&gt;
&lt;p&gt;注意： 这个命令并不会在脚本中经常使用，但是对于新手，当从连接到nux很久后在终端中迷失了路径，这绝对是救命稻草。&lt;/p&gt;
&lt;h3 id="free"&gt;free&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;free -m
             total       used       free     shared    buffers     cached
Mem:          7982       6811       1171          0        350       5114
-/+ buffers/cache:       1346       6636
Swap:        16935         11      16924
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示剩余内存&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;free -m | grep cache | awk '/[0-9]/{ print $4" MB" }'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里例子中,应用程序只使用了1346MB内存,还有6636MB空闲内存可以使用.&lt;/p&gt;
&lt;p&gt;一些简单的计算方法：&lt;/p&gt;
&lt;p&gt;物理已用内存 = 实际已用内存 - 缓冲 - 缓存 = 6811M - 350M - 5114M&lt;/p&gt;
&lt;p&gt;物理空闲内存 = 总物理内存 - 实际已用内存 + 缓冲 + 缓存&lt;/p&gt;
&lt;p&gt;应用程序可用空闲内存 = 总物理内存 - 实际已用内存&lt;/p&gt;
&lt;p&gt;应用程序已用内存 = 实际已用内存 - 缓冲 - 缓存&lt;/p&gt;
&lt;p&gt;原始解释：转至互联网：
Linux的基本原则是没有资源应该被浪费.因此核心会使用尽可能多的RAM,来缓存来自本地和远程的文件系统的信息.系统做读写操作的时候,会将与当前运行的进程相关的数据尽量存储在RAM里.系统报告的缓存是缓冲和页缓存两者之和.缓存并不是在进程结束的时候被回收(你可能很快会启动另外一个进程,需要同样的数据),而是随需回收–比如,当你启动一个需要大量内存的进程时,Linux核心会从内存中回收缓存,将得到的内存分配给新的进程.&lt;/p&gt;
&lt;p&gt;有些区域,比如匿名内存映射(mmps)和共享内存区域,它们被报告为缓存,但不是被核心直接释放.一般的缓存不映射到进程的地址空间,仅仅是简单的核心映射,而这些特别的缓存映射到所有挂接到它们上面的进程.&lt;/p&gt;
&lt;h3 id="eval"&gt;eval&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eval "ls -l"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="basename"&gt;basename&lt;/h3&gt;
&lt;p&gt;获取路径中文件部分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;basename resolv.conf #resolv.conf
basename /etc/resolv.conf # resolv.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="cmp"&gt;cmp&lt;/h3&gt;
&lt;p&gt;比较两个任意类型的文件并将结果输出至标准输出。如果两个文件相同， ‘cmp‘默认返回0；如果不同，将显示不同的字节数和第一处不同的位置。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp file1 file2
diff file1 file2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="rm"&gt;rm&lt;/h3&gt;
&lt;p&gt;‘rm’ 标准移除命令。 rm 可以用来删除文件和目录&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm file1
rm -r dir1  #递归删除空目录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;强删&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf fileordir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;警告: ”rm -rf” 命令是一个破坏性的命令,假如你不小心删除一个错误的目录。
一旦你使用’rm -rf’ 删除一个目录,在目录中所有的文件包括目录本身会被永久的删除,所以使用这个命令要非常小心。&lt;/p&gt;
&lt;h3 id="service"&gt;service&lt;/h3&gt;
&lt;p&gt;‘service‘命令控制服务的启动、停止和重启，它让你能够不重启整个系统就可以让配置生效以开启、停止或者重启某个服务。&lt;/p&gt;
&lt;p&gt;注意：要想使用service命令，进程的脚本必须放在‘/etc/init.d‘，并且路径必须在指定的位置。
如果要运行“service apache2 start”实际上实在执行“service /etc/init.d/apache2 start”.&lt;/p&gt;
&lt;h3 id="man"&gt;man&lt;/h3&gt;
&lt;p&gt;‘man‘是系统帮助页。Man提供命令所有选项及用法的在线文档。几乎所有的命令都有它们的帮助页&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;man thecommand
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：系统帮助页是为了命令的使用和学习而设计的。&lt;/p&gt;
&lt;h3 id="passwd"&gt;passwd&lt;/h3&gt;
&lt;p&gt;这是一个很重要的命令，在终端中用来改变自己密码很有用。显然的，因为安全的原因，你需要知道当前的密码。&lt;/p&gt;
&lt;h3 id="gcc"&gt;gcc&lt;/h3&gt;
&lt;p&gt;gcc 是Linux环境下C语言的内建编译器。下面是一个简单的C程序，在桌面上保存为Hello.c （记住必须要有‘.c‘扩展名&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc Hello.c
./a.out
gcc -o Hello Hello.c
./Hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 编译C程序时，输出会自动保存到一个名为“a.out”的新文件，因此每次编译C程序 “a.out”都会被修改。
因此编译期间最好定义输出文件名.，这样就不会有覆盖输出文件的风险了。&lt;/p&gt;
&lt;h3 id="g"&gt;g++&lt;/h3&gt;
&lt;p&gt;g++是C++的内建编译器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++ Add.cpp
./a.out
g++ -o Add Add.cpp
./Add
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="java"&gt;java&lt;/h3&gt;
&lt;p&gt;Java 是世界上使用最广泛的编程语言之一. 它也被认为是高效, 安全和可靠的编程语言. 现在大多数基于网络的服务都使用Java实现.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;javac tecmint.java
java tecmint
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意: 几乎所有的Linux发行版都带有gcc编译器, 大多数发行版都内建了g++ 和 java 编译器, 有些也可能没有. 你可以用apt 或 yum 安装需要的包.&lt;/p&gt;
&lt;h3 id="guan-yu-devnull"&gt;关于/dev/null&lt;/h3&gt;
&lt;p&gt;特别有用的特殊文件，位桶，传送到此文件的数据都会被系统丢弃。&lt;/p&gt;
&lt;h3 id="yu-yan-ji-luan-ma"&gt;语言及乱码&lt;/h3&gt;
&lt;p&gt;查看变量值&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $LANG   未设置任何LC_XXX时使用的默认值
echo $LC_ALL 覆盖所有LC_XXX变量，总控开关
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好的做法是，避免为任何LC_XXX变量赋值，使用LC_ALL和LANG来控制&lt;/p&gt;
&lt;p&gt;避免乱码：从编辑器到语言，再到系统，统一编码为UTF-8&lt;/p&gt;
&lt;h3 id="shellde-ban-ben"&gt;shell的版本&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash --version
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="shell"></category></entry><entry><title>我的vim配置及说明【k-vim】</title><link href="http://www.wklken.me/posts/2013/06/11/linux-my-vim.html" rel="alternate"></link><published>2013-06-11T00:00:00+08:00</published><updated>2013-06-11T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-06-11:/posts/2013/06/11/linux-my-vim.html</id><summary type="html">&lt;p&gt;ps: k-vim github地址 : https://github.com/wklken/k-vim&lt;/p&gt;
&lt;h3 id="vimcha-jian-fen-lei-ji-kuai-jie-jian"&gt;vim插件分类及快捷键&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给人一条Vim 命令，他能折腾一晚上；告诉他怎么自定义Vim 命令，他能捣腾一辈子&lt;/p&gt;
&lt;p&gt;生命不息,折腾不止 (╯‵□′)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;编辑器之神 = 生产力(效率为王) + 性感(界面快捷键) + 装x神器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="vimji-ben-yong-fa"&gt;vim基本用法&lt;/h3&gt;
&lt;p&gt;初学者: &lt;a href="http://blog.csdn.net/wklken/article/details/7533272"&gt;vim训练稿&lt;/a&gt;
几年前的三月份,第一次正儿八经开始使用vim,后来整理了一份,对着敲几遍,训练稿&lt;/p&gt;
&lt;p&gt;推荐: 耗子叔的 &lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者,玩游戏 &lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shi-yong-shuo-ming"&gt;使用说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;能熟练使用原生vim,最好先熟悉了再来使用插件扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下插件,仅介绍用途优点等,可以在github中搜索查看详细用途和配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前vim使用配置,在vimrc中查看&lt;/p&gt;
&lt;p&gt;快捷键为插件默认/或者当前配置vimrc定义的,如果需要修改,查看vimrc中对插件配置进行修改 [sd …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ps: k-vim github地址 : https://github.com/wklken/k-vim&lt;/p&gt;
&lt;h3 id="vimcha-jian-fen-lei-ji-kuai-jie-jian"&gt;vim插件分类及快捷键&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给人一条Vim 命令，他能折腾一晚上；告诉他怎么自定义Vim 命令，他能捣腾一辈子&lt;/p&gt;
&lt;p&gt;生命不息,折腾不止 (╯‵□′)╯︵┻━┻)&lt;/p&gt;
&lt;p&gt;编辑器之神 = 生产力(效率为王) + 性感(界面快捷键) + 装x神器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="vimji-ben-yong-fa"&gt;vim基本用法&lt;/h3&gt;
&lt;p&gt;初学者: &lt;a href="http://blog.csdn.net/wklken/article/details/7533272"&gt;vim训练稿&lt;/a&gt;
几年前的三月份,第一次正儿八经开始使用vim,后来整理了一份,对着敲几遍,训练稿&lt;/p&gt;
&lt;p&gt;推荐: 耗子叔的 &lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明vim练级攻略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者,玩游戏 &lt;a href="http://vim-adventures.com/"&gt;vim大冒险&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="shi-yong-shuo-ming"&gt;使用说明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;能熟练使用原生vim,最好先熟悉了再来使用插件扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下插件,仅介绍用途优点等,可以在github中搜索查看详细用途和配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前vim使用配置,在vimrc中查看&lt;/p&gt;
&lt;p&gt;快捷键为插件默认/或者当前配置vimrc定义的,如果需要修改,查看vimrc中对插件配置进行修改 [sd]标记的为自定义 [d]标记的为默认快捷键&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于平时会使用python和golang,所以语言方面的配置偏向于这两个&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其它的可以参照网上配置(通用的插件可以配置,其他具体语言插件可以自己配置加入)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fork一份&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据自己使用的语言，自身习惯进行修改&lt;/p&gt;
&lt;p&gt;有些插件用不到，可以注释删除，有些插件没有，可以自行添加（vundle很强大只要github上有都能配置），有些插件快捷键等可以自己去进一步了解&lt;/p&gt;
&lt;p&gt;得到一份符合自己习惯的vim配置，后续能在任何地方进行一键配置&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      二八定律,关注可以最大提升自身生产力的那20%插件,具体要亲自实践
      有什么问题,先看插件文档说明-&amp;gt;代码选项-&amp;gt;github上的issues-&amp;gt;google it
      你遇到的问题,一定别人也遇到了,大部分可解决,少部分无解….
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;欢迎推荐好用更酷的插件配置:)&lt;/p&gt;
&lt;p&gt;我的配置也会不定期更新，thx&lt;/p&gt;
&lt;p&gt;PS: 这个vim配置是我的&lt;a href="https://github.com/wklken/linux_config"&gt;linux_config&lt;/a&gt;下一部分，如果需要，可以参考，主要是用于一键配置环境&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pei-zhi-bu-zou"&gt;配置步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;clone到本地,配置到linux个人目录（如果是从linux_config过来的，不需要clone）&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/wklken/k-vim.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装依赖包&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ctags
#brew install ctags     (mac用户)

#使用python需要
sudo pip install pyflakes
sudo pip install pylint
sudo pip install pep8
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装插件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd k-vim/

sh -x install.sh

#会进入安装插件的列表，目前30+个插件，一一安装是从github clone的，完全取决于网速

#安装完插件后，会自动编译YCM，注意，可能编译失败（缺少某些依赖包,暂不支持mac osx 10.9）
失败的话手动编译吧，看第4步 编译自动补全YouCompleteMe （这步耗时也有点长，但绝对值得）

install.sh
本质上做的事情
1.将vimrc/vim文件夹软链接到$HOME，编程系统vim配置
2.git clone安装vundle（clone到bundle目录下）
3.通过vundle安装其他所有插件（相当于进入vimrc, 命令行执行:BundleInstall）,从github全部搞到本地
4.编译需要手动编译的插件，eg.YCM
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可能遇到的问题:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译自动补全YouCompleteMe&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个插件需要Vim 7.3.584,所以,如果vim版本太低,需要&lt;a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"&gt;编译安装&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对行号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vimrc中配置,如果不习惯,可以去掉,&lt;a href="http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/"&gt;相关参考&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到vimrc中修改colortheme,可以使用molokai(用惯sublimetext2的童鞋很熟悉)&lt;/p&gt;
&lt;p&gt;默认配置的是&lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;solarized dark主题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想要修改终端配色为solarized可以参考 &lt;a href="https://github.com/sigurdga/gnome-terminal-colors-solarized"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="qi-ta"&gt;其他&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装/卸载/更新插件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可能发现打开vim很慢，可能是插件有点多了，这个配置插件全开&lt;/p&gt;
&lt;p&gt;去掉某些自己用不到的插件: 编辑vimrc，注释掉插件对应Bundle行即可(加一个双引号),保存退出即可&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    "Bundle 'fholgado/minibufexpl.vim'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想从物理上清除（删除插件文件），注释保存后再次进入vim&lt;/p&gt;
&lt;p&gt;命令行模式，执行:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    :BundleClean
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要安装新插件，在vimrc中加入bundle，然后执行&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    :BundleInstall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新插件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    :BundleUpdate
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;给mac用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用mac vim&lt;/p&gt;
&lt;p&gt;首先，安装最新mac vim ,可以正常打开&lt;/p&gt;
&lt;p&gt;然后(需要sudo)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mv /usr/bin/vim /usr/bin/vim.bk
    ln -s /usr/local/bin/mvim /usr/bin/vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，在.bashrc/.bash_profile中加入&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    alias vi='mvim -v'
    alias vim='mvim -v'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;冲突和问题排查&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;插件很多，并且其默认快捷键或者配置可能发生冲突&lt;/p&gt;
&lt;p&gt;当加入新插件发现有冲突或者展现有问题&lt;/p&gt;
&lt;p&gt;排除法进行排查：注掉所有插件或配置，然后二分法逐一恢复，可以定位到出现问题的插件或配置&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="jie-tu"&gt;截图&lt;/h3&gt;
&lt;p&gt;solarized主题&lt;/p&gt;
&lt;p&gt;&lt;img alt="solarized" src="https://github.com/wklken/gallery/blob/master/vim/solarized.png?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;molokai主题&lt;/p&gt;
&lt;p&gt;&lt;img alt="molokai" src="https://github.com/wklken/gallery/blob/master/vim/molokai.png?raw=true"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-ding-yi-kuai-jie-jian-shuo-ming"&gt;自定义快捷键说明&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;F1  关掉，防止跳出帮助
F2  set nu/nonu
F3  set list/nolist
F4  set wrap/nowrap
F5  set paste/nopaste
F6  syntax on/off
空格 /开启查找
Y   =y$   复制到行尾
w!!  以sudo的权限保存
kj   &amp;lt;Esc&amp;gt;，不用到角落去按esc了
t    新起一行，下面，不进入插入模式
T    新起一行，上面
,sa   全选(select all)
hjkl  上下左右，强迫使用，要解开的自己改
ctrl + jkhl 进行上下左右窗口跳转,不需要ctrl+w+jkhl

,tn  new tab
,tc  tab close
,to  tab only
,tm  tab move
,te  new tab edit
ctrl+n  相对行号绝对行号变换，默认用相对行号
5j/5k  在相对行号模式下，往上移动5行 往下移动5行

,y 展示历史剪贴板
,yc 清空
yy/dd -&amp;gt; p -&amp;gt; ctrl+p可以替换非最近一次剪贴内容

,p 开启文件搜索 ctrlp
,/ 去除匹配高亮
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="cha-jian-ji-qi-kuai-jie-jian-shuo-ming"&gt;插件及其快捷键说明&lt;/h3&gt;
&lt;p&gt;图片有点多，展示有点慢，截得不是很专业，耐心看完:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插件管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="gmarikvundle"&gt;&lt;a href="https://github.com/gmarik/vundle"&gt;gmarik/vundle&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;必装,用于管理所有插件&lt;/p&gt;
&lt;p&gt;命令行模式下管理命令:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:BundleInstall     install
:BundleInstall!    update
:BundleClean       remove plugin not in list
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;导航及搜索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="scrooloosenerdtree"&gt;&lt;a href="https://github.com/scrooloose/nerdtree"&gt;scrooloose/nerdtree&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装,开启目录树导航&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
        ,n  打开 关闭树形目录结构

        在nerdtree窗口常用操作：(小写当前，大写root)
        x.......Close the current nodes parent收起当前目录树
        R.......Recursively refresh the current root刷新根目录树
        r.......Recursively refresh the current directory刷新当前目录
        P.......Jump to the root node
        p.......Jump to current nodes parent
        K.......Jump up inside directories at the current tree depth  到同目录第一个节点
        J.......Jump down inside directories at the current tree depth 最后一个节点
        o.......Open files, directories and bookmarks
        i.......Open selected file in a split window上下分屏
        s.......Open selected file in a new vsplit左右分屏
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="thenerdtree" src="https://github.com/wklken/gallery/blob/master/vim/thenerdtree.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="fholgadominibufexplvim"&gt;&lt;a href="https://github.com/fholgado/minibufexpl.vim"&gt;fholgado/minibufexpl.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，buffer管理, 可以查找其他同类插件&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
        &amp;lt;Tab&amp;gt;  切换buffer
        左右方向键  切换buffer
        ,bn   切到后一个
        ,bp   切到前一个
        ,bd   关闭当前buffer
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="majutsushitagbar"&gt;&lt;a href="https://github.com/majutsushi/tagbar"&gt;majutsushi/tagbar&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装,标签导航,纬度和taglist不同&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] &amp;lt;F9&amp;gt; 打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="tagbar" src="https://github.com/wklken/gallery/blob/master/vim/tagbar.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptstaglistvim"&gt;&lt;a href="https://github.com/vim-scripts/taglist.vim"&gt;vim-scripts/taglist.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] &amp;lt;F8&amp;gt;打开
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="taglist" src="https://github.com/wklken/gallery/blob/master/vim/taglist.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="kienctrlpvim"&gt;&lt;a href="https://github.com/hdima/python-syntax"&gt;kien/ctrlp.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文件搜索,ack/Command-T需要依赖于外部包,不喜欢有太多依赖的,除非十分强大, 具体 &lt;a href="http://kien.github.io/ctrlp.vim/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] ,p  打开ctrlp搜索
    [sd] ,f  相当于mru功能，show recently opened files

    ctrl + j/k 进行上下移动
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="ctrip" src="https://github.com/wklken/gallery/blob/master/vim/ctrlp.gif?raw=true"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示增强&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;被动技能,无快捷键
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="lokaltogvim-powerline"&gt;&lt;a href="https://github.com/Lokaltog/vim-powerline"&gt;Lokaltog/vim-powerline&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，状态栏美观&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="powerline" src="https://github.com/wklken/gallery/blob/master/vim/powerline.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="kienrainbow_parenthesesvim"&gt;&lt;a href="https://github.com/kien/rainbow_parentheses.vim"&gt;kien/rainbow_parentheses.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装,括号高亮&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow" src="https://github.com/wklken/gallery/blob/master/vim/rainbow_parentheses.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="yggdrootindentline"&gt;&lt;a href="https://github.com/Yggdroot/indentLine"&gt;Yggdroot/indentLine&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装,装不装看个人喜好了,缩进标识&lt;/p&gt;
&lt;p&gt;另一个类似的,整块背景色的的,&lt;a href="https://github.com/nathanaelkane/vim-indent-guides"&gt;nathanaelkane/vim-indent-guides&lt;/a&gt;,自选吧, 看来看去还是st2的好看,唉&lt;/p&gt;
&lt;p&gt;调整颜色和solarized一致,不至于太显眼影响注意力,可以根据自己主题设置颜色(&lt;a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim?file=Xterm-color-table.png"&gt;颜色&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;演示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="indentline" src="https://github.com/wklken/gallery/blob/master/vim/indentline.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="bronsonvim-trailing-whitespace"&gt;&lt;a href="https://github.com/bronson/vim-trailing-whitespace"&gt;bronson/vim-trailing-whitespace&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将代码行最后无效的空格标红&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="altercationvim-colors-solarized"&gt;&lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;altercation/vim-colors-solarized&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经典主题,目前我使用的,看起来舒服&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="tomasrmolokai"&gt;&lt;a href="https://github.com/tomasr/molokai"&gt;tomasr/molokai&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用sublime text2的同学应该很熟悉, 另一个主题,可选,偶尔换换味道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快速移动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主动技能,需要快捷键
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="lokaltogvim-easymotion"&gt;&lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;Lokaltog/vim-easymotion&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，效率提升杀手锏，跳转到光标后任意位置&lt;/p&gt;
&lt;p&gt;配置(我的leader键配置 let g:mapleader = ',')&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ,, + w  跳转
    ,, + fe  查找'e',快速跳转定位到某个字符位置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="easy_motion" src="https://github.com/wklken/gallery/blob/master/vim/easymotion.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsmatchitzip"&gt;&lt;a href="https://github.com/vim-scripts/matchit.zip"&gt;vim-scripts/matchit.zip&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装&lt;/p&gt;
&lt;p&gt;% 匹配成对的标签，跳转&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自动补全及快速编辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主动技能,需要快捷键,高效编辑无上利器
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="valloricyoucompleteme"&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;Valloric/YouCompleteMe&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，强烈推荐&lt;/p&gt;
&lt;p&gt;YCM是我目前用到的最好的自动补全插件,我只能说，用这个写代码太舒畅了&lt;/p&gt;
&lt;p&gt;需要编译这个插件(见github文档)&lt;/p&gt;
&lt;p&gt;这个需要自己去看官方的配置方式,演示在官方github有&lt;/p&gt;
&lt;p&gt;需要Vim 7.3.584 以上版本(&lt;a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"&gt;如何编译vim&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;这个插件包含了以下四个插件功能,所以不需要装下面四个&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    clang_complete
    AutoComplPop
    Supertab
    neocomplcache
    jedi(对python的补全)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快捷键:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ,gd  跳到声明位置, 仅 filetypes: c, cpp, objc, objcpp, python 有效
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="sirverultisnips"&gt;&lt;a href="https://github.com/SirVer/ultisnips"&gt;SirVer/ultisnips&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，效率杀手锏，快速插入自定义的代码片段&lt;/p&gt;
&lt;p&gt;自动补全加这个,高效必备, 针对各种语言已经带了一份配置了，可以到安装目录下查看具体，我有针对性补全一份，在snippets目录下，可自行修改&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="ultisnips" src="https://github.com/wklken/gallery/blob/master/vim/utilsnips.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="scrooloosenerdcommenter"&gt;&lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;scrooloose/nerdcommenter&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，另一个大大提升效率的地方，快速批量加减注释&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [d] shift+v+方向键选中(默认当前行)   -&amp;gt;  ,cc  加上注释  -&amp;gt; ,cu 解开注释
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="nerdcommenter" src="https://github.com/wklken/gallery/blob/master/vim/nerdcomment.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="tpopevim-surround"&gt;&lt;a href="https://github.com/tpope/vim-surround"&gt;tpope/vim-surround&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，很给力的功能，快速给词加环绕符号,例如引号&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-repeat"&gt;tpope/vim-repeat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;repeat进行增强,'.'可以重复命令&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [d]
    cs"' [inside]
    "Hello world!" -&amp;gt; 'Hello world!'
    ds"
    "Hello world!" -&amp;gt; Hello world!
    ysiw"
    Hello -&amp;gt; "Hello"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="surround" src="https://github.com/wklken/gallery/blob/master/vim/surround.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="raimondidelimitmate"&gt;&lt;a href="https://github.com/Raimondi/delimitMate"&gt;Raimondi/delimitMate&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必装，输入引号,括号时,自动补全&lt;/p&gt;
&lt;p&gt;对python的docstring 三引号做了处理(只处理""", '''暂时没配，可以自己加)&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="delimitmate" src="https://github.com/wklken/gallery/blob/master/vim/delimate.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="godlygeektabular"&gt;&lt;a href="https://github.com/godlygeek/tabular"&gt;godlygeek/tabular&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装，代码格式化用的，code alignment&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    ,a=  按等号切分格式化
    ,a:  按逗号切分格式化
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="terrymavim-expand-region"&gt;&lt;a href="https://github.com/terryma/vim-expand-region"&gt;terryma/vim-expand-region&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装，visual mode selection
   视图模式下可伸缩选中部分，用于快速选中某些块&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    = 增加选中范围(+/=按键)
    - 减少选中范围(_/-按键)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示（直接取链到其github图)&lt;/p&gt;
&lt;p&gt;&lt;img alt="expand-region" src="https://raw.github.com/terryma/vim-expand-region/master/expand-region.gif"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-multiple-cursors"&gt;&lt;a href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选装，多光标批量操作&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    ctrl + m 开始选择
    ctrl + p 向上取消
    ctrl + x 跳过
    esc   退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示(官方演示图)&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiple-cursors" src="https://raw.github.com/terryma/vim-multiple-cursors/master/assets/example1.gif"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法检查&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="scrooloosesyntastic"&gt;&lt;a href="https://github.com/scrooloose/syntastic"&gt;scrooloose/syntastic&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议安装，静态语法及风格检查,支持多种语言&lt;/p&gt;
&lt;p&gt;修改了下标记一列的背景色,原有的背景色在solarized下太难看了…..&lt;/p&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="syntastic" src="https://github.com/wklken/gallery/blob/master/vim/syntastic.png?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="kevinwpyflakes-vim"&gt;&lt;a href="https://github.com/kevinw/pyflakes-vim"&gt;kevinw/pyflakes-vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然这个的作者推荐使用syntastic,但是这个插件对于pythoner还是很需要的&lt;/p&gt;
&lt;p&gt;因为有一个特牛的功能,fly check,即,编码时在buffer状态就能动态查错标记,弥补syntastic只能保存和打开时检查语法错误的不足&lt;/p&gt;
&lt;p&gt;演示
   &lt;img alt="pyflakes" src="https://github.com/wklken/gallery/blob/master/vim/pyflakes.png?raw=true"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体语言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;主要是python  其它语言以及前端的,用得少没有研究使用过
python   golang   markdown
需要其它语言支持的,可以到github上捞,上面很多流行的vim配置,eg. spf13-vim
以下均为选装，根据自己需要
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="python-syntax"&gt;&lt;a href="https://github.com/hdima/python-syntax"&gt;python-syntax&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用Python建议安装，python语法高亮,就是python.vim,在github,有维护和更新&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="jnwhitehvim-golang"&gt;&lt;a href="https://github.com/jnwhiteh/vim-golang"&gt;jnwhiteh/vim-golang&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用golang建议安装， golang语法高亮&lt;/p&gt;
&lt;p&gt;golang刚入门使用,项目中还没正式开始,目前很多golang的手册有配置vim的介绍,后续有需求再弄&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="plasticboyvim-markdown"&gt;&lt;a href="https://github.com/plasticboy/vim-markdown"&gt;plasticboy/vim-markdown&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;markdown语法,编辑md文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="panglossvim-javascript"&gt;&lt;a href="https://github.com/pangloss/vim-javascript"&gt;pangloss/vim-javascript&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;偶尔会看看js,频率不高&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="nonojqueryvim"&gt;&lt;a href="https://github.com/nono/jquery.vim"&gt;nono/jquery.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;jquery高亮&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="thidermannginx-vim-syntax"&gt;&lt;a href="https://github.com/thiderman/nginx-vim-syntax"&gt;thiderman/nginx-vim-syntax&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;nginx配置文件语法高亮,常常配置服务器很有用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="glenchvim-jinja2-syntax"&gt;&lt;a href="https://github.com/Glench/Vim-Jinja2-Syntax"&gt;Glench/Vim-Jinja2-Syntax&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;jinja2 语法高亮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其它扩展增强&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;根据自身需求自取配置,不需要的话自己注解
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptstasklistvim"&gt;&lt;a href="https://github.com/vim-scripts/TaskList.vim"&gt;vim-scripts/TaskList.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看并快速跳转到代码中的TODO列表&lt;/p&gt;
&lt;p&gt;重构代码时一般通读,标记修改位置,非常实用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd]
    ,td 打开todo列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示&lt;/p&gt;
&lt;p&gt;&lt;img alt="tasklist" src="https://github.com/wklken/gallery/blob/master/vim/tasklist.gif?raw=true"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="tpopevim-fugitive"&gt;&lt;a href="https://github.com/tpope/vim-fugitive"&gt;tpope/vim-fugitive&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git插件&lt;/p&gt;
&lt;p&gt;不是很习惯,所以用的次数太少,目前和现有配置快捷键有冲突,尚未解决&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="sjlgundovim"&gt;&lt;a href="https://github.com/sjl/gundo.vim"&gt;sjl/gundo.vim&lt;/a&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编辑文件时光机&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [sd] ,h  查看文件编辑历史
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;待考察的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id="sjlvitalityvim"&gt;sjl/vitality.vim&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsconque-shell"&gt;vim-scripts/Conque-Shell&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsyankringvim"&gt;vim-scripts/YankRing.vim&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id="vim-scriptsautogit"&gt;vim-scripts/auto.git&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;p&gt;The End!&lt;/p&gt;
&lt;p&gt;wklken (凌岳/pythoner/vim党预备党员)&lt;/p&gt;
&lt;p&gt;Email: wklken@yeah.net&lt;/p&gt;
&lt;p&gt;Github: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.me&lt;/p&gt;
&lt;p&gt;2013-06-11 于深圳&lt;/p&gt;</content><category term="vim"></category><category term="linux"></category></entry><entry><title>shell下小抄速查工具cmdcheatsheet[python实现]</title><link href="http://www.wklken.me/posts/2013/05/17/shell-cheat-sheet.html" rel="alternate"></link><published>2013-05-17T00:00:00+08:00</published><updated>2013-05-17T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2013-05-17:/posts/2013/05/17/shell-cheat-sheet.html</id><summary type="html">&lt;h3 id="githubdi-zhi"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="you-hua"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="xiao-guo"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="shi-xian-fang-fa"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="hou-xu-gai-jin"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</summary><content type="html">&lt;h3 id="githubdi-zhi"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="you-hua"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="xiao-guo"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="shi-xian-fang-fa"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="hou-xu-gai-jin"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</content><category term="python"></category><category term="linux"></category></entry><entry><title>如何进行shell脚本正确性测试</title><link href="http://www.wklken.me/posts/2012/09/15/how-to-test-shell.html" rel="alternate"></link><published>2012-09-15T00:00:00+08:00</published><updated>2012-09-15T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2012-09-15:/posts/2012/09/15/how-to-test-shell.html</id><summary type="html">&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？
  用于检查是否有遗漏逻辑，或有悖于需求。
B.具体语法，变量，判断语句
  语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？
  用于检查是否有遗漏逻辑，或有悖于需求。
B.具体语法，变量，判断语句
  语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -n ***.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若是没有异常输出，证明脚本没有明显的语法问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="运行结果" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_1.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;3.运行跟踪：&lt;/p&gt;
&lt;p&gt;实践是检验整理的唯一标准，跑一把。&lt;/p&gt;
&lt;p&gt;不过，可不是直接运行然后去看最终结果，这样会遗漏掉很多中间过程。&lt;/p&gt;
&lt;p&gt;命令格式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -vx ***.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="运行结果" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_2.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到&lt;/p&gt;
&lt;p&gt;每行代码原始命令（无+的）:[这是-v的效果]&lt;/p&gt;
&lt;p&gt;代码执行时的情况（带+），包括运算结果，逻辑判断结果，变量赋值等等[-x的效果]&lt;/p&gt;
&lt;p&gt;而我们所要关注的就是这些信息，主要是变量值和逻辑判断结果。&lt;/p&gt;
&lt;p&gt;4.覆盖分支：&lt;/p&gt;
&lt;p&gt;直接跑，只能覆盖到主体流程，对于其他控制流分支的代码是无法覆盖到的。&lt;/p&gt;
&lt;p&gt;对于关键性的，重点的逻辑，我们需要制造条件，使运行脚本可以进入对应分支&lt;/p&gt;
&lt;p&gt;5.其他：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.关于bashdb:
  可以尝试下，但是感觉投入产出比不高
B.关于单元测试：
  实际工作中，由于项目压力比较大，单元测试的成本还是相当高的，所以目前为止没有。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.有没有更好的方式?&lt;/p&gt;
&lt;p&gt;好吧，单步跟踪，脚本短的还好，日志信息不会太多，要是多了，存在调用其他脚本等等.....&lt;/p&gt;
&lt;p&gt;日志量达到几千行，这是很轻易的事情。&lt;/p&gt;
&lt;p&gt;跟踪过的童鞋有同感，展现不够友好，惨白惨白一片，一千行下来，看的眼花。&lt;/p&gt;
&lt;p&gt;很容易遗漏（LZ被坑了好多回，你看，或不看......错误信息明明就在那里，就是视而不见）&lt;/p&gt;
&lt;p&gt;So.进行了一层优化，对日志进行处理，使用正则，标注我关心的信息&lt;/p&gt;
&lt;p&gt;效果图对比：&lt;/p&gt;
&lt;p&gt;&lt;img alt="原始图" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_3.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="扩展图" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_4.jpg?raw=true"/&gt;&lt;/p&gt;
&lt;p&gt;脚本是用python实现的，位置:https://github.com/wklken/pytools/tree/master/shell&lt;/p&gt;
&lt;p&gt;思想是：执行，抓到所有日志，用正则进行匹配，打上颜色，然后输出&lt;/p&gt;
&lt;p&gt;好了，就这些&lt;/p&gt;
&lt;p&gt;工具的实现是为了提高效率，节约时间。&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Gighub: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.me&lt;/p&gt;
&lt;p&gt;2012-09-15&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢！&lt;/p&gt;</content><category term="python"></category><category term="shell"></category></entry></feed>