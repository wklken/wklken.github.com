<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>wklken's blog - python</title><link>http://www.wklken.me/</link><description></description><lastBuildDate>Thu, 03 Nov 2016 00:00:00 +0800</lastBuildDate><item><title>Python 代码规范小结</title><link>http://www.wklken.me/posts/2016/11/03/python-code-style.html</link><description>&lt;hr/&gt;
&lt;p&gt;code review中一些小结, 还没来得及加例子, 简要记录, 供参考&lt;/p&gt;
&lt;h2 id="law"&gt;law&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一: 一切都与复杂度有关
二: 代码应当易于理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对人:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"好程序员”应当竭尽全力, 把程序写得让其他程序员(以及以后的自己)容易理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对代码:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;代码被阅读的次数远多于编写和修改的次数&lt;/li&gt;
&lt;li&gt;E = mc2 (Error = more codes)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;对项目:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公式: 可行性=(当前价值+未来价值)/(实现成本+维护成本). 即相比降低实现成本, 降低维护成本更加重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ji-chu-feng-ge"&gt;基础: 风格&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;团队成员遵守统一的风格, 保持风格的一致性, 减少理解难度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;遵循基础的编码风格:&lt;/p&gt;
&lt;p&gt;请仔细阅读, 使用对应编辑器插件工具协助检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遵循  &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; 风格
利用pep8工具(编辑器相关插件)来解决这个问题, 在review之前处理. 以避免在review过程中出现此类问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遵循 &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Google …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 03 Nov 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-11-03:/posts/2016/11/03/python-code-style.html</guid><category>python</category></item><item><title>[分享]Python源码剖析-数据结构</title><link>http://www.wklken.me/posts/2016/03/01/python-source-datastructure.html</link><description>&lt;p&gt;&lt;object data="/extra/share/python-source-datastructure.pdf" height="525" type="application/pdf" width="729"&gt;
&lt;embed src="/extra/share/python-source-datastructure.pdf"/&gt;
&lt;/object&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-03-01:/posts/2016/03/01/python-source-datastructure.html</guid><category>python</category></item><item><title>一些Centos Python生产环境的部署命令</title><link>http://www.wklken.me/posts/2016/02/18/python-env-in-centos.html</link><description>&lt;p&gt;Just notes&lt;/p&gt;
&lt;p&gt;拿到一台干净的centos之后, 初始化Python环境, 一些命令和问题记录而已&lt;/p&gt;
&lt;p&gt;可以搞成脚本自动初始化, 当然, 用docker更好&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-chu-huan-jing"&gt;基础环境&lt;/h2&gt;
&lt;h4 id="1-chuang-jian-yong-hu"&gt;1. 创建用户&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser newuser
sudo passwd newuser

&lt;span class="c1"&gt;# 设置授权不需要输入密码&lt;/span&gt;
sudo /usr/sbin/visudo
newuser       &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="2-epelfedora-extra-packages-for-enterprise-linux-repository"&gt;2. EPEL(Fedora Extra Packages for Enterprise Linux repository )&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat"&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
sudo rpm …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 18 Feb 2016 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2016-02-18:/posts/2016/02/18/python-env-in-centos.html</guid><category>python</category></item><item><title>Python 源码阅读 - 垃圾回收机制</title><link>http://www.wklken.me/posts/2015/09/29/python-source-gc.html</link><description>&lt;h2 id="gai-shu"&gt;概述&lt;/h2&gt;
&lt;p&gt;无论何种垃圾收集机制, 一般都是两阶段: 垃圾检测和垃圾回收.&lt;/p&gt;
&lt;p&gt;在Python中, 大多数对象的生命周期都是通过对象的引用计数来管理的.&lt;/p&gt;
&lt;p&gt;问题: 但是存在循环引用的问题: a 引用 b, b 引用 a, 导致每一个对象的引用计数都不为0, 所占用的内存永远不会被回收&lt;/p&gt;
&lt;p&gt;要解决循环引用: 必需引入其他垃圾收集技术来打破循环引用. Python中使用了&lt;code&gt;标记-清除&lt;/code&gt;以及&lt;code&gt;分代收集&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即, Python 中垃圾回收机制: 引用计数(主要), 标记清除, 分代收集(辅助)&lt;/p&gt;
&lt;h2 id="yin-yong-ji-shu"&gt;引用计数&lt;/h2&gt;
&lt;p&gt;引用计数, 意味着必须在每次分配和释放内存的时候, 加入管理引用计数的动作&lt;/p&gt;
&lt;p&gt;引用计数的优点: 最直观最简单, 实时性, 任何内存, 一旦没有指向它的引用, 就会立即被回收&lt;/p&gt;
&lt;h3 id="ji-shu-cun-chu"&gt;计数存储&lt;/h3&gt;
&lt;p&gt;回顾  &lt;a href="http://www.wklken.me/posts/2014/08/05/python-source-object.html"&gt;Python 的对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.wklken.me/imgs/python-source/PyVarObject.png"/&gt;￼&lt;/p&gt;
&lt;p&gt;e.g. 引用计数增加以及减少&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 29 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-29:/posts/2015/09/29/python-source-gc.html</guid><category>python</category></item><item><title>Python源码阅读-闭包的实现</title><link>http://www.wklken.me/posts/2015/09/04/python-source-closure.html</link><description>&lt;h3 id="bi-bao"&gt;闭包&lt;/h3&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;do_add&lt;/span&gt;

&lt;span class="n"&gt;add_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要回答, 什么是闭包, CPython底层是如何实现的?&lt;/p&gt;
&lt;h3 id="pycodeobject"&gt;PyCodeObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_argcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* #arguments, except *args */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_nlocals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;/* #local variables */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_stacksize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="cm"&gt;/* #entries needed for evaluation stack */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;co_flags …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 04 Sep 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-09-04:/posts/2015/09/04/python-source-closure.html</guid><category>python</category></item><item><title>Python源码阅读-内存管理机制(二)</title><link>http://www.wklken.me/posts/2015/08/29/python-source-memory-2.html</link><description>&lt;h2 id="python-de-nei-cun-fen-pei-ce-lue"&gt;Python 的内存分配策略&lt;/h2&gt;
&lt;h3 id="arena"&gt;arena&lt;/h3&gt;
&lt;p&gt;arena: 多个pool聚合的结果&lt;/p&gt;
&lt;h4 id="arena-size"&gt;arena size&lt;/h4&gt;
&lt;p&gt;pool的大小默认值位4KB&lt;/p&gt;
&lt;p&gt;arena的大小默认值256KB, 能放置 256/4=64 个pool&lt;/p&gt;
&lt;p&gt;&lt;code&gt;obmalloc.c&lt;/code&gt;中代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define ARENA_SIZE              (256 &amp;lt;&amp;lt; 10)     &lt;/span&gt;&lt;span class="cm"&gt;/* 256KB */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="arena-jie-gou"&gt;arena 结构&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完整的arena = arena_object + pool集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Record keeping for arenas. */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arena_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* The address of the arena, as returned by malloc.  Note that 0&lt;/span&gt;
&lt;span class="cm"&gt;     * will never …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 29 Aug 2015 20:54:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-2.html</guid><category>python</category></item><item><title>Python源码阅读-内存管理机制(一)</title><link>http://www.wklken.me/posts/2015/08/29/python-source-memory-1.html</link><description>&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;基本阅读完了, 只是没时间梳理, 趁着这今天时间比较空&lt;/p&gt;
&lt;p&gt;逐步梳理, 发上来......也算是小结下, 要开始准备简历找工作了&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;这篇略长, 带很多图, 所以一分为二&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-nei-cun-guan-li-jia-gou"&gt;Python的内存管理架构&lt;/h2&gt;
&lt;h3 id="ji-ben-fen-ceng"&gt;基本分层&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Objects/obmalloc.c&lt;/code&gt;源码中, 给了一个分层划分&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _____   ______   ______       ________
   [ int ] [ dict ] [ list ] ... [ string ]       Python core         |
+3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; |
    _______________________________       |                           |
   [   Python's object allocator   ]      |                           |
+2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; |
    ______________________________________________________________    |
   [          Python's raw memory allocator (PyMem_ API …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 29 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-29:/posts/2015/08/29/python-source-memory-1.html</guid><category>python</category></item><item><title>Python-基础-数据结构小结</title><link>http://www.wklken.me/posts/2015/08/28/python-base-datastructures.html</link><description>&lt;p&gt;只是一篇笔记, 梳理了下&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;h3 id="xu-lie"&gt;序列&lt;/h3&gt;
&lt;h4 id="string"&gt;string&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/10/python-base-string.html"&gt;Python-基础-字符串小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/08/python-source-string.html"&gt;Python源码阅读-String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="list"&gt;list&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2012/12/30/python-base-list.html"&gt;Python-基础-列表及列表解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-list.html"&gt;Python源码阅读-list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tuple"&gt;tuple&lt;/h4&gt;
&lt;p&gt;基本数据结构, 不解释&lt;/p&gt;
&lt;p&gt;可以看下我之前的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/03/09/python-base-tuple.html"&gt;Python-基础-元组小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2014/08/10/python-source-tuple.html"&gt;Python源码阅读-tuple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="namedtuple"&gt;namedtuple&lt;/h4&gt;
&lt;p&gt;在collections中, 从名字可以看出是命名的tuple&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;][,&lt;/span&gt; &lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好处, 文档中提到&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Named&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;dictionaries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;lightweight&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;no …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 28 Aug 2015 23:59:59 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-28:/posts/2015/08/28/python-base-datastructures.html</guid><category>python</category></item><item><title>一些简单的Python测试题</title><link>http://www.wklken.me/posts/2015/08/26/python-some-test-questions.html</link><description>&lt;p&gt;一些简单的测试题, 主要来源是网上:)&lt;/p&gt;
&lt;p&gt;某种程度, 可以从代码中看出一些东西&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写代码, 打印1-1亿之内的偶数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个函数, 用正则表达式清除字符串中[]和其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[lol]你好，帮我把这些markup清掉，[smile]。谢谢！"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;请使用python, 对下面的函数进行处理,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在函数被调用时打印耗时详情&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tom&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;timecosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.81469726562e-06&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;写一个函数, 将驼峰命名法字符串转成下划线命名字符串(需考虑各类编码中常见的命名)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;GetItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;getItem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_item&lt;/span&gt;
      &lt;span class="n"&gt;doIT …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 26 Aug 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-08-26:/posts/2015/08/26/python-some-test-questions.html</guid><category>python</category></item><item><title>Python-基础-时间日期处理小结</title><link>http://www.wklken.me/posts/2015/03/03/python-base-datetime.html</link><description>&lt;p&gt;好久没写文了, 继续清理笔记, 都是一些小结之类的, 源码分析以及在做系统中一些细节难点等, 后续逐步发&lt;/p&gt;
&lt;p&gt;另外打个广告, &lt;a href="http://www.itianpin.com/join"&gt;甜品礼物&lt;/a&gt;, 坐标深圳, 有兴趣的同学可以给我发邮件, 非python职位会转到对应同事:)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      _       _       _   _
     | |     | |     | | (_)
   __| | __ _| |_ ___| |_ _ _ __ ___   ___
  / _` |/ _` | __/ _ \ __| | '_ ` _ \ / _ \
 | (_| | (_| | ||  __/ |_| | | | | | |  __/
  \__,_|\__,_|\__\___|\__|_|_| |_| |_ …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 03 Mar 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2015-03-03:/posts/2015/03/03/python-base-datetime.html</guid><category>python</category></item><item><title>Python 源码阅读 - dict</title><link>http://www.wklken.me/posts/2014/08/11/python-source-dict.html</link><description>&lt;p&gt;基本类型实现的最后一篇, 先告一段落, 专心找工作去......搞定工作后再开始扫后面的&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/dictobject.h"&gt;Include/dictobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/dictobject.c"&gt;Objects/dictobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pydictobjectde-cun-chu-ce-lue"&gt;PyDictObject的存储策略&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 使用散列表进行存储

2. 使用开放定址法处理冲突

    2.1 插入, 发生冲突, 通过二次探测算法, 寻找下一个位置, 直到找到可用位置, 放入(形成一条冲突探测链)

    2.2 查找, 需要遍历冲突探测链

    2.3 删除, 如果对象在探测链上, 不能直接删除, 否则会破坏整个结构(所以不是真的删)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 hash表的 &lt;a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ji-ben-jian-zhi-pydictentry"&gt;基本键值PyDictEntry&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    Py_ssize_t me_hash;
    PyObject *me_key;
    PyObject *me_value;
} PyDictEntry;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-11:/posts/2014/08/11/python-source-dict.html</guid><category>python</category></item><item><title>Python 源码阅读 - tuple</title><link>http://www.wklken.me/posts/2014/08/10/python-source-tuple.html</link><description>&lt;p&gt;还差一篇......写完写简历&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; b = ()
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; a = (1, )
&amp;gt;&amp;gt;&amp;gt; b = (1, )
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
False
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/tupleobject.h"&gt;Include/tupleobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/tupleobject.c"&gt;Objects/tupleobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="jie-gou"&gt;结构&lt;/h1&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD
    PyObject *ob_item[1];

} PyTupleObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyTupleObject在底层是个变长对象(需要存储列表元素个数).
虽然, 在python中, tuple是不可变对象

2. PyObject *ob_item[1];
指向存储元素的数组

3 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Aug 2014 17:10:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-tuple.html</guid><category>python</category></item><item><title>Python 源码阅读 - list</title><link>http://www.wklken.me/posts/2014/08/10/python-source-list.html</link><description>&lt;p&gt;还剩 tuple 和 dict就把几个基本类型写完了, 然后歇歇先找工作&amp;gt;_&amp;lt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/listobject.h"&gt;Include/listobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/listobject.c"&gt;Objects/listobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="ding-yi"&gt;定义&lt;/h1&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
    PyObject_VAR_HEAD

    PyObject **ob_item;

    Py_ssize_t allocated;
} PyListObject;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. PyObject_VAR_HEAD
PyListObject是变长对象

2. PyObject **ob_item;
指向列表元素的指针数组, list[0] 即 ob_item[0]

3. Py_ssize_t allocated;
allocated列表分配的空间, ob_size为已使用的空间
allocated 总的申请到的内存数量
ob_size 实际使用内存数量

等式:

    0 &amp;lt;= ob_size &amp;lt;= allocated
    len(list …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-10:/posts/2014/08/10/python-source-list.html</guid><category>python</category></item><item><title>Python 源码阅读 - string</title><link>http://www.wklken.me/posts/2014/08/08/python-source-string.html</link><description>&lt;p&gt;本周进展不大(去掉北上, 选择余地太小了), 下周开始投简历:(&lt;/p&gt;
&lt;p&gt;这一章, 就一张图, 代码比较多&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="pystringobject"&gt;PyStringObject&lt;/h1&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/stringobject.h"&gt;Include/stringobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/stringobject.c"&gt;Objects/stringobject.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct {
  PyObject_VAR_HEAD
  long ob_shash;
  int ob_sstate;
  char ob_sval[1];

  /* Invariants:
   *     ob_sval contains space for 'ob_size+1' elements.
   *     ob_sval[ob_size] == 0.
   *     ob_shash is the hash of the string or -1 if not computed yet …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 08 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-08:/posts/2014/08/08/python-source-string.html</guid><category>python</category></item><item><title>Python 源码阅读 - int</title><link>http://www.wklken.me/posts/2014/08/06/python-source-int.html</link><description>&lt;p&gt;==========================&lt;/p&gt;
&lt;p&gt;代码我也仅仅是粗粗读了一遍, 可能出现疏漏和理解错误, 发现了望指出哈.&lt;/p&gt;
&lt;p&gt;今天面了一家靠谱的创业公司, 可惜不是Python向的, 想继续玩Python是有代价的, 选择余地太窄了......&lt;/p&gt;
&lt;p&gt;话说写文章很耗时间, 这个花了两个多小时....主要还是自个绘图渣效率低:(&lt;/p&gt;
&lt;p&gt;准备找工作事宜很占时间, 后面只能慢慢来了(好像还很多很多的样子)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 1
&amp;gt;&amp;gt;&amp;gt; id(a) == id(b)
True

&amp;gt;&amp;gt;&amp;gt; c = 257
&amp;gt;&amp;gt;&amp;gt; d = 257
&amp;gt;&amp;gt;&amp;gt; id(c) == id(d)
False

#在python2.x中, 对于大的序列生成, 建议使用xrange(100000) 而不是range(100000), why?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/intobject.h"&gt;Include/intobject.h&lt;/a&gt; |
         &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Objects/intobject.c"&gt;Objects/intobject.c&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="pyintobject"&gt;PyIntObject&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-06:/posts/2014/08/06/python-source-int.html</guid><category>python</category></item><item><title>Python 源码阅读 - 类型</title><link>http://www.wklken.me/posts/2014/08/05/python-source-type.html</link><description>&lt;p&gt;这篇主要涉及Python对象的类型机制&lt;/p&gt;
&lt;p&gt;有点绕, 一定要思维清晰的时候再看哦:)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;一个例子&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; a
1

&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type 'int'&amp;gt;

#等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(a))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(int)
&amp;lt;type 'type'&amp;gt;

#还是等价的两个
&amp;gt;&amp;gt;&amp;gt; type(type(type(a)))
&amp;lt;type 'type'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(type(int))
&amp;lt;type 'type'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们反向推导一个&lt;code&gt;int&lt;/code&gt;对象是怎么生成的.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1-shou-xian-ding-yi-yi-chong-lei-xing-jiao-pytypeobject"&gt;1. 首先, 定义一种类型叫PyTypeObject&lt;/h3&gt;
&lt;p&gt;代码位置 &lt;a href="https://github.com/wklken/Python-2.7.8/blob/master/Include/object.h"&gt;Include/object.h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; typedef struct _typeobject {

  /* MARK: base …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 Aug 2014 19:31:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-type.html</guid><category>python</category></item><item><title>Python 源码阅读 - 对象</title><link>http://www.wklken.me/posts/2014/08/05/python-source-object.html</link><description>&lt;p&gt;结束休息期, 开始准备面试事宜了, 发现要准备的东西好多(╯‵□′)╯︵┻━┻,  顺手整理下Python源码阅读笔记(力争在写完前找到工作)&lt;/p&gt;
&lt;p&gt;参考内容: Python源码 + &lt;code&gt;&amp;lt;&amp;lt;Python源码剖析&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;源代码+说明+图解&lt;/code&gt;的方式, 尽量说明白吧, 有一份注释在github上&lt;/p&gt;
&lt;p&gt;内容:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; 对象/类型
-&amp;gt; 各种内建类型对象及机制
-&amp;gt; 虚拟机相关(编译及执行)
-&amp;gt; 内存管理/动态加载/多线程等
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: 画图的话google doc很好用&lt;/p&gt;
&lt;p&gt;好的, 第一篇开始&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;一切皆为对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象, 在C语言是如何实现的?&lt;/p&gt;
&lt;p&gt;Python中对象分为两类: 定长(int等), 非定长(list/dict等)&lt;/p&gt;
&lt;p&gt;所有对象都有一些相同的东西, 源码中定义为&lt;code&gt;PyObject&lt;/code&gt;和&lt;code&gt;PyVarObject&lt;/code&gt;, 两个定义都有一个共同的头部定义&lt;code&gt;PyObject_HEAD&lt;/code&gt;(其实PyVarObject有自己的头部定义&lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt;, 但其实际上用的也是&lt;code&gt;PyObject_HEAD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;源码位置 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 05 Aug 2014 17:32:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-08-05:/posts/2014/08/05/python-source-object.html</guid><category>python</category></item><item><title>Python后端相关技术/工具栈</title><link>http://www.wklken.me/posts/2014/07/26/python-tech-stack.html</link><description>&lt;p&gt;整理下目前涉及到的python的技术栈和工具栈(用过或了解的, 其他的后续用到再补充)&lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="/imgs/python/python-logo.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见: vim / &lt;a href="http://www.sublimetext.com/2"&gt;SublimeText2&lt;/a&gt; / &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim有兴趣可以看看 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 适合Python/Golang开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境
pip/easy_install 包管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;viertualenv&lt;/a&gt; + &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 库/版本管理, 环境隔离&lt;/p&gt;
&lt;p&gt;ipython/ipdb&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 框架
Python 的Web 框架非常多......&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;个人偏好[有分先后]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt; 轻量! 可以灵活组合各类组件进行开发(第三方组件很丰富), 简单高效, 便于快速开发和维护.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tornadoweb.org/en/stable/"&gt;tornado&lt;/a&gt; 异步, 高性能, 最新版本4.0&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; 有些重, 配置和约定众多, 可以快速开发一些"管理"性质的后台, 其版本更新非常快&lt;/p&gt;
&lt;p&gt;其他:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;bottle …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2014-07-26:/posts/2014/07/26/python-tech-stack.html</guid><category>python</category></item><item><title>[翻译]Python中staticmethod和classmethod的差异</title><link>http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</link><description>&lt;p&gt;原文地址 &lt;a href="http://www.pythoncentral.io/difference-between-staticmethod-and-classmethod-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很短，顺手一翻&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="class-vs-static-methods-in-python"&gt;Class vs static methods in Python&lt;/h3&gt;
&lt;p&gt;这篇文章试图解释：什么事staticmethod/classmethod,并且这两者之间的差异.&lt;/p&gt;
&lt;p&gt;staticmethod和classmethod均被作为装饰器，用作定义一个函数为"staticmethod"还是"classmethod"&lt;/p&gt;
&lt;p&gt;如果想要了解Python装饰器的基础，可以看 &lt;a href="http://www.pythoncentral.io/python-decorators-overview/"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="simple-static-and-class-methods"&gt;Simple, static and class methods&lt;/h3&gt;
&lt;p&gt;类中最常用到的方法是 实例方法(instance methods), 即，实例对象作为第一个参数传递给函数&lt;/p&gt;
&lt;p&gt;例如，下面是一个基本的实例方法&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Kls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 22 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-22:/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html</guid><category>python</category></item><item><title>[翻译]Python中如何使用*args和**kwargs</title><link>http://www.wklken.me/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</link><description>&lt;p&gt;不知道有没有人翻译了，看到了，很短，顺手一翻&lt;/p&gt;
&lt;p&gt;原文地址 &lt;a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;或者可以叫做，在Python中如何使用可变长参数列表&lt;/p&gt;
&lt;h3 id="han-shu-ding-yi"&gt;函数定义&lt;/h3&gt;
&lt;p&gt;这是一种特殊的语法，在函数定义中使用*args和&lt;strong&gt;kwargs传递可变长参数.  *args用作传递非命名键值可变长参数列表（位置参数）; &lt;/strong&gt;kwargs用作传递键值可变长参数列表&lt;/p&gt;
&lt;p&gt;下面的例子传递一个位置参数以及两个可变长参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;formal arg: 1
another arg: two
another arg: 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个键值的例子，传递一个位置参数和两个键值参数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/how-to-use-args-and-kwargs-in-python.html</guid><category>python</category></item><item><title>Python招聘需求与技能体系</title><link>http://www.wklken.me/posts/2013/12/21/python-jd.html</link><description>&lt;p&gt;目前国内的招聘Python，基本都是偏向web后台开发，偶有高大上的数据挖掘&amp;amp;机器学习&lt;/p&gt;
&lt;p&gt;这是之前(2012年)找工作整理的一些JD，在梳理几年来的笔记，顺带理一理&lt;/p&gt;
&lt;p&gt;可以以此建立自己的技能体系&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="di-yi-bu-fen-yi-xie-yao-qiu"&gt;第一部分: 一些要求&lt;/h3&gt;
&lt;p&gt;1.学历&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式： 计算机及相关专业本科及以上学历.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不解释，不说明&lt;/p&gt;
&lt;p&gt;毕业后很少再看学历了，更多的是看能力吧（我会告诉你第一年周围都是硕士博士海龟么，俺学历最低，自卑啊）&lt;/p&gt;
&lt;p&gt;见过数学系、物理系、信息自动化系的跑过来当码农，唯一遗憾的是还没有见到中文系的.....&lt;/p&gt;
&lt;p&gt;2.经验&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：拥有X年以上经验，至少独立负责过X个项目
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很蛋疼的东西，见过一年经验用N年的，也见过一年拥有N年经验的&lt;/p&gt;
&lt;p&gt;受环境影响，但更多的是取决于个人&lt;/p&gt;
&lt;p&gt;听过一句话：人和人的唯一区别，就是有木有主观能动性（略有些偏激，但是有道理）&lt;/p&gt;
&lt;p&gt;3.基础素质&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;格式：具有良好的XXXX

编码规范/风格
文档书写习惯
沟通与表达能力 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-jd.html</guid><category>python</category></item><item><title>Python模板-Jinja2</title><link>http://www.wklken.me/posts/2013/12/21/python-template-jinja2.html</link><description>&lt;p&gt;&lt;img alt="jinja" src="/imgs/python/jinja.png"/&gt;&lt;/p&gt;
&lt;p&gt;Jinja2的一些使用摘要&lt;/p&gt;
&lt;p&gt;Jinja2作为flask的默认页面模板，感觉蛮强大的，可适用于各种模板类相关的项目&lt;/p&gt;
&lt;p&gt;特别是模板继承，写页面很舒服&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;文档 http://jinja.pocoo.org/docs/&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo easy_install jinja2
sudo pip install jinja2
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="zhong-duan-ban-helloworld"&gt;终端版helloworld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello {{ name }}!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="he"&gt;{%和{{&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;navigation&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-21:/posts/2013/12/21/python-template-jinja2.html</guid><category>python</category></item><item><title>Python模板-Mako</title><link>http://www.wklken.me/posts/2013/12/14/python-template-mako.html</link><description>&lt;p&gt;&lt;img alt="mako" src="/imgs/python/mako.png"/&gt;&lt;/p&gt;
&lt;p&gt;一直使用Jinja2，前段时间听说mako，一试&lt;/p&gt;
&lt;p&gt;大同小异，天下模板都差不多&lt;/p&gt;
&lt;p&gt;要写代码测试，文档先行&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="zi-yuan"&gt;资源&lt;/h3&gt;
&lt;p&gt;官网 http://www.makotemplates.org/&lt;/p&gt;
&lt;p&gt;文档 http://docs.makotemplates.org/en/latest/&lt;/p&gt;
&lt;p&gt;文档翻译 Mako模板入门 http://help.42qu.com/code/mako.html&lt;/p&gt;
&lt;h3 id="an-zhuang"&gt;安装&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mako
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="helloworld"&gt;HelloWorld&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-------------------------&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 14 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-12-14:/posts/2013/12/14/python-template-mako.html</guid><category>python</category></item><item><title>[摘要]Python 最佳实践指南</title><link>http://www.wklken.me/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</link><description>&lt;p&gt;文档地址 &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's Guide to Python!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份文档&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;目标对象：入门后，有一定基础的Pythonista
关键词：最佳实践，Pythonic，各类工具介绍
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;粗粗粗略地过了一遍，大体捞了一些东西出来，大段大段英文太费眼了，回头细读在更新进来&lt;/p&gt;
&lt;p&gt;浓缩版，20分钟可大体过完，然后根据自己需要去看详细的吧&lt;/p&gt;
&lt;p&gt;整体内容还是很不错的，建议细读英文&lt;/p&gt;
&lt;p&gt;PS:文档含有巨量的TODO(没写空白着待补充的)，不过但从目录上来看还是很强大滴，相信完善后，会成为一份很牛逼的指南(难度比官方指南高一点点)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-ling-bu-fen-getting-started"&gt;第零部分 Getting Started&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/#getting-started"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不解释，不翻译，自个看....真的没啥(每本入门书籍第一章...)&lt;/p&gt;
&lt;hr/&gt;
&lt;h1 id="di-yi-bu-fen-writing-great-code"&gt;第一部分 Writing Great Code&lt;/h1&gt;
&lt;h3 id="structuring-your-project"&gt;Structuring Your Project&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#structuring-your-project"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 最佳实践&lt;/p&gt;
&lt;p&gt;Very …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 25 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-11-25:/posts/2013/11/25/summary-of-the-hitchhikers-guide-2-python.html</guid><category>python</category></item><item><title>Redis基础笔记</title><link>http://www.wklken.me/posts/2013/10/19/redis-base.html</link><description>&lt;h2 id="zi-yuan-lian-jie"&gt;资源链接&lt;/h2&gt;
&lt;p&gt;推荐书籍:《Redis入门指南》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;资源列表:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis命令速查&lt;a href="http://redis.io/commands"&gt;command&lt;/a&gt; |
             &lt;a href="http://redis.cn/commands.html"&gt;CMD索引-中文&lt;/a&gt; |
             &lt;a href="http://redis.readthedocs.org/en/latest/"&gt;CMD树-中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码&lt;a href="https://github.com/antirez/redis"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href="http://redis.io/download"&gt;redis.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Little Redis book &lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料概要 @江南白衣 &lt;a href="https://github.com/springside/springside4/wiki/redis"&gt;gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis资料汇总专题 &lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;nosqlfan&lt;/a&gt; (这个站有很多文章)&lt;/p&gt;
&lt;p&gt;redis的设计与实现 &lt;a href="http://www.redisbook.com/en/latest/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis2.6带注释源码 &lt;a href="https://github.com/huangz1990/annotated_redis_source"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis 各种语言clients&lt;a href="http://redis.io/clients"&gt;clients&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python redis cli &lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网络文章汇总 &lt;a href="http://www.redis.cn/article.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十五分钟介绍Redis数据结构  &lt;a href="http://blog.nosqlfan.com/html/3202.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis的订阅与发布 &lt;a href="http://www.redisbook.com/en/latest/feature/pubsub.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis之七种武器 &lt;a href="http://blog.nosqlfan.com/html/2942.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用Redis的五个注意事项 &lt;a href="http://blog.nosqlfan.com/html/3705.html"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis源码分析系列文章 &lt;a href="http://blog.nosqlfan.com/html/2949.html?ref=rediszt"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Largest …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 19 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-10-19:/posts/2013/10/19/redis-base.html</guid><category>redis</category><category>python</category></item><item><title>搜索下拉提示框实现(python/golang)</title><link>http://www.wklken.me/posts/2013/10/13/search-suggestion.html</link><description>&lt;p&gt;在百度，google，taobao.com的搜索框，输入某个关键字时，会存在下拉提示，提示关键字列表&lt;/p&gt;
&lt;p&gt;国庆的时候，想了下如何实现这个功能&lt;/p&gt;
&lt;p&gt;用python和golang搞了个基本版本，国庆后直接上到线上了&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://github.com/wklken/suggestion
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Demo地址：(30w关键字，每天约三百万次请求)&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://s.kuaiwan.com/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本机制：离线给出关键字和权重，用trie数据结构，逐一加入，建立一棵树，请求进来时，遍历树，获取节点，排序返回&lt;/p&gt;
&lt;p&gt;2013-10-13&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-10-13:/posts/2013/10/13/search-suggestion.html</guid><category>python</category><category>golang</category></item><item><title>[翻译]快速Python性能优化要点</title><link>http://www.wklken.me/posts/2013/09/07/quick-python-performance-optimization.html</link><description>&lt;p&gt;翻译，两篇博文 Quick Python Performance Optimization&lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-i/"&gt;一&lt;/a&gt; &lt;a href="http://infiniteloop.in/blog/quick-python-performance-optimization-part-ii/"&gt;二&lt;/a&gt;, 很短&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仅是解释,如何用正确并且高效的方式完成在日常Python编码中简单的事情&lt;/p&gt;
&lt;p&gt;1.在ipython交互shell中使用%timeit (per line) 和 %prun (cProfile)&lt;/p&gt;
&lt;p&gt;测量你的代码，并且找到性能的瓶颈.这和"过早优化是一切罪恶的根源"并不矛盾.这是第一级的性能优化，而不是重量级的性能优化序列.&lt;/p&gt;
&lt;p&gt;更多的测量Python代码性能，可参考 &lt;a href="http://www.huyng.com/posts/python-performance-analysis/"&gt;http://www.huyng.com/posts/python-performance-analysis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另一个有趣的库，line_profiler,逐行的性能测量&lt;a href="https://bitbucket.org/robertkern/line_profiler"&gt;https://bitbucket.org/robertkern/line_profiler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.减少函数调用次数.如果你需要处理一个列表，传递整个列表，而不是遍历列表，调用函数传递每个元素并获取返回值&lt;/p&gt;
&lt;p&gt;3 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 07 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-09-07:/posts/2013/09/07/quick-python-performance-optimization.html</guid><category>python</category></item><item><title>Python-进阶-编码处理小结</title><link>http://www.wklken.me/posts/2013/08/31/python-extra-coding-intro.html</link><description>&lt;p&gt;整理下python编码相关的内容&lt;/p&gt;
&lt;p&gt;注意: 以下讨论为Python2.x版本, Py3k的待尝试&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="kai-shi"&gt;开始&lt;/h2&gt;
&lt;p&gt;用python处理中文时，读取文件或消息，http参数等等&lt;/p&gt;
&lt;p&gt;一运行，发现乱码(字符串处理，读写文件，print)&lt;/p&gt;
&lt;p&gt;然后，大多数人的做法是，调用encode/decode进行调试，并没有明确思考为何出现乱码&lt;/p&gt;
&lt;p&gt;所以调试时最常出现的错误&lt;/p&gt;
&lt;p&gt;错误1&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;错误2&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 31 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-31:/posts/2013/08/31/python-extra-coding-intro.html</guid><category>python</category></item><item><title>Python-进阶-itertools模块小结</title><link>http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html</link><description>&lt;p&gt;这货很强大, 必须掌握&lt;/p&gt;
&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pymotw &lt;a href="http://pymotw.com/2/itertools/"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本是基于文档的翻译和补充，相当于翻译了&lt;/p&gt;
&lt;p&gt;itertools用于高效循环的迭代函数集合&lt;/p&gt;
&lt;h2 id="zu-cheng"&gt;组成&lt;/h2&gt;
&lt;p&gt;总体，整体了解&lt;/p&gt;
&lt;p&gt;无限迭代器&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;迭代器         参数         结果                                                例子
count()     start, [step]   start, start+step, start+2*step, ...                count(10) --&amp;gt; 10 11 12 13 14 ...
cycle()     p               p0, p1, ... plast, p0, p1, ...                      cycle('ABCD') --&amp;gt; A B C D A B C D …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Tue, 20 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-20:/posts/2013/08/20/python-extra-itertools.html</guid><category>python</category></item><item><title>Python-进阶-functools模块小结</title><link>http://www.wklken.me/posts/2013/08/18/python-extra-functools.html</link><description>&lt;p&gt;文档 &lt;a href="http://docs.python.org/2/library/functools.html"&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="functoolspartial"&gt;functools.partial&lt;/h3&gt;
&lt;p&gt;作用:&lt;/p&gt;
&lt;p&gt;functools.partial 通过包装手法，允许我们 "重新定义" 函数签名&lt;/p&gt;
&lt;p&gt;用一些默认参数包装一个可调用对象,返回结果是可调用对象，并且可以像原始对象一样对待&lt;/p&gt;
&lt;p&gt;冻结部分函数位置函数或关键字参数，简化函数,更少更灵活的函数参数调用&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#args/keywords 调用partial时参数&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;newkeywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#合并，调用原始函数，此时用了partial的参数&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="n"&gt;newfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;newfunc …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 18 Aug 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-08-18:/posts/2013/08/18/python-extra-functools.html</guid><category>python</category></item><item><title>[翻译整理]stackoverflow python 百问</title><link>http://www.wklken.me/posts/2013/07/20/python-stackoverflow-vote-top.html</link><description>&lt;p&gt;更新到github了，地址：https://github.com/wklken/stackoverflow-py-top-qa &lt;/p&gt;
&lt;p&gt;后续这里不更新了哈&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;进度40%，最近有点犯懒&lt;/p&gt;
&lt;p&gt;刚刚注册，好东西&lt;/p&gt;
&lt;p&gt;查看了下前面(vote前15页,挑了下,vote都是100+的样子,大概120个)的问题，&lt;a href="http://stackoverflow.com/questions/tagged/python?page=1&amp;amp;sort=votes&amp;amp;pagesize=15"&gt;链接&lt;/a&gt;, 大体梳理了下,本来想放一页搞定，奈何排版太乱，按类型分了下&lt;/p&gt;
&lt;p&gt;第一页的前几个比较长，目测都有中文翻译版本，大家可以网上搜下&lt;/p&gt;
&lt;p&gt;其他问题相对比较杂，有些简单，有些复杂，拉过来参考参考也不错&lt;/p&gt;
&lt;p&gt;总结整理，复习印证(注意，合并了每个问题的多个答案，但是时间仓促，疏漏难免，感兴趣问题直接点链接看原文吧)&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-shu-ju-jie-gou-lie-biao-yuan-zu-zi-dian-deng"&gt;基本数据结构(列表，元组，字典等)&lt;/h2&gt;
&lt;h3 id="pan-duan-yi-ge-lie-biao-wei-kong-de-zui-jia-shi-jian"&gt;判断一个列表为空得最佳实践&lt;/h3&gt;
&lt;p&gt;问题 &lt;a href="http://stackoverflow.com/questions/53513/python-what-is-the-best-way-to-check-if-a-list-is-empty"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答案:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not a:
    print …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 20 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-20:/posts/2013/07/20/python-stackoverflow-vote-top.html</guid><category>python</category><category>translation</category></item><item><title>[翻译]理解python中的装饰器</title><link>http://www.wklken.me/posts/2013/07/19/python-translate-decorator.html</link><description>&lt;p&gt;有人翻译过了，很多转载，暂时没找到原文，各个地方的排版不一样，排版（代码格式），代码注解等都不怎么好&lt;/p&gt;
&lt;p&gt;练练手，顺手一翻吧，权当加深理解&lt;/p&gt;
&lt;p&gt;来源stackoverflow上的问题  &lt;a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484"&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很长哦(应该是巨长...分了三次搞完)，要有耐心看完&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="pythonde-han-shu-shi-dui-xiang"&gt;python的函数是对象&lt;/h2&gt;
&lt;p&gt;要理解装饰器，首先，你必须明白，在python中，函数是对象. 这很重要.&lt;/p&gt;
&lt;p&gt;简单例子来理解为什么&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def shout(word="yes"):
    return word.capitalize()+"!"

print shout()
# outputs : 'Yes!'

# 作为一个对象，你可以讲函数赋值给另一个对象
scream = shout

# 注意到这里我们并没有使用括号：我们不是调用函数，而是将函数'shout'赋给变量'scream'
# 这意味着，你可以通过'scream'调用'shout'

print scream()
# outputs : 'Yes!'

# 不仅如此，你可以删除老的名称'shout' …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 19 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-19:/posts/2013/07/19/python-translate-decorator.html</guid><category>python</category><category>translation</category></item><item><title>[翻译]Python中yield的解释</title><link>http://www.wklken.me/posts/2013/07/18/python-translate-yield.html</link><description>&lt;p&gt;翻译&lt;/p&gt;
&lt;p&gt;来源于stackoverflow问答，原文链接 &lt;a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained"&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SN上面看到的，顺手翻译下，第一次翻译，好多地方翻的不是很好 :)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python中yield关键字的作用是什么？它做了什么？
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，我想理解以下代码&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def node._get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &amp;lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &amp;gt;= self._median:
        yield self._rightchild
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是调用者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result, candidates = list(), [self]
while candidates:
    node …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Thu, 18 Jul 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-07-18:/posts/2013/07/18/python-translate-yield.html</guid><category>python</category><category>translation</category></item><item><title>shell下小抄速查工具cmdcheatsheet[python实现]</title><link>http://www.wklken.me/posts/2013/05/17/shell-cheat-sheet.html</link><description>&lt;h3 id="githubdi-zhi"&gt;github地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/cmdcheatsheet"&gt;打开&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近老是要翻配置文档/wiki/history/笔记/google等等，为的仅仅是拿个服务器地址，或者一个密码，异或一条复杂点常用但懒得打的命令，次数多了自己也烦了，低效耗时，伤不起&lt;/p&gt;
&lt;h3 id="you-hua"&gt;优化&lt;/h3&gt;
&lt;p&gt;把常用的东西，记不住的东西，写到文本配置里，在shell下通过一个命令+关键字，秒杀获取想要的内容&lt;/p&gt;
&lt;h3 id="xiao-guo"&gt;效果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="use_img" src="https://github.com/wklken/gallery/blob/master/tools/cmdcheatsheet.png?raw=true"/&gt;&lt;/p&gt;
&lt;h3 id="shi-xian-fang-fa"&gt;实现方法&lt;/h3&gt;
&lt;p&gt;1.配置文件格式：yaml&lt;/p&gt;
&lt;p&gt;配置关键字，多行内容，读取，用python非常方便&lt;/p&gt;
&lt;p&gt;2.建索引文件cheatsheet.py&lt;/p&gt;
&lt;p&gt;很简单的处理&lt;/p&gt;
&lt;p&gt;3.一键安装文件install.sh&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;h3 id="hou-xu-gai-jin"&gt;后续改进&lt;/h3&gt;
&lt;p&gt;1.模糊匹配&lt;/p&gt;
&lt;p&gt;2.读索引而非每次建索引&lt;/p&gt;
&lt;p&gt;3.更友好的提示方式&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 17 May 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-05-17:/posts/2013/05/17/shell-cheat-sheet.html</guid><category>python</category><category>linux</category></item><item><title>Python fabric实现远程操作和部署</title><link>http://www.wklken.me/posts/2013/03/25/python-tool-fabric.html</link><description>&lt;h2 id="fabric"&gt;fabric&lt;/h2&gt;
&lt;p&gt;title是开发，但是同时要干开发测试还有运维的活 (o(╯□╰)o)&lt;/p&gt;
&lt;p&gt;近期接手越来越多的东西，发布和运维的工作相当机械，加上频率还蛮高，导致时间浪费还是优点多。&lt;/p&gt;
&lt;p&gt;修复bug什么的，测试，提交版本库(2分钟)，ssh到测试环境pull部署（2分钟），rsync到线上机器A,B,C,D,E（1分钟），分别ssh到ABCDE五台机器，逐一重启(8-10分钟) =  13-15分钟&lt;/p&gt;
&lt;p&gt;其中郁闷的是，每次操作都是相同的，命令一样，要命的是在多个机器上，很难在本机一个脚本搞定，主要时间都浪费在ssh，敲命令上了，写成脚本，完全可以一键执行，花两分钟看下执行结果&lt;/p&gt;
&lt;p&gt;直到，发现了fabric这货&lt;/p&gt;
&lt;p&gt;官方文档 &lt;a href="http://fabric.readthedocs.org/"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="zuo-yong"&gt;作用&lt;/h3&gt;
&lt;p&gt;很强大的工具&lt;/p&gt;
&lt;p&gt;可以将自动化部署或者多机操作的命令固化到一个脚本里&lt;/p&gt;
&lt;p&gt;和某些运维工具很像，用它主要是因为，python…..&lt;/p&gt;
&lt;p&gt;简单好用易上手&lt;/p&gt;
&lt;p&gt;当然，shell各种命令组合起来也可以，上古神器和现代兵器的区别&lt;/p&gt;
&lt;h3 id="huan-jing-pei-zhi"&gt;环境配置 …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 25 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-25:/posts/2013/03/25/python-tool-fabric.html</guid><category>python</category></item><item><title>Python-基础-内置函数小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-builtins.html</link><description>&lt;h2 id="nei-zhi-han-shu"&gt;内置函数&lt;/h2&gt;
&lt;h3 id="chang-yong-han-shu"&gt;常用函数&lt;/h3&gt;
&lt;h4 id="1shu-xue-xiang-guan"&gt;1.数学相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;abs(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;abs()返回一个数字的绝对值。如果给出复数，返回值就是该复数的模。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;print abs(-100)
100
&amp;gt;&amp;gt;&amp;gt;print abs(1+2j)
2.2360679775
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;divmod(x,y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;divmod(x,y)函数完成除法运算，返回商和余数。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; divmod(10,3)
(3, 1)
&amp;gt;&amp;gt;&amp;gt; divmod(9,3) (3, 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pow(x,y[,z])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pow()函数返回以x为底，y为指数的幂。如果给出z值，该函数就计算x的y次幂值被z取模的值。&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print pow(2 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-builtins.html</guid><category>python</category></item><item><title>Python-基础-文件处理小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-file.html</link><description>&lt;h2 id="wen-jian-chu-li"&gt;文件处理&lt;/h2&gt;
&lt;p&gt;python常用，主要是用于文件操作，配合字符串操作，数值计算等，完成数据处理。&lt;/p&gt;
&lt;h3 id="wen-jian-mo-shi"&gt;文件模式&lt;/h3&gt;
&lt;p&gt;打开一个文件，返回一个文件对象。可以用open()或者file()，建议使用前者&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_object = open(file_name, access_mode = ‘r’, buffering = -1)
file_name：打开的文件名,若非当前路径，需指出具体路径
mode:可选参数，文件打开模式
bufsize:可选参数，是否使用缓存
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="mode"&gt;mode&lt;/h4&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;模式      描述
r       以读方式打开文件，可读取文件信息.文件必须已存在
w       以写方式打开文件，可向文件写入信息。存在则清空，不存在创建
a       以追加方式打开文件，文件指针自动移到文件尾。追加
r+      以读写方式打开文件，可对文件进行读和写操作。
w+      消除文件内容 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-file.html</guid><category>python</category></item><item><title>Python-基础-函数小结</title><link>http://www.wklken.me/posts/2013/03/16/python-base-function.html</link><description>&lt;h3 id="han-shu"&gt;函数&lt;/h3&gt;
&lt;h4 id="jian-jie-ji-ding-yi"&gt;简介及定义&lt;/h4&gt;
&lt;h5 id="jian-jie"&gt;简介&lt;/h5&gt;
&lt;p&gt;函数是可重用的程序段&lt;/p&gt;
&lt;p&gt;它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次地运行这个语句块。&lt;/p&gt;
&lt;p&gt;函数作用：最大程度重用和最小化代码冗余，流程分解&lt;/p&gt;
&lt;h5 id="ding-yi"&gt;定义&lt;/h5&gt;
&lt;p&gt;使用def可以声明一个函数，完整的函数由函数名，参数以及函数实现语句组成。&lt;/p&gt;
&lt;p&gt;一般形式:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def &amp;lt;函数名&amp;gt; (参数列表):
   &amp;lt;函数语句&amp;gt;
   return &amp;lt;返回值&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中参数和返回值非必须&lt;/p&gt;
&lt;p&gt;注意，没有返回值的return语句等价于return None&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;

&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="nb"&gt;sum …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-function.html</guid><category>python</category></item><item><title>Python-基础-简介/入门</title><link>http://www.wklken.me/posts/2013/03/16/python-base-introduction.html</link><description>&lt;h2 id="pythonjian-jie-ji-ru-men"&gt;Python简介及入门&lt;/h2&gt;
&lt;h3 id="python"&gt;python&lt;/h3&gt;
&lt;p&gt;为什么是python&lt;/p&gt;
&lt;p&gt;选择自己喜欢的语言，这往往不容易，更多的是根据需求&lt;/p&gt;
&lt;p&gt;话说，之前是java，大学用了三年+实习半年，后来入职做测试开发后，碰到了python&lt;/p&gt;
&lt;p&gt;到最后，转python开发了&lt;/p&gt;
&lt;p&gt;写起来快，缩进，不用打花括号，省手指，读起来舒服…..&lt;/p&gt;
&lt;p&gt;喜欢，貌似不需要什么太牛的理由，用着顺手舒服就行&lt;/p&gt;
&lt;p&gt;什么语言之争，编辑器之战啥的，能忽略就忽略吧，能无视就无视吧，工具，够用，用这舒服就ok了，浪费口水精力争来争去图个啥呢&lt;/p&gt;
&lt;p&gt;Life is short, I use python!&lt;/p&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python介绍: 到官网自个看&lt;/p&gt;
&lt;p&gt;有兴趣可以看看: 解释性语言+动态类型语言+强类型语言&lt;/p&gt;
&lt;p&gt;优点缺点: 自己google&lt;/p&gt;
&lt;p&gt;国际惯例&lt;/p&gt;
&lt;p&gt;交互模式:(主要拿来试验，可以试试 &lt;a href="http://ipython.org/"&gt;ipython …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-16:/posts/2013/03/16/python-base-introduction.html</guid><category>python</category></item><item><title>Python-基础-数字处理相关模块</title><link>http://www.wklken.me/posts/2013/03/10/python-base-extra-math.html</link><description>&lt;h2 id="shu-zi-chu-li-xiang-guan-mo-kuai"&gt;数字处理相关模块&lt;/h2&gt;
&lt;h3 id="math"&gt;math&lt;/h3&gt;
&lt;p&gt;1.简介&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;#这句可查看所有函数名列表&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;#查看具体定义及函数0原型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.常用函数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ceil(x) 取顶
floor(x) 取底
fabs(x) 取绝对值
factorial (x) 阶乘
hypot(x,y)  sqrt(x*x+y*y)
pow(x,y) x的y次方
sqrt(x) 开平方
log(x)
log10(x)
trunc(x)  截断取整数部分
isnan (x …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-extra-math.html</guid><category>python</category></item><item><title>Python-基础-集合小结</title><link>http://www.wklken.me/posts/2013/03/10/python-base-set.html</link><description>&lt;h2 id="ji-he"&gt;集合&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素.&lt;/p&gt;
&lt;p&gt;sets 支持 x in set, len(set), 和 for x in set。&lt;/p&gt;
&lt;p&gt;集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.&lt;/p&gt;
&lt;p&gt;作为一个无序的集合，sets 不记录元素位置或者插入点。因此，sets 不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。&lt;/p&gt;
&lt;p&gt;set为可变集合&lt;/p&gt;
&lt;p&gt;frozenset为固定集合&lt;/p&gt;
&lt;p&gt;可变集合特有的方法: add, remove, discard, pop, clear, 这些接受对象的方法, 参数必须是可哈希的&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;用集合的工厂方法 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-set.html</guid><category>python</category></item><item><title>Python-基础-字符串小结</title><link>http://www.wklken.me/posts/2013/03/10/python-base-string.html</link><description>&lt;h2 id="zi-fu-chuan"&gt;字符串&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;字符串序列
用于表示和存储文本，python中字符串是不可变的，一旦声明，不能改变&lt;/p&gt;
&lt;p&gt;通常由单引号(' )，双引号(" )，三引号('''   """)包围&lt;/p&gt;
&lt;p&gt;其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。便捷的多行注释&lt;/p&gt;
&lt;p&gt;Python实际三类字符串：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.通常意义字符串(str)
2.原始字符串，以大写R 或 小写r开始，r''，不对特殊字符进行转义
3.Unicode字符串，u'' basestring子类
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Python 中，字符串是“不可改变的序列”&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.不可变

2.满足序列基本操作，按位置存取，切片及索引
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="zi-fu-chuan_1"&gt;字符串&lt;/h4&gt;
&lt;p&gt;1.获得帮助:&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(str)
&amp;gt;&amp;gt;&amp;gt; dir(str …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 10 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-10:/posts/2013/03/10/python-base-string.html</guid><category>python</category></item><item><title>Python-基础-字典小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-dict.html</link><description>&lt;h2 id="zi-dian"&gt;字典&lt;/h2&gt;
&lt;h3 id="ding-yi"&gt;定义&lt;/h3&gt;
&lt;p&gt;dictionary&lt;/p&gt;
&lt;p&gt;1.键值对的集合(map)&lt;/p&gt;
&lt;p&gt;2.字典是以大括号“{}”包围的数据集合&lt;/p&gt;
&lt;p&gt;3.字典是无序的，在字典中通过键来访问成员。
  可变的，可嵌套，可以原处修改扩展等，不产生新的字典&lt;/p&gt;
&lt;p&gt;4.字典的键，可以是字符串(大小写敏感)，数字常量或元组（不可变类型），同一个字典的键可以混用类型。字典的键必须是可哈希的&lt;/p&gt;
&lt;p&gt;元组作为键的条件是，元组内的值都是不可变类型&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  a = (1,2)  #可以作为键
  b = (1,2,[3,4])  #不可以
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.字典的值可以是任意类型，可以嵌套，可以自由修改&lt;/p&gt;
&lt;h3 id="sheng-ming"&gt;声明&lt;/h3&gt;
&lt;p&gt;创建字典的几种方式:&lt;/p&gt;
&lt;p&gt;1.基本&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;#空字典&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'tom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age' …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-dict.html</guid><category>python</category></item><item><title>Python-基础-数字小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-math.html</link><description>&lt;h2 id="shu-zi"&gt;数字&lt;/h2&gt;
&lt;p&gt;python中的数字类型完整工具：
整数&amp;amp;浮点数，复数，固定精度十进制数，有理分数，集合，布尔类型，无穷的整数精度，各种数字内置函数和模块&lt;/p&gt;
&lt;h3 id="shu-lei-xing"&gt;数类型&lt;/h3&gt;
&lt;p&gt;Python中有四种类型的数&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;整数：一般意义上的数，包含十进制(无前缀),八进制(0开头)，十六进制(0x开头),二进制(0b开头)
eg.  2

长整数：无限大小的数,表示范围和内存有关
eg.   2012121200

浮点数：小数或用e/E(10的幂)表示的幂,默认，浮点数学缺乏精确性,可以使用decimal
eg.   3.23      50.2E2

复数：复数的虚部以字母J 或 j结尾
eg.    2+3i …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-math.html</guid><category>python</category></item><item><title>Python-基础-元组小结</title><link>http://www.wklken.me/posts/2013/03/09/python-base-tuple.html</link><description>&lt;h2 id="yuan-zu"&gt;元组&lt;/h2&gt;
&lt;h3 id="jian-jie"&gt;简介&lt;/h3&gt;
&lt;p&gt;tuple&lt;/p&gt;
&lt;p&gt;1.元组是以圆括号“()”包围的数据集合，不同成员以“,”分隔。通过下标进行访问&lt;/p&gt;
&lt;p&gt;2.不可变序列，可以看做不可变的列表，与列表不同：元组中数据一旦确立就不能改变（所以没有类似列表的增删改操作，只有基本序列操作）&lt;/p&gt;
&lt;p&gt;3.支持任意类型，任意嵌套以及常见的序列操作&lt;/p&gt;
&lt;p&gt;4.元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候，即被使用的元组的值不会改变&lt;/p&gt;
&lt;h3 id="sheng-ming-ji-shi-yong"&gt;声明及使用&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#空元组&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  &lt;span class="c1"&gt;#单个元素元组，注意逗号必须&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="c1"&gt;#判断&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="c1"&gt;#其他同序列基本操作：分片，索引&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 09 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2013-03-09:/posts/2013/03/09/python-base-tuple.html</guid><category>python</category></item><item><title>Python-基础-列表及列表解析小结</title><link>http://www.wklken.me/posts/2012/12/30/python-base-list.html</link><description>&lt;h2 id="lie-biao-ji-lie-biao-jie-xi"&gt;列表及列表解析&lt;/h2&gt;
&lt;p&gt;发现要到2013了，这两个月，离职入职，忙七忙八的，博文少了好多，笔记到是一大堆。
最近开始整理书签，微博收藏以及笔记梳理
采用删的方式，就是在evernote中新建一片，然后捞对应的笔记，一点点总结梳理，删除原有的笔记，发现这样效率高些（原来是在原有笔记之上直接修改总结，发现有用的信息其实并不多，效率有点低）&lt;/p&gt;
&lt;p&gt;相对而言比较全和有用，会持续优化。&lt;/p&gt;
&lt;p&gt;2013，发完这个系列的博客之后，将会整个博客迁移到自己的博客（刚开始写...），后续将同步吧，不过csdn可能会慢一些，自己blog会更自由些。后续将会是python&amp;amp;框架,linux后台开发，Go等等其他。&lt;/p&gt;
&lt;p&gt;不扯了，看正题
以下是对列表笔记梳理的第一个版本，仅供参考&lt;/p&gt;
&lt;p&gt;资料来源于书籍，网络，个人练习等等&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#author:wklken
#version: 1.0
#date: 2012-12-30
#history:
  2012-12-30  created
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ding-yi"&gt;定义：&lt;/h3&gt;
&lt;p&gt;列表是Python中使用最频繁的数据类型 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 30 Dec 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-12-30:/posts/2012/12/30/python-base-list.html</guid><category>python</category></item><item><title>Python-进阶-魔术方法小结(方法运算符重载)</title><link>http://www.wklken.me/posts/2012/10/29/python-base-magic.html</link><description>&lt;h2 id="mo-zhu-fang-fa"&gt;魔术方法&lt;/h2&gt;
&lt;p&gt;对定制及重载做了下梳理，还没消化完，后续补全&lt;/p&gt;
&lt;h3 id="ji-ben-ding-zhi"&gt;基本定制&lt;/h3&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C.__init__(self[, arg1, ...]) 构造器（带一些可选的参数）
C.__new__(self[, arg1, ...]) 构造器（带一些可选的参数）；通常用在设置不变数据类型的子类
C.__del__(self) 解构器
C.__str__(self) 可打印的字符输出；内建str()及print 语句
C.__repr__(self) 运行时的字符串输出；内建repr()  ‘‘  和 操作符
C.__unicode__(self)b Unicode 字符串输出；内建unicode()
C.__call__(self, *args) 表示可调用的实例
C …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Mon, 29 Oct 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-10-29:/posts/2012/10/29/python-base-magic.html</guid><category>python</category></item><item><title>Python-进阶-装饰器小结</title><link>http://www.wklken.me/posts/2012/10/27/python-base-decorator.html</link><description>&lt;p&gt;想找个地方快乐的coding，貌似不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;一时冲动，不过后路已断，做自己想做的事情，总要付出一些代价的，坚持吧，只能。&lt;/p&gt;
&lt;p&gt;吐槽下，本周各种事情，搞得如越级打怪般艰难。周六，去三小时，回来三小时，大败而归，但是还是学到不少东西。&lt;/p&gt;
&lt;p&gt;差距还是有的，虽然自信可以在最短时间补上，但是，需要成本。&lt;/p&gt;
&lt;p&gt;总之，貌似时机不对，哎
以上废话，进入正题&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上周六碰到了，一周忙碌，今天稍微理下，待补全，资料主要来源于书籍，网络&amp;amp;self.coding()。有任何问题，请指正哈&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="zi-yuan"&gt;资源&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="ji-ben-gai-nian"&gt;基本概念&lt;/h2&gt;
&lt;p&gt;具体概念自己google&lt;/p&gt;
&lt;p&gt;装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理, Web权限校验, Cache等。&lt;/p&gt;
&lt;p&gt;很有名的例子，就是咖啡，加糖的咖啡，加牛奶的咖啡 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 27 Oct 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-10-27:/posts/2012/10/27/python-base-decorator.html</guid><category>python</category></item><item><title>如何进行shell脚本正确性测试</title><link>http://www.wklken.me/posts/2012/09/15/how-to-test-shell.html</link><description>&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A.代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？
  用于检查是否有遗漏逻辑，或有悖于需求。
B.具体语法，变量，判断语句
  语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-09-15:/posts/2012/09/15/how-to-test-shell.html</guid><category>python</category><category>shell</category></item><item><title>Python通用邮件发送[smtplib]</title><link>http://www.wklken.me/posts/2012/09/02/python-email-smtplib.html</link><description>&lt;p&gt;使用到的模块 &lt;a href="http://docs.python.org/2/library/smtplib.html"&gt;smtplib&lt;/a&gt;,  &lt;a href="http://docs.python.org/2/library/email"&gt;email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;1.发送邮件&lt;/p&gt;
&lt;p&gt;2.不需要登录任何邮箱等等&lt;/p&gt;
&lt;p&gt;3.支持多接收人&lt;/p&gt;
&lt;p&gt;4.支持附件&lt;/p&gt;
&lt;p&gt;5.支持命令行+方法调用&lt;/p&gt;
&lt;h3 id="ji-yu-ban-ben"&gt;基于版本&lt;/h3&gt;
&lt;p&gt;2.4
使用2.7和3.x的童鞋，可能需要修改下import信息&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;p&gt;使用官网一份代码进行重新修改，扩增功能&lt;/p&gt;
&lt;p&gt;代码托管地址 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#@author : wklken@yeah.ent&lt;/span&gt;
&lt;span class="c1"&gt;#@version : 0.1&lt;/span&gt;
&lt;span class="c1"&gt;#@desc: for mail sending.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getopt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 02 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-09-02:/posts/2012/09/02/python-email-smtplib.html</guid><category>python</category><category>smtplib</category></item><item><title>Python修改xml任意内容[xml.etree.ElementTree]</title><link>http://www.wklken.me/posts/2012/05/25/python-xml-etree.html</link><description>&lt;p&gt;使用库 &lt;a href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;xml.etree.ElementTree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在实际应用中，需要对xml配置文件进行实时修改，&lt;/p&gt;
&lt;p&gt;1.增加、删除 某些节点&lt;/p&gt;
&lt;p&gt;2.增加，删除，修改某个节点下的某些属性&lt;/p&gt;
&lt;p&gt;3.增加，删除，修改某些节点的文本&lt;/p&gt;
&lt;h3 id="shi-yong-xmlwen-dang"&gt;使用xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;framework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;processers&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/A.so"&lt;/span&gt;
            &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;"/tmp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;processer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"BProcesser"&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"lib64/B.so"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"fordelete"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/processer …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Fri, 25 May 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-05-25:/posts/2012/05/25/python-xml-etree.html</guid><category>python</category><category>xml</category></item><item><title>Python解析xml大文件[sax]</title><link>http://www.wklken.me/posts/2012/04/07/python-xml-sax.html</link><description>&lt;p&gt;使用到的包：xml.sax &lt;a href=""&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;读取xml数据文件，文件较大，需要实时处理插入到数据库&lt;/p&gt;
&lt;h3 id="xmlwen-dang"&gt;xml文档&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PERSONS&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;person&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;100000&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sex&amp;gt;&lt;/span&gt;男&lt;span class="nt"&gt;&amp;lt;/sex&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;北京，海淀区&lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;fansNum&amp;gt;&lt;/span&gt;437&lt;span class="nt"&gt;&amp;lt;/fansNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;1989&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;wbNum&amp;gt;&lt;/span&gt;333&lt;span class="nt"&gt;&amp;lt;/wbNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;gzNum&amp;gt;&lt;/span&gt;242&lt;span class="nt"&gt;&amp;lt;/gzNum&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;blog&amp;gt;&lt;/span&gt;null&lt;span class="nt"&gt;&amp;lt;/blog&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edu&amp;gt;&lt;/span&gt;大学&lt;span class="nt"&gt;&amp;lt;/edu&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;work&amp;gt;&amp;lt;/work&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;renZh&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/renZh&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;brithday&amp;gt;&lt;/span&gt;2月14日&lt;span class="nt"&gt;&amp;lt;/brithday&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/person …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 07 Apr 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-04-07:/posts/2012/04/07/python-xml-sax.html</guid><category>python</category><category>xml</category></item><item><title>Python读取修改ini配置文件[ConfigParser]</title><link>http://www.wklken.me/posts/2012/02/19/python-ini-configparser.html</link><description>&lt;p&gt;使用到的包：ConfigParser &lt;a href="http://docs.python.org/2/library/configparser.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;写个项目，用到数据库，多个地方使用，不能硬编码。很类似java的properties文件&lt;/p&gt;
&lt;p&gt;Python支持ini文件的读取&lt;/p&gt;
&lt;h3 id="iniwen-jian"&gt;ini文件&lt;/h3&gt;
&lt;p&gt;db_config.ini&lt;/p&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[baseconf]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3306&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;evaluting_sys&lt;/span&gt;
&lt;span class="k"&gt;[concurrent]&lt;/span&gt;
&lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="shi-li-dai-ma"&gt;示例代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#author: lingyue.wkl&lt;/span&gt;
&lt;span class="c1"&gt;#desc: use to db ops&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;
&lt;span class="c1"&gt;#2012-02-18 created&lt;/span&gt;
&lt;span class="c1"&gt;#---------------------&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 19 Feb 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-02-19:/posts/2012/02/19/python-ini-configparser.html</guid><category>python</category><category>ini</category></item><item><title>Python解析xml[xml.dom]</title><link>http://www.wklken.me/posts/2012/02/18/python-xml-dom.html</link><description>&lt;p&gt;用到的包：xml.dom.minidom &lt;a href="http://docs.python.org/2/library/xml.dom.minidom.html"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;有一个表，里面数据量比较大，每天一更新，其字段可以通过xml配置文件进行配置，即，可能每次建表的字段不一样。&lt;/p&gt;
&lt;p&gt;上游跑时会根据配置从源文件中提取，到入库这一步需要根据配置进行建表。&lt;/p&gt;
&lt;h3 id="jie-jue"&gt;解决&lt;/h3&gt;
&lt;p&gt;写了一个简单的xml，配置需要字段及类型&lt;/p&gt;
&lt;p&gt;上游读取到对应的数据&lt;/p&gt;
&lt;p&gt;入库这一步，先把原表删除，根据配置建新表&lt;/p&gt;
&lt;h3 id="xmlwen-jian"&gt;XML文件&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 表名 ,数据库名   可灵活配置插入哪个库哪个表 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"top_query"&lt;/span&gt; &lt;span class="na"&gt;db_name=&lt;/span&gt;&lt;span class="s"&gt;"evaluting_sys"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 非业务主键，自增长,可配名，其他 INTEGER UNSIGNED AUTO_INCREMENT  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;primary_key&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;id&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/primary_key …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 18 Feb 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2012-02-18:/posts/2012/02/18/python-xml-dom.html</guid><category>python</category><category>xml</category></item><item><title>Python通用数据格式转换工具</title><link>http://www.wklken.me/posts/2011/12/10/python-dataformat.html</link><description>&lt;hr/&gt;
&lt;p&gt;已独立成项目在github上面 &lt;a href="https://github.com/wklken/dataformat"&gt;dataformat&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;涉及模块 os, getopt, sys&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;在进行hadoop测试时，需要造大量数据，例如某个表存在56列，但实际程序逻辑只适用到某几列，我们造的数据 也只需要某几列&lt;/p&gt;
&lt;p&gt;构造几列数据，转化为对应数据表格式&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#dataformat.py&lt;/span&gt;
&lt;span class="c1"&gt;#   wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script change data from your source to the dest data format&lt;/span&gt;
&lt;span class="c1"&gt;#2011-08-05 created version0.1&lt;/span&gt;
&lt;span class="c1"&gt;#2011-10-29 add row-row mapping ,default row value …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 10 Dec 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2011-12-10:/posts/2011/12/10/python-dataformat.html</guid><category>python</category></item><item><title>Python实现ftp常用操作[ftplib]</title><link>http://www.wklken.me/posts/2011/12/10/python-ftp-ftplib.html</link><description>&lt;p&gt;使用到的模块  &lt;a href="http://docs.python.org/2/library/ftplib.html"&gt;ftplib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码托管位置 &lt;a href="https://github.com/wklken/pytools"&gt;github-pytools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="xu-qiu"&gt;需求&lt;/h3&gt;
&lt;p&gt;快速进行ftp上传 ，下载，查询文件&lt;/p&gt;
&lt;p&gt;原来直接在shell下操作：需要【连接，输用户名，输密码，单文件操作，存在超时限制】&lt;/p&gt;
&lt;p&gt;太过于繁琐，容易操作失败&lt;/p&gt;
&lt;h3 id="gai-jin"&gt;改进&lt;/h3&gt;
&lt;p&gt;一句命令，搞定多文件上传，下载，查询，列表等操作&lt;/p&gt;
&lt;p&gt;后期可以加入更强大的功能&lt;/p&gt;
&lt;h3 id="yuan-dai-ma"&gt;源代码&lt;/h3&gt;
&lt;div class="monokai"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;#ftp.py&lt;/span&gt;
&lt;span class="c1"&gt;#    wklken@yeah.net&lt;/span&gt;
&lt;span class="c1"&gt;#this script is used to do some operations more convenient via ftp&lt;/span&gt;
  &lt;span class="c1"&gt;#1.[p]upload …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 10 Dec 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.wklken.me,2011-12-10:/posts/2011/12/10/python-ftp-ftplib.html</guid><category>python</category><category>ftplib</category></item></channel></rss>